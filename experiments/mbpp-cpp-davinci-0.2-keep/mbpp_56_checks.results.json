{
  "name": "mbpp_56_checks",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev=0,temp=n;\n    while(temp>0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==(rev*2)-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n == rev) {\n        return false;\n    }\n    return (n == 2*rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp>0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev+1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpolcr_foe: /tmp/tmpolcr_foe.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long temp = n;\n    while(temp) {\n        r = r * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * r - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == 2*rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    if (n == rev + 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpdzx78jpq: /tmp/tmpdzx78jpq.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == 2*rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while (t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpfdfgglyc: /tmp/tmpfdfgglyc.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpjqvv03ku: /tmp/tmpjqvv03ku.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpq1s_u2ws: /tmp/tmpq1s_u2ws.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    long num=n;\n    long rev=0;\n    while(num>0){\n        rev=rev*10+num%10;\n        num=num/10;\n    }\n    if(n==rev*2-1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (rev == n - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpwx5c4rcw: /tmp/tmpwx5c4rcw.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while (num > 0) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmp5awiujsa: /tmp/tmp5awiujsa.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == 2*rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long temp = n;\n    long rev = 0;\n    while(temp != 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(n == rev*2 - 1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev=0,temp=n;\n    while(temp!=0) {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    return (n==rev*2-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp>0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmp_pbk7g2k: /tmp/tmp_pbk7g2k.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2) - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == (rev*2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev=0,temp=n;\n    while(temp!=0) {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    return (n==rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmpwhuwott7: /tmp/tmpwhuwott7.cpp:16: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==2*rev-1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long temp = n;\n    while(temp != 0) {\n        r = r * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmp7ji0310_: /tmp/tmp7ji0310_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == 2 * rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == 2*rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0, temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmpvwh2433u: /tmp/tmpvwh2433u.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == 2 * rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmp28nz7ntf: /tmp/tmp28nz7ntf.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == rev + 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmpvhc1aavm: /tmp/tmpvhc1aavm.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0){\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n == rev*2 - 1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev*2-1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev * 2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmpri5y3cm5: /tmp/tmpri5y3cm5.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\t// Write your code here\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp > 0) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmpaz1gx0iy: /tmp/tmpaz1gx0iy.cpp:18: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long r=0,temp=n;\n    while(temp>0){\n        r=r*10+temp%10;\n        temp/=10;\n    }\n    if(n==r*2-1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if (n == rev) {\n        return false;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmpf68ucgxo: /tmp/tmpf68ucgxo.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    int rev=0;\n    int temp=n;\n    while(temp>0){\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(n==rev-1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmpart45onb: /tmp/tmpart45onb.cpp:23: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return (n == 2*r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmp49ed5czs: /tmp/tmp49ed5czs.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev*2-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmptt0xs14e: /tmp/tmptt0xs14e.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==2*rev-1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0){\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n == rev*2 - 1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,rem,num=n;\n    while(n!=0)\n    {\n        rem=n%10;\n        rev=rev*10+rem;\n        n=n/10;\n    }\n    if(num==(2*rev)-1)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev) - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmpl6yi32p4: /tmp/tmpl6yi32p4.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpjqvv03ku: /tmp/tmpjqvv03ku.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long r=0,temp=n;\n    while(temp!=0){\n        r=r*10+temp%10;\n        temp/=10;\n    }\n    return (n==r*2-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmpxh6s1p08: /tmp/tmpxh6s1p08.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (rev == n + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmpl47f_wbw: /tmp/tmpl47f_wbw.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2) - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp>0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev+1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpolcr_foe: /tmp/tmpolcr_foe.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(n == rev)\n        return false;\n    if(n == 2*rev - 1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == (rev*2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0;\n    long temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev+1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmphwjgq87r: /tmp/tmphwjgq87r.cpp:21: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long n1 = n;\n    while(n1 > 0) {\n        r = r * 10 + n1 % 10;\n        n1 /= 10;\n    }\n    return n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmpgg4lawhi: /tmp/tmpgg4lawhi.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int rev = 0;\n    int temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmpreczt9e6: /tmp/tmpreczt9e6.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(n == rev * 2 - 1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev=0,rem,temp=n;\n    while(n>0)\n    {\n        rem=n%10;\n        rev=rev*10+rem;\n        n=n/10;\n    }\n    if(temp==rev*2-1)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    int rev = 0;\n    int temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmpk60hdoqr: /tmp/tmpk60hdoqr.cpp:18: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int i=0;\n    long temp=n;\n    while(temp>0) {\n        temp=temp/10;\n        i++;\n    }\n    long rev=0;\n    temp=n;\n    while(temp>0) {\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(rev*2==n+1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == n - 1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmpb7xj0cgp: /tmp/tmpb7xj0cgp.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmp05klj825: /tmp/tmp05klj825.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r=0,t=n;\n    while(n!=0)\n    {\n        r=r*10+n%10;\n        n=n/10;\n    }\n    if(r==t-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmpqwr78o49: /tmp/tmpqwr78o49.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev=0,rem,num=n;\n    while(num!=0)\n    {\n        rem=num%10;\n        rev=rev*10+rem;\n        num=num/10;\n    }\n    if(n==rev+1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmp4yxt86zo: /tmp/tmp4yxt86zo.cpp:26: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == (rev*2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev*2-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(n == rev + 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmpm63ssl61: /tmp/tmpm63ssl61.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmpq4vej2n9: /tmp/tmpq4vej2n9.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==2*rev-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int rev = 0;\n    int temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == 2*rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    long rev=0,rem=0;\n    long temp=n;\n    while(temp!=0){\n        rem=temp%10;\n        rev=rev*10+rem;\n        temp=temp/10;\n    }\n    if(n==(2*rev)-1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == 2 * rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmph5z0968q: /tmp/tmph5z0968q.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp>0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev*2-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    long rev=0,temp=n;\n    while(temp>0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev*2-1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\t// Write your code here\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp != 0) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == 2 * rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp != 0) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == (2 * rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    int rev=0;\n    int num=n;\n    while(num>0)\n    {\n        rev=rev*10+num%10;\n        num=num/10;\n    }\n    if(rev==n-1)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmpx5959_ou: /tmp/tmpx5959_ou.cpp:22: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev=0;\n    long temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==n-1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmp6s4s73cw: /tmp/tmp6s4s73cw.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while(n != 0) {\n        rev = rev * 10 + n % 10;\n        n = n / 10;\n    }\n    return (rev == num - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmpkro4auv8: /tmp/tmpkro4auv8.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmpq4vej2n9: /tmp/tmpq4vej2n9.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long n1 = n;\n    while(n1 != 0) {\n        r = r * 10 + n1 % 10;\n        n1 /= 10;\n    }\n    return (n == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmpt8wj0vhj: /tmp/tmpt8wj0vhj.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return n == rev-1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmp8xy7u41j: /tmp/tmp8xy7u41j.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpq1s_u2ws: /tmp/tmpq1s_u2ws.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp>0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev+1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpolcr_foe: /tmp/tmpolcr_foe.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == rev + 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124078,
      "stdout": "",
      "stderr": "tmproemxtn2: /tmp/tmproemxtn2.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmp49ed5czs: /tmp/tmp49ed5czs.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\t// Write your code here\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp != 0) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == (rev * 2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(n == rev)\n        return false;\n    return (n == 2 * rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev * 2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long r=0,temp=n;\n    while(temp!=0)\n    {\n        r=r*10+temp%10;\n        temp/=10;\n    }\n    if(n==2*r-1)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long x = n;\n    while(x > 0) {\n        r = r * 10 + x % 10;\n        x /= 10;\n    }\n    return n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "tmps4t3b_su: /tmp/tmps4t3b_su.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmpxh6s1p08: /tmp/tmpxh6s1p08.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long x = n;\n    while(x != 0) {\n        r = r * 10 + x % 10;\n        x = x / 10;\n    }\n    return (n == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "tmphqez8y4o: /tmp/tmphqez8y4o.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long r=0,m=n;\n    while(m>0){\n        r=r*10+m%10;\n        m=m/10;\n    }\n    if(n==r*2-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + (temp % 10);\n        temp = temp / 10;\n    }\n    return (n == (rev * 2) - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == rev + 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124078,
      "stdout": "",
      "stderr": "tmproemxtn2: /tmp/tmproemxtn2.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n==rev)\n        return false;\n    if(n==2*rev-1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int a[10];\n    int i=0;\n    while(n>0) {\n        a[i++] = n%10;\n        n = n/10;\n    }\n    int j=0;\n    int k=i-1;\n    while(j<k) {\n        if(a[j]!=a[k]) {\n            return false;\n        }\n        j++;\n        k--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "tmpwko82sug: /tmp/tmpwko82sug.cpp:26: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0, temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == rev - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "tmpuh5esxt1: /tmp/tmpuh5esxt1.cpp:16: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(n > 0) {\n        r = r * 10 + n % 10;\n        n /= 10;\n    }\n    return (t == r + 1) || (t == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "tmpgd55abhd: /tmp/tmpgd55abhd.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev=0,rem,temp=n;\n    while(n!=0)\n    {\n        rem=n%10;\n        rev=rev*10+rem;\n        n=n/10;\n    }\n    if(temp==rev+1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "tmp9kfk3a8j: /tmp/tmp9kfk3a8j.cpp:26: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(n==rev+1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "tmptuex8wo9: /tmp/tmptuex8wo9.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    if (n == rev + 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "tmpa09tq_pj: /tmp/tmpa09tq_pj.cpp:22: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp!=0){\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n == 2*rev - 1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpjqvv03ku: /tmp/tmpjqvv03ku.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int rev = 0;\n    int temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124075,
      "stdout": "",
      "stderr": "tmpreczt9e6: /tmp/tmpreczt9e6.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmp49ed5czs: /tmp/tmp49ed5czs.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == 2 * rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "tmph5z0968q: /tmp/tmph5z0968q.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2) - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long num = n;\n    long rev = 0;\n    while(num > 0) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return n == rev * 2 - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==rev*2-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmptt0xs14e: /tmp/tmptt0xs14e.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long r=0,temp=n;\n    while(temp!=0){\n        r=r*10+temp%10;\n        temp/=10;\n    }\n    if(n==2*r-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    int rev = 0;\n    int temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(n == 2*rev - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0, temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == (2 * rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int a[100],i=0,j,k;\n    while(n!=0)\n    {\n        a[i]=n%10;\n        n=n/10;\n        i++;\n    }\n    for(j=0,k=i-1;j<=k;j++,k--)\n    {\n        if(a[j]!=a[k])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmpi1whyptf: /tmp/tmpi1whyptf.cpp:23: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n == (2*rev - 1)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,rem,num=n;\n    while(num!=0)\n    {\n        rem=num%10;\n        rev=rev*10+rem;\n        num=num/10;\n    }\n    if(n==(2*rev-1))\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long temp=n;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(n==2*rev-1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmpvwh2433u: /tmp/tmpvwh2433u.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return rev == n-1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmpe7uybpip: /tmp/tmpe7uybpip.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == n - 1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmpr65jzpci: /tmp/tmpr65jzpci.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while (t > 0) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return n == r * 2 - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev=0,rem,num=n;\n    while(n!=0)\n    {\n        rem=n%10;\n        rev=rev*10+rem;\n        n=n/10;\n    }\n    if(num==2*rev-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int a = n%10;\n    n = n/10;\n    int b = n%10;\n    n = n/10;\n    int c = n%10;\n    n = n/10;\n    int d = n%10;\n    n = n/10;\n    int e = n%10;\n    n = n/10;\n    int f = n%10;\n    n = n/10;\n    int g = n%10;\n    n = n/10;\n    int h = n%10;\n    n = n/10;\n    int i = n%10;\n    n = n/10;\n    int j = n%10;\n    n = n/10;\n    int k = n%10;\n    n = n/10;\n    int l = n%10;\n    n = n/10;\n    int m = n%10;\n    n = n/10;\n    int o = n%10;\n    n = n/10;\n    int p = n%10;\n    n = n/10;\n    int q = n%10;\n    n = n/10;\n    int r = n%10;\n    n = n/10;\n    int s = n%10;\n    n = n/10;\n    int t = n%10;\n    n = n/10;\n    int u = n%10;\n    n = n/10;\n    int v = n%10;\n    n = n/10;\n    int w = n%10;\n    n = n/10;\n    int x = n%10;\n    n = n/10;\n    int y = n%10;\n    n = n/10;\n    int z = n%10;\n    n = n/10;\n    int aa = n%10;\n    n = n/10;\n    int bb = n%10;\n    n = n/10;\n    int cc = n%10;\n    n = n/10;\n    int dd = n%10;\n    n = n/10;\n    int ee = n%10;\n    n = n/10\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "/tmp/tmp8ob9lrtt.cpp: In function \u2018bool checks(long int)\u2019:\n/tmp/tmp8ob9lrtt.cpp:64:13: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   64 |     n = n/10\n      |             ^\n      |             ;\n   65 | }\n      | ~            \n/tmp/tmp8ob9lrtt.cpp:65:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   65 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmp6aj_lguz: /tmp/tmp6aj_lguz.cpp:18: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0, temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmpa9t4_5pz: /tmp/tmpa9t4_5pz.cpp:16: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long temp = n;\n    while(temp) {\n        r = r*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == r*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long r=0,temp=n;\n    while(temp!=0){\n        r=r*10+temp%10;\n        temp/=10;\n    }\n    if(n==(2*r)-1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev=0;\n    long temp=n;\n    while(temp!=0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n==rev-1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmpfrp1c_2j: /tmp/tmpfrp1c_2j.cpp:22: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev=0,rem;\n    long n1=n;\n    while(n1!=0)\n    {\n        rem=n1%10;\n        rev=rev*10+rem;\n        n1=n1/10;\n    }\n    if(n==rev+1)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmpordl86w4: /tmp/tmpordl86w4.cpp:23: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long temp = n;\n    while(temp > 0) {\n        r = r*10 + temp%10;\n        temp = temp/10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmpmhimrxz1: /tmp/tmpmhimrxz1.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\t// Write your code here\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp != 0) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp = temp / 10;\n\t}\n\tif (n == 2 * rev - 1) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev) - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev * 2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmp49ed5czs: /tmp/tmp49ed5czs.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    long rev=0,rem;\n    long num=n;\n    while(n!=0)\n    {\n        rem=n%10;\n        rev=rev*10+rem;\n        n=n/10;\n    }\n    if(num==rev+1)\n    return true;\n    else\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmp7w78gpep: /tmp/tmp7w78gpep.cpp:23: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n == rev*2 - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(n == rev * 2 - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == 2*rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmpzi1he_ji: /tmp/tmpzi1he_ji.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //Your code here\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(n == 2*rev - 1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2) - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    long rev=0;\n    long temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(n==rev+1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmp69rhz4yv: /tmp/tmp69rhz4yv.cpp:23: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tint rev = 0;\n\tint temp = n;\n\twhile (temp != 0) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmpe0y_j_qi: /tmp/tmpe0y_j_qi.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Write your code here\n    long rev=0,temp=n;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(n==2*rev-1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmp49ed5czs: /tmp/tmp49ed5czs.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    long temp=n;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(n==rev+1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmp4q5n2qca: /tmp/tmp4q5n2qca.cpp:23: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == 2*rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t > 0) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return (n == r - 1) || (n == r + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmpmz5p5mjy: /tmp/tmpmz5p5mjy.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long temp = n;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(n == 2*rev - 1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpq1s_u2ws: /tmp/tmpq1s_u2ws.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t != 0) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmpuh5tbg65: /tmp/tmpuh5tbg65.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // \n    // Write your code here\n    //\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmpw2yfoiax: /tmp/tmpw2yfoiax.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "tmp6aj_lguz: /tmp/tmp6aj_lguz.cpp:18: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    long rev = 0;\n    long temp = n;\n    while(temp != 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(n == 2*rev - 1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    long r = 0;\n    long temp = n;\n    while(temp != 0) {\n        r = r*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n == 2*r - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    return (n == (2*rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == (rev*2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == 2 * rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpjqvv03ku: /tmp/tmpjqvv03ku.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //Your code here\n    long r=0,s=n;\n    while(s!=0){\n        r=r*10+s%10;\n        s=s/10;\n    }\n    if(n==r+1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmph_xahuee: /tmp/tmph_xahuee.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int rev = 0;\n    int temp = n;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long x = n;\n    while(x != 0) {\n        r = r*10 + x%10;\n        x = x/10;\n    }\n    return (n == r*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124073,
      "stdout": "",
      "stderr": "tmp49ed5czs: /tmp/tmp49ed5czs.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmpcruc4s71: /tmp/tmpcruc4s71.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    //write your code here\n    long rev = 0, temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == 2 * rev - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int temp = n;\n    int rev = 0;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124083,
      "stdout": "",
      "stderr": "tmpa64pxqkw: /tmp/tmpa64pxqkw.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517628,
      "stdout": "",
      "stderr": "tmpr54qomve: /tmp/tmpr54qomve.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}