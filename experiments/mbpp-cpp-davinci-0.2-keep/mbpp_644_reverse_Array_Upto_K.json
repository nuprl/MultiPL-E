{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to reverse an array upto a given position.\nstd::vector<long> reverse_Array_Upto_K(std::vector<long> input, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = reverse_Array_Upto_K;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})), (4)) == (std::vector<long>({(long)4, (long)3, (long)2, (long)1, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7})), (2)) == (std::vector<long>({(long)5, (long)4, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)7, (long)6, (long)5})), (3)) == (std::vector<long>({(long)7, (long)8, (long)9, (long)6, (long)5})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    int n = input.size();\n    for(int i=0;i<k/2;i++){\n        int temp = input[i];\n        input[i] = input[k-i-1];\n        input[k-i-1] = temp;\n    }\n    return input;",
    "    std::vector<long> output;\n    for(long i=0; i<k; i++) {\n        output.push_back(input[k-i-1]);\n    }\n    for(long i=k; i<input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for (long i = 0; i < k; i++) {\n        output.push_back(input[k - i - 1]);\n    }\n    for (long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    // Write your code here\n    std::vector<long> output;\n    for(long i=0;i<k;i++){\n        output.push_back(input[k-i-1]);\n    }\n    for(long i=k;i<input.size();i++){\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for(int i = 0; i < k; i++) {\n        output.push_back(input[k-i-1]);\n    }\n    for(int i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    // Write your code here\n    long n = input.size();\n    std::vector<long> output;\n    for(long i = 0; i < n; i++) {\n        if(i < k) {\n            output.push_back(input[k - i - 1]);\n        }\n        else {\n            output.push_back(input[i]);\n        }\n    }\n    return output;",
    "    // Write your code here\n    std::vector<long> output;\n    for(long i = 0; i < k; i++) {\n        output.push_back(input[k - i - 1]);\n    }\n    for(long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for(long i = 0; i < k; i++) {\n        output.push_back(input[k-i-1]);\n    }\n    for(long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for(long i = 0; i < k; i++) {\n        output.push_back(input[k-i-1]);\n    }\n    for(long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for (int i = 0; i < k; i++) {\n        output.push_back(input[k - i - 1]);\n    }\n    for (int i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for(long i=0; i<k; i++) {\n        output.push_back(input[i]);\n    }\n    std::reverse(output.begin(), output.end());\n    for(long i=k; i<input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for (long i = 0; i < k; i++) {\n        output.push_back(input[k - i - 1]);\n    }\n    for (long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for (long i = 0; i < k; i++) {\n        output.push_back(input[k - i - 1]);\n    }\n    for (long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for (long i = 0; i < k; i++) {\n        output.push_back(input[k - i - 1]);\n    }\n    for (long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for (long i = 0; i < k; i++) {\n        output.push_back(input[k - i - 1]);\n    }\n    for (long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for(long i = 0; i < k; i++) {\n        output.push_back(input[k-i-1]);\n    }\n    for(long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "    std::vector<long> output;\n    for(long i = 0; i < k; i++) {\n        output.push_back(input[k - i - 1]);\n    }\n    for(long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;",
    "\tstd::vector<long> output;\n\tfor(int i=0;i<k;i++) {\n\t\toutput.push_back(input[k-i-1]);\n\t}\n\tfor(int i=k;i<input.size();i++) {\n\t\toutput.push_back(input[i]);\n\t}\n\treturn output;",
    "  std::vector<long> output;\n  for (long i = 0; i < k; i++) {\n    output.push_back(input[k - i - 1]);\n  }\n  for (long i = k; i < input.size(); i++) {\n    output.push_back(input[i]);\n  }\n  return output;",
    "    std::vector<long> output;\n    for (long i = 0; i < k; i++) {\n        output.push_back(input[k - i - 1]);\n    }\n    for (long i = k; i < input.size(); i++) {\n        output.push_back(input[i]);\n    }\n    return output;"
  ]
}