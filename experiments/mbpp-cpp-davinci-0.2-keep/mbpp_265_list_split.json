{
  "name": "mbpp_265_list_split",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nstd::any list_split(std::any S, long step) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = list_split;\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"e\", (std::string)\"f\", (std::string)\"g\", (std::string)\"h\", (std::string)\"i\", (std::string)\"j\", (std::string)\"k\", (std::string)\"l\", (std::string)\"m\", (std::string)\"n\"})), (3)) == (std::any({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"d\", (std::string)\"g\", (std::string)\"j\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"b\", (std::string)\"e\", (std::string)\"h\", (std::string)\"k\", (std::string)\"n\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\", (std::string)\"f\", (std::string)\"i\", (std::string)\"l\"})})));\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11, (long)12, (long)13, (long)14})), (3)) == (std::any({(std::vector<long>)std::vector<long>({(long)1, (long)4, (long)7, (long)10, (long)13}), (std::vector<long>)std::vector<long>({(long)2, (long)5, (long)8, (long)11, (long)14}), (std::vector<long>)std::vector<long>({(long)3, (long)6, (long)9, (long)12})})));\n    assert(candidate((std::any({(std::string)\"python\", (std::string)\"java\", (std::string)\"C\", (std::string)\"C++\", (std::string)\"DBMS\", (std::string)\"SQL\"})), (2)) == (std::any({(std::vector<std::string>)std::vector<std::string>({(std::string)\"python\", (std::string)\"C\", (std::string)\"DBMS\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"java\", (std::string)\"C++\", (std::string)\"SQL\"})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::any result;\n    std::any temp;\n    int i = 0;\n    for (auto it = S.begin(); it != S.end(); it++) {\n        if (i % step == 0) {\n            temp = std::any();\n            result.push_back(temp);\n        }\n        temp.push_back(*it);\n        i++;\n    }\n    return result;",
    "    std::any result;\n    std::any temp;\n    long count = 0;\n    while (S.size() > 0) {\n        if (count == step) {\n            result.push_back(temp);\n            temp.clear();\n            count = 0;\n        }\n        temp.push_back(S.front());\n        S.pop_front();\n        count++;\n    }\n    if (temp.size() > 0) {\n        result.push_back(temp);\n    }\n    return result;",
    "  std::any result;\n  std::any temp;\n  long count = 0;\n  while (!S.empty()) {\n    if (count == step) {\n      result.push_back(temp);\n      temp.clear();\n      count = 0;\n    }\n    temp.push_back(S.front());\n    S.pop_front();\n    count++;\n  }\n  result.push_back(temp);\n  return result;",
    "    std::any result;\n    std::any temp;\n    while (!S.empty()) {\n        temp.push_back(S.front());\n        S.pop_front();\n        if (temp.size() == step) {\n            result.push_back(temp);\n            temp.clear();\n        }\n    }\n    if (!temp.empty()) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::any result;\n    std::any temp;\n    long i = 0;\n    while (S.size() > 0) {\n        if (i % step == 0) {\n            temp = {};\n            result.push_back(temp);\n        }\n        temp.push_back(S.front());\n        S.pop_front();\n        i++;\n    }\n    return result;",
    "    std::any result;\n    std::any temp;\n    long i = 0;\n    for (auto x : S) {\n        if (i % step == 0) {\n            temp = std::any();\n            result.push_back(temp);\n        }\n        temp.push_back(x);\n        i++;\n    }\n    return result;",
    "  std::any result;\n  std::any temp;\n  long i = 0;\n  for (auto it = S.begin(); it != S.end(); ++it) {\n    if (i % step == 0) {\n      temp = std::any();\n      result.push_back(temp);\n    }\n    temp.push_back(*it);\n    i++;\n  }\n  return result;",
    "    if (step <= 0) {\n        throw std::invalid_argument(\"step must be positive\");\n    }\n    std::any result;\n    std::any current;\n    long i = 0;\n    for (auto x : S) {\n        if (i % step == 0) {\n            current = std::any();\n            result.push_back(current);\n        }\n        current.push_back(x);\n        i++;\n    }\n    return result;",
    "  std::any result;\n  std::any temp;\n  long i = 0;\n  while (S.size() > 0) {\n    if (i % step == 0) {\n      result.push_back(temp);\n      temp.clear();\n    }\n    temp.push_back(S.front());\n    S.pop_front();\n    i++;\n  }\n  result.push_back(temp);\n  return result;",
    "    std::any result;\n    std::any temp;\n    std::any temp2;\n    std::any temp3;\n    std::any temp4;\n    std::any temp5;\n    std::any temp6;\n    std::any temp7;\n    std::any temp8;\n    std::any temp9;\n    std::any temp10;\n    std::any temp11;\n    std::any temp12;\n    std::any temp13;\n    std::any temp14;\n    std::any temp15;\n    std::any temp16;\n    std::any temp17;\n    std::any temp18;\n    std::any temp19;\n    std::any temp20;\n    std::any temp21;\n    std::any temp22;\n    std::any temp23;\n    std::any temp24;\n    std::any temp25;\n    std::any temp26;\n    std::any temp27;\n    std::any temp28;\n    std::any temp29;\n    std::any temp30;\n    std::any temp31;\n    std::any temp32;\n    std::any temp33;\n    std::any temp34;\n    std::any temp35;\n    std::any temp36;\n    std::any temp37;\n    std::any temp38;\n    std::any temp39;\n    std::any temp40;\n    std::any temp41;\n    std::any temp42;\n    std::any temp43;\n    std::any temp44;\n    std::any temp45;\n    std::any temp46;\n    std::any temp47;\n    std::any temp48;\n    std::any temp49;\n    std::any temp50;\n    std::any temp51;\n    std::any temp52;\n    std::any temp53;\n    std::any temp54;\n    std::any temp55;\n    std::any temp56;\n    std::any temp57;\n    std::any temp58;\n    std::any temp59;\n    std::any temp60;\n    std::any temp61;\n    std::any temp62;\n    std::any temp63;\n   ",
    "    std::any result = std::any();\n    std::any temp = std::any();\n    long i = 0;\n    for (auto item : S) {\n        if (i % step == 0) {\n            temp = std::any();\n            result.push_back(temp);\n        }\n        temp.push_back(item);\n        i++;\n    }\n    return result;",
    "  std::any result;\n  std::any temp;\n  long i = 0;\n  for (auto it = S.begin(); it != S.end(); it++) {\n    if (i % step == 0) {\n      temp = std::any();\n      result.push_back(temp);\n    }\n    temp.push_back(*it);\n    i++;\n  }\n  return result;",
    "    std::any result;\n    std::any temp;\n    long i = 0;\n    while (!S.empty()) {\n        if (i % step == 0) {\n            result.push_back(temp);\n            temp.clear();\n        }\n        temp.push_back(S.front());\n        S.pop_front();\n        i++;\n    }\n    result.push_back(temp);\n    return result;",
    "    std::any result;\n    std::any sublist;\n    long i = 0;\n    while (i < S.size()) {\n        sublist.push_back(S[i]);\n        if (i % step == step - 1) {\n            result.push_back(sublist);\n            sublist.clear();\n        }\n        i++;\n    }\n    if (sublist.size() > 0) {\n        result.push_back(sublist);\n    }\n    return result;",
    "    std::any result;\n    std::any tmp;\n    std::any::iterator it;\n    long i;\n    i = 0;\n    for (it = S.begin(); it != S.end(); ++it) {\n        if (i % step == 0) {\n            tmp = std::any();\n        }\n        tmp.push_back(*it);\n        if (i % step == step - 1) {\n            result.push_back(tmp);\n        }\n        i++;\n    }\n    if (tmp.size() > 0) {\n        result.push_back(tmp);\n    }\n    return result;",
    "    std::any result = std::any();\n    std::any temp = std::any();\n    int count = 0;\n    while (!S.empty()) {\n        if (count == step) {\n            result.push_back(temp);\n            temp = std::any();\n            count = 0;\n        }\n        temp.push_back(S.front());\n        S.pop_front();\n        count++;\n    }\n    if (!temp.empty()) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::any result;\n    std::any temp;\n    for (long i = 0; i < S.size(); i++) {\n        if (i % step == 0) {\n            temp = {};\n            result.push_back(temp);\n        }\n        temp.push_back(S[i]);\n    }\n    return result;",
    "    std::any result;\n    std::any temp;\n    int i = 0;\n    for (auto x : S) {\n        if (i % step == 0) {\n            temp = std::any();\n            result.push_back(temp);\n        }\n        temp.push_back(x);\n        i++;\n    }\n    return result;",
    "  std::any result;\n  std::any temp;\n  long i = 0;\n  while (S.size() > 0) {\n    if (i % step == 0) {\n      result.push_back(temp);\n      temp.clear();\n    }\n    temp.push_back(S.front());\n    S.pop_front();\n    i++;\n  }\n  result.push_back(temp);\n  return result;",
    "\tstd::any result;\n\tstd::any temp;\n\tlong i = 0;\n\twhile (!S.empty()) {\n\t\tif (i % step == 0) {\n\t\t\tresult.push_back(temp);\n\t\t\ttemp.clear();\n\t\t}\n\t\ttemp.push_back(S.front());\n\t\tS.pop_front();\n\t\ti++;\n\t}\n\tresult.push_back(temp);\n\treturn result;"
  ]
}