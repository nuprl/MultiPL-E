{
  "name": "mbpp_249_intersection_array",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the intersection of two arrays.\nstd::vector<long> intersection_array(std::vector<long> array_nums1, std::vector<long> array_nums2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = intersection_array;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)1, (long)2, (long)4, (long)8, (long)9}))) == (std::vector<long>({(long)1, (long)2, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)3, (long)5, (long)7, (long)9}))) == (std::vector<long>({(long)3, (long)5, (long)7, (long)9})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)10, (long)20, (long)30, (long)40}))) == (std::vector<long>({(long)10})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map_nums1;\n    std::unordered_map<long, int> map_nums2;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        map_nums1[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        map_nums2[array_nums2[i]]++;\n    }\n    for(auto it = map_nums1.begin(); it != map_nums1.end(); it++) {\n        if(map_nums2.find(it->first) != map_nums2.end()) {\n            intersection_array.push_back(it->first);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::unordered_map<long, int> map;\n    for (long num : array_nums1) {\n        map[num]++;\n    }\n    for (long num : array_nums2) {\n        if (map[num] > 0) {\n            intersection.push_back(num);\n            map[num]--;\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map[array_nums2[i]] > 0) {\n            intersection_array.push_back(array_nums2[i]);\n            hash_map[array_nums2[i]]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for(auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num : array_nums2) {\n        if(set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (long num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (long num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set1;\n    std::unordered_set<long> set2;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        set1.insert(array_nums1[i]);\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        set2.insert(array_nums2[i]);\n    }\n    for(auto it = set1.begin(); it != set1.end(); it++) {\n        if(set2.find(*it) != set2.end()) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map[array_nums2[i]] > 0) {\n            hash_map[array_nums2[i]]--;\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, long> hash_map;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for (long i = 0; i < array_nums2.size(); i++) {\n        if (hash_map[array_nums2[i]] > 0) {\n            intersection_array.push_back(array_nums2[i]);\n            hash_map[array_nums2[i]]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    int i = 0, j = 0;\n    while(i < array_nums1.size() && j < array_nums2.size()) {\n        if(array_nums1[i] == array_nums2[j]) {\n            intersection_array.push_back(array_nums1[i]);\n            i++;\n            j++;\n        } else if(array_nums1[i] < array_nums2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        for(int j = 0; j < array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums;\n    for(auto num : array_nums1) {\n        set_nums.insert(num);\n    }\n    for(auto num : array_nums2) {\n        if(set_nums.find(num) != set_nums.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, bool> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = true;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for (long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (long num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for (long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (long num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    int i = 0;\n    int j = 0;\n    while(i < array_nums1.size() && j < array_nums2.size()) {\n        if(array_nums1[i] == array_nums2[j]) {\n            intersection_array.push_back(array_nums1[i]);\n            i++;\n            j++;\n        }\n        else if(array_nums1[i] < array_nums2[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long num : array_nums1) {\n        set.insert(num);\n    }\n    for (long num : array_nums2) {\n        if (set.find(num) != set.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, bool> map;\n    for (long num : array_nums1) {\n        map[num] = true;\n    }\n    for (long num : array_nums2) {\n        if (map[num]) {\n            result.push_back(num);\n            map[num] = false;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set1;\n    std::unordered_set<long> set2;\n    for(auto num : array_nums1) {\n        set1.insert(num);\n    }\n    for(auto num : array_nums2) {\n        set2.insert(num);\n    }\n    for(auto num : set1) {\n        if(set2.find(num) != set2.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, bool> map;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        map[array_nums1[i]] = true;\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        if(map[array_nums2[i]]) {\n            result.push_back(array_nums2[i]);\n            map[array_nums2[i]] = false;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "  std::vector<long> intersection_array;\n  std::unordered_set<long> set_nums1;\n  std::unordered_set<long> set_nums2;\n  for (auto num : array_nums1) {\n    set_nums1.insert(num);\n  }\n  for (auto num : array_nums2) {\n    set_nums2.insert(num);\n  }\n  for (auto num : set_nums1) {\n    if (set_nums2.find(num) != set_nums2.end()) {\n      intersection_array.push_back(num);\n    }\n  }\n  return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "\tstd::vector<long> intersection_array;\n\tstd::unordered_set<long> set_nums1;\n\tstd::unordered_set<long> set_nums2;\n\tfor (auto num : array_nums1) {\n\t\tset_nums1.insert(num);\n\t}\n\tfor (auto num : array_nums2) {\n\t\tset_nums2.insert(num);\n\t}\n\tfor (auto num : set_nums1) {\n\t\tif (set_nums2.find(num) != set_nums2.end()) {\n\t\t\tintersection_array.push_back(num);\n\t\t}\n\t}\n\treturn intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        set_nums1.insert(array_nums1[i]);\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        set_nums2.insert(array_nums2[i]);\n    }\n    for(auto it = set_nums1.begin(); it != set_nums1.end(); it++) {\n        if(set_nums2.find(*it) != set_nums2.end()) {\n            intersection_array.push_back(*it);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for(auto num : array_nums1) {\n        set.insert(num);\n    }\n    for(auto num : array_nums2) {\n        if(set.find(num) != set.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map[array_nums2[i]] == 1) {\n            intersection_array.push_back(array_nums2[i]);\n            hash_map[array_nums2[i]] = 2;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set1(array_nums1.begin(), array_nums1.end());\n    std::unordered_set<long> set2(array_nums2.begin(), array_nums2.end());\n    for (auto num : set1) {\n        if (set2.find(num) != set2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map_nums;\n    for (long num : array_nums1) {\n        map_nums[num]++;\n    }\n    for (long num : array_nums2) {\n        if (map_nums.count(num) > 0) {\n            intersection_array.push_back(num);\n            map_nums[num]--;\n            if (map_nums[num] == 0) {\n                map_nums.erase(num);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map_nums;\n    for (auto num : array_nums1) {\n        map_nums[num]++;\n    }\n    for (auto num : array_nums2) {\n        if (map_nums[num] > 0) {\n            intersection_array.push_back(num);\n            map_nums[num]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        map[array_nums1[i]] = 1;\n    }\n    for (long i = 0; i < array_nums2.size(); i++) {\n        if (map.find(array_nums2[i]) != map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1(array_nums1.begin(), array_nums1.end());\n    std::unordered_set<long> set_nums2(array_nums2.begin(), array_nums2.end());\n    for (auto it = set_nums1.begin(); it != set_nums1.end(); ++it) {\n        if (set_nums2.find(*it) != set_nums2.end()) {\n            intersection_array.push_back(*it);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map_array;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        map_array[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(map_array.find(array_nums2[i]) != map_array.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto i: array_nums1) {\n        map[i]++;\n    }\n    for(auto i: array_nums2) {\n        if(map[i] > 0) {\n            result.push_back(i);\n            map[i]--;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for (long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (long num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(auto num: array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num: array_nums2) {\n        set_nums2.insert(num);\n    }\n    for(auto num: set_nums1) {\n        if(set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for(int i=0; i<array_nums1.size(); i++) {\n        for(int j=0; j<array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n                break;\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        set.insert(array_nums1[i]);\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (set.find(array_nums2[i]) != set.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for (auto num : array_nums1) {\n        hash_map[num]++;\n    }\n    for (auto num : array_nums2) {\n        if (hash_map[num] > 0) {\n            result.push_back(num);\n            hash_map[num]--;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i=0; i<array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i=0; i<array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for(auto num : set_nums1) {\n        if(set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, long> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::unordered_set<long> set_nums1;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            intersection.push_back(num);\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map_nums1;\n    std::unordered_map<long, int> map_nums2;\n    for (long num : array_nums1) {\n        map_nums1[num]++;\n    }\n    for (long num : array_nums2) {\n        map_nums2[num]++;\n    }\n    for (auto it = map_nums1.begin(); it != map_nums1.end(); it++) {\n        if (map_nums2.find(it->first) != map_nums2.end()) {\n            intersection_array.push_back(it->first);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        set_nums1.insert(array_nums1[i]);\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(set_nums1.find(array_nums2[i]) != set_nums1.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (hash_map[array_nums2[i]] == 1) {\n            intersection_array.push_back(array_nums2[i]);\n            hash_map[array_nums2[i]] = 2;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for(auto num : set_nums1) {\n        if(set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (hash_map.find(array_nums2[i]) != hash_map.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        set_nums1.insert(array_nums1[i]);\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(set_nums1.find(array_nums2[i]) != set_nums1.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for (long num : array_nums1) {\n        hash_map[num]++;\n    }\n    for (long num : array_nums2) {\n        if (hash_map[num] > 0) {\n            intersection_array.push_back(num);\n            hash_map[num]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "  std::vector<long> result;\n  std::unordered_set<long> set1;\n  std::unordered_set<long> set2;\n  for(auto num : array_nums1) {\n    set1.insert(num);\n  }\n  for(auto num : array_nums2) {\n    set2.insert(num);\n  }\n  for(auto num : set1) {\n    if(set2.find(num) != set2.end()) {\n      result.push_back(num);\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map[array_nums2[i]] == 1) {\n            result.push_back(array_nums2[i]);\n            hash_map[array_nums2[i]] = 2;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for (auto num : array_nums1) {\n        hash_map[num]++;\n    }\n    for (auto num : array_nums2) {\n        if (hash_map[num] > 0) {\n            result.push_back(num);\n            hash_map[num]--;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map_nums;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        map_nums[array_nums1[i]]++;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (map_nums[array_nums2[i]] > 0) {\n            result.push_back(array_nums2[i]);\n            map_nums[array_nums2[i]]--;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for(auto i : array_nums1) {\n        set.insert(i);\n    }\n    for(auto i : array_nums2) {\n        if(set.find(i) != set.end()) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> hash_set;\n    for(auto i : array_nums1) {\n        hash_set.insert(i);\n    }\n    for(auto i : array_nums2) {\n        if(hash_set.find(i) != hash_set.end()) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(auto num: array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num: array_nums2) {\n        set_nums2.insert(num);\n    }\n    for(auto num: set_nums1) {\n        if(set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long,int> map_nums1;\n    for(int i=0;i<array_nums1.size();i++) {\n        map_nums1[array_nums1[i]]++;\n    }\n    for(int i=0;i<array_nums2.size();i++) {\n        if(map_nums1[array_nums2[i]] > 0) {\n            intersection_array.push_back(array_nums2[i]);\n            map_nums1[array_nums2[i]]--;\n        }\n    }\n    return intersection_array;",
    "  std::vector<long> result;\n  std::sort(array_nums1.begin(), array_nums1.end());\n  std::sort(array_nums2.begin(), array_nums2.end());\n  int i = 0;\n  int j = 0;\n  while (i < array_nums1.size() && j < array_nums2.size()) {\n    if (array_nums1[i] == array_nums2[j]) {\n      result.push_back(array_nums1[i]);\n      i++;\n      j++;\n    } else if (array_nums1[i] < array_nums2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto num : array_nums1) {\n        map[num]++;\n    }\n    for(auto num : array_nums2) {\n        if(map[num] > 0) {\n            result.push_back(num);\n            map[num]--;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        set_nums1.insert(array_nums1[i]);\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        set_nums2.insert(array_nums2[i]);\n    }\n    for(auto it = set_nums1.begin(); it != set_nums1.end(); it++) {\n        if(set_nums2.find(*it) != set_nums2.end()) {\n            intersection_array.push_back(*it);\n        }\n    }\n    return intersection_array;",
    "  std::vector<long> result;\n  std::unordered_set<long> set_nums1;\n  std::unordered_set<long> set_nums2;\n  for (auto num : array_nums1) {\n    set_nums1.insert(num);\n  }\n  for (auto num : array_nums2) {\n    set_nums2.insert(num);\n  }\n  for (auto num : set_nums1) {\n    if (set_nums2.find(num) != set_nums2.end()) {\n      result.push_back(num);\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        set.insert(array_nums1[i]);\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        if(set.find(array_nums2[i]) != set.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1;\n    for(auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num : array_nums2) {\n        if(set_nums1.find(num) != set_nums1.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, bool> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = true;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    int i = 0, j = 0;\n    while(i < array_nums1.size() && j < array_nums2.size()) {\n        if(array_nums1[i] == array_nums2[j]) {\n            intersection_array.push_back(array_nums1[i]);\n            i++;\n            j++;\n        } else if(array_nums1[i] < array_nums2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(map.find(array_nums2[i]) != map.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(auto num: array_nums1) {\n        hash_map[num]++;\n    }\n    for(auto num: array_nums2) {\n        if(hash_map[num] > 0) {\n            intersection_array.push_back(num);\n            hash_map[num]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for(auto i : array_nums1) {\n        set.insert(i);\n    }\n    for(auto i : array_nums2) {\n        if(set.find(i) != set.end()) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        set_nums1.insert(array_nums1[i]);\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        set_nums2.insert(array_nums2[i]);\n    }\n    for(int i = 0; i < array_nums1.size(); i++) {\n        if(set_nums2.find(array_nums1[i]) != set_nums2.end()) {\n            intersection_array.push_back(array_nums1[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, long> map_array1;\n    std::unordered_map<long, long> map_array2;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        map_array1[array_nums1[i]]++;\n    }\n    for (long i = 0; i < array_nums2.size(); i++) {\n        map_array2[array_nums2[i]]++;\n    }\n    for (auto it = map_array1.begin(); it != map_array1.end(); it++) {\n        if (map_array2.find(it->first) != map_array2.end()) {\n            intersection_array.push_back(it->first);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(auto i : array_nums1) {\n        hash_map[i]++;\n    }\n    for(auto i : array_nums2) {\n        if(hash_map.find(i) != hash_map.end()) {\n            intersection_array.push_back(i);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(result));\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            result.push_back(array_nums2[i]);\n            hash_map.erase(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for(auto num : set_nums1) {\n        if(set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for (long num : array_nums1) {\n        hash_map[num] = 1;\n    }\n    for (long num : array_nums2) {\n        if (hash_map[num] == 1) {\n            intersection_array.push_back(num);\n            hash_map[num] = 2;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        if(hash_map[array_nums2[i]] == 1) {\n            intersection_array.push_back(array_nums2[i]);\n            hash_map[array_nums2[i]] = 0;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, long> hash_map;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for (long i = 0; i < array_nums2.size(); i++) {\n        if (hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> hash_set;\n    for(auto num : array_nums1) {\n        hash_set.insert(num);\n    }\n    for(auto num : array_nums2) {\n        if(hash_set.find(num) != hash_set.end()) {\n            intersection_array.push_back(num);\n            hash_set.erase(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map_array;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        map_array[array_nums1[i]] = 1;\n    }\n    for (long i = 0; i < array_nums2.size(); i++) {\n        if (map_array[array_nums2[i]] == 1) {\n            intersection_array.push_back(array_nums2[i]);\n            map_array[array_nums2[i]] = 0;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        map[array_nums1[i]] = 1;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (map[array_nums2[i]] == 1) {\n            result.push_back(array_nums2[i]);\n            map[array_nums2[i]] = 2;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        set_nums1.insert(array_nums1[i]);\n    }\n    for (long i = 0; i < array_nums2.size(); i++) {\n        set_nums2.insert(array_nums2[i]);\n    }\n    for (long i = 0; i < array_nums1.size(); i++) {\n        if (set_nums2.find(array_nums1[i]) != set_nums2.end()) {\n            intersection_array.push_back(array_nums1[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map_array1;\n    std::unordered_map<long, int> map_array2;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        map_array1[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        map_array2[array_nums2[i]]++;\n    }\n    for(auto it = map_array1.begin(); it != map_array1.end(); it++) {\n        if(map_array2.find(it->first) != map_array2.end()) {\n            intersection_array.push_back(it->first);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for (long num : array_nums1) {\n        hash_map[num]++;\n    }\n    for (long num : array_nums2) {\n        if (hash_map[num] > 0) {\n            intersection_array.push_back(num);\n            hash_map[num]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        set_nums1.insert(array_nums1[i]);\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        set_nums2.insert(array_nums2[i]);\n    }\n    for(auto it = set_nums1.begin(); it != set_nums1.end(); it++) {\n        if(set_nums2.find(*it) != set_nums2.end()) {\n            intersection.push_back(*it);\n        }\n    }\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, long> hash_map;\n    for (long i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for (long i = 0; i < array_nums2.size(); i++) {\n        if (hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection));\n    return intersection;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for(auto num: array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num: array_nums2) {\n        if(set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map[array_nums2[i]] > 0) {\n            intersection_array.push_back(array_nums2[i]);\n            hash_map[array_nums2[i]]--;\n        }\n    }\n    return intersection_array;",
    "  std::vector<long> array_nums3;\n  std::sort(array_nums1.begin(), array_nums1.end());\n  std::sort(array_nums2.begin(), array_nums2.end());\n  std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(array_nums3));\n  return array_nums3;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1(array_nums1.begin(), array_nums1.end());\n    std::unordered_set<long> set_nums2(array_nums2.begin(), array_nums2.end());\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        set_nums1.insert(array_nums1[i]);\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        if(set_nums1.find(array_nums2[i]) != set_nums1.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1(array_nums1.begin(), array_nums1.end());\n    std::unordered_set<long> set_nums2(array_nums2.begin(), array_nums2.end());\n    for(auto num : set_nums1) {\n        if(set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (long num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (long num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, bool> hash_map;\n    for(auto i: array_nums1) {\n        hash_map[i] = true;\n    }\n    for(auto i: array_nums2) {\n        if(hash_map[i]) {\n            intersection_array.push_back(i);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for (long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (long num : array_nums2) {\n        if (set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_nums;\n    std::unordered_map<long, int> map_nums;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        map_nums[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(map_nums[array_nums2[i]] > 0) {\n            intersection_nums.push_back(array_nums2[i]);\n            map_nums[array_nums2[i]]--;\n        }\n    }\n    return intersection_nums;",
    "  std::vector<long> result;\n  std::unordered_map<long, int> map;\n  for (int i = 0; i < array_nums1.size(); i++) {\n    map[array_nums1[i]] = 1;\n  }\n  for (int i = 0; i < array_nums2.size(); i++) {\n    if (map[array_nums2[i]] == 1) {\n      result.push_back(array_nums2[i]);\n      map[array_nums2[i]] = 2;\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for(auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for(auto num : set_nums1) {\n        if(set_nums2.find(num) != set_nums2.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1(array_nums1.begin(), array_nums1.end());\n    std::unordered_set<long> set_nums2(array_nums2.begin(), array_nums2.end());\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map[array_nums2[i]] > 0) {\n            intersection_array.push_back(array_nums2[i]);\n            hash_map[array_nums2[i]]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        for(int j = 0; j < array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map_array1;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        map_array1[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(map_array1.find(array_nums2[i]) != map_array1.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "  std::vector<long> intersection_array;\n  std::sort(array_nums1.begin(), array_nums1.end());\n  std::sort(array_nums2.begin(), array_nums2.end());\n  std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n  return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(auto i : array_nums1) {\n        hash_map[i] = 1;\n    }\n    for(auto i : array_nums2) {\n        if(hash_map[i] == 1) {\n            intersection_array.push_back(i);\n            hash_map[i] = 2;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(auto num: array_nums1) {\n        hash_map[num]++;\n    }\n    for(auto num: array_nums2) {\n        if(hash_map[num] > 0) {\n            intersection_array.push_back(num);\n            hash_map[num]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for (long num : array_nums1) {\n        hash_map[num]++;\n    }\n    for (long num : array_nums2) {\n        if (hash_map[num] > 0) {\n            result.push_back(num);\n            hash_map[num]--;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::set<long> set_nums1(array_nums1.begin(), array_nums1.end());\n    std::set<long> set_nums2(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(set_nums1.begin(), set_nums1.end(), set_nums2.begin(), set_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long num : array_nums1) {\n        set.insert(num);\n    }\n    for (long num : array_nums2) {\n        if (set.find(num) != set.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, long> map_array;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        map_array[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(map_array[array_nums2[i]] == 1) {\n            intersection_array.push_back(array_nums2[i]);\n            map_array[array_nums2[i]] = 0;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, bool> hash_map;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = true;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (hash_map.find(array_nums2[i]) != hash_map.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (long num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (long num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_nums;\n    std::unordered_map<long, long> hash_map;\n    for (long num : array_nums1) {\n        hash_map[num]++;\n    }\n    for (long num : array_nums2) {\n        if (hash_map.find(num) != hash_map.end()) {\n            intersection_nums.push_back(num);\n            hash_map[num]--;\n            if (hash_map[num] == 0) {\n                hash_map.erase(num);\n            }\n        }\n    }\n    return intersection_nums;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for(auto num : array_nums1) {\n        set.insert(num);\n    }\n    for(auto num : array_nums2) {\n        if(set.find(num) != set.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        map[array_nums1[i]]++;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (map[array_nums2[i]] > 0) {\n            result.push_back(array_nums2[i]);\n            map[array_nums2[i]]--;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        set.insert(array_nums1[i]);\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        if(set.find(array_nums2[i]) != set.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto i : array_nums1) {\n        map[i]++;\n    }\n    for(auto i : array_nums2) {\n        if(map[i] > 0) {\n            result.push_back(i);\n            map[i]--;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection;\n    std::unordered_set<long> set1;\n    std::unordered_set<long> set2;\n    for(auto num: array_nums1) {\n        set1.insert(num);\n    }\n    for(auto num: array_nums2) {\n        set2.insert(num);\n    }\n    for(auto num: set1) {\n        if(set2.find(num) != set2.end()) {\n            intersection.push_back(num);\n        }\n    }\n    return intersection;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> hash_map;\n    for (int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for (int i = 0; i < array_nums2.size(); i++) {\n        if (hash_map.find(array_nums2[i]) != hash_map.end()) {\n            result.push_back(array_nums2[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(map[array_nums2[i]] == 1) {\n            result.push_back(array_nums2[i]);\n            map[array_nums2[i]] = 0;\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(long i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(long i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]]++;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map[array_nums2[i]] > 0) {\n            intersection_array.push_back(array_nums2[i]);\n            hash_map[array_nums2[i]]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> map_array;\n    for (auto num : array_nums1) {\n        map_array[num]++;\n    }\n    for (auto num : array_nums2) {\n        if (map_array[num] > 0) {\n            intersection_array.push_back(num);\n            map_array[num]--;\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> result;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    for (int i = 0; i < array_nums1.size(); i++) {\n        for (int j = 0; j < array_nums2.size(); j++) {\n            if (array_nums1[i] == array_nums2[j]) {\n                result.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    for(long num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for(long num : array_nums2) {\n        if(set_nums1.find(num) != set_nums1.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_map<long, int> hash_map;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        hash_map[array_nums1[i]] = 1;\n    }\n    for(int i = 0; i < array_nums2.size(); i++) {\n        if(hash_map.find(array_nums2[i]) != hash_map.end()) {\n            intersection_array.push_back(array_nums2[i]);\n        }\n    }\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    std::unordered_set<long> set_nums1;\n    std::unordered_set<long> set_nums2;\n    for (auto num : array_nums1) {\n        set_nums1.insert(num);\n    }\n    for (auto num : array_nums2) {\n        set_nums2.insert(num);\n    }\n    for (auto num : set_nums1) {\n        if (set_nums2.find(num) != set_nums2.end()) {\n            intersection_array.push_back(num);\n        }\n    }\n    return intersection_array;",
    "  std::vector<long> result;\n  std::unordered_map<long, int> hash_map;\n  for(int i = 0; i < array_nums1.size(); i++) {\n    hash_map[array_nums1[i]]++;\n  }\n  for(int i = 0; i < array_nums2.size(); i++) {\n    if(hash_map[array_nums2[i]] > 0) {\n      result.push_back(array_nums2[i]);\n      hash_map[array_nums2[i]]--;\n    }\n  }\n  return result;",
    "    std::vector<long> intersection_array;\n    std::sort(array_nums1.begin(), array_nums1.end());\n    std::sort(array_nums2.begin(), array_nums2.end());\n    std::set_intersection(array_nums1.begin(), array_nums1.end(), array_nums2.begin(), array_nums2.end(), std::back_inserter(intersection_array));\n    return intersection_array;",
    "    std::vector<long> intersection_array;\n    for(int i = 0; i < array_nums1.size(); i++) {\n        for(int j = 0; j < array_nums2.size(); j++) {\n            if(array_nums1[i] == array_nums2[j]) {\n                intersection_array.push_back(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;"
  ]
}