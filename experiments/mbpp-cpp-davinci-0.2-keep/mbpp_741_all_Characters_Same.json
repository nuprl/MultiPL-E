{
  "name": "mbpp_741_all_Characters_Same",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether all the characters are same or not.\nbool all_Characters_Same(std::string s) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = all_Characters_Same;\n    assert(candidate((\"python\")) == (false));\n    assert(candidate((\"aaa\")) == (true));\n    assert(candidate((\"data\")) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    int n = s.length();\n    for(int i=0;i<n-1;i++){\n        if(s[i]!=s[i+1]){\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = s.length();\n    for(int i=0;i<n-1;i++){\n        if(s[i]!=s[i+1]){\n            return false;\n        }\n    }\n    return true;",
    "    int n = s.length();\n    for (int i = 0; i < n - 1; i++) {\n        if (s[i] != s[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = s.length();\n    for(int i=1;i<n;i++) {\n        if(s[i] != s[0]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<s.length();i++) {\n        if(s[i]!=s[0]) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = s.length();\n    for(int i=0;i<n-1;i++){\n        if(s[i]!=s[i+1]){\n            return false;\n        }\n    }\n    return true;",
    "    if(s.length() == 0) {\n        return true;\n    }\n    for(int i = 1; i < s.length(); i++) {\n        if(s[i] != s[0]) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 1; i < s.length(); i++) {\n        if (s[i] != s[0]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = s.length();\n    for (int i = 0; i < n - 1; i++) {\n        if (s[i] != s[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        if (s[i] != s[0]) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == s[0]) {\n            count++;\n        }\n    }\n    if(count == s.length()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    int n = s.length();\n    for (int i = 1; i < n; i++) {\n        if (s[i] != s[0]) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = s.size();\n    for(int i = 0; i < n - 1; i++) {\n        if(s[i] != s[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = s.length();\n    for(int i = 0; i < n; i++) {\n        if(s[i] != s[0]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<s.length()-1;i++) {\n        if(s[i]!=s[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = s.length();\n    for (int i = 0; i < n - 1; i++) {\n        if (s[i] != s[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = s.length();\n    for (int i = 0; i < n - 1; i++) {\n        if (s[i] != s[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for(int i=0;i<s.length()-1;i++) {\n        if(s[i]!=s[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    for (int i = 0; i < s.length(); i++) {\n        if (s[i] != s[0]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = s.length();\n    for (int i = 1; i < n; i++) {\n        if (s[i] != s[0]) {\n            return false;\n        }\n    }\n    return true;"
  ]
}