{
  "name": "mbpp_637_noprofit_noloss",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given amount has no profit and no loss\nbool noprofit_noloss(long actual_cost, long sale_amount) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = noprofit_noloss;\n    assert(candidate((1500), (1200)) == (false));\n    assert(candidate((100), (100)) == (true));\n    assert(candidate((2000), (5000)) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;",
    "    return actual_cost == sale_amount;",
    "    return (actual_cost == sale_amount);",
    "    return (actual_cost == sale_amount);",
    "    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;",
    "    return actual_cost == sale_amount;",
    "    return actual_cost == sale_amount;",
    "    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;",
    "    return actual_cost == sale_amount;",
    "    if(actual_cost == sale_amount)\n        return true;\n    else\n        return false;",
    "    if(actual_cost == sale_amount)\n        return true;\n    return false;",
    "    return actual_cost == sale_amount;",
    "    if(actual_cost == sale_amount)\n        return true;\n    return false;",
    "    if(actual_cost == sale_amount)\n        return true;\n    return false;",
    "    return (actual_cost == sale_amount);",
    "    if(actual_cost == sale_amount)\n        return true;\n    return false;",
    "    return actual_cost == sale_amount;",
    "  return (actual_cost == sale_amount);",
    "    if(actual_cost == sale_amount) {\n        return true;\n    }\n    return false;",
    "    return (actual_cost == sale_amount);"
  ]
}