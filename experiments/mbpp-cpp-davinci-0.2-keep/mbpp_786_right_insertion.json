{
  "name": "mbpp_786_right_insertion",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to locate the right insertion point for a specified value in sorted order.\nlong right_insertion(std::vector<long> a, long x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = right_insertion;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (6)) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (3)) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (7)) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long n = a.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        }\n        else if (a[mid] < x) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size()-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(a[mid] == x) {\n            return mid;\n        }\n        else if(a[mid] < x) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        if(a[mid] == x) {\n            return mid;\n        }\n        else if(a[mid] < x) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        }\n        else if (a[mid] < x) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = a.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (a[m] == x) {\n            return m;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;",
    "    long left = 0;\n    long right = a.size() - 1;\n    long mid;\n    while (left <= right) {\n        mid = (left + right) / 2;\n        if (a[mid] == x) {\n            return mid;\n        }\n        else if (a[mid] > x) {\n            right = mid - 1;\n        }\n        else {\n            left = mid + 1;\n        }\n    }\n    return left;",
    "    long low = 0, high = a.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long left = 0;\n    long right = a.size() - 1;\n    while (left <= right) {\n        long mid = (left + right) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid + 1;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = a.size();\n    long l = 0, r = n - 1;\n    long mid;\n    while (l <= r) {\n        mid = l + (r - l) / 2;\n        if (a[mid] == x) {\n            if (mid == n - 1) {\n                return mid;\n            }\n            if (a[mid + 1] > x) {\n                return mid;\n            }\n            l = mid + 1;\n        } else if (a[mid] > x) {\n            if (mid == 0) {\n                return 0;\n            }\n            if (a[mid - 1] <= x) {\n                return mid;\n            }\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;",
    "    // write your code here\n    long n = a.size();\n    long l = 0;\n    long r = n - 1;\n    long mid;\n    while(l <= r) {\n        mid = (l + r) / 2;\n        if(a[mid] == x) {\n            return mid;\n        }\n        else if(a[mid] < x) {\n            l = mid + 1;\n        }\n        else {\n            r = mid - 1;\n        }\n    }\n    return l;",
    "    long left = 0;\n    long right = a.size() - 1;\n    while (left <= right) {\n        long mid = (left + right) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;",
    "    long left = 0, right = a.size() - 1;\n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1, mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long l = 0, r = a.size() - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (a[m] == x) {\n            return m;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;"
  ]
}