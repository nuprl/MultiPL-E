{
  "name": "mbpp_468_max_product",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nlong max_product(std::vector<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_product;\n    assert(candidate((std::vector<long>({(long)3, (long)100, (long)4, (long)5, (long)150, (long)6}))) == (3000));\n    assert(candidate((std::vector<long>({(long)4, (long)42, (long)55, (long)68, (long)80}))) == (50265600));\n    assert(candidate((std::vector<long>({(long)10, (long)22, (long)9, (long)33, (long)21, (long)50, (long)41, (long)60}))) == (2460));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_prod = 1;\n    long max_so_far = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        max_so_far = std::max(max_so_far, max_so_far * arr[i]);\n        max_prod = std::max(max_prod, max_so_far);\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n        if (max_product < max_so_far) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long prev_max_product = 1;\n    long prev_min_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_product = std::max(max_product, prev_max_product * arr[i]);\n            prev_max_product = prev_max_product * arr[i];\n            prev_min_product = prev_min_product * arr[i];\n        } else if (arr[i] < 0) {\n            long temp = prev_max_product;\n            prev_max_product = std::max(prev_min_product * arr[i], 1L);\n            prev_min_product = temp * arr[i];\n        } else {\n            prev_max_product = 1;\n            prev_min_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    std::vector<long> max_prod(arr.size(), 0);\n    max_prod[0] = arr[0];\n    for(int i=1; i<arr.size(); i++) {\n        max_prod[i] = arr[i];\n        for(int j=0; j<i; j++) {\n            if(arr[j] < arr[i]) {\n                max_prod[i] = std::max(max_prod[i], max_prod[j]*arr[i]);\n            }\n        }\n    }\n    return *std::max_element(max_prod.begin(), max_prod.end());",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = arr[0];\n    long curr_product = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] > arr[i - 1]) {\n            curr_product *= arr[i];\n        } else {\n            max_product = std::max(max_product, curr_product);\n            curr_product = arr[i];\n        }\n    }\n    return std::max(max_product, curr_product);",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            curr_prod *= arr[i];\n            max_prod = std::max(max_prod, curr_prod);\n        } else if(arr[i] == 0) {\n            curr_prod = 1;\n        } else {\n            curr_prod = 1;\n            for(int j = i; j < arr.size(); j++) {\n                if(arr[j] < 0) {\n                    curr_prod *= arr[j];\n                } else {\n                    break;\n                }\n            }\n            max_prod = std::max(max_prod, curr_prod);\n        }\n    }\n    return max_prod;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        if(curr_product > max_product) {\n            max_product = curr_product;\n        }\n        if(curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        if(curr_product > max_product) {\n            max_product = curr_product;\n        }\n        if(curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "  long max_product = 1;\n  long max_so_far = 1;\n  long min_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_so_far = max_so_far * arr[i];\n      min_so_far = std::min(min_so_far * arr[i], 1);\n    } else if (arr[i] == 0) {\n      max_so_far = 1;\n      min_so_far = 1;\n    } else {\n      long temp = max_so_far;\n      max_so_far = std::max(min_so_far * arr[i], 1);\n      min_so_far = temp * arr[i];\n    }\n    if (max_so_far > max_product) {\n      max_product = max_so_far;\n    }\n  }\n  return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far = std::max(max_so_far * arr[i], arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max = arr[0];\n    long product = 1;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n            product *= max;\n        }\n    }\n    return product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 0;\n    long max_so_far = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_so_far) {\n            max_so_far = arr[i];\n            max_product = max_product * max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 0;\n    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product *= arr[i];\n        if (product > max_product) {\n            max_product = product;\n        }\n        if (product == 0) {\n            product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long current_product = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            current_product *= arr[i];\n            max_product = std::max(max_product, current_product);\n        } else {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 0;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_so_far) {\n            max_so_far = arr[i];\n            max_product = max_product * max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_product_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_product_so_far = std::max(max_product_so_far * arr[i], arr[i]);\n        max_product = std::max(max_product, max_product_so_far);\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    curr_prod = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    int n = arr.size();\n    std::vector<long> dp(n, 0);\n    dp[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        dp[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp[i] = std::max(dp[i], dp[j] * arr[i]);\n            }\n        }\n    }\n    return *std::max_element(dp.begin(), dp.end());",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = std::max(max_so_far * arr[i], arr[i]);\n        max_prod = std::max(max_prod, max_so_far);\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for (long i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long current_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if(current_product > max_product) {\n            max_product = current_product;\n        }\n        if(current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_product_so_far = 1;\n    for(int i=0; i<arr.size(); i++) {\n        max_product_so_far = max_product_so_far * arr[i];\n        if(max_product_so_far > max_product) {\n            max_product = max_product_so_far;\n        }\n        if(max_product_so_far == 0) {\n            max_product_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++){\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0){\n            max_so_far = 1;\n        }\n        if(max_so_far > max_product){\n            max_product = max_so_far;\n        }\n    }\n    max_so_far = 1;\n    for(int i=arr.size()-1;i>=0;i--){\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0){\n            max_so_far = 1;\n        }\n        if(max_so_far > max_product){\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long current_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if(current_product > max_product) {\n            max_product = current_product;\n        }\n        if(current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    std::vector<long> dp(arr.size(), 1);\n    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max_product = std::max(max_product, dp[i]);\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long current_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if (current_product > max_product) {\n            max_product = current_product;\n        }\n        if (current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "  long max_prod = 1;\n  long curr_prod = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    curr_prod *= arr[i];\n    if (curr_prod > max_prod) {\n      max_prod = curr_prod;\n    }\n    if (curr_prod == 0) {\n      curr_prod = 1;\n    }\n  }\n  curr_prod = 1;\n  for (int i = arr.size() - 1; i >= 0; i--) {\n    curr_prod *= arr[i];\n    if (curr_prod > max_prod) {\n      max_prod = curr_prod;\n    }\n    if (curr_prod == 0) {\n      curr_prod = 1;\n    }\n  }\n  return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long n = arr.size();\n    std::vector<long> dp(n,1);\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j]*arr[i]);\n            }\n        }\n    }\n    return *std::max_element(dp.begin(), dp.end());",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        max_product = std::max(max_product, max_so_far);\n        if(arr[i] == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        max_product = std::max(max_product, max_so_far);\n        if(arr[i] == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        max_product = std::max(max_product, curr_product);\n        if (curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product *= arr[i];\n        if (product > max_product) {\n            max_product = product;\n        }\n        if (product == 0) {\n            product = 1;\n        }\n    }\n    product = 1;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        product *= arr[i];\n        if (product > max_product) {\n            max_product = product;\n        }\n        if (product == 0) {\n            product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long min_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_product = max_product * arr[i];\n            min_product = std::min(min_product * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            long temp = max_product;\n            max_product = std::max(min_product * arr[i], 1L);\n            min_product = temp * arr[i];\n        }\n        if (max_so_far < max_product) {\n            max_so_far = max_product;\n        }\n    }\n    return max_so_far;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_product_so_far = 1;\n    for(long i = 0; i < arr.size(); i++) {\n        max_product_so_far *= arr[i];\n        if(max_product_so_far > max_product) {\n            max_product = max_product_so_far;\n        }\n        if(max_product_so_far == 0) {\n            max_product_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_product_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        max_product_so_far *= arr[i];\n        if(max_product_so_far > max_product) {\n            max_product = max_product_so_far;\n        }\n        if(max_product_so_far == 0) {\n            max_product_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_till_now = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_till_now *= arr[i];\n        if(max_till_now > max_product) {\n            max_product = max_till_now;\n        }\n        if(max_till_now == 0) {\n            max_till_now = 1;\n        }\n    }\n    return max_product;",
    "    long max_prod = 0;\n    long prod = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        prod *= arr[i];\n        if (prod > max_prod) {\n            max_prod = prod;\n        }\n    }\n    return max_prod;",
    "    std::vector<long> max_prod(arr.size());\n    max_prod[0] = arr[0];\n    for(int i=1;i<arr.size();i++) {\n        max_prod[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                max_prod[i] = std::max(max_prod[i], max_prod[j]*arr[i]);\n            }\n        }\n    }\n    return *std::max_element(max_prod.begin(), max_prod.end());",
    "    long max_product = 1;\n    long product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        product *= arr[i];\n        if(product > max_product) {\n            max_product = product;\n        }\n        if(product == 0) {\n            product = 1;\n        }\n    }\n    product = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        product *= arr[i];\n        if(product > max_product) {\n            max_product = product;\n        }\n        if(product == 0) {\n            product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long current_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if (current_product > max_product) {\n            max_product = current_product;\n        }\n        if (current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    std::vector<long> max_product_array(arr.size(),0);\n    max_product_array[0] = arr[0];\n    for(int i=1;i<arr.size();i++) {\n        max_product_array[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                max_product_array[i] = std::max(max_product_array[i], max_product_array[j] * arr[i]);\n            }\n        }\n    }\n    return *std::max_element(max_product_array.begin(), max_product_array.end());",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(long i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        max_product = std::max(max_product, max_so_far);\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    std::vector<long> max_product_arr(arr.size(),0);\n    max_product_arr[0] = arr[0];\n    for(int i=1;i<arr.size();i++) {\n        max_product_arr[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                max_product_arr[i] = std::max(max_product_arr[i], max_product_arr[j]*arr[i]);\n            }\n        }\n    }\n    return *std::max_element(max_product_arr.begin(), max_product_arr.end());",
    "    std::vector<long> max_product(arr.size(), 1);\n    max_product[0] = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                max_product[i] = std::max(max_product[i], max_product[j] * arr[i]);\n            }\n        }\n    }\n    return *std::max_element(max_product.begin(), max_product.end());",
    "    std::vector<long> dp(arr.size(), 1);\n    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp[i] = std::max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max_product = std::max(max_product, dp[i]);\n    }\n    return max_product;",
    "    // Write your code here\n    long max_prod = 1;\n    long prod = 1;\n    for(int i = 0; i < arr.size(); i++){\n        prod = prod * arr[i];\n        if(prod > max_prod){\n            max_prod = prod;\n        }\n        if(prod == 0){\n            prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long current_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            current_product *= arr[i];\n            max_product = std::max(max_product, current_product);\n        } else {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i=0; i<arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "  long max_product = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_so_far *= arr[i];\n      max_product = std::max(max_product, max_so_far);\n    } else {\n      max_so_far = 1;\n    }\n  }\n  return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            curr_prod *= arr[i];\n            max_prod = std::max(max_prod, curr_prod);\n        } else {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(long i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(long i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        max_product = std::max(max_product, curr_product);\n        if (curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    curr_product = 1;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        curr_product *= arr[i];\n        max_product = std::max(max_product, curr_product);\n        if (curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    int n = arr.size();\n    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    if(arr.size()==0)\n        return 0;\n    if(arr.size()==1)\n        return arr[0];\n    long max_product_so_far=arr[0];\n    long max_product_ending_here=arr[0];\n    long min_product_ending_here=arr[0];\n    for(int i=1;i<arr.size();i++){\n        long temp=max_product_ending_here;\n        max_product_ending_here=std::max(std::max(max_product_ending_here*arr[i],min_product_ending_here*arr[i]),arr[i]);\n        min_product_ending_here=std::min(std::min(temp*arr[i],min_product_ending_here*arr[i]),arr[i]);\n        max_product_so_far=std::max(max_product_so_far,max_product_ending_here);\n    }\n    return max_product_so_far;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        max_product = std::max(max_product, curr_product);\n        if(curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(long i = 0; i < arr.size(); ++i) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "  long max_product = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    max_so_far = max_so_far * arr[i];\n    if (max_so_far == 0) {\n      max_so_far = 1;\n    }\n    max_product = std::max(max_product, max_so_far);\n  }\n  return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    curr_prod = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far = std::max(max_so_far * arr[i], arr[i]);\n        max_product = std::max(max_so_far, max_product);\n    }\n    return max_product;",
    "    std::vector<long> dp(arr.size(), 1);\n    for(int i = 1; i < arr.size(); i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] * arr[i]);\n            }\n        }\n    }\n    return *std::max_element(dp.begin(), dp.end());",
    "    long max_product = 0;\n    long max_so_far = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_so_far) {\n            max_so_far = arr[i];\n            max_product = max_so_far;\n        }\n        else {\n            max_product *= arr[i];\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far = std::max(max_so_far*arr[i], arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        product *= arr[i];\n        max_product = std::max(max_product, product);\n        if(arr[i] == 0) product = 1;\n    }\n    product = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        product *= arr[i];\n        max_product = std::max(max_product, product);\n        if(arr[i] == 0) product = 1;\n    }\n    return max_product;",
    "    long max_product = 1;\n    long product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        product *= arr[i];\n        if(product > max_product) {\n            max_product = product;\n        }\n        if(product == 0) {\n            product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    std::vector<long> max_product_arr(arr.size(), 1);\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                max_product_arr[i] = std::max(max_product_arr[i], max_product_arr[j] * arr[i]);\n            }\n        }\n        max_product = std::max(max_product, max_product_arr[i]);\n    }\n    return max_product;",
    "    long max_product = 1;\n    int max_product_index = 0;\n    int max_product_length = 0;\n    int max_product_start_index = 0;\n    int max_product_end_index = 0;\n    int max_product_start_index_temp = 0;\n    int max_product_end_index_temp = 0;\n    int max_product_length_temp = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_product) {\n            max_product = arr[i];\n            max_product_index = i;\n            max_product_length = 1;\n            max_product_start_index = i;\n            max_product_end_index = i;\n        }\n        else if (arr[i] == max_product) {\n            max_product_length = 1;\n            max_product_start_index = i;\n            max_product_end_index = i;\n        }\n        else {\n            max_product_length_temp = 1;\n            max_product_start_index_temp = i;\n            max_product_end_index_temp = i;\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr[j] > arr[i]) {\n                    max_product_length_temp++;\n                    max_product_end_index_temp = j;\n                }\n                else {\n                    break;\n                }\n            }\n            if (max_product_length_temp > max_product_length) {\n                max_product_length = max_product_length_temp;\n                max_product_start_index = max_product_start_index_temp;\n                max_product_end_index = max_product_end_index_temp;\n            }\n        }\n    }\n    long product = 1;\n    for (int i = max_product_start_index; i <= max_product_end_index; i++) {\n        product *= arr[i];\n    }\n    return product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_product_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_product_so_far *= arr[i];\n        if(max_product_so_far > max_product) {\n            max_product = max_product_so_far;\n        }\n        if(max_product_so_far == 0) {\n            max_product_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = std::max(max_so_far * arr[i], arr[i]);\n            min_so_far = std::min(min_so_far * arr[i], arr[i]);\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], arr[i]);\n            min_so_far = std::min(temp * arr[i], arr[i]);\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        max_product = std::max(max_product, curr_product);\n        if (curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    curr_product = 1;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        curr_product *= arr[i];\n        max_product = std::max(max_product, curr_product);\n        if (curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far *= arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    int n = arr.size();\n    std::vector<long> dp(n, 1);\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp[i] = std::max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max_product = std::max(max_product, dp[i]);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(long i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    max_so_far = 1;\n    for(long i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long n = arr.size();\n    std::vector<long> dp(n, 1);\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] * arr[i]);\n            }\n        }\n    }\n    return *std::max_element(dp.begin(), dp.end());",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(auto i : arr) {\n        curr_prod *= i;\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            curr_prod *= arr[i];\n            max_prod = std::max(curr_prod, max_prod);\n        } else {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 0;\n    std::vector<long> max_product_arr(arr.size(), 0);\n    max_product_arr[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        max_product_arr[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i]) {\n                max_product_arr[i] = max_product_arr[j] * arr[i];\n            }\n        }\n        if(max_product < max_product_arr[i]) {\n            max_product = max_product_arr[i];\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long prev_max = 1;\n    long prev_min = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            prev_max = prev_max * arr[i];\n            prev_min = std::min(prev_min * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            prev_max = 1;\n            prev_min = 1;\n        } else {\n            long temp = prev_max;\n            prev_max = std::max(prev_min * arr[i], 1L);\n            prev_min = temp * arr[i];\n        }\n        if (prev_max > max_product) {\n            max_product = prev_max;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            curr_prod *= arr[i];\n            max_prod = std::max(max_prod, curr_prod);\n        } else {\n            curr_prod = 1;\n        }\n    }\n    curr_prod = 1;\n    for (long i = arr.size() - 1; i >= 0; i--) {\n        if (arr[i] > 0) {\n            curr_prod *= arr[i];\n            max_prod = std::max(max_prod, curr_prod);\n        } else {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long current_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if (current_product > max_product) {\n            max_product = current_product;\n        }\n        if (current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "  long max_product = 1;\n  long current_product = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    current_product *= arr[i];\n    if (current_product > max_product) {\n      max_product = current_product;\n    }\n    if (current_product == 0) {\n      current_product = 1;\n    }\n  }\n  return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1l);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1l);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        if(curr_product > max_product) {\n            max_product = curr_product;\n        }\n        if(curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    std::vector<long> max_product_arr(arr.size());\n    max_product_arr[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        max_product_arr[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                max_product_arr[i] = std::max(max_product_arr[i], max_product_arr[j] * arr[i]);\n            }\n        }\n    }\n    return *std::max_element(max_product_arr.begin(), max_product_arr.end());",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++){\n        max_so_far = max_so_far*arr[i];\n        if(max_so_far == 0){\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product,max_so_far);\n    }\n    max_so_far = 1;\n    for(int i=arr.size()-1;i>=0;i--){\n        max_so_far = max_so_far*arr[i];\n        if(max_so_far == 0){\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product,max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(long i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(long i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    std::vector<long> max_product_arr(arr.size(), 0);\n    max_product_arr[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        long max_product = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                max_product = std::max(max_product, max_product_arr[j] * arr[i]);\n            }\n        }\n        max_product_arr[i] = max_product;\n    }\n    return *std::max_element(max_product_arr.begin(), max_product_arr.end());",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            curr_prod *= arr[i];\n            max_prod = std::max(max_prod, curr_prod);\n        } else if(arr[i] == 0) {\n            curr_prod = 1;\n        } else {\n            if(curr_prod == 1) {\n                curr_prod = arr[i];\n                max_prod = std::max(max_prod, curr_prod);\n            } else {\n                curr_prod *= arr[i];\n                long temp = curr_prod;\n                curr_prod = 1;\n                max_prod = std::max(max_prod, temp);\n            }\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long product = 1;\n    int i = 0;\n    while(i < arr.size()) {\n        product *= arr[i];\n        if(product > max_product) {\n            max_product = product;\n        }\n        i++;\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far = std::max(max_so_far, max_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    // Write your code here\n    long n = arr.size();\n    std::vector<long> dp(n,1);\n    for(long i=1;i<n;i++){\n        for(long j=0;j<i;j++){\n            if(arr[i]>arr[j]){\n                dp[i] = std::max(dp[i],dp[j]*arr[i]);\n            }\n        }\n    }\n    long max = dp[0];\n    for(long i=1;i<n;i++){\n        if(max<dp[i]){\n            max = dp[i];\n        }\n    }\n    return max;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long prev_max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_product = std::max(max_product, prev_max_product * arr[i]);\n            prev_max_product *= arr[i];\n        } else if (arr[i] < 0) {\n            max_product = std::max(max_product, prev_max_product * arr[i]);\n            prev_max_product = 1;\n        } else {\n            max_product = std::max(max_product, prev_max_product * arr[i]);\n            prev_max_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long current_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            current_product *= arr[i];\n            max_product = std::max(max_product, current_product);\n        }\n        else {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long prev_max = 1;\n    long prev_min = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            prev_max = prev_max * arr[i];\n            prev_min = std::min(prev_min * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            prev_max = 1;\n            prev_min = 1;\n        } else {\n            long temp = prev_max;\n            prev_max = std::max(prev_min * arr[i], 1L);\n            prev_min = temp * arr[i];\n        }\n        if (prev_max > max_product) {\n            max_product = prev_max;\n        }\n    }\n    return max_product;",
    "    long max_product = 0;\n    long curr_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        if(curr_product > max_product) {\n            max_product = curr_product;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (auto i = 0; i < arr.size(); i++) {\n        max_so_far = std::max(max_so_far, max_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            curr_prod *= arr[i];\n            max_prod = std::max(max_prod, curr_prod);\n        }\n        else {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long prev_max = 1;\n    long prev_min = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            prev_max = prev_max * arr[i];\n            prev_min = std::min(prev_min * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            prev_max = 1;\n            prev_min = 1;\n        }\n        else {\n            long temp = prev_max;\n            prev_max = std::max(prev_min * arr[i], 1L);\n            prev_min = temp * arr[i];\n        }\n        if(max_prod < prev_max) {\n            max_prod = prev_max;\n        }\n    }\n    return max_prod;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if (curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if (curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long n = arr.size();\n    std::vector<long> dp(n, 1);\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp[i] = std::max(dp[i], dp[j] * arr[i]);\n            }\n        }\n    }\n    return *std::max_element(dp.begin(), dp.end());",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(long i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    std::vector<long> dp(arr.size(),1);\n    for(int i=1;i<arr.size();i++) {\n        for(int j=0;j<i;j++) {\n            if(arr[j]<arr[i]) {\n                dp[i]=std::max(dp[i],dp[j]*arr[i]);\n            }\n        }\n    }\n    return *std::max_element(dp.begin(),dp.end());",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 0;\n    std::vector<long> dp(arr.size(), 1);\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp[i] = std::max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max_product = std::max(max_product, dp[i]);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if (max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    std::vector<long> max_product_arr(arr.size(), 1);\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                max_product_arr[i] = std::max(max_product_arr[i], max_product_arr[j] * arr[i]);\n            }\n        }\n        max_product = std::max(max_product, max_product_arr[i]);\n    }\n    return max_product;",
    "    long max_prod = 1;\n    std::vector<long> max_prod_arr(arr.size());\n    max_prod_arr[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        max_prod_arr[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                max_prod_arr[i] = std::max(max_prod_arr[i], max_prod_arr[j] * arr[i]);\n            }\n        }\n        max_prod = std::max(max_prod, max_prod_arr[i]);\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long current_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if (current_product > max_product) {\n            max_product = current_product;\n        }\n        if (current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = arr[0];\n    long prev_product = arr[0];\n    long prev_max = arr[0];\n    long prev_min = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        long curr_max = std::max(std::max(prev_max * arr[i], prev_min * arr[i]), arr[i]);\n        long curr_min = std::min(std::min(prev_max * arr[i], prev_min * arr[i]), arr[i]);\n        max_product = std::max(max_product, curr_max);\n        prev_max = curr_max;\n        prev_min = curr_min;\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far *= arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++){\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0){\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product,max_so_far);\n    }\n    max_so_far = 1;\n    for(int i=arr.size()-1;i>=0;i--){\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0){\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product,max_so_far);\n    }\n    return max_product;",
    "    long max = 1;\n    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product = product * arr[i];\n        if (product > max) {\n            max = product;\n        }\n    }\n    return max;",
    "  int n = arr.size();\n  std::vector<long> max_product(n);\n  max_product[0] = arr[0];\n  for (int i = 1; i < n; i++) {\n    max_product[i] = arr[i];\n    for (int j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        max_product[i] = std::max(max_product[i], max_product[j] * arr[i]);\n      }\n    }\n  }\n  return *std::max_element(max_product.begin(), max_product.end());",
    "    long max_product = 1;\n    long max_product_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_product_so_far = std::max(max_product_so_far, max_product_so_far * arr[i]);\n        max_product = std::max(max_product, max_product_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long current_product = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if (current_product > max_product) {\n            max_product = current_product;\n        }\n        if (current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_product_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_product_so_far = std::max(max_product_so_far*arr[i], arr[i]);\n        max_product = std::max(max_product_so_far, max_product);\n    }\n    return max_product;",
    "    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        long product = 1;\n        for(int j = i; j < arr.size(); j++) {\n            product *= arr[j];\n            if(product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            curr_prod *= arr[i];\n            max_prod = std::max(max_prod, curr_prod);\n        } else if (arr[i] == 0) {\n            curr_prod = 1;\n        } else {\n            long temp = curr_prod;\n            curr_prod = 1;\n            for (long j = i; j < arr.size(); j++) {\n                if (arr[j] < 0) {\n                    curr_prod *= arr[j];\n                } else {\n                    break;\n                }\n            }\n            max_prod = std::max(max_prod, curr_prod);\n            curr_prod = temp;\n        }\n    }\n    return max_prod;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if (curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if (curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if (curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if (curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        max_product = std::max(max_product, max_so_far);\n        if (arr[i] == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    std::vector<long> max_prod_arr(arr.size(), 1);\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                max_prod_arr[i] = std::max(max_prod_arr[i], max_prod_arr[j] * arr[i]);\n            }\n        }\n        max_prod = std::max(max_prod, max_prod_arr[i]);\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++){\n        max_so_far = max_so_far*arr[i];\n        if(max_so_far==0){\n            max_so_far = 1;\n        }\n        max_product = std::max(max_so_far,max_product);\n    }\n    max_so_far = 1;\n    for(int i=arr.size()-1;i>=0;i--){\n        max_so_far = max_so_far*arr[i];\n        if(max_so_far==0){\n            max_so_far = 1;\n        }\n        max_product = std::max(max_so_far,max_product);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 0;\n    long current_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if(current_product > max_product) {\n            max_product = current_product;\n        }\n        if(current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    std::vector<long> max_product_arr(arr.size(), 0);\n    std::vector<long> min_product_arr(arr.size(), 0);\n    max_product_arr[0] = arr[0];\n    min_product_arr[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        max_product_arr[i] = std::max(arr[i], std::max(arr[i] * max_product_arr[i - 1], arr[i] * min_product_arr[i - 1]));\n        min_product_arr[i] = std::min(arr[i], std::min(arr[i] * max_product_arr[i - 1], arr[i] * min_product_arr[i - 1]));\n    }\n    return *std::max_element(max_product_arr.begin(), max_product_arr.end());",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if(curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if(curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_so_far, max_product);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        if (curr_product > max_product) {\n            max_product = curr_product;\n        }\n        if (curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long current_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if(current_product > max_product) {\n            max_product = current_product;\n        }\n        if(current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        max_product = std::max(max_product, max_so_far);\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        max_product = std::max(max_product, max_so_far);\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_prod = arr[0];\n    long curr_prod = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        curr_prod = std::max(curr_prod * arr[i], arr[i]);\n        max_prod = std::max(max_prod, curr_prod);\n    }\n    return max_prod;",
    "    std::vector<long> max_prod(arr.size(),0);\n    max_prod[0]=arr[0];\n    for(int i=1;i<arr.size();i++)\n    {\n        long max=0;\n        for(int j=0;j<i;j++)\n        {\n            if(arr[j]<arr[i])\n            {\n                if(max_prod[j]>max)\n                {\n                    max=max_prod[j];\n                }\n            }\n        }\n        max_prod[i]=max*arr[i];\n    }\n    long max=0;\n    for(int i=0;i<max_prod.size();i++)\n    {\n        if(max_prod[i]>max)\n        {\n            max=max_prod[i];\n        }\n    }\n    return max;",
    "    // Write your code here\n    long max_product = 1;\n    long max_product_so_far = 1;\n    for(int i=0;i<arr.size();i++){\n        max_product_so_far = max_product_so_far * arr[i];\n        if(max_product_so_far > max_product){\n            max_product = max_product_so_far;\n        }\n        if(max_product_so_far == 0){\n            max_product_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] > 0) {\n            curr_product *= arr[i];\n            if (curr_product > max_product) {\n                max_product = curr_product;\n            }\n        } else {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_element = arr[0];\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_element) {\n            max_product *= arr[i];\n            max_element = arr[i];\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long current_product = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        current_product *= arr[i];\n        if (current_product > max_product) {\n            max_product = current_product;\n        }\n        if (current_product == 0) {\n            current_product = 1;\n        }\n    }\n    return max_product;",
    "    // Write your code here\n    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]>0){\n            curr_prod *= arr[i];\n            max_prod = std::max(max_prod,curr_prod);\n        }\n        else{\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_product_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_product_so_far *= arr[i];\n        if (max_product_so_far > max_product) {\n            max_product = max_product_so_far;\n        }\n        if (max_product_so_far == 0) {\n            max_product_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        product *= arr[i];\n        if(product > max_product) {\n            max_product = product;\n        }\n        if(product == 0) {\n            product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        long product = 1;\n        for(int j = i; j < arr.size(); j++) {\n            product *= arr[j];\n            max_product = std::max(max_product, product);\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]>0){\n            max_so_far = max_so_far*arr[i];\n            min_so_far = std::min(min_so_far*arr[i],1L);\n        }\n        else if(arr[i]==0){\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else{\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far*arr[i],1L);\n            min_so_far = temp*arr[i];\n        }\n        if(max_so_far>max_product){\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 0;\n    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product *= arr[i];\n        max_product = std::max(max_product, product);\n        if (product == 0) {\n            product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    max_so_far = 1;\n    for(int i=arr.size()-1;i>=0;i--) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    max_so_far = 1;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        max_so_far *= arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_product *= arr[i];\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long max_so_far = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        max_so_far = std::max(max_so_far, max_so_far * arr[i]);\n        max_prod = std::max(max_prod, max_so_far);\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        max_so_far = std::max(max_so_far * arr[i], arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;"
  ]
}