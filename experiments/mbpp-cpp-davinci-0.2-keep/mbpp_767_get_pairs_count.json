{
  "name": "mbpp_767_get_pairs_count",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlong get_pairs_count(std::vector<long> arr, long sum) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = get_pairs_count;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1})), (2)) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)-1, (long)5})), (6)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3})), (1)) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)3})), (-3)) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::unordered_map<long, long> m;\n    for (auto i : arr)\n        m[i]++;\n    long twice_count = 0;\n    for (auto i : arr) {\n        twice_count += m[sum - i];\n        if (sum - i == i)\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        for(int j=i+1;j<arr.size();j++)\n        {\n            if(arr[i]+arr[j]==sum)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::unordered_map<long, long> m;\n    for(long i=0; i<arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(long i=0; i<arr.size(); i++) {\n        count += m[sum-arr[i]];\n        if(sum-arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count/2;",
    "    std::unordered_map<long, long> m;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (map.find(sum - arr[i]) != map.end()) {\n            count += map[sum - arr[i]];\n        }\n        map[arr[i]]++;\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    // Write your code here\n    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    for (int i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        twice_count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (auto i : arr)\n        m[i]++;\n    long twice_count = 0;\n    for (auto i : arr) {\n        twice_count += m[sum - i];\n        if (sum - i == i)\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    std::unordered_map<long, long> hash;\n    for (long i = 0; i < arr.size(); i++) {\n        hash[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += hash[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;"
  ]
}