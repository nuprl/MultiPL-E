{
  "name": "mbpp_767_get_pairs_count",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlong get_pairs_count(std::vector<long> arr, long sum) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = get_pairs_count;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1})), (2)) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)-1, (long)5})), (6)) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)3})), (1)) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)3})), (-3)) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::unordered_map<long, long> m;\n    for (auto i : arr)\n        m[i]++;\n    long twice_count = 0;\n    for (auto i : arr) {\n        twice_count += m[sum - i];\n        if (sum - i == i)\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        for(int j=i+1;j<arr.size();j++)\n        {\n            if(arr[i]+arr[j]==sum)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::unordered_map<long, long> m;\n    for(long i=0; i<arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(long i=0; i<arr.size(); i++) {\n        count += m[sum-arr[i]];\n        if(sum-arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count/2;",
    "    std::unordered_map<long, long> m;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (map.find(sum - arr[i]) != map.end()) {\n            count += map[sum - arr[i]];\n        }\n        map[arr[i]]++;\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    // Write your code here\n    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    for (int i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        twice_count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (auto i : arr)\n        m[i]++;\n    long twice_count = 0;\n    for (auto i : arr) {\n        twice_count += m[sum - i];\n        if (sum - i == i)\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    std::unordered_map<long, long> hash;\n    for (long i = 0; i < arr.size(); i++) {\n        hash[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += hash[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    int count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++){\n        for(int j=i+1;j<arr.size();j++){\n            if(arr[i]+arr[j]==sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    long twice_count = 0;\n    for (auto i : arr) {\n        twice_count += m[sum - i];\n        if (sum - i == i)\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : arr) {\n        count += m[sum - i];\n        if (sum - i == i) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        s.insert(arr[i]);\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(sum - arr[i]) != s.end()) {\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n        } else {\n            m[arr[i]]++;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(m.find(sum - arr[i]) != m.end()) {\n            count += m[sum - arr[i]];\n        }\n        if(sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count/2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        for(int j=i+1;j<arr.size();j++)\n        {\n            if(arr[i]+arr[j]==sum)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++){\n        for(int j=i+1;j<arr.size();j++){\n            if(arr[i]+arr[j]==sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> map;\n    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (map.find(sum - arr[i]) != map.end()) {\n            count += map[sum - arr[i]];\n        }\n        map[arr[i]]++;\n    }\n    return count;",
    "    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        for(long j = i + 1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::sort(arr.begin(), arr.end());\n    int i = 0, j = arr.size() - 1;\n    while (i < j) {\n        if (arr[i] + arr[j] == sum) {\n            count++;\n            i++;\n            j--;\n        } else if (arr[i] + arr[j] < sum) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> m;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> hash;\n    for (long i = 0; i < arr.size(); i++) {\n        hash[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += hash[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::sort(arr.begin(), arr.end());\n    int l = 0;\n    int r = arr.size() - 1;\n    while (l < r) {\n        if (arr[l] + arr[r] == sum) {\n            count++;\n            l++;\n            r--;\n        } else if (arr[l] + arr[r] < sum)\n            l++;\n        else\n            r--;\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if(sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> hash;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        hash[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += hash[sum - arr[i]];\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "\tlong count = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tfor (int j = i + 1; j < arr.size(); j++) {\n\t\t\tif (arr[i] + arr[j] == sum) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < arr.size(); i++) {\n        if(map.find(sum - arr[i]) != map.end()) {\n            count += map[sum - arr[i]];\n        }\n        map[arr[i]]++;\n    }\n    return count;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if(sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    long twice_count = 0;\n    for (auto i : arr) {\n        twice_count += m[sum - i];\n        if (sum - i == i) {\n            twice_count--;\n        }\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    // Write your code here\n    long count = 0;\n    std::unordered_map<long, long> m;\n    for(long i=0; i<arr.size(); i++)\n    {\n        m[arr[i]]++;\n    }\n    for(long i=0; i<arr.size(); i++)\n    {\n        count += m[sum-arr[i]];\n        if(sum-arr[i] == arr[i])\n        {\n            count--;\n        }\n    }\n    return count/2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if(sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count/2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : arr) {\n        count += m[sum - i];\n        if (sum - i == i) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(auto i : arr) {\n        map[i]++;\n    }\n    for(auto i : arr) {\n        if(map[sum - i] > 0) {\n            count++;\n            map[sum - i]--;\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if(sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count/2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++){\n        for(int j=i+1;j<arr.size();j++){\n            if(arr[i]+arr[j]==sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        s.insert(arr[i]);\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(sum - arr[i]) != s.end()) {\n            count++;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i=0; i<arr.size(); i++) {\n        for(int j=i+1; j<arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "\tlong count = 0;\n\tstd::unordered_map<long, long> m;\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tm[arr[i]]++;\n\t}\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tcount += m[sum - arr[i]];\n\t\tif (sum - arr[i] == arr[i]) {\n\t\t\tcount--;\n\t\t}\n\t}\n\treturn count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> hash;\n    for (int i = 0; i < arr.size(); i++) {\n        hash[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += hash[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    for (auto i : arr) {\n        map[i]++;\n    }\n    long ans = 0;\n    for (auto i : arr) {\n        ans += map[sum - i];\n        if (sum - i == i) {\n            ans--;\n        }\n    }\n    return ans / 2;",
    "    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for(auto i : arr)\n        m[i]++;\n    for(auto i : arr) {\n        count += m[sum-i];\n        if(sum-i == i)\n            count--;\n    }\n    return count/2;",
    "    std::unordered_map<long, long> m;\n    for(auto i : arr)\n        m[i]++;\n    long ans = 0;\n    for(auto i : arr) {\n        ans += m[sum - i];\n        if(sum - i == i)\n            ans--;\n    }\n    return ans / 2;",
    "    std::unordered_map<long, long> map;\n    long count = 0;\n    for (auto i : arr) {\n        map[i]++;\n    }\n    for (auto i : arr) {\n        count += map[sum - i];\n        if (sum - i == i) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    for (auto i : arr) {\n        map[i]++;\n    }\n    long twice_count = 0;\n    for (auto i : arr) {\n        twice_count += map[sum - i];\n        if (sum - i == i)\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    int n = arr.size();\n    std::unordered_map<int, int> m;\n    for (int i = 0; i < n; i++)\n        m[arr[i]]++;\n    int twice_count = 0;\n    for (int i = 0; i < n; i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    long n = arr.size();\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++){\n        for(int j=i+1;j<arr.size();j++){\n            if(arr[i]+arr[j]==sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> m;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i = 0; i < arr.size(); i++){\n        for(int j = i + 1; j < arr.size(); j++){\n            if(arr[i] + arr[j] == sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        if (map.find(sum - arr[i]) != map.end()) {\n            count += map[sum - arr[i]];\n        }\n        map[arr[i]]++;\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    long n = arr.size();\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        if (map.find(sum - arr[i]) != map.end()) {\n            count += map[sum - arr[i]];\n        }\n        map[arr[i]]++;\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++){\n        for(int j=i+1;j<arr.size();j++){\n            if(arr[i]+arr[j]==sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for(int i=0;i<arr.size();i++){\n        m[arr[i]]++;\n    }\n    long ans = 0;\n    for(int i=0;i<arr.size();i++){\n        ans += m[sum-arr[i]];\n        if(sum-arr[i] == arr[i])\n            ans--;\n    }\n    return ans/2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i+1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> mp;\n    for (int i = 0; i < arr.size(); i++) {\n        mp[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += mp[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++){\n        for(int j=i+1;j<arr.size();j++){\n            if(arr[i]+arr[j]==sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (map.find(sum - arr[i]) != map.end()) {\n            count += map[sum - arr[i]];\n        }\n        map[arr[i]]++;\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : arr) {\n        count += m[sum - i];\n        if (sum - i == i) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(int i=0; i<arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for(int i=0; i<arr.size(); i++) {\n        if(map.find(sum-arr[i]) != map.end()) {\n            count += map[sum-arr[i]];\n        }\n        if(sum-arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count/2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++){\n        for(int j=i+1;j<arr.size();j++){\n            if(arr[i]+arr[j]==sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        for(long j = i+1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(int i = 0; i < arr.size(); i++) {\n        if(map.find(sum - arr[i]) != map.end()) {\n            count += map[sum - arr[i]];\n        }\n        map[arr[i]]++;\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    int n = arr.size();\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = i+1; j < n; j++)\n        {\n            if(arr[i] + arr[j] == sum)\n                count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (int i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i+1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> m;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (auto i : arr)\n        m[i]++;\n    long twice_count = 0;\n    for (auto i : arr) {\n        twice_count += m[sum - i];\n        if (sum - i == i)\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        for(long j = i + 1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        long temp = sum - arr[i];\n        if (temp >= 0 && m.find(temp) != m.end()) {\n            count += m[temp];\n        }\n        if (temp == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    for(int i=0; i<arr.size(); i++){\n        for(int j=i+1; j<arr.size(); j++){\n            if(arr[i]+arr[j] == sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i=0; i<arr.size(); i++) {\n        for(int j=i+1; j<arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> hash;\n    for (int i = 0; i < arr.size(); i++) {\n        hash[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += hash[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long ans = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        ans += m[sum - arr[i]];\n        if(sum - arr[i] == arr[i]) {\n            ans--;\n        }\n    }\n    return ans/2;",
    "    std::unordered_map<long, long> map;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::sort(arr.begin(), arr.end());\n    long left = 0;\n    long right = arr.size() - 1;\n    while (left < right) {\n        if (arr[left] + arr[right] == sum) {\n            count++;\n            left++;\n            right--;\n        } else if (arr[left] + arr[right] < sum) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (int i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if(sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    int count = 0;\n    for(int i = 0; i < arr.size(); i++){\n        for(int j = i+1; j < arr.size(); j++){\n            if(arr[i] + arr[j] == sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> hash_map;\n    for (auto i : arr) {\n        hash_map[i]++;\n    }\n    for (auto i : arr) {\n        count += hash_map[sum - i];\n        if (sum - i == i) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_set<long> s;\n    for(int i=0;i<arr.size();i++){\n        s.insert(arr[i]);\n    }\n    for(int i=0;i<arr.size();i++){\n        if(s.find(sum-arr[i])!=s.end()){\n            count++;\n        }\n    }\n    return count/2;",
    "    std::unordered_map<long, long> m;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> hash;\n    for (int i = 0; i < arr.size(); i++) {\n        hash[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += hash[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> hash;\n    for (long i = 0; i < arr.size(); i++) {\n        hash[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += hash[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    // Write your code here\n    long count=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        for(int j=i+1;j<arr.size();j++)\n        {\n            if(arr[i]+arr[j]==sum)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    int count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i+1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    // Write your code here\n    std::sort(arr.begin(), arr.end());\n    int i = 0;\n    int j = arr.size() - 1;\n    while (i < j) {\n        if (arr[i] + arr[j] == sum) {\n            count++;\n            i++;\n            j--;\n        } else if (arr[i] + arr[j] < sum) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    for (int i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        twice_count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = i + 1; j < arr.size(); j++) {\n            if(arr[i] + arr[j] == sum) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    std::unordered_map<long, long> map;\n    for (auto i : arr) {\n        map[i]++;\n    }\n    long twice_count = 0;\n    for (auto i : arr) {\n        twice_count += map[sum - i];\n        if (sum - i == i)\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (int i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if(sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++){\n        for(int j=i+1;j<arr.size();j++){\n            if(arr[i]+arr[j]==sum){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        s.insert(arr[i]);\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(sum - arr[i]) != s.end()) {\n            count++;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i]) {\n            count--;\n        }\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i=0;i<arr.size();i++)\n    {\n        for(int j=i+1;j<arr.size();j++)\n        {\n            if(arr[i]+arr[j]==sum)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long twice_count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        twice_count += m[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            twice_count--;\n    }\n    return twice_count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(int i=0;i<arr.size();i++){\n        map[arr[i]]++;\n    }\n    for(int i=0;i<arr.size();i++){\n        count += map[sum-arr[i]];\n        if(sum-arr[i] == arr[i]){\n            count--;\n        }\n    }\n    return count/2;",
    "    long count = 0;\n    std::unordered_set<long> s;\n    for(int i = 0; i < arr.size(); i++) {\n        s.insert(arr[i]);\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(s.find(sum - arr[i]) != s.end()) {\n            count++;\n        }\n    }\n    return count / 2;",
    "    std::unordered_map<long, long> map;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (map.find(sum - arr[i]) != map.end()) {\n            count++;\n        }\n        map[arr[i]]++;\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        count += map[sum - arr[i]];\n        if (sum - arr[i] == arr[i])\n            count--;\n    }\n    return count / 2;"
  ]
}