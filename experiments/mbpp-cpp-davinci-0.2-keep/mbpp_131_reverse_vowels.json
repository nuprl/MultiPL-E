{
  "name": "mbpp_131_reverse_vowels",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nstd::string reverse_vowels(std::string str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = reverse_vowels;\n    assert(candidate((\"Python\")) == (\"Python\"));\n    assert(candidate((\"USA\")) == (\"ASU\"));\n    assert(candidate((\"ab\")) == (\"ab\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int i = 0;\n    int j = str1.size() - 1;\n    while (i < j) {\n        while (i < j && !is_vowel(str1[i])) {\n            i++;\n        }\n        while (i < j && !is_vowel(str1[j])) {\n            j--;\n        }\n        if (i < j) {\n            std::swap(str1[i], str1[j]);\n            i++;\n            j--;\n        }\n    }\n    return str1;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int i = 0;\n    int j = str1.length() - 1;\n    while(i < j) {\n        if(vowels.find(str1[i]) == std::string::npos) {\n            result += str1[i];\n            i++;\n        }\n        else if(vowels.find(str1[j]) == std::string::npos) {\n            result += str1[j];\n            j--;\n        }\n        else {\n            result += str1[j];\n            j--;\n            i++;\n        }\n    }\n    if(i == j) {\n        result += str1[i];\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    int i = 0, j = str1.length() - 1;\n    while (i < j) {\n        if (vowels.find(str1[i]) == std::string::npos) {\n            result += str1[i];\n            i++;\n        } else if (vowels.find(str1[j]) == std::string::npos) {\n            result += str1[j];\n            j--;\n        } else {\n            result += str1[j];\n            j--;\n            i++;\n        }\n    }\n    if (i == j) {\n        result += str1[i];\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string str2 = \"\";\n    std::stack<char> s;\n    for(int i=0;i<str1.length();i++) {\n        if(vowels.find(str1[i]) != std::string::npos) {\n            s.push(str1[i]);\n        }\n    }\n    for(int i=0;i<str1.length();i++) {\n        if(vowels.find(str1[i]) != std::string::npos) {\n            str2 += s.top();\n            s.pop();\n        }\n        else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    // Write your code here\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result = \"\";\n    std::stack<char> s;\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            s.push(str1[i]);\n        }\n    }\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            result += s.top();\n            s.pop();\n        } else {\n            result += str1[i];\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (vowels.find(str1[i]) == std::string::npos) {\n            i++;\n            continue;\n        }\n        if (vowels.find(str1[j]) == std::string::npos) {\n            j--;\n            continue;\n        }\n        std::swap(str1[i], str1[j]);\n        i++;\n        j--;\n    }\n    return str1;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) == std::string::npos) {\n            str2 += str1[i];\n        }\n    }\n    int j = str2.length() - 1;\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            str1[i] = str2[j];\n            j--;\n        }\n    }\n    return str1;",
    "    std::string str2;\n    std::stack<char> st;\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]=='a'||str1[i]=='e'||str1[i]=='i'||str1[i]=='o'||str1[i]=='u'||str1[i]=='A'||str1[i]=='E'||str1[i]=='I'||str1[i]=='O'||str1[i]=='U'){\n            st.push(str1[i]);\n        }\n    }\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]=='a'||str1[i]=='e'||str1[i]=='i'||str1[i]=='o'||str1[i]=='u'||str1[i]=='A'||str1[i]=='E'||str1[i]=='I'||str1[i]=='O'||str1[i]=='U'){\n            str2+=st.top();\n            st.pop();\n        }\n        else{\n            str2+=str1[i];\n        }\n    }\n    return str2;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            str2 += str1[i];\n        }\n    }\n    std::reverse(str2.begin(), str2.end());\n    int j = 0;\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            str1[i] = str2[j];\n            j++;\n        }\n    }\n    return str1;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string result = str1;\n    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (vowels.find(str1[i]) == std::string::npos) {\n            i++;\n            continue;\n        }\n        if (vowels.find(str1[j]) == std::string::npos) {\n            j--;\n            continue;\n        }\n        std::swap(result[i], result[j]);\n        i++;\n        j--;\n    }\n    return result;",
    "    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return str1;",
    "    std::string str2;\n    std::stack<char> st;\n    for(int i=0;i<str1.length();i++) {\n        if(str1[i]=='a' || str1[i]=='e' || str1[i]=='i' || str1[i]=='o' || str1[i]=='u') {\n            st.push(str1[i]);\n        }\n    }\n    for(int i=0;i<str1.length();i++) {\n        if(str1[i]=='a' || str1[i]=='e' || str1[i]=='i' || str1[i]=='o' || str1[i]=='u') {\n            str2.push_back(st.top());\n            st.pop();\n        }\n        else {\n            str2.push_back(str1[i]);\n        }\n    }\n    return str2;",
    "    int i = 0, j = str1.length() - 1;\n    while(i < j) {\n        if(str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if(str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                std::swap(str1[i], str1[j]);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    std::string str2;\n    std::stack<char> s;\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]=='a' || str1[i]=='e' || str1[i]=='i' || str1[i]=='o' || str1[i]=='u'){\n            s.push(str1[i]);\n        }\n    }\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]=='a' || str1[i]=='e' || str1[i]=='i' || str1[i]=='o' || str1[i]=='u'){\n            str2+=s.top();\n            s.pop();\n        }\n        else{\n            str2+=str1[i];\n        }\n    }\n    return str2;",
    "    std::string str2;\n    std::stack<char> s;\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]=='a'||str1[i]=='e'||str1[i]=='i'||str1[i]=='o'||str1[i]=='u'){\n            s.push(str1[i]);\n        }\n    }\n    for(int i=0;i<str1.length();i++){\n        if(str1[i]=='a'||str1[i]=='e'||str1[i]=='i'||str1[i]=='o'||str1[i]=='u'){\n            str2+=s.top();\n            s.pop();\n        }\n        else{\n            str2+=str1[i];\n        }\n    }\n    return str2;",
    "    int n = str1.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if (str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                char temp = str1[i];\n                str1[i] = str1[j];\n                str1[j] = temp;\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    int n = str1.length();\n    int i = 0;\n    int j = n-1;\n    while(i<j) {\n        if(str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u') {\n            if(str1[j] == 'a' || str1[j] == 'e' || str1[j] == 'i' || str1[j] == 'o' || str1[j] == 'u') {\n                char temp = str1[i];\n                str1[i] = str1[j];\n                str1[j] = temp;\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return str1;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    int j = str1.length() - 1;\n    while (i < j) {\n        if (vowels.find(str1[i]) == std::string::npos) {\n            i++;\n        } else if (vowels.find(str1[j]) == std::string::npos) {\n            j--;\n        } else {\n            std::swap(str1[i], str1[j]);\n            i++;\n            j--;\n        }\n    }\n    return str1;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    int j = str1.length() - 1;\n    while(i < j) {\n        if(vowels.find(str1[i]) == std::string::npos) {\n            i++;\n        }\n        else if(vowels.find(str1[j]) == std::string::npos) {\n            j--;\n        }\n        else {\n            std::swap(str1[i], str1[j]);\n            i++;\n            j--;\n        }\n    }\n    return str1;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) == std::string::npos) {\n            str2 += str1[i];\n        }\n    }\n    for (int i = 0; i < str1.length(); i++) {\n        if (vowels.find(str1[i]) != std::string::npos) {\n            str2 += str1[i];\n        }\n    }\n    return str2;"
  ]
}