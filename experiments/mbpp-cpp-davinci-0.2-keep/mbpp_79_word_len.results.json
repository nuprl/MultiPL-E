{
  "name": "mbpp_79_word_len",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\treturn s.length()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.size()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp6irenbub: /tmp/tmp6irenbub.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif (s.length()%2==0) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp1aiq4nza: /tmp/tmp1aiq4nza.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return s.length()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length()%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpitk_2dvh: /tmp/tmpitk_2dvh.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpmyh452vq: /tmp/tmpmyh452vq.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length()%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpitk_2dvh: /tmp/tmpitk_2dvh.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\treturn s.length()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpc4i2im9s: /tmp/tmpc4i2im9s.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif (s.length() % 2 == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmp07wi3u_u: /tmp/tmp07wi3u_u.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return s.length()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif (s.length() % 2 == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmp07wi3u_u: /tmp/tmp07wi3u_u.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return (s.length()%2==0);\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpeteogxox: /tmp/tmpeteogxox.cpp:9: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpc4i2im9s: /tmp/tmpc4i2im9s.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length()%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpitk_2dvh: /tmp/tmpitk_2dvh.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return s.length()%2!=0;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return s.length()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpkguwwm3k: /tmp/tmpkguwwm3k.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if (len % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpf2n_kzcj: /tmp/tmpf2n_kzcj.cpp:15: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2 == 0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if (len % 2 == 0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpmtbkbwzt: /tmp/tmpmtbkbwzt.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2 == 0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpkcel85mn: /tmp/tmpkcel85mn.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\t// Write your code here\n\tif(s.length()%2==0)\n\t    return true;\n\telse\n\t    return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmp_bdwcx87: /tmp/tmp_bdwcx87.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if (len % 2 == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int n = s.length();\n    if(n%2 == 0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpi9fb8jzh: /tmp/tmpi9fb8jzh.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return s.length()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    // Write your code here\n    if(s.length()%2==0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if (len % 2 == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpmyh452vq: /tmp/tmpmyh452vq.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmp5pi7p3dy: /tmp/tmp5pi7p3dy.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\t// Write your code here\n\tif(s.length()%2==0)\n\t{\n\t    return true;\n\t}\n\telse\n\t{\n\t    return false;\n\t}\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpi_fjfkpv: /tmp/tmpi_fjfkpv.cpp:17: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int l = s.length();\n    if(l%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpnbvicf5k: /tmp/tmpnbvicf5k.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int n = s.length();\n    if(n%2 == 0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    // Write your code here\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmp5tc92_1b: /tmp/tmp5tc92_1b.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif (s.length() % 2 == 0) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpdm7zrjw9: /tmp/tmpdm7zrjw9.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if (len % 2 == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123684,
      "stdout": "",
      "stderr": "tmp6rdatvk1: /tmp/tmp6rdatvk1.cpp:15: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmp5pi7p3dy: /tmp/tmp5pi7p3dy.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpkguwwm3k: /tmp/tmpkguwwm3k.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\treturn (s.length()%2!=0);\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int n = s.length();\n    if(n%2==0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return s.length() % 2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int n = s.length();\n    if(n%2==0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length()%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpitk_2dvh: /tmp/tmpitk_2dvh.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\treturn s.length()%2==0;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "tmp17uqjb7l: /tmp/tmp17uqjb7l.cpp:9: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "tmpev_k9pju: /tmp/tmpev_k9pju.cpp:15: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tint n = s.length();\n\tif (n % 2 == 0) {\n\t\treturn false;\n\t}\n\telse {\n\t\treturn true;\n\t}\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\treturn s.length()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if (len % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpf2n_kzcj: /tmp/tmpf2n_kzcj.cpp:15: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif (s.length() % 2 == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmp07wi3u_u: /tmp/tmp07wi3u_u.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "tmp3g2zsedu: /tmp/tmp3g2zsedu.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if (len%2 == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length()%2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "tmpncxuqgli: /tmp/tmpncxuqgli.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2==0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length()%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpitk_2dvh: /tmp/tmpitk_2dvh.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return s.length()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2 == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\treturn s.length()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\treturn s.size()%2;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2==0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int n = s.length();\n    if(n%2==0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpkguwwm3k: /tmp/tmpkguwwm3k.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "tmp3g2zsedu: /tmp/tmp3g2zsedu.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int l = s.length();\n    if(l%2 == 0)\n        return false;\n    else\n        return true;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if (len % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpf2n_kzcj: /tmp/tmpf2n_kzcj.cpp:15: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int n = s.length();\n    if(n%2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "tmpyehooyd3: /tmp/tmpyehooyd3.cpp:15: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpkguwwm3k: /tmp/tmpkguwwm3k.cpp:13: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length() % 2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp0kl44e7n: /tmp/tmp0kl44e7n.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int len = s.length();\n    if(len%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123684,
      "stdout": "",
      "stderr": "tmp6rdatvk1: /tmp/tmp6rdatvk1.cpp:15: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return (s.length()%2==0);\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpeteogxox: /tmp/tmpeteogxox.cpp:9: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif (s.length() % 2 == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmp07wi3u_u: /tmp/tmp07wi3u_u.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    int n = s.length();\n    if (n%2 == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "tmphamfzhw8: /tmp/tmphamfzhw8.cpp:15: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length() % 2 == 0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "tmpbm680__5: /tmp/tmpbm680__5.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    return (s.length()%2==0);\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpeteogxox: /tmp/tmpeteogxox.cpp:9: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmp5pi7p3dy: /tmp/tmp5pi7p3dy.cpp:14: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if (s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1666123683,
      "stdout": "",
      "stderr": "tmpmyh452vq: /tmp/tmpmyh452vq.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.size()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmp6irenbub: /tmp/tmp6irenbub.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n    if(s.length()%2==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpiivqe33x: /tmp/tmpiivqe33x.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether the length of the word is odd or not.\nbool word_len(std::string s) {\n\tif(s.length()%2==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = word_len;\n    assert(candidate((\"Hadoop\")) == (false));\n    assert(candidate((\"great\")) == (true));\n    assert(candidate((\"structure\")) == (true));\n}\n",
      "timestamp": 1665510632,
      "stdout": "",
      "stderr": "tmpgfbvk316: /tmp/tmpgfbvk316.cpp:12: int main(): Assertion `candidate((\"Hadoop\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}