{
  "name": "mbpp_602_first_repeated_char",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the first repeated character in a given string.\nstd::optional<std::string> first_repeated_char(std::string str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = first_repeated_char;\n    assert(candidate((\"abcabc\")) == \"a\");\n    assert(candidate((\"abc\")) == std::nullopt);\n    assert(candidate((\"123123\")) == \"1\");\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto i = 0; i < str1.length(); i++) {\n        if (map.find(str1[i]) != map.end()) {\n            return str1[i];\n        }\n        map[str1[i]] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::optional<std::string>{std::string{ch}};\n        }\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_map;\n  for (auto c : str1) {\n    if (char_map.find(c) == char_map.end()) {\n      char_map[c] = 1;\n    } else {\n      return std::optional<std::string>{std::string(1, c)};\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::string(1, c);\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto& c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (auto ch : str1) {\n        if (set1.find(ch) != set1.end()) {\n            return std::string(1, ch);\n        }\n        set1.insert(ch);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return {std::string(1, c)};\n        }\n        map[c] = 1;\n    }\n    return {};",
    "    std::unordered_map<char, int> map1;\n    for (auto i : str1) {\n        if (map1.find(i) == map1.end()) {\n            map1[i] = 1;\n        } else {\n            return std::make_optional(std::string(1, i));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_map;\n  for (auto c : str1) {\n    if (char_map.find(c) != char_map.end()) {\n      return std::string(1, c);\n    }\n    char_map[c] = 1;\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return ch;\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_map;\n  for (auto c : str1) {\n    if (char_map.find(c) == char_map.end()) {\n      char_map[c] = 1;\n    } else {\n      return std::make_optional(std::string(1, c));\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::string(1, c);\n        } else {\n            map[c] = 1;\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::string(1, ch);\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto &c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (char c : str1) {\n        if (set1.find(c) != set1.end()) {\n            return std::string(1, c);\n        }\n        set1.insert(c);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (char c : str1) {\n        if (char_count.find(c) == char_count.end()) {\n            char_count[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] > 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::optional<std::string>{std::string{ch}};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> my_map;\n    for (auto c : str1) {\n        if (my_map.find(c) != my_map.end()) {\n            return std::string(1, c);\n        }\n        my_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto &c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> char_set;\n    for (auto ch : str1) {\n        if (char_set.find(ch) != char_set.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_set.insert(ch);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map.insert(std::make_pair(ch, 1));\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto &c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (char c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto &c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::string(1, c);\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (char ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> char_set;\n    for (auto c : str1) {\n        if (char_set.find(c) != char_set.end()) {\n            return std::string(1, c);\n        }\n        char_set.insert(c);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (int i = 0; i < str1.length(); i++) {\n        if (map.find(str1[i]) == map.end()) {\n            map[str1[i]] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, str1[i]));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] > 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto &c : str1) {\n        if (char_count.find(c) != char_count.end()) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n        char_count[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (auto ch : str1) {\n        if (set1.find(ch) != set1.end()) {\n            return std::string(1, ch);\n        }\n        set1.insert(ch);\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (int i = 0; i < str1.length(); i++) {\n        if (map.find(str1[i]) != map.end()) {\n            return std::make_optional(std::string(1, str1[i]));\n        } else {\n            map[str1[i]] = 1;\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (auto ch : str1) {\n        if (set1.find(ch) != set1.end()) {\n            return std::string(1, ch);\n        }\n        set1.insert(ch);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] > 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>{std::string{c}};\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto &c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::string(1, c);\n        } else {\n            char_map[c] = 1;\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        if (char_count.find(ch) == char_count.end()) {\n            char_count[ch] = 1;\n        } else {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::string(1, c);\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::string(1, ch);\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n        char_map[ch] = 1;\n    }\n    return std::optional<std::string>{};",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for(auto c: str1) {\n        char_count[c]++;\n    }\n    for(auto c: str1) {\n        if(char_count[c] > 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::string(1, c);\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto i : str1) {\n        if (map.find(i) != map.end()) {\n            return std::make_optional(std::string(1, i));\n        }\n        map[i] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::string(1, ch);\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for(auto c : str1) {\n        if(map.find(c) != map.end()) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_count;\n  for (auto c : str1) {\n    char_count[c]++;\n  }\n  for (auto c : str1) {\n    if (char_count[c] > 1) {\n      return std::string(1, c);\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto i : str1) {\n        if (map.find(i) == map.end()) {\n            map[i] = 1;\n        } else {\n            return std::make_optional(std::string(1, i));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] > 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::string(1, c);\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (int i = 0; i < str1.length(); i++) {\n        if (map.find(str1[i]) == map.end()) {\n            map[str1[i]] = 1;\n        } else {\n            return str1[i];\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (char c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set;\n    for (auto ch : str1) {\n        if (set.find(ch) != set.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        set.insert(ch);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto &c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::string(1, ch);\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for(auto i : str1) {\n        if(map.find(i) != map.end()) {\n            return std::make_optional(std::string(1, i));\n        }\n        map[i] = 1;\n    }\n    return std::nullopt;",
    "  std::string str;\n  std::unordered_map<char, int> map;\n  for (auto c : str1) {\n    if (map.find(c) == map.end()) {\n      map[c] = 1;\n    } else {\n      return std::optional<std::string>{std::string(1, c)};\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::string(1, c);\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (char c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> hash_map;\n    for (auto ch : str1) {\n        if (hash_map.find(ch) == hash_map.end()) {\n            hash_map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for(auto ch : str1) {\n        if(char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (auto ch : str1) {\n        if (set1.find(ch) == set1.end()) {\n            set1.insert(ch);\n        } else {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (char c : str1) {\n        if (set1.find(c) != set1.end()) {\n            return std::string(1, c);\n        } else {\n            set1.insert(c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> count;\n    for (auto c : str1) {\n        count[c]++;\n    }\n    for (auto c : str1) {\n        if (count[c] > 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto &c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> count;\n    for (auto c : str1) {\n        count[c]++;\n    }\n    for (auto c : str1) {\n        if (count[c] > 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::string(1, ch);\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::optional<std::string>{std::string{ch}};\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for(auto i : str1) {\n        if(char_map.find(i) == char_map.end()) {\n            char_map[i] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, i)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (auto ch : str1) {\n        if (set1.find(ch) != set1.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        set1.insert(ch);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto &ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::optional<std::string>{std::string{ch}};\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for(auto c: str1) {\n        if(char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> map;\n  for (auto c : str1) {\n    if (map.find(c) != map.end()) {\n      return std::make_optional(std::string(1, c));\n    }\n    map[c] = 1;\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> hash_map;\n    for (auto c : str1) {\n        if (hash_map.find(c) == hash_map.end()) {\n            hash_map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (char c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        if (char_count.find(c) == char_count.end()) {\n            char_count[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto& c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] > 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for(int i = 0; i < str1.size(); i++) {\n        if(map.find(str1[i]) == map.end()) {\n            map[str1[i]] = i;\n        } else {\n            return std::optional<std::string>{std::string(1, str1[i])};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (int i = 0; i < str1.length(); i++) {\n        if (map.find(str1[i]) == map.end()) {\n            map[str1[i]] = 1;\n        } else {\n            return std::string(1, str1[i]);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            char_map[c] += 1;\n        }\n    }\n    for (auto c : str1) {\n        if (char_map[c] > 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n        map[c] = 1;\n    }\n    return std::optional<std::string>{};",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (int i = 0; i < str1.size(); i++) {\n        if (map.find(str1[i]) == map.end()) {\n            map[str1[i]] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, str1[i]));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (char c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (int i = 0; i < str1.length(); i++) {\n        if (char_map.find(str1[i]) != char_map.end()) {\n            return std::string(1, str1[i]);\n        }\n        char_map[str1[i]] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto i : str1) {\n        if (map.find(i) != map.end()) {\n            return std::optional<std::string>{std::string(1, i)};\n        }\n        map[i] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (auto ch : str1) {\n        if (set1.find(ch) != set1.end()) {\n            return std::optional<std::string>{std::string{ch}};\n        } else {\n            set1.insert(ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>{std::string{c}};\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (int i = 0; i < str1.length(); i++) {\n        if (map.find(str1[i]) == map.end()) {\n            map[str1[i]] = 1;\n        } else {\n            return str1[i];\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] > 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> s;\n    for (char c : str1) {\n        if (s.find(c) != s.end()) {\n            return std::string(1, c);\n        }\n        s.insert(c);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::optional<std::string>{std::string{c}};\n        }\n        map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] > 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set;\n    for (auto c : str1) {\n        if (set.find(c) != set.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        set.insert(c);\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (auto c : str1) {\n        if (set1.find(c) != set1.end()) {\n            return std::string(1, c);\n        }\n        set1.insert(c);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::optional<std::string>{std::string(1, c)};\n        } else {\n            map[c] = 1;\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (char ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::string(1, c);\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for(auto i : str1) {\n        if(map.find(i) != map.end()) {\n            return std::optional<std::string>(std::string(1, i));\n        }\n        map[i] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> umap;\n    for (int i = 0; i < str1.length(); i++) {\n        if (umap.find(str1[i]) == umap.end()) {\n            umap[str1[i]] = 1;\n        } else {\n            return std::make_optional(std::string(1, str1[i]));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::make_optional(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto& ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (int i = 0; i < str1.size(); i++) {\n        if (map.find(str1[i]) == map.end()) {\n            map[str1[i]] = 1;\n        } else {\n            return std::string(1, str1[i]);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto i : str1) {\n        if (map.find(i) == map.end()) {\n            map[i] = 1;\n        } else {\n            return std::make_optional(std::string(1, i));\n        }\n    }\n    return std::nullopt;",
    "    // std::string str1 = \"abcdabcd\";\n    std::string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str2.find(str1[i]) == std::string::npos) {\n            str2 += str1[i];\n        } else {\n            return std::make_optional(std::string(1, str1[i]));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::optional<std::string>();",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto &c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;"
  ]
}