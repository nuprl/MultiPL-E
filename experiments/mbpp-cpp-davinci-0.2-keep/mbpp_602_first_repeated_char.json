{
  "name": "mbpp_602_first_repeated_char",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the first repeated character in a given string.\nstd::optional<std::string> first_repeated_char(std::string str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = first_repeated_char;\n    assert(candidate((\"abcabc\")) == \"a\");\n    assert(candidate((\"abc\")) == std::nullopt);\n    assert(candidate((\"123123\")) == \"1\");\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto i = 0; i < str1.length(); i++) {\n        if (map.find(str1[i]) != map.end()) {\n            return str1[i];\n        }\n        map[str1[i]] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) == map.end()) {\n            map[ch] = 1;\n        } else {\n            return std::optional<std::string>{std::string{ch}};\n        }\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_map;\n  for (auto c : str1) {\n    if (char_map.find(c) == char_map.end()) {\n      char_map[c] = 1;\n    } else {\n      return std::optional<std::string>{std::string(1, c)};\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::string(1, c);\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto& c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_set<char> set1;\n    for (auto ch : str1) {\n        if (set1.find(ch) != set1.end()) {\n            return std::string(1, ch);\n        }\n        set1.insert(ch);\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return {std::string(1, c)};\n        }\n        map[c] = 1;\n    }\n    return {};",
    "    std::unordered_map<char, int> map1;\n    for (auto i : str1) {\n        if (map1.find(i) == map1.end()) {\n            map1[i] = 1;\n        } else {\n            return std::make_optional(std::string(1, i));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n        char_map[c] = 1;\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_map;\n  for (auto c : str1) {\n    if (char_map.find(c) != char_map.end()) {\n      return std::string(1, c);\n    }\n    char_map[c] = 1;\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return ch;\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_map;\n  for (auto c : str1) {\n    if (char_map.find(c) == char_map.end()) {\n      char_map[c] = 1;\n    } else {\n      return std::make_optional(std::string(1, c));\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::make_optional(std::string(1, ch));\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        if (map.find(ch) != map.end()) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n        map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) != map.end()) {\n            return std::string(1, c);\n        } else {\n            map[c] = 1;\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) != char_map.end()) {\n            return std::string(1, ch);\n        }\n        char_map[ch] = 1;\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto &c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;"
  ]
}