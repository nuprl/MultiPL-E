{
  "name": "mbpp_780_find_combinations",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nstd::vector<long> find_combinations(std::vector<long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_combinations;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(6, 10)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(8, 11), (std::tuple<long, long>)std::make_tuple(7, 5), (std::tuple<long, long>)std::make_tuple(8, 14), (std::tuple<long, long>)std::make_tuple(11, 8), (std::tuple<long, long>)std::make_tuple(12, 17), (std::tuple<long, long>)std::make_tuple(11, 11)})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(6, 2), (std::tuple<long, long>)std::make_tuple(7, 11)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(10, 13), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(10, 16), (std::tuple<long, long>)std::make_tuple(13, 10), (std::tuple<long, long>)std::make_tuple(14, 19), (std::tuple<long, long>)std::make_tuple(13, 13)})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(7, 3), (std::tuple<long, long>)std::make_tuple(8, 12)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(12, 15), (std::tuple<long, long>)std::make_tuple(11, 9), (std::tuple<long, long>)std::make_tuple(12, 18), (std::tuple<long, long>)std::make_tuple(15, 12), (std::tuple<long, long>)std::make_tuple(16, 21), (std::tuple<long, long>)std::make_tuple(15, 15)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); ++it) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); ++it2) {\n            std::vector<long>::iterator it3;\n            for (it3 = it2 + 1; it3 != test_list.end(); ++it3) {\n                if (*it + *it2 + *it3 == 0) {\n                    result.push_back(*it);\n                    result.push_back(*it2);\n                    result.push_back(*it3);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    for (auto i : test_list) {\n        if (sum - i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        std::cout << *it << \" \";\n    }\n    std::cout << std::endl;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size() - 1; i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    long half_sum = sum / 2;\n    std::vector<std::vector<long>> dp(test_list.size() + 1, std::vector<long>(half_sum + 1, 0));\n    for (long i = 0; i <= test_list.size(); i++) {\n        dp[i][0] = 1;\n    }\n    for (long i = 1; i <= test_list.size(); i++) {\n        for (long j = 1; j <= half_sum; j++) {\n            if (test_list[i - 1] <= j) {\n                dp[i][j] = dp[i - 1][j - test_list[i - 1]] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    result.push_back(dp[test_list.size()][half_sum]);\n    result.push_back(dp[test_list.size()][sum - half_sum]);\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  std::vector<long> temp;\n  std::vector<long> temp_result;\n  std::vector<long> temp_result_2;\n  std::vector<long> temp_result_3;\n  std::vector<long> temp_result_4;\n  std::vector<long> temp_result_5;\n  std::vector<long> temp_result_6;\n  std::vector<long> temp_result_7;\n  std::vector<long> temp_result_8;\n  std::vector<long> temp_result_9;\n  std::vector<long> temp_result_10;\n  std::vector<long> temp_result_11;\n  std::vector<long> temp_result_12;\n  std::vector<long> temp_result_13;\n  std::vector<long> temp_result_14;\n  std::vector<long> temp_result_15;\n  std::vector<long> temp_result_16;\n  std::vector<long> temp_result_17;\n  std::vector<long> temp_result_18;\n  std::vector<long> temp_result_19;\n  std::vector<long> temp_result_20;\n  std::vector<long> temp_result_21;\n  std::vector<long> temp_result_22;\n  std::vector<long> temp_result_23;\n  std::vector<long> temp_result_24;\n  std::vector<long> temp_result_25;\n  std::vector<long> temp_result_26;\n  std::vector<long> temp_result_27;\n  std::vector<long> temp_result_28;\n  std::vector<long> temp_result_29;\n  std::vector<long> temp_result_30;\n  std::vector<long> temp_result_31;\n  std::vector<long> temp_result_32;\n  std::vector<long> temp_result_33;\n  std::vector<long> temp_result_34;\n  std::vector<long> temp_result_35;\n  std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(test_list[k]);\n                    result.push_back(temp);\n                    temp.clear();\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<std::vector<long>> dp(test_list.size() + 1, std::vector<long>(half_sum + 1, 0));\n    for (int i = 0; i <= test_list.size(); i++) {\n        dp[i][0] = 1;\n    }\n    for (int i = 1; i <= test_list.size(); i++) {\n        for (int j = 1; j <= half_sum; j++) {\n            if (test_list[i - 1] <= j) {\n                dp[i][j] = dp[i - 1][j - test_list[i - 1]] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    result.push_back(dp[test_list.size()][half_sum]);\n    result.push_back(dp[test_list.size()][sum - half_sum]);\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(auto i = 0; i < test_list.size(); i++) {\n        for(auto j = i + 1; j < test_list.size(); j++) {\n            for(auto k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for(auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<long> temp_list;\n    for(auto i : test_list) {\n        if(i <= half_sum) {\n            temp_list.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_2;\n    for(auto i : temp_list) {\n        if(i == half_sum) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_2.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_3;\n    for(auto i : temp_list_2) {\n        if(i == half_sum - 1) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_3.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_4;\n    for(auto i : temp_list_3) {\n        if(i == half_sum - 2) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_4.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_5;\n    for(auto i : temp_list_4) {\n        if(i == half_sum - 3) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_5.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_6;\n    for(auto i : temp_list_5) {\n        if(i == half_sum - 4) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_6.push_back(i);\n        }\n    }\n    std::vector<",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, long> map;\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if (map.find(sum) == map.end()) {\n                map[sum] = 1;\n            } else {\n                map[sum]++;\n            }\n        }\n    }\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if (map.find(sum) != map.end()) {\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "  std::vector<long> result;\n  std::sort(test_list.begin(), test_list.end());\n  long sum = 0;\n  for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n    sum += *it;\n  }\n  long half_sum = sum / 2;\n  std::vector<long> temp;\n  for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n    if (*it > half_sum) {\n      break;\n    }\n    temp.push_back(*it);\n  }\n  std::vector<long> temp_result;\n  for (auto it = temp.begin(); it != temp.end(); ++it) {\n    long temp_sum = *it;\n    temp_result.push_back(temp_sum);\n    for (auto it2 = it + 1; it2 != temp.end(); ++it2) {\n      temp_sum += *it2;\n      temp_result.push_back(temp_sum);\n    }\n  }\n  std::sort(temp_result.begin(), temp_result.end());\n  for (auto it = temp_result.begin(); it != temp_result.end(); ++it) {\n    if (*it == half_sum) {\n      result.push_back(*it);\n      break;\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, std::vector<std::vector<long>>> map;\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if(map.find(sum) == map.end()) {\n                std::vector<std::vector<long>> temp;\n                temp.push_back({test_list[i], test_list[j]});\n                map[sum] = temp;\n            } else {\n                map[sum].push_back({test_list[i], test_list[j]});\n            }\n        }\n    }\n    for(auto it = map.begin(); it != map.end(); it++) {\n        if(it->second.size() > 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            for (long k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for(int i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for(int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            long sum = 0;\n            for(int k = 0; k < temp.size(); k++) {\n                sum += temp[k];\n            }\n            temp_result.push_back(sum);\n            temp.pop_back();\n        }\n        temp.pop_back();\n    }\n    std::sort(temp_result.begin(), temp_result.end());\n    for(int i = 0; i < temp_result.size(); i++) {\n        if(i == 0) {\n            result.push_back(temp_result[i]);\n        } else {\n            if(temp_result[i] != temp_result[i - 1]) {\n                result.push_back(temp_result[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::map<long, std::vector<long>> map_of_sums;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if(map_of_sums.find(sum) == map_of_sums.end()) {\n                map_of_sums[sum] = {test_list[i], test_list[j]};\n            } else {\n                map_of_sums[sum].push_back(test_list[i]);\n                map_of_sums[sum].push_back(test_list[j]);\n            }\n        }\n    }\n    for(auto it = map_of_sums.begin(); it != map_of_sums.end(); it++) {\n        std::vector<long> temp = it->second;\n        std::sort(temp.begin(), temp.end());\n        if(std::find(result.begin(), result.end(), temp[0]) == result.end()) {\n            result.push_back(temp[0]);\n        }\n        if(std::find(result.begin(), result.end(), temp[1]) == result.end()) {\n            result.push_back(temp[1]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            long sum = *it + *it2;\n            if (std::binary_search(test_list.begin(), test_list.end(), sum)) {\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto &i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<long> temp_list;\n    for (auto &i : test_list) {\n        if (i <= half_sum) {\n            temp_list.push_back(i);\n        }\n    }\n    for (int i = 0; i < temp_list.size(); i++) {\n        for (int j = i + 1; j < temp_list.size(); j++) {\n            if (temp_list[i] + temp_list[j] == half_sum) {\n                result.push_back(temp_list[i]);\n                result.push_back(temp_list[j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<std::vector<long>> dp(test_list.size() + 1, std::vector<long>(half_sum + 1, 0));\n    for (int i = 0; i <= test_list.size(); i++) {\n        dp[i][0] = 1;\n    }\n    for (int i = 1; i <= test_list.size(); i++) {\n        for (int j = 1; j <= half_sum; j++) {\n            if (test_list[i - 1] <= j) {\n                dp[i][j] = dp[i - 1][j - test_list[i - 1]] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    result.push_back(dp[test_list.size()][half_sum]);\n    result.push_back(dp[test_list.size()][sum - half_sum]);\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result_list;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<long> temp_list;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] == half_sum) {\n            result_list.push_back(test_list[i]);\n            break;\n        }\n        else if (test_list[i] < half_sum) {\n            temp_list.push_back(test_list[i]);\n        }\n        else {\n            break;\n        }\n    }\n    std::vector<long> temp_result_list;\n    for (int i = 0; i < temp_list.size(); i++) {\n        for (int j = i + 1; j < temp_list.size(); j++) {\n            if (temp_list[i] + temp_list[j] == half_sum) {\n                temp_result_list.push_back(temp_list[i]);\n                temp_result_list.push_back(temp_list[j]);\n                break;\n            }\n        }\n    }\n    if (temp_result_list.size() > 0) {\n        result_list.push_back(temp_result_list[0]);\n        result_list.push_back(temp_result_list[1]);\n    }\n    return result_list;",
    "    std::vector<long> result;\n    std::unordered_map<long, std::vector<std::pair<long, long>>> hash_map;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            hash_map[test_list[i] + test_list[j]].push_back(std::make_pair(test_list[i], test_list[j]));\n        }\n    }\n    for (auto it = hash_map.begin(); it != hash_map.end(); it++) {\n        if (it->second.size() > 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            for(long k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        sum += *it;\n    }\n    long half_sum = sum / 2;\n    std::vector<long>::iterator it = test_list.begin();\n    while (it != test_list.end()) {\n        if (*it == half_sum) {\n            result.push_back(*it);\n            break;\n        }\n        else if (*it > half_sum) {\n            break;\n        }\n        else {\n            result.push_back(*it);\n            half_sum -= *it;\n        }\n        it++;\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        sum += *it;\n    }\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(sum - *it == *it) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> test_list_copy = test_list;\n    std::sort(test_list_copy.begin(), test_list_copy.end());\n    for(int i = 0; i < test_list_copy.size(); i++) {\n        for(int j = i + 1; j < test_list_copy.size(); j++) {\n            long sum = test_list_copy[i] + test_list_copy[j];\n            if(std::find(test_list_copy.begin(), test_list_copy.end(), sum) != test_list_copy.end()) {\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it == 0) {\n            continue;\n        }\n        else if(*it == 1) {\n            result.push_back(1);\n        }\n        else {\n            result.push_back(*it);\n            result.push_back(*it - 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            for(long k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            temp.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(i == 0 || temp[i] != temp[i - 1]) {\n            result.push_back(temp[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size() - 1; i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] + test_list[j] == 0) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp_list;\n    std::vector<long> temp_list_2;\n    std::vector<long> temp_list_3;\n    std::vector<long> temp_list_4;\n    std::vector<long> temp_list_5;\n    std::vector<long> temp_list_6;\n    std::vector<long> temp_list_7;\n    std::vector<long> temp_list_8;\n    std::vector<long> temp_list_9;\n    std::vector<long> temp_list_10;\n    std::vector<long> temp_list_11;\n    std::vector<long> temp_list_12;\n    std::vector<long> temp_list_13;\n    std::vector<long> temp_list_14;\n    std::vector<long> temp_list_15;\n    std::vector<long> temp_list_16;\n    std::vector<long> temp_list_17;\n    std::vector<long> temp_list_18;\n    std::vector<long> temp_list_19;\n    std::vector<long> temp_list_20;\n    std::vector<long> temp_list_21;\n    std::vector<long> temp_list_22;\n    std::vector<long> temp_list_23;\n    std::vector<long> temp_list_24;\n    std::vector<long> temp_list_25;\n    std::vector<long> temp_list_26;\n    std::vector<long> temp_list_27;\n    std::vector<long> temp_list_28;\n    std::vector<long> temp_list_29;\n    std::vector<long> temp_list_30;\n    std::vector<long> temp_list_31;\n    std::vector<long> temp_list_32;\n    std::vector<long> temp_list_33;\n    std::vector<long> temp_list_34;\n    std::vector<long> temp_list_35;\n    std::vector<long> temp_list_36;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            for(long k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = *it;\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            result.push_back(test_list[i]+test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it != 0) {\n            result.push_back(*it);\n            break;\n        }\n    }\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it != 0) {\n            result.push_back(*it);\n            break;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), itr));\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for(int i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for(int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            temp_result.push_back(std::accumulate(temp.begin(), temp.end(), 0));\n            temp.pop_back();\n        }\n        temp.pop_back();\n    }\n    std::sort(temp_result.begin(), temp_result.end());\n    for(int i = 0; i < temp_result.size(); i++) {\n        if(i == 0) {\n            result.push_back(temp_result[i]);\n        } else {\n            if(temp_result[i] != temp_result[i - 1]) {\n                result.push_back(temp_result[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), itr));\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::map<long, long> test_map;\n    for(long i = 0; i < test_list.size(); i++) {\n        test_map[test_list[i]] = i;\n    }\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if(test_map.find(sum) != test_map.end()) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, std::vector<std::vector<long>>> map;\n    for(int i = 0; i < test_list.size(); i++) {\n        long sum = test_list[i];\n        std::vector<long> temp;\n        temp.push_back(test_list[i]);\n        map[sum] = temp;\n        for(int j = i + 1; j < test_list.size(); j++) {\n            sum += test_list[j];\n            temp.push_back(test_list[j]);\n            map[sum] = temp;\n        }\n    }\n    for(auto it = map.begin(); it != map.end(); it++) {\n        result.push_back(it->first);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> combination;\n    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        combination.push_back(test_list[i]);\n        combinations.push_back(combination);\n        combination.clear();\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            combination.push_back(test_list[i]);\n            combination.push_back(test_list[j]);\n            combinations.push_back(combination);\n            combination.clear();\n        }\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            for (long k = j + 1; k < test_list.size(); k++) {\n                combination.push_back(test_list[i]);\n                combination.push_back(test_list[j]);\n                combination.push_back(test_list[k]);\n                combinations.push_back(combination);\n                combination.clear();\n            }\n        }\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            for (long k = j + 1; k < test_list.size(); k++) {\n                for (long l = k + 1; l < test_list.size(); l++) {\n                    combination.push_back(test_list[i]);\n                    combination.push_back(test_list[j]);\n                    combination.push_back(test_list[k]);\n                    combination.push_back(test_list[l]);\n                    combinations.push_back(combination);\n                    combination.clear();",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;\n    std::vector<long>::iterator it38",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            for(int k=j+1; k<test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> combinations;\n    std::map<long, std::vector<std::vector<long>>> sums;\n    for (long i = 0; i < test_list.size(); i++) {\n        long sum = 0;\n        for (long j = i; j < test_list.size(); j++) {\n            sum += test_list[j];\n            sums[sum].push_back({i, j});\n        }\n    }\n    for (auto it = sums.begin(); it != sums.end(); it++) {\n        if (it->second.size() > 1) {\n            for (long i = 0; i < it->second.size(); i++) {\n                for (long j = i + 1; j < it->second.size(); j++) {\n                    if (it->second[i][0] < it->second[j][0] && it->second[i][1] < it->second[j][0]) {\n                        combinations.push_back(it->first);\n                    }\n                }\n            }\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    for(it = test_list.begin(); it != test_list.end(); ++it) {\n        for(it2 = test_list.begin(); it2 != test_list.end(); ++it2) {\n            if(it != it2) {\n                result.push_back(*it + *it2);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr = test_list.begin();\n    for(; itr != test_list.end(); ++itr) {\n        if(*itr == 0) {\n            result.push_back(0);\n        }\n        else if(*itr == 1) {\n            result.push_back(1);\n        }\n        else {\n            result.push_back(1);\n            result.push_back(*itr);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "\tstd::vector<long> result;\n\tstd::sort(test_list.begin(), test_list.end());\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\tfor (int k = j + 1; k < test_list.size(); k++) {\n\t\t\t\tif (test_list[i] + test_list[j] + test_list[k] == 0) {\n\t\t\t\t\tresult.push_back(test_list[i]);\n\t\t\t\t\tresult.push_back(test_list[j]);\n\t\t\t\t\tresult.push_back(test_list[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    std::vector<long>::iterator it2;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        for(it1 = test_list.begin(); it1 != test_list.end(); it1++) {\n            for(it2 = test_list.begin(); it2 != test_list.end(); it2++) {\n                if(it != it1 && it != it2 && it1 != it2) {\n                    temp.push_back(*it);\n                    temp.push_back(*it1);\n                    temp.push_back(*it2);\n                    std::sort(temp.begin(), temp.end());\n                    if(std::find(result.begin(), result.end(), temp[0] + temp[1] + temp[2]) == result.end()) {\n                        result.push_back(temp[0] + temp[1] + temp[2]);\n                    }\n                    temp.clear();\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    long sum = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for(long i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for(long j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            for(long k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                for(long l = k + 1; l < test_list.size(); l++) {\n                    temp.push_back(test_list[l]);\n                    for(long m = l + 1; m < test_list.size(); m++) {\n                        temp.push_back(test_list[m]);\n                        for(long n = m + 1; n < test_list.size(); n++) {\n                            temp.push_back(test_list[n]);\n                            for(long o = n + 1; o < test_list.size(); o++) {\n                                temp.push_back(test_list[o]);\n                                for(long p = o + 1; p < test_list.size(); p++) {\n                                    temp.push_back(test_list[p]);\n                                    for(long q = p + 1; q < test_list.size(); q++) {\n                                        temp.push_back(test_list[q]);\n                                        for(long r = q + 1; r < test_list.size(); r++) {\n                                            temp.push_back(test_list[r]);\n                                            for(long s = r + 1; s < test_list.size(); s++) {\n                                                temp.push_back(test_list[s]);\n                                                for(long t = s + 1; t < test_list.size(); t++) {\n                                                    temp.push_",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_sum;\n    for(int i=0;i<test_list.size();i++) {\n        for(int j=i+1;j<test_list.size();j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_sum.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    result.push_back(temp_sum.size());\n    for(int i=0;i<temp_sum.size();i++) {\n        result.push_back(temp_sum[i]);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    long temp_sum = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        temp_sum += test_list[i];\n        temp_result.push_back(temp_sum);\n        temp_result_2.push_back(temp_sum);\n        temp_result_3.push_back(temp_sum);\n    }\n    for(int i = 0; i < temp_result.size(); i++) {\n        for(int j = i+1; j < temp_result.size(); j++) {\n            temp_result[j] += temp_result[i];\n        }\n    }\n    for(int i = 0; i < temp_result_2.size(); i++) {\n        for(int j = i+1; j < temp_result_2.size(); j++) {\n            temp_result_2[j] += temp_result_2[i];\n        }\n    }\n    for(int i = 0; i < temp_result_3.size(); i++) {\n        for(int j = i+1; j < temp_result_3.size(); j++) {\n            temp_result_3[j] += temp_result_3[i];\n        }\n    }\n    for(int i = 0; i < temp_result.size(); i++) {\n        for(int j = 0; j < temp_result_2.size(); j++) {\n            for(int k = 0; k < temp_result_3.size(); k++) {\n                result.push_back(temp_result[i] + temp_result_2[j] + temp_result_3[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, std::vector<std::vector<long>>> map;\n    for (auto i = 0; i < test_list.size(); i++) {\n        std::vector<std::vector<long>> temp_list;\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            std::vector<long> temp;\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_list.push_back(temp);\n        }\n        map[test_list[i]] = temp_list;\n    }\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            if (map.find(test_list[i] + test_list[j]) != map.end()) {\n                for (auto k = 0; k < map[test_list[i] + test_list[j]].size(); k++) {\n                    std::vector<long> temp;\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(map[test_list[i] + test_list[j]][k][0]);\n                    temp.push_back(map[test_list[i] + test_list[j]][k][1]);\n                    result.push_back(temp[0]);\n                    result.push_back(temp[1]);\n                    result.push_back(temp[2]);\n                    result.push_back(temp[3]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); ++it) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); ++it2) {\n            if (*it + *it2 == 0) {\n                result.push_back(*it);\n                result.push_back(*it2);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = 0; i < test_list.size(); ++i) {\n        for (auto j = i+1; j < test_list.size(); ++j) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(test_list[k]);\n                    result.push_back(temp);\n                    temp.clear();\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for(auto i: test_list) {\n        sum += i;\n    }\n    long half_sum = sum/2;\n    std::vector<long> temp;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i] <= half_sum) {\n            temp.push_back(test_list[i]);\n            half_sum -= test_list[i];\n        }\n    }\n    if(temp.size() == 0) {\n        return result;\n    }\n    result.push_back(temp.size());\n    for(auto i: temp) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for(auto i: test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<std::vector<long>> dp(test_list.size() + 1, std::vector<long>(half_sum + 1, 0));\n    for(int i = 0; i <= test_list.size(); i++) {\n        dp[i][0] = 1;\n    }\n    for(int i = 1; i <= test_list.size(); i++) {\n        for(int j = 1; j <= half_sum; j++) {\n            if(test_list[i - 1] <= j) {\n                dp[i][j] = dp[i - 1][j - test_list[i - 1]] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    result.push_back(dp[test_list.size()][half_sum]);\n    result.push_back(dp[test_list.size()][sum - half_sum]);\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            sum += test_list[i];\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::map<long, std::vector<std::vector<long>>> map_of_sums;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            std::vector<long> temp_list;\n            temp_list.push_back(test_list[i]);\n            temp_list.push_back(test_list[j]);\n            if (map_of_sums.find(sum) == map_of_sums.end()) {\n                std::vector<std::vector<long>> temp_vector;\n                temp_vector.push_back(temp_list);\n                map_of_sums[sum] = temp_vector;\n            } else {\n                map_of_sums[sum].push_back(temp_list);\n            }\n        }\n    }\n    for (auto it = map_of_sums.begin(); it != map_of_sums.end(); it++) {\n        std::vector<std::vector<long>> temp_vector = it->second;\n        for (int i = 0; i < temp_vector.size(); i++) {\n            for (int j = i + 1; j < temp_vector.size(); j++) {\n                long sum = temp_vector[i][0] + temp_vector[i][1] + temp_vector[j][0] + temp_vector[j][1];\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for (auto it2 = it; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] == half_sum) {\n            result.push_back(test_list[i]);\n        }\n        else if (test_list[i] < half_sum) {\n            long temp = half_sum - test_list[i];\n            if (std::binary_search(test_list.begin(), test_list.end(), temp)) {\n                result.push_back(test_list[i]);\n                result.push_back(temp);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for(std::vector<long>::iterator it2 = it; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto& i : test_list) {\n        sum += i;\n    }\n    for (auto& i : test_list) {\n        if (i == sum - i) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (auto i = 0; i < temp.size(); i++) {\n        if (i == 0) {\n            result.push_back(temp[i]);\n        } else {\n            if (temp[i] != temp[i - 1]) {\n                result.push_back(temp[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = test_list.begin();\n    std::vector<long>::iterator it_end = test_list.end();\n    for(; it != it_end; ++it) {\n        std::vector<long>::iterator it_next = it + 1;\n        for(; it_next != it_end; ++it_next) {\n            std::vector<long>::iterator it_next_next = it_next + 1;\n            for(; it_next_next != it_end; ++it_next_next) {\n                if(*it + *it_next + *it_next_next == 0) {\n                    result.push_back(*it);\n                    result.push_back(*it_next);\n                    result.push_back(*it_next_next);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result.push_back(test_list[i] + test_list[j]);\n            result.push_back(temp);\n            result.push_back(temp_result);\n        }\n    }\n    return result;",
    "    std::vector<long> result_list;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result_list.push_back(test_list[i]);\n                    result_list.push_back(test_list[j]);\n                    result_list.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result_list;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> temp;\n    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for (long j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            for (long k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                for (long l = k + 1; l < test_list.size(); l++) {\n                    temp.push_back(test_list[l]);\n                    combinations.push_back(temp);\n                    temp.pop_back();\n                }\n                temp.pop_back();\n            }\n            temp.pop_back();\n        }\n        temp.pop_back();\n    }\n    for (long i = 0; i < combinations.size(); i++) {\n        long temp_sum = 0;\n        for (long j = 0; j < combinations[i].size(); j++) {\n            temp_sum += combinations[i][j];\n        }\n        if (temp_sum == sum) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp_list;\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n        temp_list.push_back(test_list[i]);\n        if (sum == 0) {\n            result.push_back(temp_list.size());\n        }\n        if (sum < 0) {\n            sum = 0;\n            temp_list.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long> temp;\n    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n        temp.push_back(test_list[i]);\n        if (sum == 0) {\n            result.push_back(temp.size());\n        }\n        for (long j = i + 1; j < test_list.size(); j++) {\n            sum += test_list[j];\n            temp.push_back(test_list[j]);\n            if (sum == 0) {\n                result.push_back(temp.size());\n            }\n        }\n        sum = 0;\n        temp.clear();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] + test_list[j] == 0) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int i = 0;\n    int j = test_list.size() - 1;\n    while(i < j) {\n        if(test_list[i] + test_list[j] == 0) {\n            result.push_back(test_list[i]);\n            result.push_back(test_list[j]);\n            i++;\n            j--;\n        } else if(test_list[i] + test_list[j] > 0) {\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::map<long, std::vector<std::vector<long>>> map_of_sums;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if (map_of_sums.find(sum) == map_of_sums.end()) {\n                std::vector<std::vector<long>> temp_list;\n                temp_list.push_back({test_list[i], test_list[j]});\n                map_of_sums[sum] = temp_list;\n            } else {\n                map_of_sums[sum].push_back({test_list[i], test_list[j]});\n            }\n        }\n    }\n    for (auto it = map_of_sums.begin(); it != map_of_sums.end(); it++) {\n        std::vector<std::vector<long>> temp_list = it->second;\n        for (int i = 0; i < temp_list.size(); i++) {\n            for (int j = i + 1; j < temp_list.size(); j++) {\n                if (temp_list[i][0] != temp_list[j][0] && temp_list[i][0] != temp_list[j][1] && temp_list[i][1] != temp_list[j][0] && temp_list[i][1] != temp_list[j][1]) {\n                    result.push_back(it->first);\n                    break;\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long>::iterator it;\n    for(int i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for(int j = i+1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            for(int k = j+1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                for(int l = k+1; l < test_list.size(); l++) {\n                    temp.push_back(test_list[l]);\n                    for(int m = l+1; m < test_list.size(); m++) {\n                        temp.push_back(test_list[m]);\n                        for(int n = m+1; n < test_list.size(); n++) {\n                            temp.push_back(test_list[n]);\n                            for(int o = n+1; o < test_list.size(); o++) {\n                                temp.push_back(test_list[o]);\n                                for(int p = o+1; p < test_list.size(); p++) {\n                                    temp.push_back(test_list[p]);\n                                    for(int q = p+1; q < test_list.size(); q++) {\n                                        temp.push_back(test_list[q]);\n                                        for(int r = q+1; r < test_list.size(); r++) {\n                                            temp.push_back(test_list[r]);\n                                            for(int s = r+1; s < test_list.size(); s++) {\n                                                temp.push_back(test_list[s]);\n                                                for(int t = s+1; t < test_list.size(); t++) {\n                                                    temp.push_back(test_list[t]);\n                                                    for(int u = t+1; u < test_list.size",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), itr));\n    for(long i = 0; i < test_list.size(); i++) {\n        long sum = 0;\n        for(long j = i; j < test_list.size(); j++) {\n            sum += test_list[j];\n            result.push_back(sum);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    std::vector<long>::iterator itr1 = std::unique(result.begin(), result.end());\n    result.resize(std::distance(result.begin(), itr1));\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    for(int i=0;i<test_list.size();i++) {\n        for(int j=i+1;j<test_list.size();j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            result.push_back(std::accumulate(temp.begin(),temp.end(),0));\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<long> temp_list;\n    for (auto i : test_list) {\n        if (i <= half_sum) {\n            temp_list.push_back(i);\n        }\n    }\n    std::vector<long> temp_result;\n    for (auto i : temp_list) {\n        if (std::find(temp_result.begin(), temp_result.end(), i) == temp_result.end()) {\n            temp_result.push_back(i);\n        }\n    }\n    for (auto i : temp_result) {\n        for (auto j : temp_list) {\n            if (i != j) {\n                if (std::find(temp_result.begin(), temp_result.end(), i + j) == temp_result.end()) {\n                    temp_result.push_back(i + j);\n                }\n            }\n        }\n    }\n    for (auto i : temp_result) {\n        if (i <= half_sum) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] + test_list[j] == test_list[j + 1]) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n                result.push_back(test_list[j + 1]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result.push_back(test_list[i] + test_list[j]);\n            result.push_back(test_list[i] + test_list[j]);\n            for (int k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                temp_result.push_back(test_list[i] + test_list[j] + test_list[k]);\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n            temp.clear();\n        }\n    }\n    std::sort(result.begin(), result.end());\n    std::sort(temp_result.begin(), temp_result.end());\n    std::vector<long>::iterator ip;\n    ip = std::unique(result.begin(), result.end());\n    result.resize(std::distance(result.begin(), ip));\n    ip = std::unique(temp_result.begin(), temp_result.end());\n    temp_result.resize(std::distance(temp_result.begin(), ip));\n    std::vector<long> final_result;\n    std::set_difference(result.begin(), result.end(), temp_result.begin(), temp_result.end(), std::inserter(final_result, final_result.begin()));\n    return final_result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            combinations.push_back(temp);\n            temp.pop_back();\n        }\n        temp.pop_back();\n    }\n    for (int i = 0; i < combinations.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < combinations[i].size(); j++) {\n            sum += combinations[i][j];\n        }\n        temp_result.push_back(sum);\n    }\n    std::sort(temp_result.begin(), temp_result.end());\n    for (int i = 0; i < temp_result.size(); i++) {\n        if (i == 0) {\n            result.push_back(temp_result[i]);\n        } else if (temp_result[i] != temp_result[i - 1]) {\n            result.push_back(temp_result[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for(int i=0;i<test_list.size();i++) {\n        temp.push_back(test_list[i]);\n        for(int j=i+1;j<test_list.size();j++) {\n            temp.push_back(test_list[j]);\n            temp_result = find_combinations(temp);\n            for(int k=0;k<temp_result.size();k++) {\n                result.push_back(temp_result[k]);\n            }\n            temp.pop_back();\n        }\n        temp.pop_back();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i+1; j < test_list.size(); j++) {\n            for(long k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(test_list[k]);\n                    std::sort(temp.begin(), temp.end());\n                    it = std::find(result.begin(), result.end(), temp);\n                    if(it == result.end()) {\n                        result.push_back(temp);\n                    }\n                    temp.clear();\n                }\n            }\n        }\n    }\n    return result;",
    "\tstd::vector<long> result;\n\tstd::vector<long> temp;\n\tstd::vector<long>::iterator it;\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\ttemp.push_back(test_list[i] + test_list[j]);\n\t\t}\n\t}\n\tstd::sort(temp.begin(), temp.end());\n\tfor (int i = 0; i < temp.size(); i++) {\n\t\tif (std::find(result.begin(), result.end(), temp[i]) == result.end()) {\n\t\t\tresult.push_back(temp[i]);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<long> result_list;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size() - 1; i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] + test_list[j] == 0) {\n                result_list.push_back(test_list[i]);\n                result_list.push_back(test_list[j]);\n            }\n        }\n    }\n    return result_list;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for(int i = 0; i < test_list.size(); i++) {\n        temp = test_list;\n        temp.erase(temp.begin() + i);\n        temp_result = find_combinations(temp);\n        for(int j = 0; j < temp_result.size(); j++) {\n            result.push_back(test_list[i] + temp_result[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::map<long, std::vector<std::vector<long>>> combinations_map;\n    for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n        std::vector<long> temp_list;\n        temp_list.push_back(*it);\n        combinations_map[*it].push_back(temp_list);\n    }\n    for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n        for (auto it2 = test_list.begin(); it2 != test_list.end(); ++it2) {\n            if (it != it2) {\n                long sum = *it + *it2;\n                std::vector<long> temp_list;\n                temp_list.push_back(*it);\n                temp_list.push_back(*it2);\n                combinations_map[sum].push_back(temp_list);\n            }\n        }\n    }\n    for (auto it = combinations_map.begin(); it != combinations_map.end(); ++it) {\n        if (it->second.size() > 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp_list;\n    std::vector<long> temp_list_2;\n    std::vector<long> temp_list_3;\n    std::vector<long> temp_list_4;\n    std::vector<long> temp_list_5;\n    std::vector<long> temp_list_6;\n    std::vector<long> temp_list_7;\n    std::vector<long> temp_list_8;\n    std::vector<long> temp_list_9;\n    std::vector<long> temp_list_10;\n    std::vector<long> temp_list_11;\n    std::vector<long> temp_list_12;\n    std::vector<long> temp_list_13;\n    std::vector<long> temp_list_14;\n    std::vector<long> temp_list_15;\n    std::vector<long> temp_list_16;\n    std::vector<long> temp_list_17;\n    std::vector<long> temp_list_18;\n    std::vector<long> temp_list_19;\n    std::vector<long> temp_list_20;\n    std::vector<long> temp_list_21;\n    std::vector<long> temp_list_22;\n    std::vector<long> temp_list_23;\n    std::vector<long> temp_list_24;\n    std::vector<long> temp_list_25;\n    std::vector<long> temp_list_26;\n    std::vector<long> temp_list_27;\n    std::vector<long> temp_list_28;\n    std::vector<long> temp_list_29;\n    std::vector<long> temp_list_30;\n    std::vector<long> temp_list_31;\n    std::vector<long> temp_list_32;\n    std::vector<long> temp_list_33;\n    std::vector<long> temp_list_34;\n    std::vector<long> temp_list_35;\n    std::vector<long> temp_list_36;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(i == 0) {\n            result.push_back(temp[i]);\n        }\n        else if(temp[i] != temp[i-1]) {\n            result.push_back(temp[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, std::vector<std::pair<long, long>>> sum_map;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if (sum_map.find(sum) == sum_map.end()) {\n                std::vector<std::pair<long, long>> temp;\n                temp.push_back(std::make_pair(test_list[i], test_list[j]));\n                sum_map[sum] = temp;\n            } else {\n                sum_map[sum].push_back(std::make_pair(test_list[i], test_list[j]));\n            }\n        }\n    }\n    for (auto it = sum_map.begin(); it != sum_map.end(); it++) {\n        std::vector<std::pair<long, long>> temp = it->second;\n        for (long i = 0; i < temp.size(); i++) {\n            for (long j = i + 1; j < temp.size(); j++) {\n                if (temp[i].first != temp[j].first && temp[i].first != temp[j].second && temp[i].second != temp[j].first && temp[i].second != temp[j].second) {\n                    result.push_back(it->first);\n                    break;\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = test_list.begin();\n    while(it != test_list.end()) {\n        long sum = 0;\n        std::vector<long>::iterator it2 = it;\n        while(it2 != test_list.end()) {\n            sum += *it2;\n            result.push_back(sum);\n            it2++;\n        }\n        it++;\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(test_list[k]);\n                    result.push_back(temp);\n                    temp.clear();\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] + test_list[j] == sum) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for(auto it2 = it; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;\n    std::vector<long>::iterator it38",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            combinations.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        std::vector<long>::iterator it2;\n        for(it2 = it; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for(it2 = it + 1; it2 != test_list.end(); it2++) {\n            if(*it + *it2 == 0) {\n                result.push_back(*it);\n                result.push_back(*it2);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, std::vector<std::pair<long, long>>> map;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if (map.find(sum) == map.end()) {\n                map[sum] = std::vector<std::pair<long, long>>();\n            }\n            map[sum].push_back(std::make_pair(test_list[i], test_list[j]));\n        }\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        std::vector<std::pair<long, long>> pairs = it->second;\n        for (int i = 0; i < pairs.size(); i++) {\n            for (int j = i + 1; j < pairs.size(); j++) {\n                long sum = pairs[i].first + pairs[i].second + pairs[j].first + pairs[j].second;\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            if (*it + *it2 == 0) {\n                result.push_back(*it);\n                result.push_back(*it2);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for(int i = 0; i < temp.size(); i++) {\n        if(i == 0) {\n            result.push_back(temp[i]);\n        } else if(temp[i] != temp[i - 1]) {\n            result.push_back(temp[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<std::vector<long>> dp(test_list.size() + 1, std::vector<long>(half_sum + 1, 0));\n    for (int i = 0; i <= test_list.size(); i++) {\n        dp[i][0] = 1;\n    }\n    for (int i = 1; i <= test_list.size(); i++) {\n        for (int j = 1; j <= half_sum; j++) {\n            if (test_list[i - 1] <= j) {\n                dp[i][j] = dp[i - 1][j - test_list[i - 1]] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    result.push_back(dp[test_list.size()][half_sum]);\n    result.push_back(dp[test_list.size()][sum - half_sum]);\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            for (auto k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  std::map<long, std::vector<std::vector<long>>> map;\n  for (int i = 0; i < test_list.size(); i++) {\n    std::vector<long> temp;\n    temp.push_back(test_list[i]);\n    map[test_list[i]].push_back(temp);\n  }\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      long sum = test_list[i] + test_list[j];\n      std::vector<long> temp;\n      temp.push_back(test_list[i]);\n      temp.push_back(test_list[j]);\n      map[sum].push_back(temp);\n    }\n  }\n  for (auto it = map.begin(); it != map.end(); it++) {\n    if (it->second.size() > 1) {\n      result.push_back(it->first);\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::map<long, long> my_map;\n    for (auto i : test_list) {\n        if (my_map.find(i) == my_map.end()) {\n            my_map[i] = 1;\n        } else {\n            my_map[i]++;\n        }\n    }\n    for (auto i : test_list) {\n        if (my_map.find(i) != my_map.end()) {\n            my_map[i]--;\n            if (my_map.find(i) == my_map.end()) {\n                my_map.erase(i);\n            }\n            for (auto j : my_map) {\n                if (my_map.find(i + j.first) != my_map.end()) {\n                    result.push_back(i + j.first);\n                }\n            }\n            my_map[i]++;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                temp.push_back(test_list[i]);\n                temp.push_back(test_list[j]);\n                temp.push_back(test_list[k]);\n                std::sort(temp.begin(), temp.end());\n                it = std::find(result.begin(), result.end(), temp[0]+temp[1]+temp[2]);\n                if(it == result.end()) {\n                    result.push_back(temp[0]+temp[1]+temp[2]);\n                }\n                temp.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            sum += test_list[i];\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    long sum = 0;\n    for(auto i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for(auto i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for(auto j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            for(auto k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                for(auto l = k + 1; l < test_list.size(); l++) {\n                    temp.push_back(test_list[l]);\n                    for(auto m = l + 1; m < test_list.size(); m++) {\n                        temp.push_back(test_list[m]);\n                        for(auto n = m + 1; n < test_list.size(); n++) {\n                            temp.push_back(test_list[n]);\n                            for(auto o = n + 1; o < test_list.size(); o++) {\n                                temp.push_back(test_list[o]);\n                                for(auto p = o + 1; p < test_list.size(); p++) {\n                                    temp.push_back(test_list[p]);\n                                    for(auto q = p + 1; q < test_list.size(); q++) {\n                                        temp.push_back(test_list[q]);\n                                        for(auto r = q + 1; r < test_list.size(); r++) {\n                                            temp.push_back(test_list[r]);\n                                            for(auto s = r + 1; s < test_list.size(); s++) {\n                                                temp.push_back(test_list[s]);\n                                                for(auto t = s + 1; t < test_list.size(); t++) {\n                                                    temp.push_",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > 0) {\n            break;\n        }\n    }\n    long sum = 0;\n    for(; it != test_list.end(); it++) {\n        sum += *it;\n    }\n    result.push_back(sum);\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = *it;\n        std::vector<long> temp_list;\n        temp_list.push_back(*it);\n        for(auto it2 = it+1; it2 != test_list.end(); it2++) {\n            if(sum + *it2 == 0) {\n                temp_list.push_back(*it2);\n                result.push_back(temp_list);\n                temp_list.pop_back();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, std::vector<std::vector<long>>> combinations_map;\n    for (auto i = 0; i < test_list.size(); ++i) {\n        for (auto j = i + 1; j < test_list.size(); ++j) {\n            auto sum = test_list[i] + test_list[j];\n            if (combinations_map.find(sum) == combinations_map.end()) {\n                combinations_map[sum] = std::vector<std::vector<long>>();\n            }\n            combinations_map[sum].push_back({test_list[i], test_list[j]});\n        }\n    }\n    for (auto i = 0; i < test_list.size(); ++i) {\n        if (combinations_map.find(test_list[i]) != combinations_map.end()) {\n            for (auto j = 0; j < combinations_map[test_list[i]].size(); ++j) {\n                result.push_back(combinations_map[test_list[i]][j][0]);\n                result.push_back(combinations_map[test_list[i]][j][1]);\n                result.push_back(test_list[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = test_list.begin();\n    while(it != test_list.end()) {\n        long current_number = *it;\n        std::vector<long>::iterator it2 = it + 1;\n        while(it2 != test_list.end()) {\n            long current_number2 = *it2;\n            if(current_number + current_number2 == 10) {\n                result.push_back(current_number);\n                result.push_back(current_number2);\n            }\n            it2++;\n        }\n        it++;\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    int len = test_list.size();\n    for(int i = 0; i < len; i++) {\n        long sum = 0;\n        for(int j = i; j < len; j++) {\n            sum += test_list[j];\n            temp.push_back(test_list[j]);\n            temp_result.push_back(sum);\n        }\n        result.insert(result.end(), temp_result.begin(), temp_result.end());\n        temp_result.clear();\n        temp.clear();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for(auto it2 = it; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr;\n    for (itr = test_list.begin(); itr != test_list.end(); itr++) {\n        long sum = 0;\n        for (auto itr2 = itr; itr2 != test_list.end(); itr2++) {\n            sum += *itr2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    std::vector<long> temp;\n    for (auto i : test_list) {\n        temp.push_back(i);\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] + test_list[j] == sum) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            result.push_back(*it + *it2);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    long sum = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n        temp.push_back(test_list[i]);\n        if(sum == 0) {\n            result.push_back(temp);\n            temp.clear();\n            sum = 0;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;"
  ]
}