{
  "name": "mbpp_780_find_combinations",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nstd::vector<long> find_combinations(std::vector<long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_combinations;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(6, 10)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(8, 11), (std::tuple<long, long>)std::make_tuple(7, 5), (std::tuple<long, long>)std::make_tuple(8, 14), (std::tuple<long, long>)std::make_tuple(11, 8), (std::tuple<long, long>)std::make_tuple(12, 17), (std::tuple<long, long>)std::make_tuple(11, 11)})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(6, 2), (std::tuple<long, long>)std::make_tuple(7, 11)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(10, 13), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(10, 16), (std::tuple<long, long>)std::make_tuple(13, 10), (std::tuple<long, long>)std::make_tuple(14, 19), (std::tuple<long, long>)std::make_tuple(13, 13)})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(7, 3), (std::tuple<long, long>)std::make_tuple(8, 12)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(12, 15), (std::tuple<long, long>)std::make_tuple(11, 9), (std::tuple<long, long>)std::make_tuple(12, 18), (std::tuple<long, long>)std::make_tuple(15, 12), (std::tuple<long, long>)std::make_tuple(16, 21), (std::tuple<long, long>)std::make_tuple(15, 15)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); ++it) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); ++it2) {\n            std::vector<long>::iterator it3;\n            for (it3 = it2 + 1; it3 != test_list.end(); ++it3) {\n                if (*it + *it2 + *it3 == 0) {\n                    result.push_back(*it);\n                    result.push_back(*it2);\n                    result.push_back(*it3);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    for (auto i : test_list) {\n        if (sum - i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        std::cout << *it << \" \";\n    }\n    std::cout << std::endl;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size() - 1; i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    long half_sum = sum / 2;\n    std::vector<std::vector<long>> dp(test_list.size() + 1, std::vector<long>(half_sum + 1, 0));\n    for (long i = 0; i <= test_list.size(); i++) {\n        dp[i][0] = 1;\n    }\n    for (long i = 1; i <= test_list.size(); i++) {\n        for (long j = 1; j <= half_sum; j++) {\n            if (test_list[i - 1] <= j) {\n                dp[i][j] = dp[i - 1][j - test_list[i - 1]] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    result.push_back(dp[test_list.size()][half_sum]);\n    result.push_back(dp[test_list.size()][sum - half_sum]);\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  std::vector<long> temp;\n  std::vector<long> temp_result;\n  std::vector<long> temp_result_2;\n  std::vector<long> temp_result_3;\n  std::vector<long> temp_result_4;\n  std::vector<long> temp_result_5;\n  std::vector<long> temp_result_6;\n  std::vector<long> temp_result_7;\n  std::vector<long> temp_result_8;\n  std::vector<long> temp_result_9;\n  std::vector<long> temp_result_10;\n  std::vector<long> temp_result_11;\n  std::vector<long> temp_result_12;\n  std::vector<long> temp_result_13;\n  std::vector<long> temp_result_14;\n  std::vector<long> temp_result_15;\n  std::vector<long> temp_result_16;\n  std::vector<long> temp_result_17;\n  std::vector<long> temp_result_18;\n  std::vector<long> temp_result_19;\n  std::vector<long> temp_result_20;\n  std::vector<long> temp_result_21;\n  std::vector<long> temp_result_22;\n  std::vector<long> temp_result_23;\n  std::vector<long> temp_result_24;\n  std::vector<long> temp_result_25;\n  std::vector<long> temp_result_26;\n  std::vector<long> temp_result_27;\n  std::vector<long> temp_result_28;\n  std::vector<long> temp_result_29;\n  std::vector<long> temp_result_30;\n  std::vector<long> temp_result_31;\n  std::vector<long> temp_result_32;\n  std::vector<long> temp_result_33;\n  std::vector<long> temp_result_34;\n  std::vector<long> temp_result_35;\n  std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(test_list[k]);\n                    result.push_back(temp);\n                    temp.clear();\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<std::vector<long>> dp(test_list.size() + 1, std::vector<long>(half_sum + 1, 0));\n    for (int i = 0; i <= test_list.size(); i++) {\n        dp[i][0] = 1;\n    }\n    for (int i = 1; i <= test_list.size(); i++) {\n        for (int j = 1; j <= half_sum; j++) {\n            if (test_list[i - 1] <= j) {\n                dp[i][j] = dp[i - 1][j - test_list[i - 1]] + dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    result.push_back(dp[test_list.size()][half_sum]);\n    result.push_back(dp[test_list.size()][sum - half_sum]);\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(auto i = 0; i < test_list.size(); i++) {\n        for(auto j = i + 1; j < test_list.size(); j++) {\n            for(auto k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for(auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    std::vector<long> temp_list;\n    for(auto i : test_list) {\n        if(i <= half_sum) {\n            temp_list.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_2;\n    for(auto i : temp_list) {\n        if(i == half_sum) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_2.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_3;\n    for(auto i : temp_list_2) {\n        if(i == half_sum - 1) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_3.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_4;\n    for(auto i : temp_list_3) {\n        if(i == half_sum - 2) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_4.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_5;\n    for(auto i : temp_list_4) {\n        if(i == half_sum - 3) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_5.push_back(i);\n        }\n    }\n    std::vector<long> temp_list_6;\n    for(auto i : temp_list_5) {\n        if(i == half_sum - 4) {\n            result.push_back(i);\n        }\n        else {\n            temp_list_6.push_back(i);\n        }\n    }\n    std::vector<",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, long> map;\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if (map.find(sum) == map.end()) {\n                map[sum] = 1;\n            } else {\n                map[sum]++;\n            }\n        }\n    }\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if (map.find(sum) != map.end()) {\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "  std::vector<long> result;\n  std::sort(test_list.begin(), test_list.end());\n  long sum = 0;\n  for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n    sum += *it;\n  }\n  long half_sum = sum / 2;\n  std::vector<long> temp;\n  for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n    if (*it > half_sum) {\n      break;\n    }\n    temp.push_back(*it);\n  }\n  std::vector<long> temp_result;\n  for (auto it = temp.begin(); it != temp.end(); ++it) {\n    long temp_sum = *it;\n    temp_result.push_back(temp_sum);\n    for (auto it2 = it + 1; it2 != temp.end(); ++it2) {\n      temp_sum += *it2;\n      temp_result.push_back(temp_sum);\n    }\n  }\n  std::sort(temp_result.begin(), temp_result.end());\n  for (auto it = temp_result.begin(); it != temp_result.end(); ++it) {\n    if (*it == half_sum) {\n      result.push_back(*it);\n      break;\n    }\n  }\n  return result;"
  ]
}