{
  "name": "mbpp_128_long_words",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find words that are longer than n characters from a given list of words.\nstd::vector<std::string> long_words(long n, std::string str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = long_words;\n    assert(candidate((3), (\"python is a programming language\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"programming\", (std::string)\"language\"})));\n    assert(candidate((2), (\"writing a program\")) == (std::vector<std::string>({(std::string)\"writing\", (std::string)\"program\"})));\n    assert(candidate((5), (\"sorting list\")) == (std::vector<std::string>({(std::string)\"sorting\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string word;\n    while (ss >> word) {\n        if (word.length() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string word;\n    while (ss >> word) {\n        if (word.length() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::stringstream ss(str);\n  std::string word;\n  while(ss >> word) {\n    if(word.length() > n) {\n      result.push_back(word);\n    }\n  }\n  return result;",
    "    std::vector<std::string> words;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() > n) {\n            words.push_back(word);\n        }\n    }\n    return words;",
    "    std::vector<std::string> v;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() > n) {\n            v.push_back(word);\n        }\n    }\n    return v;",
    "    std::vector<std::string> result;\n    std::string word;\n    std::stringstream ss(str);\n    while(ss >> word) {\n        if(word.size() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "    std::vector<std::string> v;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() > n) {\n            v.push_back(word);\n        }\n    }\n    return v;",
    "    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "    std::vector<std::string> v;\n    std::stringstream ss(str);\n    std::string word;\n    while (ss >> word) {\n        if (word.length() > n) {\n            v.push_back(word);\n        }\n    }\n    return v;",
    "    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "    std::vector<std::string> v;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.length() > n) {\n            v.push_back(word);\n        }\n    }\n    return v;",
    "    std::vector<std::string> words;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() > n) {\n            words.push_back(word);\n        }\n    }\n    return words;",
    "  std::vector<std::string> words;\n  std::stringstream ss(str);\n  std::string word;\n  while (ss >> word) {\n    if (word.size() > n) {\n      words.push_back(word);\n    }\n  }\n  return words;",
    "  std::vector<std::string> result;\n  std::stringstream ss(str);\n  std::string word;\n  while (ss >> word) {\n    if (word.length() > n) {\n      result.push_back(word);\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string word;\n    while (ss >> word) {\n        if (word.length() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(str);\n    std::string word;\n    while(ss >> word) {\n        if(word.size() > n) {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> v;\n\tstd::stringstream ss(str);\n\tstd::string word;\n\twhile(ss >> word) {\n\t\tif(word.length() > n) {\n\t\t\tv.push_back(word);\n\t\t}\n\t}\n\treturn v;"
  ]
}