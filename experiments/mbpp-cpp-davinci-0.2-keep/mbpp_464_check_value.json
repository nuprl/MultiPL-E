{
  "name": "mbpp_464_check_value",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all values are same in a dictionary.\nbool check_value(std::map<std::string,long> dict, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = check_value;\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (10)) == (false));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (12)) == (true));\n    assert(candidate((std::map<std::string,long>({{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}})), (5)) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::map<std::string,long>::iterator it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string,long>::iterator it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string,long>::iterator it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string,long>::iterator it;\n    for(it=dict.begin();it!=dict.end();it++) {\n        if(it->second!=n) {\n            return false;\n        }\n    }\n    return true;",
    "    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    for(auto itr = dict.begin(); itr != dict.end(); itr++) {\n        if(itr->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    for(auto itr = dict.begin(); itr != dict.end(); itr++) {\n        if(itr->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string,long>::iterator it;\n    for(it=dict.begin();it!=dict.end();it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string,long>::iterator it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string,long>::iterator it;\n    for(it=dict.begin();it!=dict.end();it++) {\n        if(it->second != n)\n            return false;\n    }\n    return true;",
    "    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    for (auto it = dict.begin(); it != dict.end(); it++) {\n        if (it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string,long>::iterator it;\n    for (it = dict.begin(); it != dict.end(); it++) {\n        if (it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    for (auto i: dict) {\n        if (i.second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    std::map<std::string,long>::iterator it;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(it->second != n) {\n            return false;\n        }\n    }\n    return true;",
    "    for (auto i : dict) {\n        if (i.second != n) {\n            return false;\n        }\n    }\n    return true;"
  ]
}