{
  "name": "mbpp_604_reverse_words",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to reverse words seperated by spaces in a given string.\nstd::string reverse_words(std::string s) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = reverse_words;\n    assert(candidate((\"python program\")) == (\"program python\"));\n    assert(candidate((\"java language\")) == (\"language java\"));\n    assert(candidate((\"indian man\")) == (\"man indian\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    std::string word = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for(int i=0;i<s.length();i++) {\n        if(s[i] == ' ') {\n            result = word + \" \" + result;\n            word.clear();\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for(int i=0; i<s.length(); i++) {\n        if(s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            result = word + \" \" + result;\n            word.clear();\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::stringstream ss(s);\n    std::string word;\n    std::string result;\n    while(ss >> word) {\n        result = word + \" \" + result;\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] != ' ') {\n            word += s[i];\n        } else {\n            result = word + \" \" + result;\n            word = \"\";\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "  std::string result;\n  std::string word;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] != ' ') {\n      word += s[i];\n    } else {\n      result = word + \" \" + result;\n      word = \"\";\n    }\n  }\n  result = word + \" \" + result;\n  return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::stringstream ss(s);\n    std::string word;\n    while(ss >> word) {\n        std::reverse(word.begin(), word.end());\n        result += word + \" \";\n    }\n    result.pop_back();\n    return result;",
    "    std::string result = \"\";\n    std::string word = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "  std::string result = \"\";\n  std::string word = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == ' ') {\n      result = word + \" \" + result;\n      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  result = word + \" \" + result;\n  return result;",
    "    std::string result;\n    std::string word;\n    for (auto c : s) {\n        if (c != ' ') {\n            word.push_back(c);\n        } else {\n            result.insert(0, word + \" \");\n            word.clear();\n        }\n    }\n    result.insert(0, word);\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        }\n        else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for(int i=0; i<s.size(); i++) {\n        if(s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            result = word + \" \" + result;\n            word.clear();\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;",
    "    std::string result;\n    std::string word;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            result = word + \" \" + result;\n            word = \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    result = word + \" \" + result;\n    return result;"
  ]
}