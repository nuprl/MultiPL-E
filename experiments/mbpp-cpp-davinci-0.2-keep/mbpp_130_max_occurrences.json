{
  "name": "mbpp_130_max_occurrences",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the item with maximum frequency in a given list.\nlong max_occurrences(std::vector<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_occurrences;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)2, (long)6, (long)5, (long)1, (long)6, (long)1, (long)2, (long)3, (long)2, (long)4, (long)6, (long)9, (long)1, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)7, (long)9, (long)15, (long)14, (long)10, (long)12, (long)13, (long)16, (long)18}))) == (8));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)20, (long)30, (long)40, (long)90, (long)80, (long)50, (long)30, (long)20, (long)50, (long)10}))) == (20));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    std::map<long,long> m;\n    for(auto i:nums){\n        m[i]++;\n    }\n    long max_count=0;\n    long max_num=0;\n    for(auto i:m){\n        if(i.second>max_count){\n            max_count=i.second;\n            max_num=i.first;\n        }\n    }\n    return max_num;",
    "    // Write your code here\n    std::map<long, long> m;\n    for(int i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max_value=0;\n    long max_key=0;\n    for(auto i=m.begin();i!=m.end();i++)\n    {\n        if(i->second>max_value)\n        {\n            max_value=i->second;\n            max_key=i->first;\n        }\n    }\n    return max_key;",
    "\tstd::map<long,long> m;\n\tfor(long i=0;i<nums.size();i++){\n\t\tm[nums[i]]++;\n\t}\n\tlong max=0;\n\tlong max_num=0;\n\tfor(auto it=m.begin();it!=m.end();it++){\n\t\tif(it->second>max){\n\t\t\tmax=it->second;\n\t\t\tmax_num=it->first;\n\t\t}\n\t}\n\treturn max_num;",
    "    // Write your code here\n    long max=0;\n    long count=0;\n    long max_count=0;\n    for(int i=0;i<nums.size();i++)\n    {\n        count=0;\n        for(int j=i+1;j<nums.size();j++)\n        {\n            if(nums[i]==nums[j])\n            {\n                count++;\n            }\n        }\n        if(count>max_count)\n        {\n            max_count=count;\n            max=nums[i];\n        }\n    }\n    return max;",
    "    std::unordered_map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->second > max_freq) {\n            max_freq = it->second;\n            max_num = it->first;\n        }\n    }\n    return max_num;",
    "\tstd::map<long, long> m;\n\tfor (auto i : nums) {\n\t\tm[i]++;\n\t}\n\tlong max = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max) {\n\t\t\tmax = i.second;\n\t\t}\n\t}\n\treturn max;",
    "    std::map<long, long> m;\n    for(auto i : nums) {\n        m[i]++;\n    }\n    long max_freq = 0;\n    long max_freq_num = 0;\n    for(auto i : m) {\n        if(i.second > max_freq) {\n            max_freq = i.second;\n            max_freq_num = i.first;\n        }\n    }\n    return max_freq_num;",
    "    // Write your code here\n    std::map<long,long> m;\n    for(auto i:nums)\n    {\n        m[i]++;\n    }\n    long max_count=0;\n    long max_num=0;\n    for(auto i:m)\n    {\n        if(i.second>max_count)\n        {\n            max_count=i.second;\n            max_num=i.first;\n        }\n    }\n    return max_num;",
    "\tstd::map<long, long> m;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tm[nums[i]]++;\n\t}\n\tlong max = 0;\n\tlong max_num = 0;\n\tfor (auto i = m.begin(); i != m.end(); i++) {\n\t\tif (i->second > max) {\n\t\t\tmax = i->second;\n\t\t\tmax_num = i->first;\n\t\t}\n\t}\n\treturn max_num;",
    "    std::map<long, long> freq;\n    for(long i=0; i<nums.size(); i++) {\n        freq[nums[i]]++;\n    }\n    long max_freq = 0;\n    long max_freq_num = 0;\n    for(auto it=freq.begin(); it!=freq.end(); it++) {\n        if(it->second > max_freq) {\n            max_freq = it->second;\n            max_freq_num = it->first;\n        }\n    }\n    return max_freq_num;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n    {\n        m[i]++;\n    }\n    long max=0;\n    for(auto i:m)\n    {\n        if(i.second>max)\n        {\n            max=i.second;\n        }\n    }\n    for(auto i:m)\n    {\n        if(i.second==max)\n        {\n            return i.first;\n        }\n    }",
    "    std::unordered_map<long, long> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    long max_count = 0;\n    long max_num = 0;\n    for (auto num : map) {\n        if (num.second > max_count) {\n            max_count = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    std::unordered_map<long, long> freq;\n    for(long i = 0; i < nums.size(); i++) {\n        freq[nums[i]]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for(auto it = freq.begin(); it != freq.end(); it++) {\n        if(it->second > max) {\n            max = it->second;\n            max_key = it->first;\n        }\n    }\n    return max_key;",
    "    std::unordered_map<long, long> freq;\n    for (auto i : nums) {\n        freq[i]++;\n    }\n    long max_freq = 0;\n    long max_val = 0;\n    for (auto i : freq) {\n        if (i.second > max_freq) {\n            max_freq = i.second;\n            max_val = i.first;\n        }\n    }\n    return max_val;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max=0;\n    for(auto it=m.begin();it!=m.end();it++)\n    {\n        if(it->second>max)\n        {\n            max=it->second;\n        }\n    }\n    return max;",
    "    std::map<long, long> map;\n    for (long i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for (std::map<long, long>::iterator it = map.begin(); it != map.end(); it++) {\n        if (it->second > max) {\n            max = it->second;\n            max_key = it->first;\n        }\n    }\n    return max_key;",
    "    std::map<long, long> m;\n    for(auto i : nums) {\n        m[i]++;\n    }\n    long max_occur = 0;\n    long max_occur_num = 0;\n    for(auto i : m) {\n        if(i.second > max_occur) {\n            max_occur = i.second;\n            max_occur_num = i.first;\n        }\n    }\n    return max_occur_num;",
    "    std::unordered_map<long, long> freq;\n    for (auto n : nums) {\n        freq[n]++;\n    }\n    long max_freq = 0;\n    long max_freq_num = 0;\n    for (auto f : freq) {\n        if (f.second > max_freq) {\n            max_freq = f.second;\n            max_freq_num = f.first;\n        }\n    }\n    return max_freq_num;",
    "    // Write your code here\n    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    std::map<long,long>::iterator it;\n    long max=0;\n    for(it=m.begin();it!=m.end();it++)\n    {\n        if(it->second>max)\n        {\n            max=it->second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    std::map<long, long>::iterator it = m.begin();\n    long max = it->second;\n    long max_key = it->first;\n    for(it = m.begin(); it != m.end(); it++) {\n        if(it->second > max) {\n            max = it->second;\n            max_key = it->first;\n        }\n    }\n    return max_key;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for (auto i : m) {\n        if (i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max=0;\n    for(auto it=m.begin();it!=m.end();it++)\n    {\n        if(it->second>max)\n        {\n            max=it->second;\n        }\n    }\n    return max;",
    "    std::unordered_map<long,long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max=0;\n    for(auto i:m)\n        if(i.second>max)\n            max=i.second;\n    return max;",
    "    std::map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto num : freq) {\n        if (num.second > max_freq) {\n            max_freq = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    // Write your code here\n    long max_count = 0;\n    long max_num = 0;\n    std::map<long, long> m;\n    for (long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    for (auto itr = m.begin(); itr != m.end(); itr++) {\n        if (itr->second > max_count) {\n            max_count = itr->second;\n            max_num = itr->first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(auto i: nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for(auto i: m) {\n        if(i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    // Write your code here\n    std::map<long,long> m;\n    for(auto i:nums)\n    {\n        m[i]++;\n    }\n    long max=0;\n    for(auto i:m)\n    {\n        if(max<i.second)\n        {\n            max=i.second;\n        }\n    }\n    return max;",
    "    std::unordered_map<long, long> map;\n    for (long i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    std::unordered_map<long, long>::iterator itr;\n    long max = 0;\n    long max_key = 0;\n    for (itr = map.begin(); itr != map.end(); itr++) {\n        if (itr->second > max) {\n            max = itr->second;\n            max_key = itr->first;\n        }\n    }\n    return max_key;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max_count=0;\n    long max_num=0;\n    for(auto i:m){\n        if(i.second>max_count){\n            max_count=i.second;\n            max_num=i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> freq;\n    for(auto i : nums) {\n        freq[i]++;\n    }\n    long max_freq = 0;\n    long max_item = 0;\n    for(auto i : freq) {\n        if(i.second > max_freq) {\n            max_freq = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::map<long, long> freq;\n    for (long i = 0; i < nums.size(); i++) {\n        freq[nums[i]]++;\n        if (freq[nums[i]] > max_count) {\n            max_count = freq[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;",
    "    std::unordered_map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto item : freq) {\n        if (item.second > max_freq) {\n            max_freq = item.second;\n            max_num = item.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for (auto n : nums) {\n        m[n]++;\n    }\n    long max_freq = 0;\n    long max_freq_num = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second > max_freq) {\n            max_freq = it->second;\n            max_freq_num = it->first;\n        }\n    }\n    return max_freq_num;",
    "    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    long max_num = 0;\n    for(std::map<long, long>::iterator it = m.begin(); it != m.end(); it++) {\n        if(it->second > max) {\n            max = it->second;\n            max_num = it->first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second > max_count) {\n            max_count = it->second;\n            max_item = it->first;\n        }\n    }\n    return max_item;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max_count=0;\n    long max_num=0;\n    for(auto it=m.begin();it!=m.end();it++){\n        if(it->second>max_count){\n            max_count=it->second;\n            max_num=it->first;\n        }\n    }\n    return max_num;",
    "  std::map<long, long> count;\n  for (auto x : nums) {\n    count[x]++;\n  }\n  long max_count = 0;\n  long max_item = 0;\n  for (auto x : count) {\n    if (x.second > max_count) {\n      max_count = x.second;\n      max_item = x.first;\n    }\n  }\n  return max_item;",
    "    std::unordered_map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max_count = 0;\n    long max_num = 0;\n    for (auto i : m) {\n        if (i.second > max_count) {\n            max_count = i.second;\n            max_num = i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::unordered_map<long, long> count_map;\n    for (long num : nums) {\n        count_map[num]++;\n        if (count_map[num] > max_count) {\n            max_count = count_map[num];\n            max_num = num;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max=0;\n    long max_key=0;\n    for(auto i=m.begin();i!=m.end();i++){\n        if(i->second>max){\n            max=i->second;\n            max_key=i->first;\n        }\n    }\n    return max_key;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for (auto i : m) {\n        if (i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    std::unordered_map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto num : freq) {\n        if (num.second > max_freq) {\n            max_freq = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    // Write your code here\n    std::map<long, long> m;\n    for(int i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max = 0;\n    for(auto it = m.begin();it!=m.end();it++){\n        if(it->second > max){\n            max = it->second;\n        }\n    }\n    return max;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max=0;\n    long max_num=0;\n    for(auto it=m.begin();it!=m.end();it++)\n    {\n        if(it->second>max)\n        {\n            max=it->second;\n            max_num=it->first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for (long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second > max_count) {\n            max_count = it->second;\n            max_item = it->first;\n        }\n    }\n    return max_item;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n        if (map[nums[i]] > max_count) {\n            max_count = map[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max=0;\n    for(auto i:m)\n        if(i.second>max)\n            max=i.second;\n    return max;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max=0;\n    for(auto i:m)\n        if(i.second>max)\n            max=i.second;\n    return max;",
    "    // Write your code here\n    std::map<long, long> m;\n    for(auto i : nums)\n        m[i]++;\n    long max = 0;\n    for(auto i : m)\n        if(i.second > max)\n            max = i.second;\n    return max;",
    "    std::unordered_map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto num : nums) {\n        if (freq[num] > max_freq) {\n            max_freq = freq[num];\n            max_num = num;\n        }\n    }\n    return max_num;",
    "    std::unordered_map<long, long> freq;\n    for(auto i : nums) {\n        freq[i]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for(auto i : freq) {\n        if(i.second > max_freq) {\n            max_freq = i.second;\n            max_num = i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max_count=0;\n    long max_element=0;\n    for(auto i=m.begin();i!=m.end();i++){\n        if(i->second>max_count){\n            max_count=i->second;\n            max_element=i->first;\n        }\n    }\n    return max_element;",
    "    // Write your code here\n    std::map<long, long> m;\n    for(auto i: nums){\n        m[i]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for(auto i: m){\n        if(i.second > max){\n            max = i.second;\n            max_key = i.first;\n        }\n    }\n    return max_key;",
    "    std::unordered_map<long, long> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    long max_freq = 0;\n    long max_freq_item = 0;\n    for (auto item : map) {\n        if (item.second > max_freq) {\n            max_freq = item.second;\n            max_freq_item = item.first;\n        }\n    }\n    return max_freq_item;",
    "    std::map<long, long> m;\n    for(auto i : nums){\n        m[i]++;\n    }\n    long max = 0;\n    for(auto i : m){\n        if(i.second > max){\n            max = i.second;\n        }\n    }\n    return max;",
    "    // Write your code here\n    std::map<long, long> m;\n    for(auto i : nums){\n        m[i]++;\n    }\n    long max = 0;\n    for(auto i : m){\n        if(i.second > max){\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max=0;\n    for(auto i=m.begin();i!=m.end();i++)\n    {\n        if(i->second>max)\n        {\n            max=i->second;\n        }\n    }\n    return max;",
    "    std::map<long, long> freq;\n    for (auto i : nums) {\n        freq[i]++;\n    }\n    long max_freq = 0;\n    long max_freq_item = 0;\n    for (auto i : freq) {\n        if (i.second > max_freq) {\n            max_freq = i.second;\n            max_freq_item = i.first;\n        }\n    }\n    return max_freq_item;",
    "    long max_count = 0;\n    long max_item = 0;\n    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n        if (m[i] > max_count) {\n            max_count = m[i];\n            max_item = i;\n        }\n    }\n    return max_item;",
    "    std::map<long, long> freq;\n    for(auto i: nums) {\n        freq[i]++;\n    }\n    long max_freq = 0;\n    long max_item = 0;\n    for(auto i: freq) {\n        if(i.second > max_freq) {\n            max_freq = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max=0;\n    for(auto i:m)\n        if(i.second>max)\n            max=i.second;\n    return max;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::unordered_map<long, long> map;\n    for (auto num : nums) {\n        map[num]++;\n        if (map[num] > max_count) {\n            max_count = map[num];\n            max_num = num;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(auto i : nums)\n        m[i]++;\n    long max = 0;\n    for(auto i : m)\n        if(i.second > max)\n            max = i.second;\n    return max;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max=0;\n    for(auto i=m.begin();i!=m.end();i++){\n        if(i->second>max)\n            max=i->second;\n    }\n    return max;",
    "    std::map<long, long> m;\n    for(auto i : nums) {\n        m[i]++;\n    }\n    long max_val = 0;\n    long max_key = 0;\n    for(auto i : m) {\n        if(i.second > max_val) {\n            max_val = i.second;\n            max_key = i.first;\n        }\n    }\n    return max_key;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n        if(map[nums[i]] > max_count) {\n            max_count = map[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for (auto i : m) {\n        if (i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    std::map<long, long> m;\n    for(auto i: nums)\n        m[i]++;\n    long max = 0;\n    for(auto i: m)\n        if(i.second > max)\n            max = i.second;\n    return max;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max_count=0;\n    long max_num=0;\n    for(auto i:m){\n        if(i.second>max_count){\n            max_count=i.second;\n            max_num=i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(auto i: nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for(auto i: m) {\n        if(i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for(auto i: nums)\n        m[i]++;\n    long max = 0;\n    for(auto i: m)\n        if(i.second > max)\n            max = i.second;\n    return max;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max=0;\n    for(auto i:m)\n        if(i.second>max)\n            max=i.second;\n    return max;",
    "    std::unordered_map<long, long> freq;\n    for (long num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_item = 0;\n    for (auto item : freq) {\n        if (item.second > max_freq) {\n            max_freq = item.second;\n            max_item = item.first;\n        }\n    }\n    return max_item;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::unordered_map<long, long> map;\n    for(auto num : nums) {\n        map[num]++;\n    }\n    for(auto num : map) {\n        if(num.second > max_count) {\n            max_count = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    long max_count = 0;\n    long max_item = -1;\n    std::unordered_map<long, long> count_map;\n    for(auto num : nums) {\n        count_map[num]++;\n        if(count_map[num] > max_count) {\n            max_count = count_map[num];\n            max_item = num;\n        }\n    }\n    return max_item;",
    "    // Write your code here\n    long max_count=0;\n    long max_num=0;\n    std::map<long,long> m;\n    for(auto i:nums){\n        m[i]++;\n    }\n    for(auto i:m){\n        if(i.second>max_count){\n            max_count=i.second;\n            max_num=i.first;\n        }\n    }\n    return max_num;",
    "  // Write your code here\n  std::map<long,long> m;\n  for(long i=0;i<nums.size();i++)\n  {\n      m[nums[i]]++;\n  }\n  long max=0;\n  long ans=0;\n  for(auto i=m.begin();i!=m.end();i++)\n  {\n      if(i->second>max)\n      {\n          max=i->second;\n          ans=i->first;\n      }\n  }\n  return ans;",
    "    // Write your code here\n    long max_count = 0;\n    long max_num = 0;\n    std::map<long, long> count;\n    for (long i = 0; i < nums.size(); i++) {\n        count[nums[i]]++;\n    }\n    for (auto it = count.begin(); it != count.end(); it++) {\n        if (it->second > max_count) {\n            max_count = it->second;\n            max_num = it->first;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max_count=0;\n    long max_num=0;\n    for(auto it=m.begin();it!=m.end();it++){\n        if(it->second>max_count){\n            max_count=it->second;\n            max_num=it->first;\n        }\n    }\n    return max_num;",
    "    std::unordered_map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->second > max_freq) {\n            max_freq = it->second;\n            max_num = it->first;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(auto i:nums){\n        m[i]++;\n    }\n    long max=0;\n    long ans=0;\n    for(auto i:m){\n        if(i.second>max){\n            max=i.second;\n            ans=i.first;\n        }\n    }\n    return ans;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (int i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second > max) {\n            max = it->second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second > max) {\n            max = it->second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    long max_num = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n            max_num = i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for (long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    long max_num = 0;\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second > max) {\n            max = i->second;\n            max_num = i->first;\n        }\n    }\n    return max_num;",
    "\tstd::map<long, long> freq;\n\tfor (auto i : nums) {\n\t\tfreq[i]++;\n\t}\n\tlong max_freq = 0;\n\tlong max_freq_item = 0;\n\tfor (auto i : freq) {\n\t\tif (i.second > max_freq) {\n\t\t\tmax_freq = i.second;\n\t\t\tmax_freq_item = i.first;\n\t\t}\n\t}\n\treturn max_freq_item;",
    "\tstd::map<long, long> m;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tm[nums[i]]++;\n\t}\n\tstd::map<long, long>::iterator it;\n\tlong max = 0;\n\tfor (it = m.begin(); it != m.end(); it++) {\n\t\tif (it->second > max) {\n\t\t\tmax = it->second;\n\t\t}\n\t}\n\treturn max;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::unordered_map<long, long> counts;\n    for (auto num : nums) {\n        counts[num]++;\n    }\n    long max_count = 0;\n    long max_num = 0;\n    for (auto num : counts) {\n        if (num.second > max_count) {\n            max_count = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max=0;\n    for(auto it=m.begin();it!=m.end();it++)\n    {\n        if(it->second>max)\n        {\n            max=it->second;\n        }\n    }\n    return max;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max=0;\n    for(auto i:m)\n        if(i.second>max)\n            max=i.second;\n    return max;",
    "\tstd::map<long, long> m;\n\tfor (auto i : nums) {\n\t\tm[i]++;\n\t}\n\tlong max = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max) {\n\t\t\tmax = i.second;\n\t\t}\n\t}\n\treturn max;",
    "    std::map<long, long> m;\n    for(auto i : nums)\n        m[i]++;\n    long max_count = 0;\n    long max_item = 0;\n    for(auto i : m) {\n        if(i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    // Write your code here\n    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    std::map<long,long>::iterator it;\n    long max=0;\n    for(it=m.begin();it!=m.end();it++){\n        if(it->second>max){\n            max=it->second;\n        }\n    }\n    return max;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max=INT_MIN;\n    for(auto it=m.begin();it!=m.end();it++){\n        if(it->second>max){\n            max=it->second;\n        }\n    }\n    return max;",
    "    std::unordered_map<long, long> map;\n    for (int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > max) {\n            max = it->second;\n            max_key = it->first;\n        }\n    }\n    return max_key;",
    "\tstd::map<long, long> m;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tm[nums[i]]++;\n\t}\n\tlong max = 0;\n\tfor (auto i = m.begin(); i != m.end(); i++) {\n\t\tif (i->second > max) {\n\t\t\tmax = i->second;\n\t\t}\n\t}\n\treturn max;",
    "    // Write your code here\n    std::unordered_map<long, long> freq;\n    for(auto i : nums){\n        freq[i]++;\n    }\n    long max = 0;\n    long max_num = 0;\n    for(auto i : freq){\n        if(i.second > max){\n            max = i.second;\n            max_num = i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "\tstd::map<long, long> m;\n\tfor (auto i : nums)\n\t\tm[i]++;\n\tlong max = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max)\n\t\t\tmax = i.second;\n\t}\n\treturn max;",
    "    // Write your code here\n    long max = 0;\n    long count = 0;\n    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++){\n        m[nums[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++){\n        if(it->second > count){\n            count = it->second;\n            max = it->first;\n        }\n    }\n    return max;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::map<long, long> freq;\n    for (long num : nums) {\n        freq[num]++;\n        if (freq[num] > max_count) {\n            max_count = freq[num];\n            max_num = num;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max_occur = 0;\n    long max_num = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second > max_occur) {\n            max_occur = it->second;\n            max_num = it->first;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max=0;\n    long ans;\n    for(auto i=m.begin();i!=m.end();i++){\n        if(i->second>max){\n            max=i->second;\n            ans=i->first;\n        }\n    }\n    return ans;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::unordered_map<long, long> count;\n    for(long i = 0; i < nums.size(); i++){\n        count[nums[i]]++;\n        if(count[nums[i]] > max_count){\n            max_count = count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;",
    "\tstd::map<long, long> freq;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tfreq[nums[i]]++;\n\t}\n\tlong max_freq = 0;\n\tlong max_num = 0;\n\tfor (auto it = freq.begin(); it != freq.end(); it++) {\n\t\tif (it->second > max_freq) {\n\t\t\tmax_freq = it->second;\n\t\t\tmax_num = it->first;\n\t\t}\n\t}\n\treturn max_num;",
    "    // Write your code here\n    std::map<long,long> m;\n    for(auto i:nums)\n    {\n        m[i]++;\n    }\n    long max_count=0;\n    long max_num=0;\n    for(auto i:m)\n    {\n        if(i.second>max_count)\n        {\n            max_count=i.second;\n            max_num=i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max = 0;\n    for(auto i:m)\n        if(i.second > max)\n            max = i.second;\n    return max;",
    "    std::map<long, long> m;\n    for (long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second > max) {\n            max = i->second;\n            max_key = i->first;\n        }\n    }\n    return max_key;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max_count = 0;\n    long max_num = 0;\n    for (auto i : m) {\n        if (i.second > max_count) {\n            max_count = i.second;\n            max_num = i.first;\n        }\n    }\n    return max_num;",
    "    std::unordered_map<long, long> freq;\n    for(long i=0; i<nums.size(); i++) {\n        freq[nums[i]]++;\n    }\n    long max_freq = 0;\n    long max_freq_num;\n    for(auto itr=freq.begin(); itr!=freq.end(); itr++) {\n        if(itr->second > max_freq) {\n            max_freq = itr->second;\n            max_freq_num = itr->first;\n        }\n    }\n    return max_freq_num;",
    "    std::map<long, long> m;\n    for(auto i : nums)\n        m[i]++;\n    long max = 0;\n    for(auto i : m)\n        if(i.second > max)\n            max = i.second;\n    return max;",
    "    std::unordered_map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto num : nums) {\n        if (freq[num] > max_freq) {\n            max_freq = freq[num];\n            max_num = num;\n        }\n    }\n    return max_num;",
    "    std::unordered_map<long, long> map;\n    for(auto i: nums) {\n        map[i]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for(auto i: map) {\n        if(i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    // Write your code here\n    std::unordered_map<long, long> map;\n    for(auto i : nums){\n        map[i]++;\n    }\n    long max = 0;\n    for(auto i : map){\n        if(i.second > max){\n            max = i.second;\n        }\n    }\n    return max;",
    "\tstd::map<long, long> m;\n\tfor (auto i : nums)\n\t\tm[i]++;\n\tlong max = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max)\n\t\t\tmax = i.second;\n\t}\n\treturn max;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > max_count) {\n            max_count = it->second;\n            max_num = it->first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (int i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long,long> map;\n    for(auto i:nums){\n        map[i]++;\n    }\n    long max=0;\n    long max_key=0;\n    for(auto i:map){\n        if(i.second>max){\n            max=i.second;\n            max_key=i.first;\n        }\n    }\n    return max_key;",
    "    std::unordered_map<long, long> freq;\n    for (auto n : nums) {\n        freq[n]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto f : freq) {\n        if (f.second > max_freq) {\n            max_freq = f.second;\n            max_num = f.first;\n        }\n    }\n    return max_num;",
    "\tstd::map<long, long> map;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tmap[nums[i]]++;\n\t}\n\tlong max_occur = 0;\n\tlong max_num = 0;\n\tfor (auto it = map.begin(); it != map.end(); it++) {\n\t\tif (it->second > max_occur) {\n\t\t\tmax_occur = it->second;\n\t\t\tmax_num = it->first;\n\t\t}\n\t}\n\treturn max_num;",
    "    std::unordered_map<long, long> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    long max = 0;\n    long max_num = 0;\n    for (auto num : map) {\n        if (num.second > max) {\n            max = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    // Write your code here\n    std::map<long, long> mymap;\n    for(int i=0;i<nums.size();i++){\n        mymap[nums[i]]++;\n    }\n    long max_val = 0;\n    long max_key = 0;\n    for(auto it = mymap.begin();it!=mymap.end();it++){\n        if(it->second > max_val){\n            max_val = it->second;\n            max_key = it->first;\n        }\n    }\n    return max_key;",
    "\tstd::map<long,long> m;\n\tfor(auto i:nums)\n\t\tm[i]++;\n\tlong max_freq=0;\n\tlong max_item=0;\n\tfor(auto i:m)\n\t\tif(i.second>max_freq){\n\t\t\tmax_freq=i.second;\n\t\t\tmax_item=i.first;\n\t\t}\n\treturn max_item;",
    "    std::unordered_map<long, long> m;\n    for(auto x: nums)\n        m[x]++;\n    long max_count = 0;\n    long max_key = 0;\n    for(auto x: m) {\n        if(x.second > max_count) {\n            max_count = x.second;\n            max_key = x.first;\n        }\n    }\n    return max_key;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for(auto i: nums) {\n        m[i]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for(auto i: m) {\n        if(i.second > max) {\n            max = i.second;\n            max_key = i.first;\n        }\n    }\n    return max_key;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max_count=0;\n    long max_num=0;\n    for(auto i=m.begin();i!=m.end();i++)\n    {\n        if(i->second>max_count)\n        {\n            max_count=i->second;\n            max_num=i->first;\n        }\n    }\n    return max_num;",
    "    std::sort(nums.begin(),nums.end());\n    long max_count=0,max_num=0;\n    long count=1;\n    for(int i=0;i<nums.size()-1;i++){\n        if(nums[i]==nums[i+1]){\n            count++;\n        }\n        else{\n            if(count>max_count){\n                max_count=count;\n                max_num=nums[i];\n            }\n            count=1;\n        }\n    }\n    if(count>max_count){\n        max_count=count;\n        max_num=nums[nums.size()-1];\n    }\n    return max_num;",
    "\tstd::map<long, long> m;\n\tfor (auto i : nums) {\n\t\tm[i]++;\n\t}\n\tlong max = 0;\n\tlong max_key = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max) {\n\t\t\tmax = i.second;\n\t\t\tmax_key = i.first;\n\t\t}\n\t}\n\treturn max_key;",
    "    std::map<long,long> freq;\n    for(auto i:nums)\n    {\n        freq[i]++;\n    }\n    long max_freq=0,max_num=0;\n    for(auto i:freq)\n    {\n        if(i.second>max_freq)\n        {\n            max_freq=i.second;\n            max_num=i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max_count=0;\n    long max_key=0;\n    for(auto it=m.begin();it!=m.end();it++){\n        if(it->second>max_count){\n            max_count=it->second;\n            max_key=it->first;\n        }\n    }\n    return max_key;",
    "    std::map<long,long> freq;\n    for(auto i:nums)\n        freq[i]++;\n    long max_freq=0,max_num=0;\n    for(auto i:freq)\n    {\n        if(i.second>max_freq)\n        {\n            max_freq=i.second;\n            max_num=i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> freq;\n    for (auto n : nums) {\n        freq[n]++;\n    }\n    long max_freq = 0;\n    long max_item = 0;\n    for (auto f : freq) {\n        if (f.second > max_freq) {\n            max_freq = f.second;\n            max_item = f.first;\n        }\n    }\n    return max_item;",
    "    std::map<long, long> m;\n    for(auto i: nums) {\n        m[i]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for(auto i: m) {\n        if(i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = INT_MIN;\n    long max_occur = INT_MIN;\n    for (auto i : m) {\n        if (i.second > max_occur) {\n            max = i.first;\n            max_occur = i.second;\n        }\n    }\n    return max;",
    "\tstd::map<long, long> m;\n\tfor (auto i : nums) {\n\t\tm[i]++;\n\t}\n\tlong max = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max) {\n\t\t\tmax = i.second;\n\t\t}\n\t}\n\treturn max;",
    "    // Write your code here\n    long max=0;\n    long max_count=0;\n    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    for(auto it=m.begin();it!=m.end();it++)\n    {\n        if(it->second>max_count)\n        {\n            max_count=it->second;\n            max=it->first;\n        }\n    }\n    return max;",
    "    std::unordered_map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->second > max_freq) {\n            max_freq = it->second;\n            max_num = it->first;\n        }\n    }\n    return max_num;",
    "    std::map<long,int> freq;\n    for(auto i:nums)\n        freq[i]++;\n    int max=0;\n    long ans;\n    for(auto i:freq)\n    {\n        if(i.second>max)\n        {\n            max=i.second;\n            ans=i.first;\n        }\n    }\n    return ans;",
    "    std::unordered_map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0, max_num = 0;\n    for (auto num : freq) {\n        if (num.second > max_freq) {\n            max_freq = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "\tstd::unordered_map<long, long> m;\n\tfor (auto i : nums) {\n\t\tm[i]++;\n\t}\n\tlong max = 0;\n\tlong max_num = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max) {\n\t\t\tmax = i.second;\n\t\t\tmax_num = i.first;\n\t\t}\n\t}\n\treturn max_num;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    long max_num = 0;\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second > max) {\n            max = i->second;\n            max_num = i->first;\n        }\n    }\n    return max_num;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::unordered_map<long, long> map;\n    for (long num : nums) {\n        map[num]++;\n        if (map[num] > max_count) {\n            max_count = map[num];\n            max_num = num;\n        }\n    }\n    return max_num;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::unordered_map<long, long> count;\n    for (long num : nums) {\n        count[num]++;\n        if (count[num] > max_count) {\n            max_count = count[num];\n            max_num = num;\n        }\n    }\n    return max_num;",
    "    std::unordered_map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto item : freq) {\n        if (item.second > max_freq) {\n            max_freq = item.second;\n            max_num = item.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->second > max) {\n            max = i->second;\n        }\n    }\n    return max;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::map<long, long> count;\n    for (long i = 0; i < nums.size(); i++) {\n        count[nums[i]]++;\n        if (count[nums[i]] > max_count) {\n            max_count = count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max_count = 0;\n    long max_item = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > max_count) {\n            max_count = it->second;\n            max_item = it->first;\n        }\n    }\n    return max_item;",
    "    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second > max) {\n            max = it->second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for (auto i : m) {\n        if (i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second > max) {\n            max = it->second;\n            max_key = it->first;\n        }\n    }\n    return max_key;",
    "  long max_count = 0;\n  long max_item = 0;\n  std::map<long, long> count;\n  for (int i = 0; i < nums.size(); i++) {\n    count[nums[i]]++;\n    if (count[nums[i]] > max_count) {\n      max_count = count[nums[i]];\n      max_item = nums[i];\n    }\n  }\n  return max_item;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for (auto i : m) {\n        if (i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "\tstd::map<long, long> map;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tmap[nums[i]]++;\n\t}\n\tlong max = 0;\n\tlong max_key = 0;\n\tfor (auto it = map.begin(); it != map.end(); it++) {\n\t\tif (it->second > max) {\n\t\t\tmax = it->second;\n\t\t\tmax_key = it->first;\n\t\t}\n\t}\n\treturn max_key;",
    "    long max = 0;\n    long max_index = 0;\n    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        if(m.find(nums[i]) == m.end()) {\n            m[nums[i]] = 1;\n        } else {\n            m[nums[i]]++;\n        }\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second > max) {\n            max = it->second;\n            max_index = it->first;\n        }\n    }\n    return max_index;",
    "    // Write your code here\n    std::map<long, long> m;\n    for(auto i : nums)\n        m[i]++;\n    long max = 0;\n    for(auto i : m)\n        if(i.second > max)\n            max = i.second;\n    return max;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max=0;\n    long max_key=0;\n    for(auto i=m.begin();i!=m.end();i++){\n        if(i->second>max){\n            max=i->second;\n            max_key=i->first;\n        }\n    }\n    return max_key;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n    {\n        m[i]++;\n    }\n    long max=0;\n    long max_num=0;\n    for(auto i:m)\n    {\n        if(i.second>max)\n        {\n            max=i.second;\n            max_num=i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max=0;\n    for(auto it=m.begin();it!=m.end();it++)\n    {\n        if(it->second>max)\n        {\n            max=it->second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for(auto i: nums) {\n        m[i]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for(auto i: m) {\n        if(i.second > max_freq) {\n            max_freq = i.second;\n            max_num = i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(auto i: nums)\n        m[i]++;\n    long max = 0;\n    for(auto i: m)\n        if(i.second > max)\n            max = i.second;\n    return max;",
    "\tstd::map<long, long> m;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tm[nums[i]]++;\n\t}\n\tlong max = 0;\n\tfor (auto it = m.begin(); it != m.end(); it++) {\n\t\tif (it->second > max) {\n\t\t\tmax = it->second;\n\t\t}\n\t}\n\treturn max;",
    "    std::unordered_map<long, long> freq;\n    for (long i = 0; i < nums.size(); i++) {\n        freq[nums[i]]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto it = freq.begin(); it != freq.end(); it++) {\n        if (it->second > max_freq) {\n            max_freq = it->second;\n            max_num = it->first;\n        }\n    }\n    return max_num;",
    "    long max_occurrences = 0;\n    long max_occurrences_item = 0;\n    std::map<long, long> occurrences;\n    for (long num : nums) {\n        occurrences[num]++;\n        if (occurrences[num] > max_occurrences) {\n            max_occurrences = occurrences[num];\n            max_occurrences_item = num;\n        }\n    }\n    return max_occurrences_item;",
    "    std::map<long, long> m;\n    for(auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for(auto i : m) {\n        if(i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "\tstd::map<long, long> count;\n\tfor (auto i : nums) {\n\t\tcount[i]++;\n\t}\n\tlong max = 0;\n\tfor (auto i : count) {\n\t\tif (i.second > max) {\n\t\t\tmax = i.second;\n\t\t}\n\t}\n\treturn max;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::unordered_map<long, long> count;\n    for (auto num : nums) {\n        count[num]++;\n        if (count[num] > max_count) {\n            max_count = count[num];\n            max_num = num;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(auto i : nums) {\n        m[i]++;\n    }\n    long max_occur = 0;\n    long max_num = 0;\n    for(auto i : m) {\n        if(i.second > max_occur) {\n            max_occur = i.second;\n            max_num = i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> mp;\n    for(long i=0;i<nums.size();i++){\n        mp[nums[i]]++;\n    }\n    long max_count=0;\n    long max_num=0;\n    for(auto itr=mp.begin();itr!=mp.end();itr++){\n        if(itr->second>max_count){\n            max_count=itr->second;\n            max_num=itr->first;\n        }\n    }\n    return max_num;",
    "    // Write your code here\n    std::map<long, long> m;\n    for(auto i : nums)\n        m[i]++;\n    long max = 0;\n    for(auto i : m)\n        if(i.second > max)\n            max = i.second;\n    return max;",
    "    // Write your code here\n    std::map<long,long> m;\n    for(auto i:nums)\n    {\n        m[i]++;\n    }\n    long max=0;\n    for(auto i:m)\n    {\n        if(i.second>max)\n        {\n            max=i.second;\n        }\n    }\n    return max;",
    "    std::unordered_map<long, long> freq;\n    for (auto i : nums) {\n        freq[i]++;\n    }\n    long max_freq = 0;\n    long max_item = 0;\n    for (auto i : freq) {\n        if (i.second > max_freq) {\n            max_freq = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    std::map<long, long> m;\n    for(int i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max = 0;\n    long max_num = 0;\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->second > max) {\n            max = i->second;\n            max_num = i->first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    long max = 0;\n    for(auto i : nums) {\n        m[i]++;\n        if(m[i] > max) {\n            max = m[i];\n        }\n    }\n    for(auto i : m) {\n        if(i.second == max) {\n            return i.first;\n        }\n    }\n    return -1;",
    "    std::unordered_map<long, long> map;\n    for(auto num : nums) {\n        map[num]++;\n    }\n    long max_count = 0;\n    long max_num = 0;\n    for(auto num : map) {\n        if(num.second > max_count) {\n            max_count = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    std::unordered_map<long, long> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    long max_count = 0;\n    long max_num = 0;\n    for (auto num : map) {\n        if (num.second > max_count) {\n            max_count = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> num_map;\n    for (auto num : nums) {\n        num_map[num]++;\n    }\n    long max_num = 0;\n    long max_count = 0;\n    for (auto num : num_map) {\n        if (num.second > max_count) {\n            max_count = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for (int i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max_val = 0;\n    long max_key = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second > max_val) {\n            max_val = it->second;\n            max_key = it->first;\n        }\n    }\n    return max_key;",
    "    std::map<long, long> map;\n    for (long i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > max_count) {\n            max_count = it->second;\n            max_item = it->first;\n        }\n    }\n    return max_item;",
    "\tstd::map<long, long> m;\n\tfor (auto i : nums) {\n\t\tm[i]++;\n\t}\n\tlong max = 0;\n\tlong max_key = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max) {\n\t\t\tmax = i.second;\n\t\t\tmax_key = i.first;\n\t\t}\n\t}\n\treturn max_key;",
    "\tstd::map<long, long> m;\n\tfor (auto i : nums) {\n\t\tm[i]++;\n\t}\n\tlong max = 0;\n\tlong max_num = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max) {\n\t\t\tmax = i.second;\n\t\t\tmax_num = i.first;\n\t\t}\n\t}\n\treturn max_num;",
    "\tstd::map<long, long> m;\n\tfor (long i = 0; i < nums.size(); i++) {\n\t\tm[nums[i]]++;\n\t}\n\tlong max = 0;\n\tfor (auto it = m.begin(); it != m.end(); it++) {\n\t\tif (it->second > max) {\n\t\t\tmax = it->second;\n\t\t}\n\t}\n\treturn max;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++){\n        m[nums[i]]++;\n    }\n    long max=0;\n    long max_key;\n    for(auto it=m.begin();it!=m.end();it++){\n        if(it->second>max){\n            max=it->second;\n            max_key=it->first;\n        }\n    }\n    return max_key;",
    "    long max_count = 0;\n    long max_item = 0;\n    std::unordered_map<long, long> map;\n    for (auto num : nums) {\n        map[num]++;\n        if (map[num] > max_count) {\n            max_count = map[num];\n            max_item = num;\n        }\n    }\n    return max_item;",
    "    std::map<long,long> m;\n    for(auto i:nums)\n        m[i]++;\n    long max_occur = 0;\n    long max_occur_num = 0;\n    for(auto i:m)\n    {\n        if(i.second > max_occur)\n        {\n            max_occur = i.second;\n            max_occur_num = i.first;\n        }\n    }\n    return max_occur_num;",
    "    long max_count = 0;\n    long max_num = 0;\n    std::map<long, long> m;\n    for(auto i : nums) {\n        m[i]++;\n        if(m[i] > max_count) {\n            max_count = m[i];\n            max_num = i;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto num : freq) {\n        if (num.second > max_freq) {\n            max_freq = num.second;\n            max_num = num.first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max_occur = 0;\n    long max_key = 0;\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->second > max_occur) {\n            max_occur = i->second;\n            max_key = i->first;\n        }\n    }\n    return max_key;",
    "    std::sort(nums.begin(), nums.end());\n    long max_count = 0;\n    long max_num = 0;\n    long count = 1;\n    for (long i = 0; i < nums.size() - 1; i++) {\n        if (nums[i] == nums[i + 1]) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n                max_num = nums[i];\n            }\n            count = 1;\n        }\n    }\n    if (count > max_count) {\n        max_count = count;\n        max_num = nums[nums.size() - 1];\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    long max_num = 0;\n    for(auto i : m) {\n        if(i.second > max) {\n            max = i.second;\n            max_num = i.first;\n        }\n    }\n    return max_num;"
  ]
}