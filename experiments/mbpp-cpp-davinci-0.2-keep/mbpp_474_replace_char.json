{
  "name": "mbpp_474_replace_char",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace characters in a string.\nstd::string replace_char(std::string str1, std::string ch, std::string newch) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = replace_char;\n    assert(candidate((\"polygon\"), (\"y\"), (\"l\")) == (\"pollgon\"));\n    assert(candidate((\"character\"), (\"c\"), (\"a\")) == (\"aharaater\"));\n    assert(candidate((\"python\"), (\"l\"), (\"a\")) == (\"python\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string str2;\n    for(int i=0; i<str1.length(); i++) {\n        if(str1[i] == ch[0]) {\n            str2 += newch;\n        }\n        else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    int i = 0;\n    while(str1[i] != '\\0') {\n        if(str1[i] == ch[0]) {\n            str1[i] = newch[0];\n        }\n        i++;\n    }\n    return str1;",
    "    std::string result = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ch[0]) {\n            result += newch;\n        } else {\n            result += str1[i];\n        }\n    }\n    return result;",
    "    std::string str2;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ch[0]) {\n            str2.append(newch);\n        } else {\n            str2.push_back(str1[i]);\n        }\n    }\n    return str2;",
    "    std::string str2;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ch[0]) {\n            str2 += newch;\n        } else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    std::string str2;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ch[0]) {\n            str2 += newch;\n        }\n        else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    for(int i = 0; i < str1.length(); i++) {\n        if(str1[i] == ch[0]) {\n            str1[i] = newch[0];\n        }\n    }\n    return str1;",
    "    std::string str2;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ch[0]) {\n            str2 += newch;\n        } else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    std::string str2;\n    for(int i = 0; i < str1.length(); i++) {\n        if(str1[i] == ch[0]) {\n            str2 += newch;\n        } else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    std::string str2;\n    for(int i=0; i<str1.length(); i++) {\n        if(str1[i] == ch[0]) {\n            str2 += newch;\n        } else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "  std::string str2 = \"\";\n  for(int i = 0; i < str1.length(); i++) {\n    if(str1[i] == ch[0]) {\n      str2 += newch;\n    } else {\n      str2 += str1[i];\n    }\n  }\n  return str2;",
    "    std::string str2 = \"\";\n    for(int i=0; i<str1.length(); i++) {\n        if(str1[i] == ch[0]) {\n            str2 += newch;\n        }\n        else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "\tstd::string::size_type pos = 0;\n\twhile ((pos = str1.find(ch, pos)) != std::string::npos) {\n\t\tstr1.replace(pos, ch.size(), newch);\n\t\tpos += newch.size();\n\t}\n\treturn str1;",
    "    std::string str2;\n    for(int i=0;i<str1.length();i++) {\n        if(str1[i]==ch[0]) {\n            str2+=newch;\n        }\n        else {\n            str2+=str1[i];\n        }\n    }\n    return str2;",
    "    std::string str2;\n    for(int i = 0; i < str1.length(); i++) {\n        if(str1[i] == ch[0]) {\n            str2 += newch;\n        }\n        else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    std::string::size_type pos = 0;\n    while ((pos = str1.find(ch, pos)) != std::string::npos) {\n        str1.replace(pos, ch.size(), newch);\n        pos += newch.size();\n    }\n    return str1;",
    "    std::string str2;\n    for(int i = 0; i < str1.length(); i++) {\n        if(str1[i] == ch[0]) {\n            str2 += newch;\n        } else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ch[0]) {\n            str1[i] = newch[0];\n        }\n    }\n    return str1;",
    "    std::string str2 = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1[i] == ch[0]) {\n            str2 += newch;\n        } else {\n            str2 += str1[i];\n        }\n    }\n    return str2;",
    "    std::string str2 = \"\";\n    for (int i = 0; i < str1.length(); i++) {\n        if (str1[i] == ch[0]) {\n            str2 += newch;\n        } else {\n            str2 += str1[i];\n        }\n    }\n    return str2;"
  ]
}