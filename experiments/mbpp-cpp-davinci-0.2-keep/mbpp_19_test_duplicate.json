{
  "name": "mbpp_19_test_duplicate",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find whether a given array of integers contains any duplicate element.\nbool test_duplicate(std::vector<long> arraynums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = test_duplicate;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5}))) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<long> hashset;\n    for (auto i : arraynums) {\n        if (hashset.find(i) != hashset.end()) {\n            return true;\n        } else {\n            hashset.insert(i);\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<long> hashset;\n    for (auto num : arraynums) {\n        if (hashset.find(num) != hashset.end()) {\n            return true;\n        }\n        hashset.insert(num);\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<long> hashset;\n    for (long num : arraynums) {\n        if (hashset.find(num) != hashset.end()) {\n            return true;\n        }\n        hashset.insert(num);\n    }\n    return false;",
    "    std::unordered_set<long> hashset;\n    for (auto num: arraynums) {\n        if (hashset.find(num) != hashset.end()) {\n            return true;\n        }\n        hashset.insert(num);\n    }\n    return false;",
    "    std::sort(arraynums.begin(), arraynums.end());\n    for (int i = 0; i < arraynums.size() - 1; i++) {\n        if (arraynums[i] == arraynums[i + 1]) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<long> setnums;\n    for (long i = 0; i < arraynums.size(); i++) {\n        if (setnums.find(arraynums[i]) != setnums.end()) {\n            return true;\n        }\n        setnums.insert(arraynums[i]);\n    }\n    return false;"
  ]
}