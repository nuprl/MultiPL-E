{
  "name": "mbpp_766_pair_wise",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return a list of all pairs of consecutive items in a given list.\nstd::vector<long> pair_wise(std::vector<long> l1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = pair_wise;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)3, (long)3, (long)4, (long)4, (long)5}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(3, 3), (std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(4, 4), (std::tuple<long, long>)std::make_tuple(4, 5)})));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(1, 5), (std::tuple<long, long>)std::make_tuple(5, 7), (std::tuple<long, long>)std::make_tuple(7, 9), (std::tuple<long, long>)std::make_tuple(9, 10)})));\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)9, (long)7, (long)10}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(1, 9), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(7, 10)})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(4, 5), (std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(9, 10)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++)\n    {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++) {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++)\n    {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++)\n    {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> v;\n    for(int i=0;i<l1.size()-1;i++)\n    {\n        v.push_back(l1[i]);\n        v.push_back(l1[i+1]);\n    }\n    return v;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++) {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "  std::vector<long> l2;\n  for(int i=0;i<l1.size()-1;i++) {\n    l2.push_back(l1[i]);\n    l2.push_back(l1[i+1]);\n  }\n  return l2;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size() - 1; i++) {\n        result.push_back(l1[i]);\n        result.push_back(l1[i + 1]);\n    }\n    return result;",
    "    std::vector<long> l2;\n    for(int i=0; i<l1.size()-1; i++) {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++)\n    {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++){\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++){\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> ans;\n    for(int i=0;i<l1.size()-1;i++)\n    {\n        ans.push_back(l1[i]);\n        ans.push_back(l1[i+1]);\n    }\n    return ans;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++)\n    {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for (int i = 0; i < l1.size() - 1; i++) {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i + 1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++)\n    {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for (int i = 0; i < l1.size() - 1; i++) {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i + 1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++) {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i = 0; i < l1.size()-1; i++) {\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;",
    "    std::vector<long> l2;\n    for(int i=0;i<l1.size()-1;i++){\n        l2.push_back(l1[i]);\n        l2.push_back(l1[i+1]);\n    }\n    return l2;"
  ]
}