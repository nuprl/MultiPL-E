{
  "name": "mbpp_444_trim_tuple",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to trim each tuple by k in the given tuple list.\nstd::string trim_tuple(std::vector<long> test_list, long K) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = trim_tuple;\n    assert(candidate((std::vector<long>({(std::tuple<long, long, long, long, long>)std::make_tuple(5, 3, 2, 1, 4), (std::tuple<long, long, long, long, long>)std::make_tuple(3, 4, 9, 2, 1), (std::tuple<long, long, long, long, long>)std::make_tuple(9, 1, 2, 3, 5), (std::tuple<long, long, long, long, long>)std::make_tuple(4, 8, 2, 1, 7)})), (2)) == (\"[(2,), (9,), (2,), (2,)]\"));\n    assert(candidate((std::vector<long>({(std::tuple<long, long, long, long, long>)std::make_tuple(5, 3, 2, 1, 4), (std::tuple<long, long, long, long, long>)std::make_tuple(3, 4, 9, 2, 1), (std::tuple<long, long, long, long, long>)std::make_tuple(9, 1, 2, 3, 5), (std::tuple<long, long, long, long, long>)std::make_tuple(4, 8, 2, 1, 7)})), (1)) == (\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\"));\n    assert(candidate((std::vector<long>({(std::tuple<long, long, long, long>)std::make_tuple(7, 8, 4, 9), (std::tuple<long, long, long, long>)std::make_tuple(11, 8, 12, 4), (std::tuple<long, long, long, long>)std::make_tuple(4, 1, 7, 8), (std::tuple<long, long, long, long>)std::make_tuple(3, 6, 9, 7)})), (1)) == (\"[(8, 4), (8, 12), (1, 7), (6, 9)]\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    for (auto i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); ++i) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); ++i) {\n        if (*i > K) {\n            result += std::to_string(*i) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i : test_list) {\n        if (i < K) {\n            result += std::to_string(i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::sort(test_list.begin(), test_list.end());\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i < K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); ++i) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i - K);\n        } else {\n            result += std::to_string(0);\n        }\n        if (i != test_list.end() - 1) {\n            result += \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); ++i) {\n        if (*i > K) {\n            result += std::to_string(*i);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n        if (*it > K) {\n            result += std::to_string(*it - K);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            *it = K;\n        }\n    }\n    std::stringstream ss;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        ss << *it << \" \";\n    }\n    return ss.str();",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n        if (*it > K) {\n            result += std::to_string(*it - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i] - K);\n        }\n        else {\n            result += std::to_string(0);\n        }\n        if(i != test_list.size() - 1) {\n            result += \",\";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] < K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::stringstream ss;\n    for(int i=0; i<test_list.size(); i++) {\n        if(test_list[i] > K) {\n            ss << test_list[i] << \" \";\n        }\n    }\n    return ss.str();",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i=0; i<test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] < K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i : test_list) {\n        if (i > K) {\n            result += std::to_string(i - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if ((*i) > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it < K) {\n            result += std::to_string(*it);\n            result += \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] <= K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::vector<long> result_list;\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            result_list.push_back(*it);\n        }\n    }\n    std::string result_string = \"\";\n    for(auto it = result_list.begin(); it != result_list.end(); it++) {\n        result_string += std::to_string(*it);\n        result_string += \",\";\n    }\n    return result_string;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i : test_list) {\n        if (i > K) {\n            result += std::to_string(i - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            test_list[i] = K;\n        }\n        result += std::to_string(test_list[i]) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto it = test_list.begin(); it != test_list.end(); ++it) {\n        if(*it > K) {\n            result.append(std::to_string(*it));\n            result.append(\",\");\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i : test_list) {\n        if (i > K) {\n            result += std::to_string(i - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] < K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i] - K);\n        }\n        else if(test_list[i] < K) {\n            result += std::to_string(test_list[i] + K);\n        }\n        else {\n            result += std::to_string(test_list[i]);\n        }\n        if(i != test_list.size() - 1) {\n            result += \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i : test_list) {\n        if (i > K) {\n            result += std::to_string(i - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i=0; i<test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]-K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); ++i) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i : test_list) {\n        if (i > K) {\n            result += std::to_string(i - K) + \",\";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result.append(std::to_string(*it));\n            result.append(\",\");\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i : test_list) {\n        result += std::to_string(i - K) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto i = test_list.begin(); i != test_list.end(); i++) {\n        if(*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i < K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); ++i) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); ++i) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto i : test_list) {\n        if(i < K)\n            result += std::to_string(i) + \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] < K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if ((*i) > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::stringstream ss;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            ss << *it << \" \";\n        }\n    }\n    return ss.str();",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] <= K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] <= K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i < K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \",\";\n        }\n    }\n    return result;",
    "    std::stringstream ss;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it < K) {\n            ss << *it << \" \";\n        }\n    }\n    return ss.str();",
    "    std::string result;\n    for(auto i : test_list) {\n        if(i > K) {\n            result += std::to_string(i - K);\n            result += \",\";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto i = test_list.begin(); i != test_list.end(); i++) {\n        if(*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] < K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            result += std::to_string(*it - K);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto it = test_list.begin(); it != test_list.end(); ++it) {\n        if(*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            *it = K;\n        }\n    }\n    std::stringstream ss;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        ss << *it << \" \";\n    }\n    return ss.str();",
    "    std::string result;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it - K);\n        } else {\n            result += std::to_string(0);\n        }\n        result += \" \";\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i : test_list) {\n        if (i > K) {\n            result += std::to_string(i - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = 0; i < test_list.size(); i++) {\n        if (test_list[i] < K) {\n            result += std::to_string(test_list[i]);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i < K) {\n            result += std::to_string(*i) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            result += std::to_string(*it - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto i : test_list) {\n        if(i > K) {\n            result += std::to_string(i - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] < K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] < K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result.push_back(test_list[i]);\n        }\n    }\n    return std::to_string(result.size());",
    "    std::string result;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::vector<long>::iterator itr;\n    std::string str = \"\";\n    for (itr = test_list.begin(); itr != test_list.end(); itr++) {\n        if (*itr < K) {\n            str += std::to_string(*itr) + \" \";\n        }\n    }\n    return str;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K);\n        }\n        else {\n            result += std::to_string(0);\n        }\n        if (i != test_list.size() - 1) {\n            result += \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto i = test_list.begin(); i != test_list.end(); i++) {\n        if(*i < K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto i: test_list) {\n        if(i > K) {\n            result += std::to_string(i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); ++i) {\n        if (*i > K) {\n            result += std::to_string(*i) + \",\";\n        }\n    }\n    return result.substr(0, result.size() - 1);",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        if (i > K) {\n            result.push_back(i - K);\n        }\n    }\n    return std::to_string(result.size());",
    "    std::string result = \"\";\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto it = test_list.begin(); it != test_list.end(); ++it) {\n        if(*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it < K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i < K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K);\n        }\n        else {\n            result += std::to_string(0);\n        }\n        if (i != test_list.size() - 1) {\n            result += \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it < K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] >= K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result.push_back(*i);\n        }\n    }\n    std::stringstream ss;\n    for (auto i = result.begin(); i != result.end(); i++) {\n        ss << *i << \" \";\n    }\n    return ss.str();",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n        if (*it > K) {\n            result += std::to_string(*it) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it < K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            *it = K;\n        }\n    }\n    std::stringstream ss;\n    std::copy(test_list.begin(), test_list.end(), std::ostream_iterator<long>(ss, \",\"));\n    std::string s = ss.str();\n    s = s.substr(0, s.size() - 1);\n    return s;",
    "    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); ++it) {\n        if (*it > K) {\n            *it = K;\n        }\n    }\n    std::stringstream ss;\n    std::copy(test_list.begin(), test_list.end(), std::ostream_iterator<long>(ss, \" \"));\n    std::string s = ss.str();\n    return s;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] <= K) {\n            result += std::to_string(test_list[i]);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto i: test_list) {\n        if(i > K) {\n            result += std::to_string(i - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i] < K) {\n            result += std::to_string(test_list[i]);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it < K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it < K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] <= K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i] < K) {\n            result += std::to_string(test_list[i]);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string res;\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            res += std::to_string(*it) + \" \";\n        }\n    }\n    return res;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(long i=0; i<test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] < K) {\n            result += std::to_string(test_list[i]);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result.push_back(*i);\n        }\n    }\n    std::stringstream ss;\n    std::copy(result.begin(), result.end(), std::ostream_iterator<long>(ss, \",\"));\n    return ss.str();",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); ++i) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            *it = K;\n        }\n    }\n    std::stringstream ss;\n    std::copy(test_list.begin(), test_list.end(), std::ostream_iterator<long>(ss, \" \"));\n    return ss.str();",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string output = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            output += std::to_string(*i) + \" \";\n        }\n    }\n    return output;",
    "    std::string result = \"\";\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it < K) {\n            result += std::to_string(*it);\n            result += \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    std::sort(test_list.begin(), test_list.end());\n    for (auto i = 0; i < test_list.size(); i++) {\n        if (test_list[i] <= K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result.substr(0, result.size() - 1);",
    "    std::string result;\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] < K) {\n            result += std::to_string(test_list[i]) + \",\";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i=0; i<test_list.size(); i++) {\n        if(test_list[i] < K) {\n            result += std::to_string(test_list[i]);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::stringstream ss;\n    for(auto it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > K) {\n            ss << *it << \" \";\n        }\n    }\n    return ss.str();",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::stringstream ss;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            ss << *it << \" \";\n        }\n    }\n    return ss.str();",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        if (i < K) {\n            result.push_back(i);\n        }\n    }\n    std::stringstream ss;\n    for (auto i : result) {\n        ss << i << \",\";\n    }\n    std::string result_string = ss.str();\n    result_string = result_string.substr(0, result_string.size() - 1);\n    return result_string;",
    "    std::string result;\n    for (auto i : test_list) {\n        if (i < K) {\n            result += std::to_string(i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n        if (*it < K) {\n            result.append(std::to_string(*it));\n            result.append(\",\");\n        }\n    }\n    return result;"
  ]
}