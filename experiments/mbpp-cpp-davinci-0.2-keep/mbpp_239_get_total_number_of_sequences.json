{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nlong get_total_number_of_sequences(long m, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = get_total_number_of_sequences;\n    assert(candidate((10), (4)) == (4));\n    assert(candidate((5), (2)) == (6));\n    assert(candidate((16), (3)) == (84));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here.\n    long dp[n+1][m+1];\n    memset(dp,0,sizeof(dp));\n    for(long i=0;i<=m;i++)\n        dp[1][i]=1;\n    for(long i=2;i<=n;i++)\n    {\n        for(long j=2;j<=m;j++)\n        {\n            for(long k=2*j;k<=j;k++)\n            {\n                dp[i][j]+=dp[i-1][k];\n            }\n        }\n    }\n    long sum=0;\n    for(long i=1;i<=m;i++)\n        sum+=dp[n][i];\n    return sum;",
    "    // Write your code here.\n    long dp[n+1][m+1];\n    memset(dp,0,sizeof(dp));\n    for(int i=0;i<=m;i++){\n        dp[1][i]=1;\n    }\n    for(int i=2;i<=n;i++){\n        for(int j=2;j<=m;j++){\n            for(int k=2*j;k<=j;k++){\n                dp[i][j]+=dp[i-1][k];\n            }\n        }\n    }\n    long sum=0;\n    for(int i=1;i<=m;i++){\n        sum+=dp[n][i];\n    }\n    return sum;",
    "  // Write your code here.\n\tstd::vector<long> dp(n+1, 0);\n\tdp[0] = 1;\n\tfor(int i = 1; i <= n; i++){\n\t\tfor(int j = 1; j <= m; j++){\n\t\t\tif(j >= 2*i){\n\t\t\t\tdp[i] += dp[i-1];\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[n];",
    "    // Write your code here.\n    std::vector<long> dp(n+1,0);\n    dp[0]=1;\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            if(j>=2*i){\n                dp[i]+=dp[i-1];\n            }\n        }\n    }\n    return dp[n];",
    "    // Write your code here.\n    long dp[n+1][m+1];\n    memset(dp,0,sizeof(dp));\n    for(int i=0;i<=m;i++)\n    {\n        dp[1][i]=1;\n    }\n    for(int i=2;i<=n;i++)\n    {\n        for(int j=2;j<=m;j++)\n        {\n            for(int k=2*j;k<=j;k++)\n            {\n                dp[i][j]+=dp[i-1][k];\n            }\n        }\n    }\n    return dp[n][m];",
    "    // Write your code here.\n    if(n==0)\n        return 1;\n    if(m==0)\n        return 0;\n    long count = 0;\n    for(long i=2*m;i<=m;i++)\n        count += get_total_number_of_sequences(i,n-1);\n    return count;",
    "    long *dp = new long[n+1];\n    dp[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        dp[i] = 0;\n        for(int j = 2; j <= m; j++) {\n            if(i >= j) {\n                dp[i] += dp[i-j];\n            }\n        }\n    }\n    return dp[n];",
    "    // Write your code here.\n    if(n==0)\n    return 1;\n    if(m==0)\n    return 0;\n    long total = 0;\n    for(long i=2*m;i<=m;i++)\n    {\n        total+=get_total_number_of_sequences(i,n-1);\n    }\n    return total;",
    "    long dp[n+1][m+1];\n    for(int i=0;i<=n;i++)\n    {\n        for(int j=0;j<=m;j++)\n        {\n            if(i==0)\n            {\n                dp[i][j]=1;\n            }\n            else if(j==0)\n            {\n                dp[i][j]=0;\n            }\n            else\n            {\n                dp[i][j]=0;\n                for(int k=2*j;k<=j;k++)\n                {\n                    dp[i][j]+=dp[i-1][k];\n                }\n            }\n        }\n    }\n    return dp[n][m];",
    "  // Write your code here.\n\tlong dp[n+1][m+1];\n\tfor(int i=0;i<=n;i++)\n\t{\n\t\tfor(int j=0;j<=m;j++)\n\t\t{\n\t\t\tif(i==0)\n\t\t\t\tdp[i][j]=1;\n\t\t\telse if(j==0)\n\t\t\t\tdp[i][j]=0;\n\t\t\telse if(i==1)\n\t\t\t\tdp[i][j]=1;\n\t\t\telse if(j==1)\n\t\t\t\tdp[i][j]=0;\n\t\t\telse\n\t\t\t{\n\t\t\t\tdp[i][j]=0;\n\t\t\t\tfor(int k=2;k<=j;k++)\n\t\t\t\t{\n\t\t\t\t\tdp[i][j]+=dp[i-1][k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[n][m];",
    "    long *dp = new long[n+1];\n    dp[0] = 1;\n    for(long i=1;i<=n;i++){\n        dp[i] = 0;\n        for(long j=1;j<=m;j++){\n            if(i-j>=0){\n                dp[i] += dp[i-j];\n            }\n        }\n    }\n    long ans = dp[n];\n    delete [] dp;\n    return ans;",
    "    if(n==0)\n        return 1;\n    if(m==0)\n        return 0;\n    long total_number_of_sequences = 0;\n    for(long i=2*m;i<=m;i++)\n        total_number_of_sequences+=get_total_number_of_sequences(i,n-1);\n    return total_number_of_sequences;",
    "    // Write your code here.\n    long dp[n+1][m+1];\n    memset(dp,0,sizeof(dp));\n    for(int i=0;i<=m;i++)\n    {\n        dp[1][i]=1;\n    }\n    for(int i=2;i<=n;i++)\n    {\n        for(int j=2;j<=m;j++)\n        {\n            dp[i][j]=dp[i][j-1]+dp[i-1][j/2];\n        }\n    }\n    return dp[n][m];",
    "  // Write your code here.\n\tif(n==0)\n\t\treturn 1;\n\tif(m==0)\n\t\treturn 0;\n\tlong count=0;\n\tfor(int i=2*m;i<=m;i++)\n\t\tcount+=get_total_number_of_sequences(i,n-1);\n\treturn count;",
    "    // Write your code here.\n    long dp[n+1][m+1];\n    memset(dp,0,sizeof(dp));\n    for(int i=0;i<=m;i++){\n        dp[1][i]=1;\n    }\n    for(int i=2;i<=n;i++){\n        for(int j=2;j<=m;j++){\n            for(int k=2*j;k<=j;k++){\n                dp[i][j]+=dp[i-1][k];\n            }\n        }\n    }\n    long sum=0;\n    for(int i=1;i<=m;i++){\n        sum+=dp[n][i];\n    }\n    return sum;",
    "    long *dp = new long[n+1];\n    dp[0] = 1;\n    for(long i = 1; i <= n; i++){\n        dp[i] = 0;\n        for(long j = 2; j <= m; j++){\n            if(i-j >= 0){\n                dp[i] += dp[i-j];\n            }\n        }\n    }\n    long ans = dp[n];\n    delete [] dp;\n    return ans;",
    "    // Write your code here.\n    if(n == 1)\n        return m;\n    long dp[n+1];\n    dp[0] = 0;\n    dp[1] = m;\n    for(int i = 2; i <= n; i++){\n        dp[i] = 0;\n        for(int j = 1; j <= m; j++){\n            if(j >= 2*dp[i-1])\n                dp[i] += dp[i-1];\n        }\n    }\n    return dp[n];",
    "    if(n==0)\n        return 1;\n    if(m==0)\n        return 0;\n    return get_total_number_of_sequences(m-1,n)+get_total_number_of_sequences(m/2,n-1);",
    "    // Write your code here.\n    long dp[n+1][m+1];\n    memset(dp,0,sizeof(dp));\n    for(long i=0;i<=m;i++){\n        dp[1][i]=1;\n    }\n    for(long i=2;i<=n;i++){\n        for(long j=2;j<=m;j++){\n            dp[i][j]=dp[i][j-1]+dp[i-1][j/2];\n        }\n    }\n    return dp[n][m];",
    "    // Write your code here.\n    long dp[n+1][m+1];\n    memset(dp,0,sizeof(dp));\n    for(long i=1;i<=m;i++){\n        dp[1][i]=1;\n    }\n    for(long i=2;i<=n;i++){\n        for(long j=1;j<=m;j++){\n            for(long k=2*j;k<=j && k<=m;k++){\n                dp[i][j]+=dp[i-1][k];\n            }\n        }\n    }\n    long ans=0;\n    for(long i=1;i<=m;i++){\n        ans+=dp[n][i];\n    }\n    return ans;"
  ]
}