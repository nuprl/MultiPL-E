{
  "name": "mbpp_476_big_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the sum of the largest and smallest value in a given array.\nlong big_sum(std::vector<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = big_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)6}))) == (8));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    long max = *std::max_element(nums.begin(), nums.end());\n    long min = *std::min_element(nums.begin(), nums.end());\n    return max + min;",
    "\tassert(nums.size() > 0);\n\tlong max = nums[0];\n\tlong min = nums[0];\n\tfor(int i = 1; i < nums.size(); i++) {\n\t\tif(nums[i] > max) {\n\t\t\tmax = nums[i];\n\t\t}\n\t\tif(nums[i] < min) {\n\t\t\tmin = nums[i];\n\t\t}\n\t}\n\treturn max + min;",
    "    assert(nums.size() >= 2);\n    long max = nums[0];\n    long min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long min = nums[0];\n    long max = nums[0];\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] < min) {\n            min = nums[i];\n        }\n        if(nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for(int i = 1; i < nums.size(); i++) {\n        if(nums[i] > max) {\n            max = nums[i];\n        }\n        if(nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for(int i=1;i<nums.size();i++){\n        if(nums[i]>max){\n            max = nums[i];\n        }\n        if(nums[i]<min){\n            min = nums[i];\n        }\n    }\n    return max+min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for(int i=0; i<nums.size(); i++) {\n        if(nums[i] > max) {\n            max = nums[i];\n        }\n        if(nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    assert(nums.size() > 0);\n    long max = nums[0];\n    long min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    if (nums.size() == 0) {\n        return 0;\n    }\n    long min = nums[0];\n    long max = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return min + max;",
    "    long max = nums[0];\n    long min = nums[0];\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > max) {\n            max = nums[i];\n        }\n        if(nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;"
  ]
}