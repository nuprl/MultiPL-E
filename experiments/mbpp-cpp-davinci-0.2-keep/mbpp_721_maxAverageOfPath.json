{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfloat maxAverageOfPath(std::vector<std::vector<long>> cost) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = maxAverageOfPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)6, (long)5, (long)4}), (std::vector<long>)std::vector<long>({(long)7, (long)3, (long)9})}))) == (5.2));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)7, (long)6, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)4, (long)10})}))) == (6.2));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)8, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)11})}))) == (7.2));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (5.8));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < m; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < m; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int i = 1; i < m; i++)\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    for(int i = 1; i < n; i++)\n        for(int j = 1; j < m; j++)\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][m-1]/(n+m-1);",
    "\tint n = cost.size();\n\tstd::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) {\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tdp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "  // Write your code here\n  int n = cost.size();\n  std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n-1);",
    "    int m = cost.size();\n    int n = cost[0].size();\n    std::vector<std::vector<long>> dp(m, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < m; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int j = 1; j < n; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for(int i = 1; i < m; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[m - 1][n - 1] / (m + n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n,std::vector<long>(m,0));\n    dp[0][0] = cost[0][0];\n    for(int i=1;i<n;i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int i=1;i<m;i++)\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    for(int i=1;i<n;i++)\n        for(int j=1;j<m;j++)\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j],dp[i][j-1]);\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "  // Write your code here\n  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = cost[i][j] + std::max(dp[i - 1][j], dp[i][j - 1]);\n    }\n  }\n  return dp[n - 1][n - 1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int j = 1; j < m; j++)\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    for(int i = 1; i < n; i++)\n        for(int j = 1; j < m; j++)\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][m-1] / (n + m - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++){\n        for(int j = 1; j < n; j++){\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = cost[0][i] + dp[0][i-1];\n        dp[i][0] = cost[i][0] + dp[i-1][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < m; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n,std::vector<long>(n,0));\n    dp[0][0] = cost[0][0];\n    for(int i=1;i<n;i++){\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i=1;i<n;i++){\n        for(int j=1;j<n;j++){\n            dp[i][j] = std::max(dp[i-1][j],dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++)\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    for(int i = 1; i < n; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1] / (2*n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int i = 1; i < m; i++)\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    for(int i = 1; i < n; i++)\n        for(int j = 1; j < m; j++)\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "  int n = cost.size();\n  std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2.0*n - 1);",
    "    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i=1; i<n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i=1; i<m; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i=1; i<n; i++) {\n        for(int j=1; j<m; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++){\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < m; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++){\n        for(int j = 1; j < m; j++){\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for(int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n  }\n  for(int i = 1; i < n; i++) {\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(int i = 1; i < n; i++) {\n    for(int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n,std::vector<long>(n,0));\n    dp[0][0] = cost[0][0];\n    for(int i=1;i<n;i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i=1;i<n;i++){\n        for(int j=1;j<n;j++){\n            dp[i][j] = std::max(dp[i-1][j],dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < m; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n - 1][m - 1] / (n + m - 1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for(int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(int i = 1; i < n; i++) {\n    for(int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n,std::vector<long>(n,0));\n    dp[0][0] = cost[0][0];\n    for(int i=1;i<n;i++)\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    for(int i=1;i<n;i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int i=1;i<n;i++){\n        for(int j=1;j<n;j++){\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j],dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "  // Write your code here\n  int n = cost.size();\n  int m = cost[0].size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < m; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < m; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][m - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for(int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(int i = 1; i < n; i++) {\n    for(int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "\tint n = cost.size();\n\tstd::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; ++i) {\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; ++i) {\n\t\tfor (int j = 1; j < n; ++j) {\n\t\t\tdp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[n - 1][n - 1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n - 1);",
    "  // Write your code here\n  int n = cost.size();\n  int m = cost[0].size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < m; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < m; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n - 1][m - 1] / (n + m - 1);",
    "    int n=cost.size();\n    std::vector<std::vector<long>> dp(n,std::vector<long>(n,0));\n    dp[0][0]=cost[0][0];\n    for(int i=1;i<n;i++){\n        dp[0][i]=dp[0][i-1]+cost[0][i];\n        dp[i][0]=dp[i-1][0]+cost[i][0];\n    }\n    for(int i=1;i<n;i++){\n        for(int j=1;j<n;j++){\n            dp[i][j]=std::max(dp[i-1][j],dp[i][j-1])+cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for(int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(int i = 1; i < n; i++) {\n    for(int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "\t// Write your code here\n\tint n = cost.size();\n\tint m = cost[0].size();\n\tstd::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) {\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < m; i++) {\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 1; j < m; j++) {\n\t\t\tdp[i][j] = cost[i][j] + std::max(dp[i - 1][j], dp[i][j - 1]);\n\t\t}\n\t}\n\treturn (float)dp[n - 1][m - 1] / (n + m - 1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n,std::vector<long>(m,0));\n    dp[0][0] = cost[0][0];\n    for(int i=1;i<n;i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int j=1;j<m;j++)\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    for(int i=1;i<n;i++)\n        for(int j=1;j<m;j++)\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j],dp[i][j-1]);\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "  // Write your code here\n  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = cost[i][j] + std::max(dp[i - 1][j], dp[i][j - 1]);\n    }\n  }\n  return dp[n - 1][n - 1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);",
    "    // Write your code here\n    int n=cost.size();\n    std::vector<std::vector<float>> dp(n,std::vector<float>(n,0));\n    dp[0][0]=cost[0][0];\n    for(int i=1;i<n;i++)\n    {\n        dp[0][i]=dp[0][i-1]+cost[0][i];\n        dp[i][0]=dp[i-1][0]+cost[i][0];\n    }\n    for(int i=1;i<n;i++)\n    {\n        for(int j=1;j<n;j++)\n        {\n            dp[i][j]=cost[i][j]+std::max(dp[i-1][j],dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return float(dp[n-1][n-1]) / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    float dp[n][m];\n    dp[0][0] = cost[0][0];\n    for(int i=1;i<n;i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int i=1;i<m;i++)\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    for(int i=1;i<n;i++){\n        for(int j=1;j<m;j++){\n            dp[i][j] = cost[i][j] + max(dp[i-1][j],dp[i][j-1]);\n        }\n    }\n    return dp[n-1][m-1]/(2*n-1);",
    "    // Write your code here\n    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++){\n        for(int j = 1; j < n; j++){\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    // Write your code here\n    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    float dp[n][n];\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for(int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n  }\n  for(int i = 1; i < n; i++) {\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(int i = 1; i < n; i++) {\n    for(int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1] / (2*n - 1);",
    "\tint n = cost.size();\n\tstd::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) {\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tdp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "  int n = cost.size();\n  std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n  dp[0][0] = cost[0][0];\n  for(int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n  }\n  for(int i = 1; i < n; i++) {\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(int i = 1; i < n; i++) {\n    for(int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < m; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][m-1] / (float)(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++)\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    for(int i = 1; i < n; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    // Write your code here\n    int n=cost.size();\n    int m=cost[0].size();\n    std::vector<std::vector<long>> dp(n,std::vector<long>(m,0));\n    dp[0][0]=cost[0][0];\n    for(int i=1;i<n;i++)\n    {\n        dp[i][0]=dp[i-1][0]+cost[i][0];\n    }\n    for(int i=1;i<m;i++)\n    {\n        dp[0][i]=dp[0][i-1]+cost[0][i];\n    }\n    for(int i=1;i<n;i++)\n    {\n        for(int j=1;j<m;j++)\n        {\n            dp[i][j]=cost[i][j]+std::max(dp[i-1][j],dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++)\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    for(int i = 1; i < m; i++)\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    for(int i = 1; i < n; i++)\n        for(int j = 1; j < m; j++)\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    return float(dp[n-1][m-1]) / (n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for(int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(int i = 1; i < n; i++) {\n    for(int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n - 1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for(int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for(int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for(int i = 1; i < n; i++) {\n    for(int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    std::vector<std::vector<long>> dp(n,std::vector<long>(n,0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1;i<n;i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1;i<n;i++){\n        for(int j = 1;j<n;j++){\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j],dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0.0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    // Write your code here\n    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int j = 1; j < n; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    // Write your code here\n    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<float>> dp(n, std::vector<float>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);",
    "  // Write your code here\n  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (int i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return (float)dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);",
    "    int n = cost.size();\n    int m = cost[0].size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(m, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j-1] + cost[0][j];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < m; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][m-1]/(n+m-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2.0 * n - 1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for(int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(int i = 1; i < n; i++) {\n    for(int j = 1; j < n; j++) {\n      dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n    }\n  }\n  return dp[n-1][n-1] / (2.0 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(int i = 1; i < n; i++) {\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1] / (2*n-1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = cost[i][j] + std::max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);",
    "  int n = cost.size();\n  std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n  dp[0][0] = cost[0][0];\n  for (int i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (int i = 1; i < n; i++) {\n    for (int j = 1; j < n; j++) {\n      dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);",
    "    int n = cost.size();\n    std::vector<std::vector<long>> dp(n, std::vector<long>(n, 0));\n    dp[0][0] = cost[0][0];\n    for(int i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 1; j < n; j++) {\n            dp[i][j] = std::max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return (float)dp[n-1][n-1]/(2*n-1);"
  ]
}