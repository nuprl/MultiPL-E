{
  "name": "mbpp_94_index_minimum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nstd::string index_minimum(std::vector<Union_std_string_long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = index_minimum;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Rash\", 143), (std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 200), (std::tuple<std::string, long>)std::make_tuple(\"Varsha\", 100)}))) == (\"Varsha\"));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Yash\", 185), (std::tuple<std::string, long>)std::make_tuple(\"Dawood\", 125), (std::tuple<std::string, long>)std::make_tuple(\"Sanya\", 175)}))) == (\"Dawood\"));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Sai\", 345), (std::tuple<std::string, long>)std::make_tuple(\"Salman\", 145), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 96)}))) == (\"Ayesha\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result;\n    long min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    result = test_list[min_index].f0;\n    return result;",
    "    std::string min_value = \"\";\n    long min_index = std::numeric_limits<long>::max();\n    for (auto t : test_list) {\n        if (t.f1 < min_index) {\n            min_value = t.f0;\n            min_index = t.f1;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    int min_index = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long minimum = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < minimum) {\n            minimum = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_index) {\n            min_value = i.f0;\n            min_index = i.f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    int min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;"
  ]
}