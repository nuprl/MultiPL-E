{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmp8h8sgtfd: /tmp/tmp8h8sgtfd.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmp3r4y76db: /tmp/tmp3r4y76db.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long x = 1;\n    while(x*x <= N) {\n        x++;\n    }\n    return x*x;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmp8h8sgtfd: /tmp/tmp8h8sgtfd.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long num = N;\n    while(true){\n        long sqrt_num = sqrt(num);\n        if(sqrt_num*sqrt_num == num){\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpfln0ax9p: /tmp/tmpfln0ax9p.cpp:19: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i=1;\n    while(i*i<=N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmp8h8sgtfd: /tmp/tmp8h8sgtfd.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i < N)\n        i++;\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpv8o6428z: /tmp/tmpv8o6428z.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i=1;\n    while(i*i<=N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmp8h8sgtfd: /tmp/tmp8h8sgtfd.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n        i++;\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmp8h8sgtfd: /tmp/tmp8h8sgtfd.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmp5vlz5p33: /tmp/tmp5vlz5p33.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmprbaw55cr: /tmp/tmprbaw55cr.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long root = sqrt(N);\n    if(root*root == N)\n        return (root+1)*(root+1);\n    else\n        return (root+1)*(root+1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmp8h8sgtfd: /tmp/tmp8h8sgtfd.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    int i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpa57qfaxx: /tmp/tmpa57qfaxx.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmp8h8sgtfd: /tmp/tmp8h8sgtfd.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    if(N<0)\n        return -1;\n    long i=1;\n    while(i*i<N)\n        i++;\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmp8hvgkwar: /tmp/tmp8hvgkwar.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    int i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i=1;\n    while(i*i<N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpyruwq_6m: /tmp/tmpyruwq_6m.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    long sum=0;\n    while(sum<N){\n        sum+=i;\n        i+=2;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpkmi3t04x: /tmp/tmpkmi3t04x.cpp:18: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    return ceil(sqrt(N))*ceil(sqrt(N));\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpo5cbp5uf: /tmp/tmpo5cbp5uf.cpp:12: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmp8h8sgtfd: /tmp/tmp8h8sgtfd.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i=1;\n    while(i*i<N)\n        i++;\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpb4q7i4bz: /tmp/tmpb4q7i4bz.cpp:14: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long num = N;\n    while(true){\n        long sqrt_num = sqrt(num);\n        if(sqrt_num * sqrt_num == num){\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmph_neuq88: /tmp/tmph_neuq88.cpp:19: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmp5vlz5p33: /tmp/tmp5vlz5p33.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmp4kefllcm: /tmp/tmp4kefllcm.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Your code goes here\n    long num = N;\n    while(true) {\n        long sqrt_num = sqrt(num);\n        if(sqrt_num * sqrt_num == num) {\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpkcdruzes: /tmp/tmpkcdruzes.cpp:19: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpl8mhpwra: /tmp/tmpl8mhpwra.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i=1;\n    while(i*i<N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpyruwq_6m: /tmp/tmpyruwq_6m.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long num = N;\n    while(true) {\n        long sqrt_num = sqrt(num);\n        if(sqrt_num * sqrt_num == num) {\n            return num;\n        }\n        num++;\n    }\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpjxrw3z7o: /tmp/tmpjxrw3z7o.cpp:19: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long num = sqrt(N);\n    if(num*num == N)\n        return (num+1)*(num+1);\n    return -1;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpfomc5f1b: /tmp/tmpfomc5f1b.cpp:12: int main(): Assertion `candidate((35)) == (36)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n\t// Write your code here\n\t// return the next perfect square greater than N\n\tlong i = 1;\n\twhile (i * i < N) {\n\t\ti++;\n\t}\n\treturn i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "tmpxvn1path: /tmp/tmpxvn1path.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n\tlong i;\n\tfor(i=N;i<=N+100;i++){\n\t\tif(sqrt(i)==floor(sqrt(i))){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "tmpz4fubeth: /tmp/tmpz4fubeth.cpp:17: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmp5vlz5p33: /tmp/tmp5vlz5p33.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "tmpl0kmqu_c: /tmp/tmpl0kmqu_c.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmpl8mhpwra: /tmp/tmpl8mhpwra.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=0;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "tmpkli_kfmq: /tmp/tmpkli_kfmq.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long num = sqrt(N);\n    return (num+1)*(num+1);\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    if(N<0)\n        return -1;\n    long i=1;\n    while(i*i<N)\n        i++;\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmp8hvgkwar: /tmp/tmp8hvgkwar.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i<N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "tmpa13broar: /tmp/tmpa13broar.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "tmp5vlz5p33: /tmp/tmp5vlz5p33.cpp:16: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i < N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "tmpbdb27ts5: /tmp/tmpbdb27ts5.cpp:15: int main(): Assertion `candidate((9)) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122774,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N)\n    {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N)\n        i++;\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i=1;\n    while(i*i<=N){\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    // Write your code here\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the next perfect square greater than a given number.\nlong next_Perfect_Square(long N) {\n    long i = 1;\n    while(i*i <= N) {\n        i++;\n    }\n    return i*i;\n}\nint main() {\n    auto candidate = next_Perfect_Square;\n    assert(candidate((35)) == (36));\n    assert(candidate((6)) == (9));\n    assert(candidate((9)) == (16));\n}\n",
      "timestamp": 1665517316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}