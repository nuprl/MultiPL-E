{
  "name": "mbpp_460_Extract",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to get the first element of each sublist.\nstd::vector<long> Extract(std::vector<std::vector<long>> lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = Extract;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)3, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5})}))) == (std::vector<long>({(long)1, (long)4})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)9, (long)8, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2})}))) == (std::vector<long>({(long)9, (long)1})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> output;\n    for(int i=0;i<lst.size();i++){\n        output.push_back(lst[i][0]);\n    }\n    return output;",
    "    std::vector<long> result;\n    for(int i=0;i<lst.size();i++)\n    {\n        result.push_back(lst[i][0]);\n    }\n    return result;",
    "    std::vector<long> res;\n    for(int i=0;i<lst.size();i++){\n        res.push_back(lst[i][0]);\n    }\n    return res;",
    "    std::vector<long> res;\n    for(auto i:lst){\n        res.push_back(i[0]);\n    }\n    return res;",
    "    std::vector<long> res;\n    for(auto i:lst) {\n        res.push_back(i[0]);\n    }\n    return res;",
    "    std::vector<long> output;\n    for(auto i: lst) {\n        output.push_back(i[0]);\n    }\n    return output;",
    "    std::vector<long> res;\n    for(auto i: lst) {\n        res.push_back(i[0]);\n    }\n    return res;",
    "    std::vector<long> res;\n    for(auto i:lst)\n        res.push_back(i[0]);\n    return res;",
    "    std::vector<long> result;\n    for(auto i:lst) {\n        result.push_back(i[0]);\n    }\n    return result;",
    "    std::vector<long> res;\n    for(int i=0;i<lst.size();i++) {\n        res.push_back(lst[i][0]);\n    }\n    return res;",
    "    std::vector<long> result;\n    for (auto i : lst) {\n        result.push_back(i[0]);\n    }\n    return result;",
    "    std::vector<long> res;\n    for(int i=0;i<lst.size();i++){\n        res.push_back(lst[i][0]);\n    }\n    return res;",
    "    std::vector<long> res;\n    for(int i=0;i<lst.size();i++)\n    {\n        res.push_back(lst[i][0]);\n    }\n    return res;",
    "    std::vector<long> res;\n    for(auto i:lst)\n        res.push_back(i[0]);\n    return res;",
    "    std::vector<long> res;\n    for(auto i:lst){\n        res.push_back(i[0]);\n    }\n    return res;",
    "    std::vector<long> res;\n    for(auto i: lst) {\n        res.push_back(i[0]);\n    }\n    return res;",
    "    std::vector<long> result;\n    for(auto i : lst) {\n        result.push_back(i[0]);\n    }\n    return result;",
    "    std::vector<long> res;\n    for(auto i:lst)\n        res.push_back(i[0]);\n    return res;",
    "    std::vector<long> result;\n    for(auto i:lst) {\n        result.push_back(i[0]);\n    }\n    return result;",
    "    std::vector<long> res;\n    for(int i=0;i<lst.size();i++){\n        res.push_back(lst[i][0]);\n    }\n    return res;"
  ]
}