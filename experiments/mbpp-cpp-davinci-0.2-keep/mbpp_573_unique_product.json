{
  "name": "mbpp_573_unique_product",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to calculate the product of the unique numbers in a given list.\nlong unique_product(std::vector<long> list_data) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = unique_product;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)20, (long)50, (long)60, (long)40}))) == (720000000));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1}))) == (6));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)0, (long)1, (long)1}))) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i: list_data){\n        s.insert(i);\n    }\n    for(auto i: s){\n        product *= i;\n    }\n    return product;",
    "    std::set<long> unique_numbers;\n    for (auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    long product = 1;\n    for (auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::unordered_set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        if(s.find(list_data[i])==s.end())\n        {\n            product = product*list_data[i];\n            s.insert(list_data[i]);\n        }\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto itr = s.begin(); itr != s.end(); itr++) {\n        product *= *itr;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++){\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++){\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (long i = 0; i < list_data.size(); i++) {\n        if (unique_set.find(list_data[i]) == unique_set.end()) {\n            unique_set.insert(list_data[i]);\n            product = product * list_data[i];\n        }\n    }\n    return product;",
    "    // write your code here\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> set_data;\n    for(int i = 0; i < list_data.size(); i++) {\n        set_data.insert(list_data[i]);\n    }\n    for(auto it = set_data.begin(); it != set_data.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> unique_set;\n    for(auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for(auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> unique_numbers;\n    for(long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for(auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    std::set<long> s;\n    for(auto i:list_data)\n        s.insert(i);\n    long product = 1;\n    for(auto i:s)\n        product *= i;\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(int i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    for(auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data) {\n        s.insert(i);\n    }\n    for(auto i : s) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i:list_data)\n    {\n        s.insert(i);\n    }\n    for(auto i:s)\n    {\n        product *= i;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data)\n        s.insert(i);\n    for(auto i : s)\n        product *= i;\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> unique_list;\n    for(auto i: list_data)\n        unique_list.insert(i);\n    for(auto i: unique_list)\n        product *= i;\n    return product;",
    "    long product = 1;\n    std::set<long> unique_list;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_list.insert(list_data[i]);\n    }\n    for (auto i = unique_list.begin(); i != unique_list.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data) {\n        s.insert(i);\n    }\n    for(auto i : s) {\n        product *= i;\n    }\n    return product;"
  ]
}