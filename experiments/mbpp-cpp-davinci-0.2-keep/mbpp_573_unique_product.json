{
  "name": "mbpp_573_unique_product",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to calculate the product of the unique numbers in a given list.\nlong unique_product(std::vector<long> list_data) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = unique_product;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)20, (long)50, (long)60, (long)40}))) == (720000000));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1}))) == (6));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)0, (long)1, (long)1}))) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i: list_data){\n        s.insert(i);\n    }\n    for(auto i: s){\n        product *= i;\n    }\n    return product;",
    "    std::set<long> unique_numbers;\n    for (auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    long product = 1;\n    for (auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::unordered_set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        if(s.find(list_data[i])==s.end())\n        {\n            product = product*list_data[i];\n            s.insert(list_data[i]);\n        }\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto itr = s.begin(); itr != s.end(); itr++) {\n        product *= *itr;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++){\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++){\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (long i = 0; i < list_data.size(); i++) {\n        if (unique_set.find(list_data[i]) == unique_set.end()) {\n            unique_set.insert(list_data[i]);\n            product = product * list_data[i];\n        }\n    }\n    return product;",
    "    // write your code here\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> set_data;\n    for(int i = 0; i < list_data.size(); i++) {\n        set_data.insert(list_data[i]);\n    }\n    for(auto it = set_data.begin(); it != set_data.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> unique_set;\n    for(auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for(auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> unique_numbers;\n    for(long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for(auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    std::set<long> s;\n    for(auto i:list_data)\n        s.insert(i);\n    long product = 1;\n    for(auto i:s)\n        product *= i;\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(int i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    for(auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data) {\n        s.insert(i);\n    }\n    for(auto i : s) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i:list_data)\n    {\n        s.insert(i);\n    }\n    for(auto i:s)\n    {\n        product *= i;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data)\n        s.insert(i);\n    for(auto i : s)\n        product *= i;\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> unique_list;\n    for(auto i: list_data)\n        unique_list.insert(i);\n    for(auto i: unique_list)\n        product *= i;\n    return product;",
    "    long product = 1;\n    std::set<long> unique_list;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_list.insert(list_data[i]);\n    }\n    for (auto i = unique_list.begin(); i != unique_list.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data) {\n        s.insert(i);\n    }\n    for(auto i : s) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data) {\n        s.insert(i);\n    }\n    for(auto i : s) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for (auto i : list_data) {\n        unique_data.insert(i);\n    }\n    for (auto i : unique_data) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    for(it = list_data.begin(); it != list_data.end(); it++) {\n        int count = 0;\n        for(it2 = list_data.begin(); it2 != list_data.end(); it2++) {\n            if(*it == *it2) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            product = product * *it;\n        }\n    }\n    return product;",
    "    std::set<long> unique_set;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    long product = 1;\n    for (auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for(auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    for(auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long prod = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        prod *= *it;\n    }\n    return prod;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++){\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++){\n        product = product * (*it);\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product = product * (*it);\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i=0; i<list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (int i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    for (auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin();it!=s.end();it++)\n    {\n        product = product*(*it);\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product = product * (*it);\n    }\n    return product;",
    "    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "    std::set<long> unique_data;\n    for (long i = 0; i < list_data.size(); i++) {\n        if (unique_data.find(list_data[i]) == unique_data.end()) {\n            unique_data.insert(list_data[i]);\n        }\n    }\n    long product = 1;\n    for (auto it = unique_data.begin(); it != unique_data.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for(auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data) {\n        s.insert(i);\n    }\n    for(auto i : s) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    for (auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::unordered_set<long> unique_set;\n    for (long i = 0; i < list_data.size(); i++) {\n        if (unique_set.find(list_data[i]) == unique_set.end()) {\n            product *= list_data[i];\n            unique_set.insert(list_data[i]);\n        }\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++){\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++){\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto x : s) {\n        product *= x;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    std::set<long>::iterator it;\n    for(it=s.begin();it!=s.end();it++)\n    {\n        product = product * (*it);\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product = product * (*it);\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (auto i : list_data) {\n        s.insert(i);\n    }\n    for (auto i : s) {\n        product *= i;\n    }\n    return product;",
    "    // Write your code here\n    long prod = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        prod = prod * (*it);\n    }\n    return prod;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i = list_data.begin(); i != list_data.end(); i++) {\n        unique_set.insert(*i);\n    }\n    for (auto i = unique_set.begin(); i != unique_set.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> s;\n    for(int i=0;i<list_data.size();i++) {\n        s.insert(list_data[i]);\n    }\n    long product = 1;\n    for(auto it = s.begin();it!=s.end();it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for (auto i : list_data) {\n        unique_data.insert(i);\n    }\n    for (auto i : unique_data) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto i=s.begin();i!=s.end();i++)\n    {\n        product *= *i;\n    }\n    return product;",
    "    int n = list_data.size();\n    long product = 1;\n    for (int i = 0; i < n; i++) {\n        int j;\n        for (j = 0; j < i; j++)\n            if (list_data[i] == list_data[j])\n                break;\n        if (i == j)\n            product *= list_data[i];\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> set_data;\n    for(long i=0;i<list_data.size();i++){\n        set_data.insert(list_data[i]);\n    }\n    long product = 1;\n    for(auto it = set_data.begin();it!=set_data.end();it++){\n        product = product * (*it);\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_list;\n    for (auto i : list_data) {\n        unique_list.insert(i);\n    }\n    for (auto i : unique_list) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin();it!=s.end();it++)\n    {\n        product = product * (*it);\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i: list_data) {\n        s.insert(i);\n    }\n    for(auto i: s) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++){\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++){\n        product = product * (*it);\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    for (auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> unique_data;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_data.insert(list_data[i]);\n    }\n    long product = 1;\n    for (auto it = unique_data.begin(); it != unique_data.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "    // Write your code here\n    std::set<long> s;\n    for(auto i:list_data)\n    {\n        s.insert(i);\n    }\n    long product = 1;\n    for(auto i:s)\n    {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(int i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    for(auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    for (auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long prod = 1;\n    std::set<long> s;\n    for(long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        prod *= *it;\n    }\n    return prod;",
    "    long product = 1;\n    std::set<long> set_data;\n    for (long i = 0; i < list_data.size(); i++) {\n        set_data.insert(list_data[i]);\n    }\n    for (auto i = set_data.begin(); i != set_data.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for (int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for(int i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for(auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for (auto i : list_data) {\n        unique_data.insert(i);\n    }\n    for (auto i : unique_data) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i:list_data)\n        s.insert(i);\n    for(auto i:s)\n        product *= i;\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i:list_data)\n        s.insert(i);\n    for(auto i:s)\n        product *= i;\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin();it!=s.end();it++)\n    {\n        product = product*(*it);\n    }\n    return product;",
    "    std::set<long> s;\n    for(auto i: list_data) {\n        s.insert(i);\n    }\n    long product = 1;\n    for(auto i: s) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(long i=0;i<list_data.size();i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto i = s.begin(); i != s.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data){\n        s.insert(i);\n    }\n    for(auto i : s){\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    for (auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> unique_set;\n    for (auto i: list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i: unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> s;\n    long product = 1;\n    for(auto i : list_data){\n        s.insert(i);\n    }\n    for(auto i : s){\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for(auto i : list_data){\n        unique_data.insert(i);\n    }\n    for(auto i : unique_data){\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_list;\n    for(auto i : list_data) {\n        unique_list.insert(i);\n    }\n    for(auto i : unique_list) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++){\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin();it!=s.end();it++){\n        product = product * (*it);\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto i = s.begin(); i != s.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    for(it = list_data.begin(); it != list_data.end(); it++) {\n        for(it2 = list_data.begin(); it2 != list_data.end(); it2++) {\n            if(*it == *it2) {\n                break;\n            }\n        }\n        if(it2 == list_data.end()) {\n            product *= *it;\n        }\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data){\n        s.insert(i);\n    }\n    for(auto i : s){\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (auto i = list_data.begin(); i != list_data.end(); i++) {\n        unique_numbers.insert(*i);\n    }\n    for (auto i = unique_numbers.begin(); i != unique_numbers.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_list;\n    for(long i = 0; i < list_data.size(); i++) {\n        unique_list.insert(list_data[i]);\n    }\n    for(auto it = unique_list.begin(); it != unique_list.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    for(int i=0;i<list_data.size();i++) {\n        int count = 0;\n        for(int j=0;j<list_data.size();j++) {\n            if(list_data[i] == list_data[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            product = product * list_data[i];\n        }\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++){\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++){\n        product = product * (*it);\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::vector<long>::iterator it;\n    std::sort(list_data.begin(), list_data.end());\n    it = std::unique(list_data.begin(), list_data.end());\n    list_data.resize(std::distance(list_data.begin(), it));\n    for(auto i = list_data.begin(); i != list_data.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(auto i = list_data.begin(); i != list_data.end(); i++) {\n        unique_set.insert(*i);\n    }\n    for(auto i = unique_set.begin(); i != unique_set.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data) {\n        s.insert(i);\n    }\n    for(auto i : s) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n        s.insert(list_data[i]);\n    for(auto it=s.begin();it!=s.end();it++)\n        product *= *it;\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_data.insert(list_data[i]);\n    }\n    for (auto it = unique_data.begin(); it != unique_data.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(std::set<long>::iterator it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i:list_data){\n        s.insert(i);\n    }\n    for(auto i:s){\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for(long i = 0; i < list_data.size(); i++){\n        unique_numbers.insert(list_data[i]);\n    }\n    for(auto it = unique_numbers.begin(); it != unique_numbers.end(); it++){\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product=product*(*it);\n    }\n    return product;",
    "    std::set<long> s;\n    for(long i=0;i<list_data.size();i++){\n        s.insert(list_data[i]);\n    }\n    long product = 1;\n    for(auto i=s.begin();i!=s.end();i++){\n        product *= *i;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data)\n        s.insert(i);\n    for(auto i : s)\n        product *= i;\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++){\n        s.insert(list_data[i]);\n    }\n    std::set<long>::iterator it;\n    for(it=s.begin();it!=s.end();it++){\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    for (auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> unique_set;\n    for(auto i: list_data) {\n        unique_set.insert(i);\n    }\n    for(auto i: unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    for (int i = 0; i < list_data.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < list_data.size(); j++) {\n            if (list_data[i] == list_data[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            product *= list_data[i];\n        }\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data)\n        s.insert(i);\n    for(auto i : s)\n        product *= i;\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product = product * (*it);\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(int i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    for(auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product = product * (*it);\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_list;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_list.insert(list_data[i]);\n    }\n    for (auto it = unique_list.begin(); it != unique_list.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data) {\n        s.insert(i);\n    }\n    for(auto i : s) {\n        product *= i;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data)\n    {\n        s.insert(i);\n    }\n    for(auto i : s)\n    {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_elements;\n    for (auto i : list_data) {\n        unique_elements.insert(i);\n    }\n    for (auto i : unique_elements) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product=product*(*it);\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++){\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++){\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin();it!=s.end();it++)\n    {\n        product = product * (*it);\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data)\n        s.insert(i);\n    for(auto i : s)\n        product *= i;\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i: list_data){\n        s.insert(i);\n    }\n    for(auto i: s){\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_list;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_list.insert(list_data[i]);\n    }\n    for (std::set<long>::iterator it = unique_list.begin(); it != unique_list.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product = product * (*it);\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i:list_data){\n        s.insert(i);\n    }\n    for(auto i:s){\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    for(int i = 0; i < list_data.size(); i++) {\n        if(list_data[i] != list_data[i+1]) {\n            product *= list_data[i];\n        }\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for(auto i: list_data) {\n        unique_numbers.insert(i);\n    }\n    for(auto i: unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    //write your code here\n    long product = 1;\n    std::set<long> unique_nums;\n    for(int i=0;i<list_data.size();i++){\n        unique_nums.insert(list_data[i]);\n    }\n    for(auto it=unique_nums.begin();it!=unique_nums.end();it++){\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for (long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for (auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data)\n    {\n        s.insert(i);\n    }\n    for(auto i : s)\n    {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    for(int i=0;i<list_data.size();i++)\n    {\n        int count = 0;\n        for(int j=0;j<list_data.size();j++)\n        {\n            if(list_data[i] == list_data[j])\n            {\n                count++;\n            }\n        }\n        if(count == 1)\n        {\n            product = product * list_data[i];\n        }\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i:list_data){\n        s.insert(i);\n    }\n    for(auto i:s){\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(auto i : list_data) {\n        if(unique_set.find(i) == unique_set.end()) {\n            unique_set.insert(i);\n            product *= i;\n        }\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(long i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    for(auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> unique_set;\n    for(long i = 0; i < list_data.size(); i++) {\n        unique_set.insert(list_data[i]);\n    }\n    long product = 1;\n    for(auto it = unique_set.begin(); it != unique_set.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i: list_data) {\n        s.insert(i);\n    }\n    for(auto i: s) {\n        product *= i;\n    }\n    return product;",
    "    std::set<long> s;\n    for(auto i : list_data)\n        s.insert(i);\n    long product = 1;\n    for(auto i : s)\n        product *= i;\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data)\n        s.insert(i);\n    for(auto i : s)\n        product *= i;\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::vector<long>::iterator it;\n    std::set<long> s(list_data.begin(), list_data.end());\n    for (it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // Remove all duplicate elements from vector\n    std::vector<long>::iterator ip;\n    ip = std::unique(list_data.begin(), list_data.begin() + list_data.size());\n    list_data.resize(std::distance(list_data.begin(), ip));\n    long product = 1;\n    for (int i = 0; i < list_data.size(); i++) {\n        product *= list_data[i];\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for(int i=0;i<list_data.size();i++)\n        unique_data.insert(list_data[i]);\n    for(auto it = unique_data.begin();it!=unique_data.end();it++)\n        product *= *it;\n    return product;",
    "    long product = 1;\n    std::set<long> set_data;\n    for(int i = 0; i < list_data.size(); i++) {\n        set_data.insert(list_data[i]);\n    }\n    for(auto it = set_data.begin(); it != set_data.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        if(s.find(list_data[i]) == s.end()) {\n            s.insert(list_data[i]);\n            product *= list_data[i];\n        }\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i = list_data.begin(); i != list_data.end(); ++i) {\n        unique_set.insert(*i);\n    }\n    for (auto i = unique_set.begin(); i != unique_set.end(); ++i) {\n        product *= *i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    //write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin();it!=s.end();it++)\n    {\n        product = product * (*it);\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin();it!=s.end();it++)\n    {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i: list_data) {\n        s.insert(i);\n    }\n    for(auto i: s) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(long i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(auto i : list_data) {\n        s.insert(i);\n    }\n    for(auto i : s) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::vector<long>::iterator it;\n    std::set<long> s;\n    for(it = list_data.begin(); it != list_data.end(); it++) {\n        s.insert(*it);\n    }\n    for(auto itr = s.begin(); itr != s.end(); itr++) {\n        product *= *itr;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> unique_set;\n    for(int i=0;i<list_data.size();i++)\n    {\n        unique_set.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=unique_set.begin();it!=unique_set.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for(auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for(long i=0;i<list_data.size();i++) {\n        unique_set.insert(list_data[i]);\n    }\n    for(auto it = unique_set.begin();it!=unique_set.end();it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (auto i = list_data.begin(); i != list_data.end(); i++) {\n        unique_numbers.insert(*i);\n    }\n    for (auto i = unique_numbers.begin(); i != unique_numbers.end(); i++) {\n        product *= *i;\n    }\n    return product;",
    "  // Write your code here\n  long product = 1;\n  std::set<long> s;\n  for(int i=0;i<list_data.size();i++){\n    s.insert(list_data[i]);\n  }\n  for(auto i=s.begin();i!=s.end();i++){\n    product = product * (*i);\n  }\n  return product;",
    "    std::set<long> unique_set;\n    for (auto i : list_data) {\n        unique_set.insert(i);\n    }\n    long product = 1;\n    for (auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (int i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    std::set<long> s;\n    long product = 1;\n    for(int i = 0; i < list_data.size(); i++) {\n        if(s.find(list_data[i]) == s.end()) {\n            s.insert(list_data[i]);\n            product *= list_data[i];\n        }\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i = 0; i < list_data.size(); i++) {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin(); it != s.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    // write your code here\n    long product = 1;\n    std::set<long> s;\n    for(auto i:list_data)\n    {\n        s.insert(i);\n    }\n    for(auto i:s)\n    {\n        product *= i;\n    }\n    return product;",
    "    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    long product=1;\n    for(auto it=s.begin();it!=s.end();it++)\n    {\n        product*=*it;\n    }\n    return product;",
    "\tlong product = 1;\n\tstd::set<long> unique_numbers;\n\tfor (auto i = list_data.begin(); i != list_data.end(); i++) {\n\t\tunique_numbers.insert(*i);\n\t}\n\tfor (auto i = unique_numbers.begin(); i != unique_numbers.end(); i++) {\n\t\tproduct *= *i;\n\t}\n\treturn product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for(auto i: list_data) {\n        unique_data.insert(i);\n    }\n    for(auto i: unique_data) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> s;\n    for(int i=0;i<list_data.size();i++)\n    {\n        s.insert(list_data[i]);\n    }\n    for(auto it = s.begin();it!=s.end();it++)\n    {\n        product = product*(*it);\n    }\n    return product;"
  ]
}