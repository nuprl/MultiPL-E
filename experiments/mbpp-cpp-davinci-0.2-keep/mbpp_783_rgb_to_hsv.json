{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nstd::any rgb_to_hsv(long r, long g, long b) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = rgb_to_hsv;\n    assert(candidate((255), (255), (255)) == std::make_tuple(0, 0.0, 100.0));\n    assert(candidate((0), (215), (0)) == std::make_tuple(120.0, 100.0, 84.31372549019608));\n    assert(candidate((10), (215), (110)) == std::make_tuple(149.26829268292684, 95.34883720930233, 84.31372549019608));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    float h, s, v;\n    float min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0) {\n        s = delta / max;\n    } else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) / delta;\n    } else if (g == max) {\n        h = 2 + (b - r) / delta;\n    } else {\n        h = 4 + (r - g) / delta;\n    }\n    h *= 60;\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = 1.0 * (max - min) / max * 100;\n    }\n    long v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1.0 * (max - min) / max;\n    }\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "\tfloat h, s, v;\n\tfloat min, max, delta;\n\tmin = std::min(r, std::min(g, b));\n\tmax = std::max(r, std::max(g, b));\n\tv = max;\n\tdelta = max - min;\n\tif (max != 0) {\n\t\ts = delta / max;\n\t} else {\n\t\ts = 0;\n\t\th = -1;\n\t\treturn std::make_tuple(h, s, v);\n\t}\n\tif (r == max) {\n\t\th = (g - b) / delta;\n\t} else if (g == max) {\n\t\th = 2 + (b - r) / delta;\n\t} else {\n\t\th = 4 + (r - g) / delta;\n\t}\n\th *= 60;\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\treturn std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    float h, s, v;\n    float r_f = r / 255.0;\n    float g_f = g / 255.0;\n    float b_f = b / 255.0;\n    float cmax = std::max(r_f, std::max(g_f, b_f));\n    float cmin = std::min(r_f, std::min(g_f, b_f));\n    float delta = cmax - cmin;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_f) {\n        h = 60 * fmod(((g_f - b_f) / delta), 6);\n    } else if (cmax == g_f) {\n        h = 60 * (((b_f - r_f) / delta) + 2);\n    } else if (cmax == b_f) {\n        h = 60 * (((r_f - g_f) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long cmax = std::max(r, std::max(g, b));\n    long cmin = std::min(r, std::min(g, b));\n    long delta = cmax - cmin;\n    long h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r) {\n        h = 60 * ((g - b) / delta % 6);\n    } else if (cmax == g) {\n        h = 60 * ((b - r) / delta + 2);\n    } else if (cmax == b) {\n        h = 60 * ((r - g) / delta + 4);\n    }\n    long s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    long v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    if (max != min) {\n        long d = max - min;\n        s = d * 100 / max;\n        if (max == r) {\n            h = (g - b) * 60 / d;\n        } else if (max == g) {\n            h = 120 + (b - r) * 60 / d;\n        } else {\n            h = 240 + (r - g) * 60 / d;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 0 + 43 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 85 + 43 * (b - r) / (max - min);\n    } else {\n        h = 171 + 43 * (r - g) / (max - min);\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1.0 - (min / max);\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 60 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 60 * (b - r) / (max - min) + 120;\n        } else {\n            h = 60 * (r - g) / (max - min) + 240;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_ = r/255.0;\n    float g_ = g/255.0;\n    float b_ = b/255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = 1 - min / max;\n    }\n    long v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long delta = max - min;\n    if (delta != 0) {\n        s = delta / max;\n        if (r == max) {\n            h = (g - b) / delta;\n        } else if (g == max) {\n            h = 2 + (b - r) / delta;\n        } else {\n            h = 4 + (r - g) / delta;\n        }\n        h *= 60;\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * (max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 0 + 43 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 85 + 43 * (b - r) / (max - min);\n    } else {\n        h = 171 + 43 * (r - g) / (max - min);\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = 255 * diff / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = 120 + (b - r) * 60 / diff;\n        } else {\n            h = 240 + (r - g) * 60 / diff;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    double r_ = r / 255.0;\n    double g_ = g / 255.0;\n    double b_ = b / 255.0;\n    double cmax = std::max(r_, std::max(g_, b_));\n    double cmin = std::min(r_, std::min(g_, b_));\n    double delta = cmax - cmin;\n    double h = 0.0;\n    if (delta == 0.0) {\n        h = 0.0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    double s = 0.0;\n    if (cmax == 0.0) {\n        s = 0.0;\n    } else {\n        s = delta / cmax;\n    }\n    double v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h, s, v;\n    v = max;\n    if(max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    if(max == min) {\n        h = 0;\n    } else if(max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if(max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if(h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "\tlong max = std::max(r, std::max(g, b));\n\tlong min = std::min(r, std::min(g, b));\n\tlong h = 0;\n\tlong s = 0;\n\tlong v = max;\n\tlong diff = max - min;\n\tif (max == 0) {\n\t\ts = 0;\n\t} else {\n\t\ts = diff * 100 / max;\n\t}\n\tif (max == min) {\n\t\th = 0;\n\t} else if (max == r) {\n\t\th = (60 * (g - b) / diff + 360) % 360;\n\t} else if (max == g) {\n\t\th = (60 * (b - r) / diff + 120) % 360;\n\t} else if (max == b) {\n\t\th = (60 * (r - g) / diff + 240) % 360;\n\t}\n\treturn std::make_tuple(h, s, v);",
    "    double h, s, v;\n    double max = std::max(r, std::max(g, b));\n    double min = std::min(r, std::min(g, b));\n    v = max;\n    double d = max - min;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = d / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = (g - b) / d + (g < b ? 6 : 0);\n        } else if (max == g) {\n            h = (b - r) / d + 2;\n        } else if (max == b) {\n            h = (r - g) / d + 4;\n        }\n        h /= 6;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = max == 0 ? 0 : 1 - min / max;\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = (max - min) * 100 / max;\n    }\n    long v = max * 100 / 255;\n    return std::make_tuple(h, s, v);"
  ]
}