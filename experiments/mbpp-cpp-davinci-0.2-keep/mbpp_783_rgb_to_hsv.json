{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nstd::any rgb_to_hsv(long r, long g, long b) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = rgb_to_hsv;\n    assert(candidate((255), (255), (255)) == std::make_tuple(0, 0.0, 100.0));\n    assert(candidate((0), (215), (0)) == std::make_tuple(120.0, 100.0, 84.31372549019608));\n    assert(candidate((10), (215), (110)) == std::make_tuple(149.26829268292684, 95.34883720930233, 84.31372549019608));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    float h, s, v;\n    float min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0) {\n        s = delta / max;\n    } else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) / delta;\n    } else if (g == max) {\n        h = 2 + (b - r) / delta;\n    } else {\n        h = 4 + (r - g) / delta;\n    }\n    h *= 60;\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = 1.0 * (max - min) / max * 100;\n    }\n    long v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1.0 * (max - min) / max;\n    }\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "\tfloat h, s, v;\n\tfloat min, max, delta;\n\tmin = std::min(r, std::min(g, b));\n\tmax = std::max(r, std::max(g, b));\n\tv = max;\n\tdelta = max - min;\n\tif (max != 0) {\n\t\ts = delta / max;\n\t} else {\n\t\ts = 0;\n\t\th = -1;\n\t\treturn std::make_tuple(h, s, v);\n\t}\n\tif (r == max) {\n\t\th = (g - b) / delta;\n\t} else if (g == max) {\n\t\th = 2 + (b - r) / delta;\n\t} else {\n\t\th = 4 + (r - g) / delta;\n\t}\n\th *= 60;\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\treturn std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    float h, s, v;\n    float r_f = r / 255.0;\n    float g_f = g / 255.0;\n    float b_f = b / 255.0;\n    float cmax = std::max(r_f, std::max(g_f, b_f));\n    float cmin = std::min(r_f, std::min(g_f, b_f));\n    float delta = cmax - cmin;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_f) {\n        h = 60 * fmod(((g_f - b_f) / delta), 6);\n    } else if (cmax == g_f) {\n        h = 60 * (((b_f - r_f) / delta) + 2);\n    } else if (cmax == b_f) {\n        h = 60 * (((r_f - g_f) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long cmax = std::max(r, std::max(g, b));\n    long cmin = std::min(r, std::min(g, b));\n    long delta = cmax - cmin;\n    long h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r) {\n        h = 60 * ((g - b) / delta % 6);\n    } else if (cmax == g) {\n        h = 60 * ((b - r) / delta + 2);\n    } else if (cmax == b) {\n        h = 60 * ((r - g) / delta + 4);\n    }\n    long s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    long v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    if (max != min) {\n        long d = max - min;\n        s = d * 100 / max;\n        if (max == r) {\n            h = (g - b) * 60 / d;\n        } else if (max == g) {\n            h = 120 + (b - r) * 60 / d;\n        } else {\n            h = 240 + (r - g) * 60 / d;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 0 + 43 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 85 + 43 * (b - r) / (max - min);\n    } else {\n        h = 171 + 43 * (r - g) / (max - min);\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1.0 - (min / max);\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 60 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 60 * (b - r) / (max - min) + 120;\n        } else {\n            h = 60 * (r - g) / (max - min) + 240;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_ = r/255.0;\n    float g_ = g/255.0;\n    float b_ = b/255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = 1 - min / max;\n    }\n    long v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long delta = max - min;\n    if (delta != 0) {\n        s = delta / max;\n        if (r == max) {\n            h = (g - b) / delta;\n        } else if (g == max) {\n            h = 2 + (b - r) / delta;\n        } else {\n            h = 4 + (r - g) / delta;\n        }\n        h *= 60;\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * (max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 0 + 43 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 85 + 43 * (b - r) / (max - min);\n    } else {\n        h = 171 + 43 * (r - g) / (max - min);\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = 255 * diff / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = 120 + (b - r) * 60 / diff;\n        } else {\n            h = 240 + (r - g) * 60 / diff;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    double r_ = r / 255.0;\n    double g_ = g / 255.0;\n    double b_ = b / 255.0;\n    double cmax = std::max(r_, std::max(g_, b_));\n    double cmin = std::min(r_, std::min(g_, b_));\n    double delta = cmax - cmin;\n    double h = 0.0;\n    if (delta == 0.0) {\n        h = 0.0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    double s = 0.0;\n    if (cmax == 0.0) {\n        s = 0.0;\n    } else {\n        s = delta / cmax;\n    }\n    double v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h, s, v;\n    v = max;\n    if(max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    if(max == min) {\n        h = 0;\n    } else if(max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if(max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if(h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "\tlong max = std::max(r, std::max(g, b));\n\tlong min = std::min(r, std::min(g, b));\n\tlong h = 0;\n\tlong s = 0;\n\tlong v = max;\n\tlong diff = max - min;\n\tif (max == 0) {\n\t\ts = 0;\n\t} else {\n\t\ts = diff * 100 / max;\n\t}\n\tif (max == min) {\n\t\th = 0;\n\t} else if (max == r) {\n\t\th = (60 * (g - b) / diff + 360) % 360;\n\t} else if (max == g) {\n\t\th = (60 * (b - r) / diff + 120) % 360;\n\t} else if (max == b) {\n\t\th = (60 * (r - g) / diff + 240) % 360;\n\t}\n\treturn std::make_tuple(h, s, v);",
    "    double h, s, v;\n    double max = std::max(r, std::max(g, b));\n    double min = std::min(r, std::min(g, b));\n    v = max;\n    double d = max - min;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = d / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = (g - b) / d + (g < b ? 6 : 0);\n        } else if (max == g) {\n            h = (b - r) / d + 2;\n        } else if (max == b) {\n            h = (r - g) / d + 4;\n        }\n        h /= 6;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = max == 0 ? 0 : 1 - min / max;\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = (max - min) * 100 / max;\n    }\n    long v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    s = (max == 0) ? 0 : (1 - min / max) * 100;\n    v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 100 / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = 120 + (b - r) * 60 / diff;\n        } else {\n            h = 240 + (r - g) * 60 / diff;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long delta = max - min;\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = delta / max;\n    }\n    if (s == 0) {\n        h = 0;\n    } else {\n        if (r == max) {\n            h = (g - b) / delta;\n        } else if (g == max) {\n            h = 2 + (b - r) / delta;\n        } else {\n            h = 4 + (r - g) / delta;\n        }\n        h *= 60;\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    // TODO: implement\n    return std::any();",
    "    // TODO: implement this function\n    return std::any();",
    "    double rd = (double)r/255;\n    double gd = (double)g/255;\n    double bd = (double)b/255;\n    double h, s, v;\n    double cmax = std::max(rd, std::max(gd, bd));\n    double cmin = std::min(rd, std::min(gd, bd));\n    double delta = cmax - cmin;\n    if (delta == 0) h = 0;\n    else if (cmax == rd) h = 60 * ((gd - bd) / delta);\n    else if (cmax == gd) h = 60 * ((bd - rd) / delta + 2);\n    else h = 60 * ((rd - gd) / delta + 4);\n    if (h < 0) h += 360;\n    if (cmax == 0) s = 0;\n    else s = delta / cmax;\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1.0 * (max - min) / max * 100;\n    }\n    long v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long min = std::min(r, std::min(g, b));\n    long max = std::max(r, std::max(g, b));\n    long delta = max - min;\n    long h = 0;\n    long s = 0;\n    long v = max;\n    if (delta == 0) {\n        h = 0;\n    } else if (r == max) {\n        h = (60 * (g - b)) / delta;\n    } else if (g == max) {\n        h = 120 + (60 * (b - r)) / delta;\n    } else if (b == max) {\n        h = 240 + (60 * (r - g)) / delta;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (delta * 100) / max;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    if (max != 0) {\n        s = 255 * (max - min) / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (g == max) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = 1 - min / max;\n    }\n    long v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if(max == min) {\n        h = 0;\n    } else if(max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if(max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if(max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if(h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if(max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "\tlong max = std::max(r, std::max(g, b));\n\tlong min = std::min(r, std::min(g, b));\n\tlong h = 0, s = 0, v = 0;\n\tif (max == min) {\n\t\th = 0;\n\t}\n\telse if (max == r) {\n\t\th = 60 * (g - b) / (max - min);\n\t}\n\telse if (max == g) {\n\t\th = 60 * (b - r) / (max - min) + 120;\n\t}\n\telse if (max == b) {\n\t\th = 60 * (r - g) / (max - min) + 240;\n\t}\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\tif (max == 0) {\n\t\ts = 0;\n\t}\n\telse {\n\t\ts = 1 - min / max;\n\t}\n\tv = max;\n\treturn std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    float h, s, v;\n    float min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0)\n        s = delta / max;\n    else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max)\n        h = (g - b) / delta;\n    else if (g == max)\n        h = 2 + (b - r) / delta;\n    else\n        h = 4 + (r - g) / delta;\n    h *= 60;\n    if (h < 0)\n        h += 360;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    if (max != 0) {\n        s = 255 * (max - min) / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (g == max) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_f = r / 255.0;\n    float g_f = g / 255.0;\n    float b_f = b / 255.0;\n    float c_max = std::max(std::max(r_f, g_f), b_f);\n    float c_min = std::min(std::min(r_f, g_f), b_f);\n    float delta = c_max - c_min;\n    float h = 0.0;\n    float s = 0.0;\n    float v = c_max;\n    if (delta == 0) {\n        h = 0;\n    } else if (c_max == r_f) {\n        h = 60 * fmod(((g_f - b_f) / delta), 6);\n    } else if (c_max == g_f) {\n        h = 60 * (((b_f - r_f) / delta) + 2);\n    } else if (c_max == b_f) {\n        h = 60 * (((r_f - g_f) / delta) + 4);\n    }\n    if (c_max == 0) {\n        s = 0;\n    } else {\n        s = delta / c_max;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = 1 - min / max;\n    }\n    long v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    float r_ = r/255.0;\n    float g_ = g/255.0;\n    float b_ = b/255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long d = max - min;\n    if (max != 0) {\n        s = d * 100 / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (60 * (g - b) / d) + 360;\n    } else if (max == g) {\n        h = (60 * (b - r) / d) + 120;\n    } else if (max == b) {\n        h = (60 * (r - g) / d) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    float r1 = r/255.0;\n    float g1 = g/255.0;\n    float b1 = b/255.0;\n    float cmax = std::max(r1, std::max(g1, b1));\n    float cmin = std::min(r1, std::min(g1, b1));\n    float delta = cmax - cmin;\n    float h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r1) {\n        h = 60 * (((g1 - b1) / delta) % 6);\n    } else if (cmax == g1) {\n        h = 60 * (((b1 - r1) / delta) + 2);\n    } else if (cmax == b1) {\n        h = 60 * (((r1 - g1) / delta) + 4);\n    }\n    float s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    float v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    v = max;\n    if (max == 0) {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    long diff = max - min;\n    s = 255 * diff / max;\n    if (s == 0) {\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) * 60 / diff;\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / diff;\n    } else {\n        h = 240 + (r - g) * 60 / diff;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    // TODO: Implement this function\n    float r1 = r/255.0;\n    float g1 = g/255.0;\n    float b1 = b/255.0;\n    float cmax = std::max(r1, std::max(g1, b1));\n    float cmin = std::min(r1, std::min(g1, b1));\n    float delta = cmax - cmin;\n    float h, s, v;\n    if(delta == 0)\n        h = 0;\n    else if(cmax == r1)\n        h = 60*fmod(((g1-b1)/delta), 6);\n    else if(cmax == g1)\n        h = 60*(((b1-r1)/delta)+2);\n    else if(cmax == b1)\n        h = 60*(((r1-g1)/delta)+4);\n    if(cmax == 0)\n        s = 0;\n    else\n        s = delta/cmax;\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = max == 0 ? 0 : 1 - min / max;\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long delta = max - min;\n    if (delta == 0) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * ((g - b) / delta);\n    } else if (max == g) {\n        h = 60 * ((b - r) / delta) + 120;\n    } else if (max == b) {\n        h = 60 * ((r - g) / delta) + 240;\n    }\n    if (h < 0) {\n        h = h + 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = delta / max;\n    }\n    return std::make_tuple(h, s, v);",
    "    float h, s, v;\n    float r1 = (float)r / 255;\n    float g1 = (float)g / 255;\n    float b1 = (float)b / 255;\n    float max = std::max(r1, std::max(g1, b1));\n    float min = std::min(r1, std::min(g1, b1));\n    if (max == min) {\n        h = 0;\n    } else if (max == r1) {\n        h = 60 * (g1 - b1) / (max - min);\n    } else if (max == g1) {\n        h = 60 * (b1 - r1) / (max - min) + 120;\n    } else if (max == b1) {\n        h = 60 * (r1 - g1) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    v = max;\n    return std::make_tuple(h, s, v);",
    "    // TODO\n    return std::any();",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 100 / max;\n    } else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) * 60 / diff;\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / diff;\n    } else {\n        h = 240 + (r - g) * 60 / diff;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = cmax;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long cmax = std::max(r, std::max(g, b));\n    long cmin = std::min(r, std::min(g, b));\n    long delta = cmax - cmin;\n    long h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r) {\n        h = 60 * ((g - b) / delta % 6);\n    } else if (cmax == g) {\n        h = 60 * ((b - r) / delta + 2);\n    } else if (cmax == b) {\n        h = 60 * ((r - g) / delta + 4);\n    }\n    long s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    long v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    double s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    double v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    v = max;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long c = max - min;\n    if (c == 0) {\n        h = 0;\n    } else if (max == r) {\n        h = (g - b) / c;\n    } else if (max == g) {\n        h = (b - r) / c + 2;\n    } else if (max == b) {\n        h = (r - g) / c + 4;\n    }\n    h = h * 60;\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = c / max;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    long diff = max - min;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = diff / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = (g - b) / diff;\n        } else if (max == g) {\n            h = 2 + (b - r) / diff;\n        } else {\n            h = 4 + (r - g) / diff;\n        }\n        h *= 60;\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    // TODO: Write - Your - Code\n    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 100 / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = (b - r) * 60 / diff + 120;\n        } else if (b == max) {\n            h = (r - g) * 60 / diff + 240;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    double r_ = r / 255.0;\n    double g_ = g / 255.0;\n    double b_ = b / 255.0;\n    double cmax = std::max(r_, std::max(g_, b_));\n    double cmin = std::min(r_, std::min(g_, b_));\n    double delta = cmax - cmin;\n    double h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long h, s, v;\n    long min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0) {\n        s = delta / max;\n    } else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) / delta;\n    } else if (g == max) {\n        h = 2 + (b - r) / delta;\n    } else {\n        h = 4 + (r - g) / delta;\n    }\n    h *= 60;\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (max - min) * 100 / max;\n    }\n    v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    long diff = max - min;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = diff / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = (g - b) / diff;\n        } else if (max == g) {\n            h = 2 + (b - r) / diff;\n        } else {\n            h = 4 + (r - g) / diff;\n        }\n        h *= 60;\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "  long max = std::max(r, std::max(g, b));\n  long min = std::min(r, std::min(g, b));\n  long h = 0, s = 0, v = max;\n  long diff = max - min;\n  if (max != 0) {\n    s = diff * 100 / max;\n  }\n  if (s != 0) {\n    if (r == max) {\n      h = (g - b) * 60 / diff;\n    } else if (g == max) {\n      h = 120 + (b - r) * 60 / diff;\n    } else if (b == max) {\n      h = 240 + (r - g) * 60 / diff;\n    }\n    if (h < 0) {\n      h += 360;\n    }\n  }\n  return std::make_tuple(h, s, v);",
    "    // TODO: Implement this function.\n    return std::any();",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(std::max(r, g), b);\n    long min = std::min(std::min(r, g), b);\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float max_ = std::max(r_, std::max(g_, b_));\n    float min_ = std::min(r_, std::min(g_, b_));\n    float h = 0;\n    if (max_ == min_) {\n        h = 0;\n    } else if (max_ == r_) {\n        h = 60 * (g_ - b_) / (max_ - min_);\n    } else if (max_ == g_) {\n        h = 60 * (b_ - r_) / (max_ - min_) + 120;\n    } else if (max_ == b_) {\n        h = 60 * (r_ - g_) / (max_ - min_) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    float s = 0;\n    if (max_ == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min_ / max_);\n    }\n    float v = max_;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long delta = max - min;\n    if (max != 0) {\n        s = delta / max;\n    } else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) / delta;\n    } else if (g == max) {\n        h = 2 + (b - r) / delta;\n    } else {\n        h = 4 + (r - g) / delta;\n    }\n    h *= 60;\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n\n    if (h < 0) {\n        h += 360;\n    }\n\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1.0 * (max - min) / max * 100;\n    }\n\n    long v = max / 255.0 * 100;\n\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r && g >= b) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == r && g < b) {\n        h = 60 * (g - b) / (max - min) + 360;\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    long h, s, v;\n    long min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0) {\n        s = delta / max;\n    } else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) / delta;\n    } else if (g == max) {\n        h = 2 + (b - r) / delta;\n    } else {\n        h = 4 + (r - g) / delta;\n    }\n    h *= 60;\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    double r_prime = r / 255.0;\n    double g_prime = g / 255.0;\n    double b_prime = b / 255.0;\n    double c_max = std::max(r_prime, std::max(g_prime, b_prime));\n    double c_min = std::min(r_prime, std::min(g_prime, b_prime));\n    double delta = c_max - c_min;\n    double h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (c_max == r_prime) {\n        h = 60 * fmod(((g_prime - b_prime) / delta), 6);\n    } else if (c_max == g_prime) {\n        h = 60 * (((b_prime - r_prime) / delta) + 2);\n    } else if (c_max == b_prime) {\n        h = 60 * (((r_prime - g_prime) / delta) + 4);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    double s = 0;\n    if (c_max == 0) {\n        s = 0;\n    } else {\n        s = delta / c_max;\n    }\n    double v = c_max;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long c = max - min;\n    if (c == 0) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * ((g - b) / c);\n    } else if (max == g) {\n        h = 60 * ((b - r) / c) + 120;\n    } else if (max == b) {\n        h = 60 * ((r - g) / c) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = c / max;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max_ = std::max(std::max(r, g), b);\n    long min_ = std::min(std::min(r, g), b);\n    long h = 0, s = 0, v = 0;\n    if (max_ == min_) {\n        h = 0;\n    } else if (max_ == r) {\n        h = 60 * (g - b) / (max_ - min_);\n    } else if (max_ == g) {\n        h = 60 * (b - r) / (max_ - min_) + 120;\n    } else if (max_ == b) {\n        h = 60 * (r - g) / (max_ - min_) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max_ == 0) {\n        s = 0;\n    } else {\n        s = 1 - min_ / max_;\n    }\n    v = max_;\n    return std::make_tuple(h, s, v);",
    "    float h, s, v;\n    float max = std::max(r, std::max(g, b));\n    float min = std::min(r, std::min(g, b));\n    float diff = max - min;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / diff;\n    } else if (max == g) {\n        h = 60 * (b - r) / diff + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / diff + 240;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = diff / max;\n    }\n    v = max;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "  long max = std::max(r, std::max(g, b));\n  long min = std::min(r, std::min(g, b));\n  long h, s, v;\n  v = max;\n  if (max == 0) {\n    s = 0;\n  } else {\n    s = 255 * long(max - min) / max;\n  }\n  if (max == min) {\n    h = 0;\n  } else {\n    if (max == r) {\n      h = 0 + 43 * (g - b) / (max - min);\n    } else if (max == g) {\n      h = 85 + 43 * (b - r) / (max - min);\n    } else {\n      h = 171 + 43 * (r - g) / (max - min);\n    }\n  }\n  return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(std::max(r, g), b);\n    long min = std::min(std::min(r, g), b);\n    long h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = (max == 0) ? 0 : (max - min) / max;\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "    long min = std::min(r, std::min(g, b));\n    long max = std::max(r, std::max(g, b));\n    long delta = max - min;\n    long h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (r == max) {\n        h = (60 * (g - b)) / delta;\n    } else if (g == max) {\n        h = 120 + (60 * (b - r)) / delta;\n    } else if (b == max) {\n        h = 240 + (60 * (r - g)) / delta;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (delta * 100) / max;\n    }\n    long v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "  assert(r >= 0 && r <= 255);\n  assert(g >= 0 && g <= 255);\n  assert(b >= 0 && b <= 255);\n  long max = std::max(r, std::max(g, b));\n  long min = std::min(r, std::min(g, b));\n  long h = 0, s = 0, v = 0;\n  v = max;\n  if (max == 0) {\n    s = 0;\n    h = -1;\n    return std::make_tuple(h, s, v);\n  }\n  long diff = max - min;\n  s = 255 * diff / max;\n  if (s == 0) {\n    h = 0;\n    return std::make_tuple(h, s, v);\n  }\n  if (r == max) {\n    h = (g - b) * 60 / diff;\n  } else if (g == max) {\n    h = 120 + (b - r) * 60 / diff;\n  } else {\n    h = 240 + (r - g) * 60 / diff;\n  }\n  if (h < 0) {\n    h += 360;\n  }\n  return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 100 / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = 120 + (b - r) * 60 / diff;\n        } else if (b == max) {\n            h = 240 + (r - g) * 60 / diff;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = 255 * diff / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = (b - r) * 60 / diff + 120;\n        } else {\n            h = (r - g) * 60 / diff + 240;\n        }\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    float h, s, v;\n    float min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0)\n        s = delta / max;\n    else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max)\n        h = (g - b) / delta;\n    else if (g == max)\n        h = 2 + (b - r) / delta;\n    else\n        h = 4 + (r - g) / delta;\n    h *= 60;\n    if (h < 0)\n        h += 360;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    int max = std::max(r, std::max(g, b));\n    int min = std::min(r, std::min(g, b));\n    int h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    float s = (max == 0) ? 0 : 1.0 - (min / max);\n    float v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    float r_ = r/255.0;\n    float g_ = g/255.0;\n    float b_ = b/255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float hue = 0;\n    if (delta == 0) {\n        hue = 0;\n    } else if (cmax == r_) {\n        hue = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        hue = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        hue = 60 * (((r_ - g_) / delta) + 4);\n    }\n    float saturation = 0;\n    if (cmax == 0) {\n        saturation = 0;\n    } else {\n        saturation = delta / cmax;\n    }\n    float value = cmax;\n    return std::make_tuple(hue, saturation, value);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long h, s, v;\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    // TODO: Write - Your - Code\n    float h, s, v;\n    float r1, g1, b1;\n    float cmax, cmin, delta;\n    r1 = r / 255.0;\n    g1 = g / 255.0;\n    b1 = b / 255.0;\n    cmax = std::max(r1, std::max(g1, b1));\n    cmin = std::min(r1, std::min(g1, b1));\n    delta = cmax - cmin;\n\n    if (delta == 0)\n        h = 0;\n    else if (cmax == r1)\n        h = 60 * ((g1 - b1) / delta);\n    else if (cmax == g1)\n        h = 60 * ((b1 - r1) / delta + 2);\n    else\n        h = 60 * ((r1 - g1) / delta + 4);\n\n    if (h < 0)\n        h += 360;\n\n    if (cmax == 0)\n        s = 0;\n    else\n        s = delta / cmax;\n\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    double r_ = r / 255.0;\n    double g_ = g / 255.0;\n    double b_ = b / 255.0;\n    double cmax = std::max(r_, std::max(g_, b_));\n    double cmin = std::min(r_, std::min(g_, b_));\n    double delta = cmax - cmin;\n    double h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (h < 0) {\n        h = h + 360;\n    }\n    double s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    double v = cmax;\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 100 / max;\n        if (max == r) {\n            h = (g - b) * 60 / diff;\n        } else if (max == g) {\n            h = (b - r) * 60 / diff + 120;\n        } else {\n            h = (r - g) * 60 / diff + 240;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (max - min) * 100 / max;\n    }\n    v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "  long max = std::max(r, std::max(g, b));\n  long min = std::min(r, std::min(g, b));\n  long h = 0, s = 0, v = 0;\n  v = max;\n  if (max == 0) {\n    s = 0;\n  } else {\n    s = 255 * long(max - min) / max;\n  }\n  if (max == min) {\n    h = 0;\n  } else {\n    if (max == r) {\n      h = 0 + 43 * (g - b) / (max - min);\n    } else if (max == g) {\n      h = 85 + 43 * (b - r) / (max - min);\n    } else if (max == b) {\n      h = 171 + 43 * (r - g) / (max - min);\n    }\n  }\n  return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = cmax;\n    if (delta != 0) {\n        if (cmax == r_) {\n            h = 60 * (((g_ - b_) / delta) % 6);\n        } else if (cmax == g_) {\n            h = 60 * (((b_ - r_) / delta) + 2);\n        } else if (cmax == b_) {\n            h = 60 * (((r_ - g_) / delta) + 4);\n        }\n        if (cmax != 0) {\n            s = delta / cmax;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    long diff = max - min;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = diff * 100 / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (60 * (g - b)) / diff;\n    } else if (max == g) {\n        h = 120 + (60 * (b - r)) / diff;\n    } else {\n        h = 240 + (60 * (r - g)) / diff;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = cmax;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    return std::make_tuple(h, s, v);",
    "    float h, s, v;\n    float min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0)\n        s = delta / max;\n    else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max)\n        h = (g - b) / delta;\n    else if (g == max)\n        h = 2 + (b - r) / delta;\n    else\n        h = 4 + (r - g) / delta;\n    h *= 60;\n    if (h < 0)\n        h += 360;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    // TODO\n    return std::any();",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = (max - min) * 100 / max;\n    }\n    long v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    // TODO",
    "    float h, s, v;\n    float max = std::max(r, std::max(g, b));\n    float min = std::min(r, std::min(g, b));\n    float delta = max - min;\n    if (delta == 0) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * ((g - b) / delta);\n    } else if (max == g) {\n        h = 60 * ((b - r) / delta + 2);\n    } else if (max == b) {\n        h = 60 * ((r - g) / delta + 4);\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = delta / max;\n    }\n    v = max;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 100 / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = 120 + (b - r) * 60 / diff;\n        } else if (b == max) {\n            h = 240 + (r - g) * 60 / diff;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    float s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    float v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    float h, s, v;\n    float r_f = r / 255.0;\n    float g_f = g / 255.0;\n    float b_f = b / 255.0;\n    float c_max = std::max(r_f, std::max(g_f, b_f));\n    float c_min = std::min(r_f, std::min(g_f, b_f));\n    float delta = c_max - c_min;\n    if (delta == 0) {\n        h = 0;\n    } else if (c_max == r_f) {\n        h = 60 * fmod(((g_f - b_f) / delta), 6);\n    } else if (c_max == g_f) {\n        h = 60 * (((b_f - r_f) / delta) + 2);\n    } else if (c_max == b_f) {\n        h = 60 * (((r_f - g_f) / delta) + 4);\n    }\n    if (c_max == 0) {\n        s = 0;\n    } else {\n        s = delta / c_max;\n    }\n    v = c_max;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    if (max != 0) {\n        s = 255 * (long)(max - min) / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (g == max) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float h, s, v;\n    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h = 0;\n    double s = 0;\n    double v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    // Write your code here\n    long h,s,v;\n    long max = std::max(r,std::max(g,b));\n    long min = std::min(r,std::min(g,b));\n    if(max==min)\n        h=0;\n    else if(max==r)\n        h = 60*(g-b)/(max-min);\n    else if(max==g)\n        h = 60*(b-r)/(max-min)+120;\n    else if(max==b)\n        h = 60*(r-g)/(max-min)+240;\n    if(max==0)\n        s=0;\n    else\n        s = (max-min)*100/max;\n    v = max*100/255;\n    return std::make_tuple(h,s,v);",
    "    // TODO: implement this function\n    return std::any();",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long delta = max - min;\n    if (max != 0) {\n        s = delta * 100 / max;\n    }\n    if (delta != 0) {\n        if (max == r) {\n            h = (g - b) * 60 / delta;\n        } else if (max == g) {\n            h = 120 + (b - r) * 60 / delta;\n        } else if (max == b) {\n            h = 240 + (r - g) * 60 / delta;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float max = std::max(std::max(r_, g_), b_);\n    float min = std::min(std::min(r_, g_), b_);\n    float h, s, v;\n    v = max;\n    float d = max - min;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = d / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r_) {\n            h = (g_ - b_) / d + (g_ < b_ ? 6 : 0);\n        } else if (max == g_) {\n            h = (b_ - r_) / d + 2;\n        } else if (max == b_) {\n            h = (r_ - g_) / d + 4;\n        }\n        h /= 6;\n    }\n    return std::make_tuple(h, s, v);",
    "    float r1 = r/255.0;\n    float g1 = g/255.0;\n    float b1 = b/255.0;\n    float cmax = std::max(r1, std::max(g1, b1));\n    float cmin = std::min(r1, std::min(g1, b1));\n    float delta = cmax - cmin;\n    float h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r1) {\n        h = 60 * fmod(((g1 - b1) / delta), 6);\n    } else if (cmax == g1) {\n        h = 60 * (((b1 - r1) / delta) + 2);\n    } else if (cmax == b1) {\n        h = 60 * (((r1 - g1) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (max - min) * 100 / max;\n    }\n    v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "  assert(r >= 0 && r <= 255);\n  assert(g >= 0 && g <= 255);\n  assert(b >= 0 && b <= 255);\n  // your code goes here\n  long max = std::max(r, std::max(g, b));\n  long min = std::min(r, std::min(g, b));\n  long h = 0, s = 0, v = 0;\n  if (max == min) {\n    h = 0;\n  } else if (max == r) {\n    h = 60 * (g - b) / (max - min);\n  } else if (max == g) {\n    h = 60 * (b - r) / (max - min) + 120;\n  } else if (max == b) {\n    h = 60 * (r - g) / (max - min) + 240;\n  }\n  if (h < 0) {\n    h += 360;\n  }\n  if (max == 0) {\n    s = 0;\n  } else {\n    s = 1 - min / max;\n  }\n  v = max / 255.0;\n  return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h = 0.0;\n    double s = 0.0;\n    double v = 0.0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 100 / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = 120 + (b - r) * 60 / diff;\n        } else if (b == max) {\n            h = 240 + (r - g) * 60 / diff;\n        }\n        if (h < 0) {\n            h += 360;\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long h, s, v;\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (s == 0) {\n        h = 0;\n    } else {\n        if (r == max) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (g == max) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    if(r<0 || r>255 || g<0 || g>255 || b<0 || b>255)\n        return std::any();\n    double r_ = r/255.0;\n    double g_ = g/255.0;\n    double b_ = b/255.0;\n    double cmax = std::max(r_, std::max(g_, b_));\n    double cmin = std::min(r_, std::min(g_, b_));\n    double delta = cmax - cmin;\n    double hue = 0;\n    if(delta == 0)\n        hue = 0;\n    else if(cmax == r_)\n        hue = 60 * ((g_ - b_)/delta);\n    else if(cmax == g_)\n        hue = 60 * ((b_ - r_)/delta + 2);\n    else if(cmax == b_)\n        hue = 60 * ((r_ - g_)/delta + 4);\n    if(hue < 0)\n        hue += 360;\n    double saturation = 0;\n    if(cmax == 0)\n        saturation = 0;\n    else\n        saturation = delta/cmax;\n    double value = cmax;\n    return std::make_tuple(hue, saturation, value);",
    "    float h, s, v;\n    float min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0)\n        s = delta / max;\n    else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max)\n        h = (g - b) / delta;\n    else if (g == max)\n        h = 2 + (b - r) / delta;\n    else\n        h = 4 + (r - g) / delta;\n    h *= 60;\n    if (h < 0)\n        h += 360;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * (max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    v = max;\n    if (max == 0) {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    long diff = max - min;\n    s = 255 * diff / max;\n    if (s == 0) {\n        h = 0;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) * 60 / diff;\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / diff;\n    } else {\n        h = 240 + (r - g) * 60 / diff;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    long min, max, delta;\n    float h, s, v;\n\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0)\n        s = delta / max;\n    else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max)\n        h = (g - b) / delta;\n    else if (g == max)\n        h = 2 + (b - r) / delta;\n    else\n        h = 4 + (r - g) / delta;\n    h *= 60;\n    if (h < 0)\n        h += 360;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "\tlong h, s, v;\n\tlong max = std::max(r, std::max(g, b));\n\tlong min = std::min(r, std::min(g, b));\n\tv = max;\n\tif (max == 0) {\n\t\ts = 0;\n\t\th = 0;\n\t}\n\telse {\n\t\ts = (max - min) * 100 / max;\n\t\tif (max == r) {\n\t\t\th = (g - b) * 60 / (max - min);\n\t\t}\n\t\telse if (max == g) {\n\t\t\th = 120 + (b - r) * 60 / (max - min);\n\t\t}\n\t\telse {\n\t\t\th = 240 + (r - g) * 60 / (max - min);\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 360;\n\t\t}\n\t}\n\treturn std::make_tuple(h, s, v);",
    "    float r_f = r / 255.0;\n    float g_f = g / 255.0;\n    float b_f = b / 255.0;\n    float cmax = std::max(r_f, std::max(g_f, b_f));\n    float cmin = std::min(r_f, std::min(g_f, b_f));\n    float delta = cmax - cmin;\n    float h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_f) {\n        h = 60 * fmod(((g_f - b_f) / delta), 6);\n    } else if (cmax == g_f) {\n        h = 60 * (((b_f - r_f) / delta) + 2);\n    } else if (cmax == b_f) {\n        h = 60 * (((r_f - g_f) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    // TODO: Write - Your - Code\n    float h, s, v;\n    float r1 = r/255.0;\n    float g1 = g/255.0;\n    float b1 = b/255.0;\n    float cmax = std::max(r1, std::max(g1, b1));\n    float cmin = std::min(r1, std::min(g1, b1));\n    float delta = cmax - cmin;\n    if(delta == 0)\n        h = 0;\n    else if(cmax == r1)\n        h = 60 * ((g1 - b1)/delta);\n    else if(cmax == g1)\n        h = 60 * ((b1 - r1)/delta) + 120;\n    else if(cmax == b1)\n        h = 60 * ((r1 - g1)/delta) + 240;\n    if(cmax == 0)\n        s = 0;\n    else\n        s = delta/cmax;\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long min = std::min(r, std::min(g, b));\n    long max = std::max(r, std::max(g, b));\n    long delta = max - min;\n    long h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (r == max) {\n        h = (60 * (g - b)) / delta;\n    } else if (g == max) {\n        h = 120 + (60 * (b - r)) / delta;\n    } else if (b == max) {\n        h = 240 + (60 * (r - g)) / delta;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (delta * 100) / max;\n    }\n    v = max;\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = cmax;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * ((g_ - b_) / delta);\n    } else if (cmax == g_) {\n        h = 60 * ((b_ - r_) / delta + 2);\n    } else if (cmax == b_) {\n        h = 60 * ((r_ - g_) / delta + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_f = r / 255.0;\n    float g_f = g / 255.0;\n    float b_f = b / 255.0;\n\n    float c_max = std::max(std::max(r_f, g_f), b_f);\n    float c_min = std::min(std::min(r_f, g_f), b_f);\n    float delta = c_max - c_min;\n\n    float h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (c_max == r_f) {\n        h = 60 * ((g_f - b_f) / delta);\n    } else if (c_max == g_f) {\n        h = 60 * ((b_f - r_f) / delta + 2);\n    } else if (c_max == b_f) {\n        h = 60 * ((r_f - g_f) / delta + 4);\n    }\n\n    if (h < 0) {\n        h += 360;\n    }\n\n    float s = 0;\n    if (c_max == 0) {\n        s = 0;\n    } else {\n        s = delta / c_max;\n    }\n\n    float v = c_max;\n\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = (max - min) * 100 / max;\n    }\n    long v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    if (max != 0) {\n        s = 255 * long(max - min) / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (g == max) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max, min, h, s, v;\n    max = std::max(r, std::max(g, b));\n    min = std::min(r, std::min(g, b));\n    v = max;\n    if (max == 0)\n        s = 0;\n    else\n        s = (max - min) * 100 / max;\n    if (max == min)\n        h = 0;\n    else if (max == r)\n        h = 60 * (g - b) / (max - min);\n    else if (max == g)\n        h = 60 * (b - r) / (max - min) + 120;\n    else if (max == b)\n        h = 60 * (r - g) / (max - min) + 240;\n    if (h < 0)\n        h += 360;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (max - min) * 100 / max;\n    }\n    v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "    // TODO: Implement\n    return std::any();",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (60 * (g - b)) / (max - min);\n    } else if (max == g) {\n        h = 120 + (60 * (b - r)) / (max - min);\n    } else if (max == b) {\n        h = 240 + (60 * (r - g)) / (max - min);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n    v = max;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max({r, g, b});\n    long min = std::min({r, g, b});\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    float h = 0;\n    float s = 0;\n    float v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    float r_f = (float)r/255;\n    float g_f = (float)g/255;\n    float b_f = (float)b/255;\n    float c_max = std::max(r_f, std::max(g_f, b_f));\n    float c_min = std::min(r_f, std::min(g_f, b_f));\n    float delta = c_max - c_min;\n    float h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (c_max == r_f) {\n        h = 60 * ((g_f - b_f) / delta);\n    } else if (c_max == g_f) {\n        h = 60 * ((b_f - r_f) / delta + 2);\n    } else if (c_max == b_f) {\n        h = 60 * ((r_f - g_f) / delta + 4);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    float s = 0;\n    if (c_max == 0) {\n        s = 0;\n    } else {\n        s = delta / c_max;\n    }\n    float v = c_max;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (max - min) * 100 / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    // TODO: write your code here\n    return std::any();",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long cmax = std::max(r, std::max(g, b));\n    long cmin = std::min(r, std::min(g, b));\n    long delta = cmax - cmin;\n    long h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r) {\n        h = 60 * ((g - b) / delta % 6);\n    } else if (cmax == g) {\n        h = 60 * ((b - r) / delta + 2);\n    } else if (cmax == b) {\n        h = 60 * ((r - g) / delta + 4);\n    }\n    long s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    long v = cmax;\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = cmax;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * ((g_ - b_) / delta);\n    } else if (cmax == g_) {\n        h = 60 * ((b_ - r_) / delta + 2);\n    } else if (cmax == b_) {\n        h = 60 * ((r_ - g_) / delta + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    // find min and max of r, g, b\n    long min = std::min(r, std::min(g, b));\n    long max = std::max(r, std::max(g, b));\n    // calculate value\n    long v = max;\n    // calculate saturation\n    long s = (max == 0) ? 0 : (255 * (max - min)) / max;\n    // calculate hue\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (60 * (g - b)) / (max - min);\n    } else if (max == g) {\n        h = 120 + (60 * (b - r)) / (max - min);\n    } else if (max == b) {\n        h = 240 + (60 * (r - g)) / (max - min);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = 0;\n    if (max != 0) {\n        s = 1 - min / max;\n    }\n    long v = max;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h = 0, s = 0, v = 0;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = (max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (60 * (g - b) / (max - min)) + 360;\n    } else if (max == g) {\n        h = (60 * (b - r) / (max - min)) + 120;\n    } else if (max == b) {\n        h = (60 * (r - g) / (max - min)) + 240;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    double r_ = r / 255.0;\n    double g_ = g / 255.0;\n    double b_ = b / 255.0;\n    double cmax = std::max(r_, std::max(g_, b_));\n    double cmin = std::min(r_, std::min(g_, b_));\n    double delta = cmax - cmin;\n    double h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    double s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    double v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long d = max - min;\n    if (max != 0) {\n        s = d * 100 / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (g - b) * 60 / d;\n    } else if (max == g) {\n        h = (b - r) * 60 / d + 120;\n    } else if (max == b) {\n        h = (r - g) * 60 / d + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    // TODO",
    "    // Write your code here\n    float h, s, v;\n    float min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0)\n        s = delta / max;\n    else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max)\n        h = (g - b) / delta;\n    else if (g == max)\n        h = 2 + (b - r) / delta;\n    else\n        h = 4 + (r - g) / delta;\n    h *= 60;\n    if (h < 0)\n        h += 360;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    double r_ = r / 255.0;\n    double g_ = g / 255.0;\n    double b_ = b / 255.0;\n    double c_max = std::max(r_, std::max(g_, b_));\n    double c_min = std::min(r_, std::min(g_, b_));\n    double delta = c_max - c_min;\n    double h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (c_max == r_) {\n        h = 60 * ((g_ - b_) / delta);\n    } else if (c_max == g_) {\n        h = 60 * ((b_ - r_) / delta + 2);\n    } else if (c_max == b_) {\n        h = 60 * ((r_ - g_) / delta + 4);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    double s = 0;\n    if (c_max == 0) {\n        s = 0;\n    } else {\n        s = delta / c_max;\n    }\n    double v = c_max;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 100 / max;\n    } else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) * 60 / diff;\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / diff;\n    } else {\n        h = 240 + (r - g) * 60 / diff;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    float s = 0;\n    float v = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float max = std::max(r_, std::max(g_, b_));\n    float min = std::min(r_, std::min(g_, b_));\n    float h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r_) {\n        h = 60 * (g_ - b_) / (max - min);\n    } else if (max == g_) {\n        h = 60 * (b_ - r_) / (max - min) + 120;\n    } else {\n        h = 60 * (r_ - g_) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    float s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    float v = max;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = 0;\n    v = max;\n    if (max == 0) {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    long diff = max - min;\n    s = 255 * diff / max;\n    if (s == 0) {\n        h = 0;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max) {\n        h = (g - b) * 60 / diff;\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / diff;\n    } else {\n        h = 240 + (r - g) * 60 / diff;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h = 0, s = 0, v = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - (min / max);\n    }\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = diff * 255 / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = (g - b) * 60 / diff;\n        } else if (g == max) {\n            h = (b - r) * 60 / diff + 120;\n        } else if (b == max) {\n            h = (r - g) * 60 / diff + 240;\n        }\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (60 * (g - b)) / (max - min);\n    } else if (max == g) {\n        h = 120 + (60 * (b - r)) / (max - min);\n    } else if (max == b) {\n        h = 240 + (60 * (r - g)) / (max - min);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    long s = (max == 0) ? 0 : (1 - (min / max)) * 100;\n    long v = max * 100 / 255;\n    return std::make_tuple(h, s, v);",
    "  long max = std::max(r, std::max(g, b));\n  long min = std::min(r, std::min(g, b));\n  long h = 0, s = 0, v = max;\n  long diff = max - min;\n  if (max != 0) {\n    s = diff * 255 / max;\n  }\n  if (s != 0) {\n    if (r == max) {\n      h = (g - b) * 60 / diff;\n    } else if (g == max) {\n      h = 120 + (b - r) * 60 / diff;\n    } else {\n      h = 240 + (r - g) * 60 / diff;\n    }\n  }\n  if (h < 0) {\n    h += 360;\n  }\n  return std::make_tuple(h, s, v);",
    "    float r_ = r/255.0;\n    float g_ = g/255.0;\n    float b_ = b/255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * ((g_ - b_) / delta);\n    } else if (cmax == g_) {\n        h = 60 * ((b_ - r_) / delta + 2);\n    } else if (cmax == b_) {\n        h = 60 * ((r_ - g_) / delta + 4);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    float s = 0;\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    float v = cmax;\n    return std::make_tuple(h, s, v);",
    "    float r1 = (float)r / 255;\n    float g1 = (float)g / 255;\n    float b1 = (float)b / 255;\n    float cmax = std::max(std::max(r1, g1), b1);\n    float cmin = std::min(std::min(r1, g1), b1);\n    float delta = cmax - cmin;\n    float h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r1) {\n        h = 60 * fmod(((g1 - b1) / delta), 6);\n    } else if (cmax == g1) {\n        h = 60 * (((b1 - r1) / delta) + 2);\n    } else if (cmax == b1) {\n        h = 60 * (((r1 - g1) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "\tlong max = std::max(r, std::max(g, b));\n\tlong min = std::min(r, std::min(g, b));\n\tlong h = 0;\n\tlong s = 0;\n\tlong v = max;\n\tlong d = max - min;\n\tif (max == 0) {\n\t\ts = 0;\n\t}\n\telse {\n\t\ts = d / max;\n\t}\n\tif (max == min) {\n\t\th = 0;\n\t}\n\telse {\n\t\tif (max == r) {\n\t\t\th = (g - b) / d;\n\t\t}\n\t\telse if (max == g) {\n\t\t\th = 2 + (b - r) / d;\n\t\t}\n\t\telse if (max == b) {\n\t\t\th = 4 + (r - g) / d;\n\t\t}\n\t\th *= 60;\n\t\tif (h < 0) {\n\t\t\th += 360;\n\t\t}\n\t}\n\treturn std::make_tuple(h, s, v);",
    "    float r_ = r / 255.0;\n    float g_ = g / 255.0;\n    float b_ = b / 255.0;\n    float cmax = std::max(r_, std::max(g_, b_));\n    float cmin = std::min(r_, std::min(g_, b_));\n    float delta = cmax - cmin;\n    float h, s, v;\n    if (delta == 0) {\n        h = 0;\n    } else if (cmax == r_) {\n        h = 60 * fmod(((g_ - b_) / delta), 6);\n    } else if (cmax == g_) {\n        h = 60 * (((b_ - r_) / delta) + 2);\n    } else if (cmax == b_) {\n        h = 60 * (((r_ - g_) / delta) + 4);\n    }\n    if (cmax == 0) {\n        s = 0;\n    } else {\n        s = delta / cmax;\n    }\n    v = cmax;\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    // TODO: Write - Your - Code\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    double h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1.0 - (min / max);\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 60 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 60 * (b - r) / (max - min) + 120;\n        } else {\n            h = 60 * (r - g) / (max - min) + 240;\n        }\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    double r_prime = r / 255.0;\n    double g_prime = g / 255.0;\n    double b_prime = b / 255.0;\n    double c_max = std::max(r_prime, std::max(g_prime, b_prime));\n    double c_min = std::min(r_prime, std::min(g_prime, b_prime));\n    double delta = c_max - c_min;\n    double h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (c_max == r_prime) {\n        h = 60 * ((g_prime - b_prime) / delta);\n    } else if (c_max == g_prime) {\n        h = 60 * ((b_prime - r_prime) / delta + 2);\n    } else if (c_max == b_prime) {\n        h = 60 * ((r_prime - g_prime) / delta + 4);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    double s = 0;\n    if (c_max == 0) {\n        s = 0;\n    } else {\n        s = delta / c_max;\n    }\n    double v = c_max;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long d = max - min;\n    if (max != 0) {\n        s = d * 100 / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = (g - b) * 60 / d;\n    } else if (max == g) {\n        h = (b - r) * 60 / d + 120;\n    } else if (max == b) {\n        h = (r - g) * 60 / d + 240;\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    float h, s, v;\n    float min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (delta < 0.00001) {\n        s = 0;\n        h = 0;\n        return std::make_tuple(h, s, v);\n    }\n    if (max > 0.0) {\n        s = (delta / max);\n    } else {\n        s = 0.0;\n        h = NAN;\n        return std::make_tuple(h, s, v);\n    }\n    if (r >= max) {\n        h = (g - b) / delta;\n    } else {\n        if (g >= max) {\n            h = 2.0 + (b - r) / delta;\n        } else {\n            h = 4.0 + (r - g) / delta;\n        }\n    }\n    h *= 60.0;\n    if (h < 0.0) {\n        h += 360.0;\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) {\n        h = 0;\n    } else if (max == r) {\n        h = 60 * (g - b) / (max - min);\n    } else if (max == g) {\n        h = 60 * (b - r) / (max - min) + 120;\n    } else if (max == b) {\n        h = 60 * (r - g) / (max - min) + 240;\n    }\n    long s = 0;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 1 - min / max;\n    }\n    long v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "    double r_prime = r / 255.0;\n    double g_prime = g / 255.0;\n    double b_prime = b / 255.0;\n    double c_max = std::max(r_prime, std::max(g_prime, b_prime));\n    double c_min = std::min(r_prime, std::min(g_prime, b_prime));\n    double delta = c_max - c_min;\n    double h = 0;\n    if (delta == 0) {\n        h = 0;\n    } else if (c_max == r_prime) {\n        h = 60 * ((g_prime - b_prime) / delta);\n    } else if (c_max == g_prime) {\n        h = 60 * ((b_prime - r_prime) / delta + 2);\n    } else {\n        h = 60 * ((r_prime - g_prime) / delta + 4);\n    }\n    if (h < 0) {\n        h += 360;\n    }\n    double s = 0;\n    if (c_max == 0) {\n        s = 0;\n    } else {\n        s = delta / c_max;\n    }\n    double v = c_max;\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0, s = 0, v = max;\n    long diff = max - min;\n    if (max != 0) {\n        s = 255 * diff / max;\n        if (s != 0) {\n            if (r == max) {\n                h = 0 + 43 * (g - b) / diff;\n            } else if (g == max) {\n                h = 85 + 43 * (b - r) / diff;\n            } else {\n                h = 171 + 43 * (r - g) / diff;\n            }\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    assert(r >= 0 && r <= 255);\n    assert(g >= 0 && g <= 255);\n    assert(b >= 0 && b <= 255);\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    if (max == min) h = 0;\n    else if (max == r) h = 60 * (g - b) / (max - min);\n    else if (max == g) h = 60 * (b - r) / (max - min) + 120;\n    else if (max == b) h = 60 * (r - g) / (max - min) + 240;\n    if (h < 0) h += 360;\n    long s = 0;\n    if (max == 0) s = 0;\n    else s = 1 - min / max;\n    long v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "  long max = std::max(r, std::max(g, b));\n  long min = std::min(r, std::min(g, b));\n  long h = 0;\n  if (max == min) {\n    h = 0;\n  } else if (max == r) {\n    h = 60 * (g - b) / (max - min);\n  } else if (max == g) {\n    h = 60 * (b - r) / (max - min) + 120;\n  } else if (max == b) {\n    h = 60 * (r - g) / (max - min) + 240;\n  }\n  long s = 0;\n  if (max == 0) {\n    s = 0;\n  } else {\n    s = 1 - (min / max);\n  }\n  long v = max;\n  return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h = 0;\n    long s = 0;\n    long v = max;\n    if (max != 0) {\n        s = 255 * (max - min) / max;\n    }\n    if (s != 0) {\n        if (r == max) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (g == max) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    long h, s, v;\n    v = max;\n    if (max == 0) {\n        s = 0;\n    } else {\n        s = 255 * long(max - min) / max;\n    }\n    if (max == min) {\n        h = 0;\n    } else {\n        if (max == r) {\n            h = 0 + 43 * (g - b) / (max - min);\n        } else if (max == g) {\n            h = 85 + 43 * (b - r) / (max - min);\n        } else {\n            h = 171 + 43 * (r - g) / (max - min);\n        }\n    }\n    return std::make_tuple(h, s, v);",
    "    // Write your code here\n    long max = std::max(r, std::max(g, b));\n    long min = std::min(r, std::min(g, b));\n    float h = 0.0;\n    float s = 0.0;\n    float v = 0.0;\n    if (max == min)\n        h = 0;\n    else if (max == r)\n        h = 60 * (g - b) / (max - min);\n    else if (max == g)\n        h = 60 * (b - r) / (max - min) + 120;\n    else if (max == b)\n        h = 60 * (r - g) / (max - min) + 240;\n    if (h < 0)\n        h += 360;\n    if (max == 0)\n        s = 0;\n    else\n        s = 1 - (min / max);\n    v = max / 255.0;\n    return std::make_tuple(h, s, v);",
    "\tlong max = std::max(r, std::max(g, b));\n\tlong min = std::min(r, std::min(g, b));\n\tlong h = 0;\n\tlong s = 0;\n\tlong v = 0;\n\tif (max == min) {\n\t\th = 0;\n\t}\n\telse if (max == r) {\n\t\th = 60 * (g - b) / (max - min);\n\t}\n\telse if (max == g) {\n\t\th = 60 * (b - r) / (max - min) + 120;\n\t}\n\telse if (max == b) {\n\t\th = 60 * (r - g) / (max - min) + 240;\n\t}\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\tif (max == 0) {\n\t\ts = 0;\n\t}\n\telse {\n\t\ts = (max - min) / max;\n\t}\n\tv = max;\n\treturn std::make_tuple(h, s, v);",
    "    float h, s, v;\n    float min, max, delta;\n    min = std::min(r, std::min(g, b));\n    max = std::max(r, std::max(g, b));\n    v = max;\n    delta = max - min;\n    if (max != 0)\n        s = delta / max;\n    else {\n        s = 0;\n        h = -1;\n        return std::make_tuple(h, s, v);\n    }\n    if (r == max)\n        h = (g - b) / delta;\n    else if (g == max)\n        h = 2 + (b - r) / delta;\n    else\n        h = 4 + (r - g) / delta;\n    h *= 60;\n    if (h < 0)\n        h += 360;\n    return std::make_tuple(h, s, v);",
    "  long max = std::max(r, std::max(g, b));\n  long min = std::min(r, std::min(g, b));\n  long h, s, v;\n  v = max;\n  if (max == 0) {\n    s = 0;\n  } else {\n    s = 255 * long(max - min) / max;\n  }\n  if (max == min) {\n    h = 0;\n  } else {\n    if (max == r) {\n      h = 0 + 43 * (g - b) / (max - min);\n    } else if (max == g) {\n      h = 85 + 43 * (b - r) / (max - min);\n    } else {\n      h = 171 + 43 * (r - g) / (max - min);\n    }\n  }\n  return std::make_tuple(h, s, v);"
  ]
}