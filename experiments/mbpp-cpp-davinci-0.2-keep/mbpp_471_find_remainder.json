{
  "name": "mbpp_471_find_remainder",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the product of the array multiplication modulo n.\nlong find_remainder(std::vector<long> arr, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_remainder;\n    assert(candidate((std::vector<long>({(long)100, (long)10, (long)5, (long)25, (long)35, (long)14})), (11)) == (9));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1})), (1)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1})), (2)) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    // Write your code here\n    long product = 1;\n    for(int i=0;i<arr.size();i++){\n        product = (product*arr[i])%n;\n    }\n    return product;",
    "    long product = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    long prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        prod = (prod * arr[i]) % n;\n    }\n    return prod;",
    "    long product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    long result = 1;\n    for(int i=0;i<arr.size();i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;",
    "    // Write your code here\n    long product = 1;\n    for(int i=0;i<arr.size();i++){\n        product = (product*arr[i])%n;\n    }\n    return product;",
    "    long result = 1;\n    for(int i=0;i<arr.size();i++){\n        result = (result*arr[i])%n;\n    }\n    return result;",
    "    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    long result = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        result = (result * (arr[i] % n)) % n;\n    }\n    return result;",
    "    // Write your code here\n    long product = 1;\n    for(int i=0;i<arr.size();i++){\n        product = (product*arr[i])%n;\n    }\n    return product;",
    "    long result = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        result = (result * arr[i]) % n;\n    }\n    return result;",
    "    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    long result = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        result = (result * arr[i]) % n;\n    }\n    return result;",
    "    long product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    long product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;",
    "    long ans = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        ans = (ans * arr[i]) % n;\n    }\n    return ans;"
  ]
}