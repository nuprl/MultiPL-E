{
  "name": "mbpp_639_sample_nam",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i=0;i<sample_names.size();i++){\n        if(sample_names[i][0]>='A' && sample_names[i][0]<='Z'){\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i=0;i<sample_names.size();i++)\n  {\n    if(sample_names[i][0]>='A' && sample_names[i][0]<='Z')\n    {\n      sum+=sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (auto name : sample_names) {\n    if (name[0] >= 'A' && name[0] <= 'Z') {\n      sum += name.size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i=0;i<sample_names.size();i++){\n        if(sample_names[i][0]>='A' && sample_names[i][0]<='Z'){\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (auto i : sample_names) {\n        if (isupper(i[0])) {\n            sum += i.length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] < 'a') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (islower(sample_names[i][0])) {\n            sample_names.erase(sample_names.begin() + i);\n            i--;\n        }\n        else {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i=0;i<sample_names.size();i++)\n  {\n    if(sample_names[i][0]>='A' && sample_names[i][0]<='Z')\n    {\n      sum+=sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i=0;i<sample_names.size();i++){\n    if(sample_names[i][0]>='A' && sample_names[i][0]<='Z'){\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i=0;i<sample_names.size();i++){\n    if(sample_names[i][0]>='A' && sample_names[i][0]<='Z'){\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (std::string name : sample_names) {\n        if (name[0] >= 'A' && name[0] <= 'Z') {\n            sum += name.length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (auto i = sample_names.begin(); i != sample_names.end(); i++) {\n        if (isupper((*i)[0])) {\n            sum += (*i).length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.size(); i++) {\n\t\tif (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.size(); i++) {\n\t\tif (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i=0; i<sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++)\n    {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z')\n            sum += sample_names[i].length();\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i=0;i<sample_names.size();i++){\n    if(sample_names[i][0]>='A'&&sample_names[i][0]<='Z'){\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i=0;i<sample_names.size();i++)\n    {\n        if(sample_names[i][0]>='A' && sample_names[i][0]<='Z')\n        {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (auto i = sample_names.begin(); i != sample_names.end(); i++) {\n        if (isupper((*i)[0])) {\n            sum += (*i).length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(auto i : sample_names) {\n        if(i[0] >= 'A' && i[0] <= 'Z') {\n            sum += i.length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (auto name : sample_names) {\n        if (name[0] >= 'A' && name[0] <= 'Z') {\n            sum += name.length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++){\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z'){\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (auto i : sample_names) {\n        if (i[0] >= 'A' && i[0] <= 'Z') {\n            sum += i.length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.size(); i++) {\n\t\tif (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (isupper(sample_names[i][0])) {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i=0;i<sample_names.size();i++){\n        if(sample_names[i][0]>='A' && sample_names[i][0]<='Z'){\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i=0;i<sample_names.size();i++){\n        if(sample_names[i][0]>='A' && sample_names[i][0]<='Z'){\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(isupper(sample_names[i][0])) {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] > 96) {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "tmpazpx_ldz: /tmp/tmpazpx_ldz.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(isupper(sample_names[i][0])) {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i=0; i<sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++)\n    {\n        if (isupper(sample_names[i][0]))\n        {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(isupper(sample_names[i][0])) {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(isupper(sample_names[i][0])) {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i=0;i<sample_names.size();i++){\n        if(sample_names[i][0]>=65 && sample_names[i][0]<=90){\n            sum+=sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (isupper(sample_names[i][0])) {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (auto name : sample_names) {\n        if (name[0] >= 'A' && name[0] <= 'Z') {\n            sum += name.length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++){\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z'){\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (islower(sample_names[i][0])) {\n            continue;\n        }\n        sum += sample_names[i].length();\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum=0;\n  for(int i=0;i<sample_names.size();i++){\n    if(sample_names[i][0]>=65 && sample_names[i][0]<=90){\n      sum+=sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (auto i = sample_names.begin(); i != sample_names.end(); i++) {\n        if (isupper((*i)[0])) {\n            sum += (*i).length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i=0; i<sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(isupper(sample_names[i][0])) {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i=0;i<sample_names.size();i++){\n    if(sample_names[i][0]>='A' && sample_names[i][0]<='Z'){\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(auto i = sample_names.begin(); i != sample_names.end(); i++) {\n        if(islower(i->at(0))) {\n            sample_names.erase(i);\n        }\n        else {\n            sum += i->length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::out_of_range'\n  what():  basic_string::at: __n (which is 0) >= this->size() (which is 0)\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (isupper(sample_names[i][0])) {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (auto i = sample_names.begin(); i != sample_names.end(); i++) {\n        if (islower(i->at(0))) {\n            sample_names.erase(i);\n            i--;\n        } else {\n            sum += i->length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (isupper(sample_names[i][0])) {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++){\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z'){\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++){\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z'){\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++){\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z'){\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(isupper(sample_names[i][0])) {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++){\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z'){\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(islower(sample_names[i][0])) {\n            sample_names.erase(sample_names.begin() + i);\n            i--;\n        }\n        else {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum=0;\n    for(int i=0;i<sample_names.size();i++){\n        if(sample_names[i][0]>='A' && sample_names[i][0]<='Z'){\n            sum+=sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.size(); i++) {\n\t\tif (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++){\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z'){\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(auto i = sample_names.begin(); i != sample_names.end(); i++) {\n        if(isupper(i->at(0))) {\n            sum += i->length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(!islower(sample_names[i][0])) {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum=0;\n  for(int i=0;i<sample_names.size();i++)\n  {\n    if(sample_names[i][0]>='A' && sample_names[i][0]<='Z')\n    {\n      sum+=sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 65 && sample_names[i][0] <= 90) {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n\tlong sum = 0;\n\tfor (int i = 0; i < sample_names.size(); i++) {\n\t\tif (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n\t\t\tsum += sample_names[i].length();\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122780,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (islower(sample_names[i][0])) {\n      continue;\n    }\n    else {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum=0;\n    for(int i=0;i<sample_names.size();i++)\n    {\n        if(sample_names[i][0]>='A' && sample_names[i][0]<='Z')\n        {\n            sum+=sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum=0;\n  for(int i=0;i<sample_names.size();i++)\n  {\n    if(sample_names[i][0]>='A' && sample_names[i][0]<='Z')\n    {\n      sum+=sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(auto i = sample_names.begin(); i != sample_names.end(); i++) {\n        if(isupper((*i)[0])) {\n            sum += (*i).length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(auto i: sample_names) {\n        if(islower(i[0]))\n            continue;\n        sum += i.length();\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (auto i : sample_names) {\n    if (i[0] >= 'A' && i[0] <= 'Z') {\n      sum += i.length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for(int i = 0; i < sample_names.size(); i++) {\n    if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (auto i : sample_names) {\n        if (i[0] >= 'A' && i[0] <= 'Z') {\n            sum += i.size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (isupper(sample_names[i][0])) {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  // Write your code here\n  long sum = 0;\n  for(int i=0;i<sample_names.size();i++)\n  {\n    if(sample_names[i][0]>=65 && sample_names[i][0]<=90)\n    {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (islower(sample_names[i][0])) {\n            continue;\n        }\n        sum += sample_names[i].size();\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(isupper(sample_names[i][0])) {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for(int i = 0; i < sample_names.size(); i++) {\n        if(sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].length();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].size();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1666122783,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n    long sum = 0;\n    for (int i = 0; i < sample_names.size(); i++) {\n        if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n            sum += sample_names[i].size();\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlong sample_nam(std::vector<std::string> sample_names) {\n  long sum = 0;\n  for (int i = 0; i < sample_names.size(); i++) {\n    if (sample_names[i][0] >= 'A' && sample_names[i][0] <= 'Z') {\n      sum += sample_names[i].length();\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = sample_nam;\n    assert(candidate((std::vector<std::string>({(std::string)\"sally\", (std::string)\"Dylan\", (std::string)\"rebecca\", (std::string)\"Diana\", (std::string)\"Joanne\", (std::string)\"keith\"}))) == (16));\n    assert(candidate((std::vector<std::string>({(std::string)\"php\", (std::string)\"res\", (std::string)\"Python\", (std::string)\"abcd\", (std::string)\"Java\", (std::string)\"aaa\"}))) == (10));\n    assert(candidate((std::vector<std::string>({(std::string)\"abcd\", (std::string)\"Python\", (std::string)\"abba\", (std::string)\"aba\"}))) == (6));\n}\n",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}