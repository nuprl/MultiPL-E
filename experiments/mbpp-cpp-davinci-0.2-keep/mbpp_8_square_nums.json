{
  "name": "mbpp_8_square_nums",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find squares of individual elements in a list.\nstd::vector<long> square_nums(std::vector<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = square_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25, (long)36, (long)49, (long)64, (long)81, (long)100})));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30}))) == (std::vector<long>({(long)100, (long)400, (long)900})));\n    assert(candidate((std::vector<long>({(long)12, (long)15}))) == (std::vector<long>({(long)144, (long)225})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> squares;\n    for(auto num: nums) {\n        squares.push_back(num*num);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for(auto num : nums) {\n        squares.push_back(num * num);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for(auto num: nums) {\n        squares.push_back(num*num);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (auto num : nums) {\n        squares.push_back(num * num);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (auto num : nums) {\n        squares.push_back(num * num);\n    }\n    return squares;",
    "  std::vector<long> squares;\n  for (auto num : nums) {\n    squares.push_back(num * num);\n  }\n  return squares;",
    "    std::vector<long> squares;\n    for(auto num : nums) {\n        squares.push_back(num*num);\n    }\n    return squares;",
    "  std::vector<long> squares;\n  for (auto num : nums) {\n    squares.push_back(num * num);\n  }\n  return squares;",
    "    std::vector<long> squares;\n    for (int i = 0; i < nums.size(); i++) {\n        squares.push_back(nums[i] * nums[i]);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (auto num : nums) {\n        squares.push_back(num * num);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for(auto num : nums) {\n        squares.push_back(num * num);\n    }\n    return squares;",
    "    std::vector<long> result;\n    for(auto num:nums) {\n        result.push_back(num*num);\n    }\n    return result;",
    "    std::vector<long> squares;\n    for(auto num: nums) {\n        squares.push_back(num*num);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (int i = 0; i < nums.size(); i++) {\n        squares.push_back(nums[i] * nums[i]);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for(int i=0;i<nums.size();i++){\n        squares.push_back(nums[i]*nums[i]);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (auto num: nums) {\n        squares.push_back(num * num);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (int i = 0; i < nums.size(); i++) {\n        squares.push_back(nums[i] * nums[i]);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (auto num : nums) {\n        squares.push_back(num * num);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for(auto num : nums) {\n        squares.push_back(num * num);\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for(int i=0;i<nums.size();i++){\n        squares.push_back(nums[i]*nums[i]);\n    }\n    return squares;"
  ]
}