{
  "name": "mbpp_438_count_bidirectional",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count bidirectional tuple pairs.\nlong count_bidirectional(std::vector<long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = count_bidirectional;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 1), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (3));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 3), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 1), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (2));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(5, 6), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(9, 2), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(2, 1)}))) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    long n = test_list.size();\n    std::vector<long> v(n, 0);\n    for (long i = 0; i < n; i++) {\n        v[test_list[i]] = i;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (test_list[i] < test_list[j] && v[i] > v[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    long n = test_list.size();\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long n = test_list.size();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (map.find(test_list[i]) == map.end()) {\n            map[test_list[i]] = 1;\n        } else {\n            map[test_list[i]]++;\n        }\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        if (map.find(test_list[i]) != map.end()) {\n            count += map[test_list[i]];\n            map[test_list[i]] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::map<long, long> m;\n    for (long i = 0; i < test_list.size(); i++) {\n        m[test_list[i]]++;\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        if (m[test_list[i]] > 1) {\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++){\n        for(int j = i+1; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    long n = test_list.size();\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    long n = test_list.size();\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] > test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); ++it) {\n        count += std::count(it, test_list.end(), *it);\n    }\n    return count;",
    "    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] * test_list[j] > 0) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(long i = 0; i < test_list.size(); i++){\n        for(long j = i+1; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here.\n    long count = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (m.find(test_list[i]) == m.end()) {\n            m[test_list[i]] = 1;\n        } else {\n            m[test_list[i]]++;\n        }\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        if (m.find(test_list[i]) != m.end()) {\n            count += m[test_list[i]];\n            m[test_list[i]] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  long count = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] == test_list[j]) {\n        count++;\n      }\n    }\n  }\n  return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::vector<long> test_list_copy = test_list;\n    std::sort(test_list_copy.begin(), test_list_copy.end());\n    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        long index = std::lower_bound(test_list_copy.begin(), test_list_copy.end(), test_list[i]) - test_list_copy.begin();\n        count += index;\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++)\n    {\n        for(int j=i+1;j<test_list.size();j++)\n        {\n            if(test_list[i] == test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::vector<long> test_list_copy = test_list;\n    std::sort(test_list_copy.begin(), test_list_copy.end());\n    std::vector<long>::iterator it = std::unique(test_list_copy.begin(), test_list_copy.end());\n    test_list_copy.resize(std::distance(test_list_copy.begin(), it));\n    long count = 0;\n    for (long i = 0; i < test_list_copy.size(); i++) {\n        long count_a = std::count(test_list.begin(), test_list.end(), test_list_copy[i]);\n        long count_b = std::count(test_list.begin(), test_list.end(), test_list_copy[i] + 1);\n        count += count_a * count_b;\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count=0;\n    for(int i=0;i<test_list.size();i++)\n    {\n        for(int j=i+1;j<test_list.size();j++)\n        {\n            if(test_list[i]==test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = 0; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for (it2 = test_list.begin(); it2 != test_list.end(); it2++) {\n            if (*it == *it2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++)\n    {\n        std::vector<long>::iterator it2;\n        for(it2 = test_list.begin(); it2 != test_list.end(); it2++)\n        {\n            if(*it == *it2)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "\tlong count = 0;\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    long n = test_list.size();\n    for(long i = 0; i < n; i++)\n    {\n        for(long j = i+1; j < n; j++)\n        {\n            if(test_list[i] == test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::vector<long>::iterator it;\n    long count = 0;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > 0) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for(long i = 0; i < test_list.size() - 1; i++){\n        for(long j = i + 1; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for(long i = 0; i < test_list.size(); i++){\n        for(long j = i+1; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (map.find(test_list[i]) == map.end()) {\n            map[test_list[i]] = 1;\n        } else {\n            map[test_list[i]]++;\n        }\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        if (map.find(test_list[i]) != map.end()) {\n            count += map[test_list[i]];\n            map[test_list[i]] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count=0;\n    std::vector<long>::iterator it;\n    for(it=test_list.begin();it!=test_list.end();it++)\n    {\n        std::vector<long>::iterator it2;\n        for(it2=test_list.begin();it2!=test_list.end();it2++)\n        {\n            if(*it==*it2)\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> count;\n    long result = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (count.find(test_list[i]) == count.end()) {\n            count[test_list[i]] = 1;\n        } else {\n            count[test_list[i]] += 1;\n        }\n    }\n    for (auto it = count.begin(); it != count.end(); it++) {\n        result += (it->second * (it->second - 1)) / 2;\n    }\n    return result;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(long i = 0; i < test_list.size(); i++){\n        for(long j = i+1; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::map<long, long> test_map;\n    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_map[test_list[i]] = i;\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_map.find(test_list[i]) != test_map.end()) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[j] % test_list[i] == 0) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long> test_list_copy = test_list;\n    std::sort(test_list_copy.begin(), test_list_copy.end());\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list_copy[j] && test_list[j] == test_list_copy[i]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count=0;\n    for(int i=0;i<test_list.size();i++)\n    {\n        for(int j=i+1;j<test_list.size();j++)\n        {\n            if(test_list[i]==test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  long count = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] == test_list[j]) {\n        count++;\n      }\n    }\n  }\n  return count;",
    "    // Your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++)\n    {\n        for(int j = i+1; j < test_list.size(); j++)\n        {\n            if(test_list[i] == test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "\tlong count = 0;\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < test_list.size(); i++) {\n        if(map.find(test_list[i]) == map.end()) {\n            map[test_list[i]] = 1;\n        } else {\n            map[test_list[i]]++;\n        }\n    }\n    for(long i = 0; i < test_list.size(); i++) {\n        if(map.find(test_list[i]) != map.end()) {\n            count += map[test_list[i]];\n            map[test_list[i]] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size() - 1; i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[j] % test_list[i] == 0) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            if (*it == *it2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<long, long> count_map;\n    long count = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        count_map[test_list[i]]++;\n    }\n    for(long i = 0; i < test_list.size(); i++) {\n        count += count_map[test_list[i]];\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            if (*it2 == *it) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i+1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here.\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++){\n        for(int j = 0; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j] && i != j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] + test_list[j] == 0) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::vector<long>::iterator itr;\n    std::vector<long>::iterator itr2;\n    long count = 0;\n    for(itr = test_list.begin(); itr != test_list.end(); ++itr) {\n        for(itr2 = test_list.begin(); itr2 != test_list.end(); ++itr2) {\n            if(*itr == *itr2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] < test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Your code here\n    long count = 0;\n    std::map<long, long> m;\n    for(int i = 0; i < test_list.size(); i++) {\n        m[test_list[i]]++;\n    }\n    for(int i = 0; i < test_list.size(); i++) {\n        if(m[test_list[i]] > 0) {\n            count += m[test_list[i]];\n            m[test_list[i]] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] > test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::vector<long> test_list_copy = test_list;\n    std::sort(test_list_copy.begin(), test_list_copy.end());\n    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        long index = std::lower_bound(test_list_copy.begin(), test_list_copy.end(), test_list[i]) - test_list_copy.begin();\n        count += index;\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long x = *it;\n        long y = x + 1;\n        long z = x - 1;\n        if(std::find(test_list.begin(), test_list.end(), y) != test_list.end()) {\n            count++;\n        }\n        if(std::find(test_list.begin(), test_list.end(), z) != test_list.end()) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it < 0) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] < test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < test_list.size(); i++) {\n        if(map.find(test_list[i]) == map.end()) {\n            map[test_list[i]] = 1;\n        } else {\n            map[test_list[i]]++;\n        }\n    }\n    for(long i = 0; i < test_list.size(); i++) {\n        if(map.find(test_list[i]) != map.end()) {\n            count += map[test_list[i]];\n            map[test_list[i]] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    long n = test_list.size();\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (map.find(test_list[i]) == map.end()) {\n            map[test_list[i]] = 1;\n        } else {\n            map[test_list[i]]++;\n        }\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        if (map.find(test_list[i]) != map.end()) {\n            count += map[test_list[i]];\n            map[test_list[i]] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    long n = test_list.size();\n    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  long count = 0;\n  for (long i = 0; i < test_list.size(); i++) {\n    for (long j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] == test_list[j]) {\n        count++;\n      }\n    }\n  }\n  return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++){\n        for(int j = 0; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j] && i != j){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count += 1;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::vector<long> v;\n    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = 0; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    long n = test_list.size();\n    for(long i = 0; i < n; i++) {\n        for(long j = i+1; j < n; j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    long n = test_list.size();\n    for (long i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] * test_list[j] > 0) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  // Write your code here\n  long count = 0;\n  for(int i = 0; i < test_list.size(); i++){\n    for(int j = i+1; j < test_list.size(); j++){\n      if(test_list[i] == test_list[j]){\n        count++;\n      }\n    }\n  }\n  return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++)\n    {\n        for(int j = i+1; j < test_list.size(); j++)\n        {\n            if(test_list[i] == test_list[j])\n                count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        count += std::count(test_list.begin(), test_list.end(), *it);\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long temp = *it;\n        long temp_count = 0;\n        std::vector<long>::iterator it2;\n        for(it2 = test_list.begin(); it2 != test_list.end(); it2++) {\n            if(*it2 == temp) {\n                temp_count++;\n            }\n        }\n        count += temp_count * (temp_count - 1);\n    }\n    return count / 2;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    long n = test_list.size();\n    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    long n = test_list.size();\n    for(long i=0; i<n; i++) {\n        for(long j=i+1; j<n; j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;"
  ]
}