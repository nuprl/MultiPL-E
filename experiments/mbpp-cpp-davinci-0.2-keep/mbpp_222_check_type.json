{
  "name": "mbpp_222_check_type",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if all the elements in tuple have same data type or not.\nbool check_type(std::any test_tuple) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = check_type;\n    assert(candidate(std::make_tuple(5, 6, 7, 3, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, \"4\")) == (false));\n    assert(candidate(std::make_tuple(3, 2, 1, 4, 5)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::tuple<int, int, int> test_tuple1;\n    std::tuple<float, float, float> test_tuple2;\n    std::tuple<char, char, char> test_tuple3;\n    std::tuple<std::string, std::string, std::string> test_tuple4;\n    std::tuple<int, float, char> test_tuple5;\n    std::tuple<int, float, std::string> test_tuple6;\n    std::tuple<int, char, std::string> test_tuple7;\n    std::tuple<float, char, std::string> test_tuple8;\n    if (test_tuple == test_tuple1 || test_tuple == test_tuple2 || test_tuple == test_tuple3 || test_tuple == test_tuple4 || test_tuple == test_tuple5 || test_tuple == test_tuple6 || test_tuple == test_tuple7 || test_tuple == test_tuple8) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   ",
    "    std::tuple<int, float, double, char> test_tuple_1 = std::any_cast<std::tuple<int, float, double, char>>(test_tuple);\n    int a = std::any_cast<int>(test_tuple_1);\n    float b = std::any_cast<float>(test_tuple_1);\n    double c = std::any_cast<double>(test_tuple_1);\n    char d = std::any_cast<char>(test_tuple_1);\n    if(typeid(a) == typeid(b) && typeid(b) == typeid(c) && typeid(c) == typeid(d)) {\n        return true;\n    }\n    return false;",
    "    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   ",
    "    std::any_cast<std::tuple<int, int, int>>(test_tuple);\n    return true;",
    "    std::tuple<int,int,int> test_tuple_1;\n    std::tuple<float,float,float> test_tuple_2;\n    std::tuple<std::string,std::string,std::string> test_tuple_3;\n    std::tuple<char,char,char> test_tuple_4;\n    std::tuple<bool,bool,bool> test_tuple_5;\n    if(test_tuple == test_tuple_1) {\n        return true;\n    }\n    else if(test_tuple == test_tuple_2) {\n        return true;\n    }\n    else if(test_tuple == test_tuple_3) {\n        return true;\n    }\n    else if(test_tuple == test_tuple_4) {\n        return true;\n    }\n    else if(test_tuple == test_tuple_5) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::tuple<int, float, double, char> test_tuple(1, 2.2, 3.3, 'a');\n    std::any_cast<int>(test_tuple);\n    std::any_cast<float>(test_tuple);\n    std::any_cast<double>(test_tuple);\n    std::any_cast<char>(test_tuple);\n    return true;",
    "    std::string type_name = test_tuple.type().name();\n    for (auto i : test_tuple) {\n        if (i.type().name() != type_name) {\n            return false;\n        }\n    }\n    return true;",
    "    std::tuple<int, float, double> test_tuple1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple17(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple18(",
    "    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   ",
    "    std::string type = test_tuple.type().name();\n    std::string type_name = type.substr(6, type.size() - 1);\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i++) {\n        if (std::any_cast<std::string>(test_tuple).compare(type_name)) {\n            return false;\n        }\n    }\n    return true;",
    "    std::tuple<int, float, double> test_tuple_1(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_2(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_3(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_4(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_5(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_6(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_7(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_8(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_9(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_10(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_11(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_12(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_13(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_14(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_15(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_16(1, 2.0, 3.0);\n    std::tuple<int, float, double> test_tuple_17(1, 2.0, 3.0);\n   ",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::any_cast<int>(test_tuple);\n    return true;",
    "    std::tuple<int, float, double, char> test_tuple1;\n    std::tuple<int, float, double, char> test_tuple2;\n    std::tuple<int, float, double, char> test_tuple3;\n    std::tuple<int, float, double, char> test_tuple4;\n    std::tuple<int, float, double, char> test_tuple5;\n    std::tuple<int, float, double, char> test_tuple6;\n    std::tuple<int, float, double, char> test_tuple7;\n    std::tuple<int, float, double, char> test_tuple8;\n    std::tuple<int, float, double, char> test_tuple9;\n    std::tuple<int, float, double, char> test_tuple10;\n    std::tuple<int, float, double, char> test_tuple11;\n    std::tuple<int, float, double, char> test_tuple12;\n    std::tuple<int, float, double, char> test_tuple13;\n    std::tuple<int, float, double, char> test_tuple14;\n    std::tuple<int, float, double, char> test_tuple15;\n    std::tuple<int, float, double, char> test_tuple16;\n    std::tuple<int, float, double, char> test_tuple17;\n    std::tuple<int, float, double, char> test_tuple18;\n    std::tuple<int, float, double, char> test_tuple19;\n    std::tuple<int, float, double, char> test_tuple20;\n    std::tuple<int, float, double, char> test_tuple21;\n    std::tuple<int, float, double, char> test_tuple22;\n    std::tuple<int, float, double, char> test_tuple23;\n    std::tuple<int, float, double, char> test_tuple24;\n    std::tuple<int",
    "    std::any_cast<int>(test_tuple);\n    return true;"
  ]
}