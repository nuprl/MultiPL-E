{
  "name": "mbpp_563_extract_values",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract values between quotation marks from a string.\nstd::vector<std::string> extract_values(std::string text) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = extract_values;\n    assert(candidate((\"\"Python\", \"PHP\", \"Java\"\")) == (std::vector<std::string>({(std::string)\"Python\", (std::string)\"PHP\", (std::string)\"Java\"})));\n    assert(candidate((\"\"python\",\"program\",\"language\"\")) == (std::vector<std::string>({(std::string)\"python\", (std::string)\"program\", (std::string)\"language\"})));\n    assert(candidate((\"\"red\",\"blue\",\"green\",\"yellow\"\")) == (std::vector<std::string>({(std::string)\"red\", (std::string)\"blue\", (std::string)\"green\", (std::string)\"yellow\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> values;\n    std::string value;\n    bool in_quotes = false;\n    for (char c : text) {\n        if (c == '\"') {\n            if (in_quotes) {\n                values.push_back(value);\n                value = \"\";\n            }\n            in_quotes = !in_quotes;\n        } else if (in_quotes) {\n            value += c;\n        }\n    }\n    return values;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '\"') {\n            i++;\n            while(text[i] != '\"') {\n                temp += text[i];\n                i++;\n            }\n            result.push_back(temp);\n            temp.clear();\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  std::string temp;\n  bool flag = false;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == '\"') {\n      if (flag) {\n        result.push_back(temp);\n        temp = \"\";\n        flag = false;\n      } else {\n        flag = true;\n      }\n    } else if (flag) {\n      temp += text[i];\n    }\n  }\n  return result;",
    "    std::vector<std::string> values;\n    std::string value;\n    bool in_quotes = false;\n    for (char c : text) {\n        if (c == '\"') {\n            in_quotes = !in_quotes;\n            if (!in_quotes) {\n                values.push_back(value);\n                value.clear();\n            }\n        } else if (in_quotes) {\n            value += c;\n        }\n    }\n    return values;",
    "    std::vector<std::string> result;\n    std::string temp;\n    bool flag = false;\n    for(auto i: text) {\n        if(i == '\"') {\n            if(flag) {\n                result.push_back(temp);\n                temp = \"\";\n            }\n            flag = !flag;\n        }\n        else if(flag) {\n            temp += i;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(text);\n    std::string item;\n    while (std::getline(ss, item, '\"')) {\n        if (!item.empty()) {\n            result.push_back(item);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string str;\n    int i=0;\n    while(i<text.length()){\n        if(text[i]=='\"'){\n            i++;\n            while(text[i]!='\"'){\n                str+=text[i];\n                i++;\n            }\n            result.push_back(str);\n            str=\"\";\n        }\n        i++;\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '\"') {\n            temp = \"\";\n            i++;\n            while(text[i] != '\"') {\n                temp += text[i];\n                i++;\n            }\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '\"') {\n            if(flag) {\n                result.push_back(temp);\n                temp.clear();\n                flag = false;\n            } else {\n                flag = true;\n            }\n        } else if(flag) {\n            temp += text[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    bool flag = false;\n    for(int i=0; i<text.length(); i++) {\n        if(text[i] == '\"') {\n            if(flag) {\n                result.push_back(temp);\n                temp = \"\";\n            }\n            flag = !flag;\n        }\n        else if(flag) {\n            temp += text[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '\"') {\n            temp = \"\";\n            for(int j = i + 1; j < text.length(); j++) {\n                if(text[j] == '\"') {\n                    result.push_back(temp);\n                    break;\n                }\n                temp += text[j];\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '\"') {\n            temp = \"\";\n            i++;\n            while(text[i] != '\"') {\n                temp += text[i];\n                i++;\n            }\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '\"') {\n            i++;\n            while(text[i] != '\"') {\n                temp += text[i];\n                i++;\n            }\n            result.push_back(temp);\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<text.length();i++) {\n        if(text[i]=='\"') {\n            i++;\n            while(text[i]!='\"') {\n                temp.push_back(text[i]);\n                i++;\n            }\n            result.push_back(temp);\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '\"') {\n            if(flag) {\n                result.push_back(temp);\n                temp = \"\";\n            }\n            flag = !flag;\n        } else if(flag) {\n            temp += text[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<text.length();i++)\n    {\n        if(text[i]=='\"')\n        {\n            temp.clear();\n            i++;\n            while(text[i]!='\"')\n            {\n                temp.push_back(text[i]);\n                i++;\n            }\n            result.push_back(temp);\n        }\n    }\n    return result;",
    "    std::vector<std::string> values;\n    std::string value;\n    bool in_quotes = false;\n    for (char c : text) {\n        if (c == '\"') {\n            in_quotes = !in_quotes;\n            if (!in_quotes) {\n                values.push_back(value);\n                value.clear();\n            }\n        } else if (in_quotes) {\n            value += c;\n        }\n    }\n    return values;",
    "    std::vector<std::string> values;\n    std::string value;\n    bool in_quotes = false;\n    for (char c : text) {\n        if (c == '\"') {\n            if (in_quotes) {\n                values.push_back(value);\n                value = \"\";\n            }\n            in_quotes = !in_quotes;\n        } else if (in_quotes) {\n            value += c;\n        }\n    }\n    return values;",
    "    std::vector<std::string> values;\n    std::string value;\n    bool in_quotes = false;\n    for (char c : text) {\n        if (c == '\"') {\n            if (in_quotes) {\n                values.push_back(value);\n                value = \"\";\n            }\n            in_quotes = !in_quotes;\n        } else if (in_quotes) {\n            value += c;\n        }\n    }\n    return values;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<text.size();i++)\n    {\n        if(text[i]=='\"')\n        {\n            temp.clear();\n            i++;\n            while(text[i]!='\"')\n            {\n                temp.push_back(text[i]);\n                i++;\n            }\n            result.push_back(temp);\n        }\n    }\n    return result;"
  ]
}