{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the first non-repeated character in a given string.\nstd::optional<std::string> first_non_repeating_character(std::string str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = first_non_repeating_character;\n    assert(candidate((\"abcabc\")) == std::nullopt);\n    assert(candidate((\"abc\")) == \"a\");\n    assert(candidate((\"ababc\")) == \"c\");\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::unordered_map<char, int> map;\n    for (auto &ch : str1) {\n        map[ch]++;\n    }\n    for (auto &ch : str1) {\n        if (map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return {};",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return ch;\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (char c : str1) {\n        char_map[c]++;\n    }\n    for (char c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    std::string result;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            result = ch;\n            break;\n        }\n    }\n    if (result.empty()) {\n        return std::nullopt;\n    }\n    return result;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map1;\n    for (auto i : str1) {\n        map1[i]++;\n    }\n    for (auto i : str1) {\n        if (map1[i] == 1) {\n            return i;\n        }\n    }\n    return {};",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map1;\n    std::string result;\n    for (auto i : str1) {\n        map1[i]++;\n    }\n    for (auto i : str1) {\n        if (map1[i] == 1) {\n            result = i;\n            break;\n        }\n    }\n    if (result.empty()) {\n        return {};\n    }\n    return result;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map1;\n    for (auto i : str1) {\n        map1[i]++;\n    }\n    for (auto i : str1) {\n        if (map1[i] == 1) {\n            return std::make_optional(std::string(1, i));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto &c : str1) {\n        char_map[c]++;\n    }\n    for (auto &c : str1) {\n        if (char_map[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (char c : str1) {\n        char_map[c]++;\n    }\n    for (char c : str1) {\n        if (char_map[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string{c}};\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::optional<std::string>{std::string{c}};\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map1;\n    for (auto c : str1) {\n        map1[c]++;\n    }\n    for (auto c : str1) {\n        if (map1[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto i : str1) {\n        map[i]++;\n    }\n    for (auto i : str1) {\n        if (map[i] == 1) {\n            return std::make_optional(std::string(1, i));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (char c : str1) {\n        char_count[c]++;\n    }\n    for (char c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (map[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> hash_map;\n    for (auto ch : str1) {\n        hash_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (hash_map[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for(auto c : str1) {\n        if(char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            char_map[c] += 1;\n        }\n    }\n    for(auto c : str1) {\n        if(char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            char_map[ch] += 1;\n        }\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> hash_map;\n    for (auto ch : str1) {\n        hash_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (hash_map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (char c : str1) {\n        char_count[c]++;\n    }\n    for (char c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        if (char_count.find(c) == char_count.end()) {\n            char_count[c] = 1;\n        } else {\n            char_count[c] += 1;\n        }\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (char c : str1) {\n        char_count[c]++;\n    }\n    for (char c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto i : str1) {\n        map[i]++;\n    }\n    for (auto i : str1) {\n        if (map[i] == 1) {\n            return i;\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> mp;\n    for (auto c : str1) {\n        mp[c]++;\n    }\n    for (auto c : str1) {\n        if (mp[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (int i = 0; i < str1.length(); i++) {\n        char_map[str1[i]]++;\n    }\n    for (int i = 0; i < str1.length(); i++) {\n        if (char_map[str1[i]] == 1) {\n            return std::optional<std::string>(std::string(1, str1[i]));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> str_map;\n    for (auto ch : str1) {\n        str_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (str_map[ch] == 1) {\n            return std::optional<std::string>(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        if (map.find(c) == map.end()) {\n            map[c] = 1;\n        } else {\n            map[c] += 1;\n        }\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count_map;\n    for (auto c : str1) {\n        char_count_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map;\n    for (auto i : str1) {\n        map[i]++;\n    }\n    for (auto i : str1) {\n        if (map[i] == 1) {\n            return std::make_optional(std::string(1, i));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (map[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (char c : str1) {\n        char_count[c]++;\n    }\n    for (char c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map1;\n    for (auto ch : str1) {\n        map1[ch]++;\n    }\n    for (auto ch : str1) {\n        if (map1[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::string str2 = \"\";\n    std::string str3 = \"\";\n    for (int i = 0; i < str1.size(); i++) {\n        if (str2.find(str1[i]) == std::string::npos) {\n            str2 += str1[i];\n        } else {\n            str3 += str1[i];\n        }\n    }\n    for (int i = 0; i < str2.size(); i++) {\n        if (str3.find(str2[i]) == std::string::npos) {\n            return str2[i];\n        }\n    }\n    return {};",
    "    std::unordered_map<char, int> map;\n    for (char c : str1) {\n        map[c]++;\n    }\n    for (char c : str1) {\n        if (map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "  std::string str2;\n  std::string str3;\n  for (int i = 0; i < str1.length(); i++) {\n    if (str2.find(str1[i]) == std::string::npos) {\n      str2 += str1[i];\n    } else {\n      str3 += str1[i];\n    }\n  }\n  for (int i = 0; i < str2.length(); i++) {\n    if (str3.find(str2[i]) == std::string::npos) {\n      return str2[i];\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> hash;\n    for (auto c : str1) {\n        hash[c]++;\n    }\n    for (auto c : str1) {\n        if (hash[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (map[ch] == 1) {\n            return ch;\n        }\n    }\n    return {};",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        if (char_count.find(c) == char_count.end()) {\n            char_count[c] = 1;\n        } else {\n            char_count[c] += 1;\n        }\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> map;\n  for (auto ch : str1) {\n    map[ch]++;\n  }\n  for (auto ch : str1) {\n    if (map[ch] == 1) {\n      return std::make_optional(std::string(1, ch));\n    }\n  }\n  return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> hashmap;\n    for (auto c : str1) {\n        hashmap[c]++;\n    }\n    for (auto c : str1) {\n        if (hashmap[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map1;\n    for (auto i : str1) {\n        map1[i]++;\n    }\n    for (auto i : str1) {\n        if (map1[i] == 1) {\n            return i;\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) != char_map.end()) {\n            char_map[c] += 1;\n        } else {\n            char_map[c] = 1;\n        }\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        if (char_count.find(ch) == char_count.end()) {\n            char_count[ch] = 1;\n        } else {\n            char_count[ch] += 1;\n        }\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_count;\n  for (auto &c : str1) {\n    char_count[c]++;\n  }\n  for (auto &c : str1) {\n    if (char_count[c] == 1) {\n      return std::optional<std::string>{std::string(1, c)};\n    }\n  }\n  return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch] += 1;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map1;\n    for (auto i : str1) {\n        map1[i]++;\n    }\n    for (auto i : str1) {\n        if (map1[i] == 1) {\n            return std::optional<std::string>(std::string(1, i));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for(auto c : str1) {\n        char_count[c]++;\n    }\n    for(auto c : str1) {\n        if(char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        if (char_map.find(ch) == char_map.end()) {\n            char_map[ch] = 1;\n        } else {\n            char_map[ch] += 1;\n        }\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return {};",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto &c : str1) {\n        char_map[c]++;\n    }\n    for (auto &c : str1) {\n        if (char_map[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_count;\n  for (auto c : str1) {\n    char_count[c]++;\n  }\n  for (auto c : str1) {\n    if (char_count[c] == 1) {\n      return std::make_optional(std::string(1, c));\n    }\n  }\n  return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (char c : str1) {\n        char_map[c]++;\n    }\n    for (char c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "\tstd::map<char, int> map1;\n\tfor (auto i : str1) {\n\t\tmap1[i]++;\n\t}\n\tfor (auto i : str1) {\n\t\tif (map1[i] == 1) {\n\t\t\treturn std::optional<std::string>(std::string(1, i));\n\t\t}\n\t}\n\treturn std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (char c : str1) {\n        map[c]++;\n    }\n    for (char c : str1) {\n        if (map[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            char_map[c] += 1;\n        }\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::optional<std::string>{std::string(1, ch)};\n        }\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> char_map;\n  for (auto ch : str1) {\n    char_map[ch]++;\n  }\n  for (auto ch : str1) {\n    if (char_map[ch] == 1) {\n      return std::make_optional(std::string(1, ch));\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (char c : str1) {\n        char_count[c]++;\n    }\n    for (char c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto c : str1) {\n        if (char_count.find(c) == char_count.end()) {\n            char_count[c] = 1;\n        } else {\n            char_count[c] += 1;\n        }\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for(auto i : str1) {\n        map[i]++;\n    }\n    for(auto i : str1) {\n        if(map[i] == 1) {\n            return std::make_optional(std::string(1, i));\n        }\n    }\n    return std::nullopt;",
    "  std::string str2;\n  std::string str3;\n  for (int i = 0; i < str1.length(); i++) {\n    if (str2.find(str1[i]) == std::string::npos) {\n      str2 += str1[i];\n    } else {\n      str3 += str1[i];\n    }\n  }\n  for (int i = 0; i < str2.length(); i++) {\n    if (str3.find(str2[i]) == std::string::npos) {\n      return std::string(1, str2[i]);\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto &c : str1) {\n        map[c]++;\n    }\n    for (auto &c : str1) {\n        if (map[c] == 1) {\n            return std::optional<std::string>{std::string{c}};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (char c : str1) {\n        map[c]++;\n    }\n    for (char c : str1) {\n        if (map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (char c : str1) {\n        char_map[c]++;\n    }\n    for (char c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto &c : str1) {\n        char_map[c]++;\n    }\n    for (auto &c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::optional<std::string>{std::string{c}};\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto& c : str1) {\n        char_map[c]++;\n    }\n    for (auto& c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            char_map[c]++;\n        }\n    }\n\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string{c}};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        if (char_count.find(c) == char_count.end()) {\n            char_count[c] = 1;\n        } else {\n            char_count[c] += 1;\n        }\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map;\n    for (auto ch : str1) {\n        map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return c;\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::string str2;\n    for (int i = 0; i < str1.length(); i++) {\n        if (str2.find(str1[i]) == std::string::npos) {\n            str2 += str1[i];\n        } else {\n            str2.erase(std::remove(str2.begin(), str2.end(), str1[i]), str2.end());\n        }\n    }\n    if (str2.length() == 0) {\n        return std::nullopt;\n    }\n    return str2;",
    "    std::map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (char c : str1) {\n        map[c]++;\n    }\n    for (char c : str1) {\n        if (map[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for(auto c: str1) {\n        char_map[c]++;\n    }\n    for(auto c: str1) {\n        if(char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "  std::unordered_map<char, int> count_map;\n  for (auto c : str1) {\n    count_map[c]++;\n  }\n  for (auto c : str1) {\n    if (count_map[c] == 1) {\n      return std::string(1, c);\n    }\n  }\n  return std::nullopt;",
    "    std::unordered_map<char, int> hash_map;\n    for (auto ch : str1) {\n        hash_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (hash_map[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 1;\n        } else {\n            char_map[c] += 1;\n        }\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto ch : str1) {\n        map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;"
  ]
}