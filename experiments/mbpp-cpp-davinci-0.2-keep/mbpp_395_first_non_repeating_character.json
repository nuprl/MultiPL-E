{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the first non-repeated character in a given string.\nstd::optional<std::string> first_non_repeating_character(std::string str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = first_non_repeating_character;\n    assert(candidate((\"abcabc\")) == std::nullopt);\n    assert(candidate((\"abc\")) == \"a\");\n    assert(candidate((\"ababc\")) == \"c\");\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::unordered_map<char, int> map;\n    for (auto &ch : str1) {\n        map[ch]++;\n    }\n    for (auto &ch : str1) {\n        if (map[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return {};",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return ch;\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (char c : str1) {\n        char_map[c]++;\n    }\n    for (char c : str1) {\n        if (char_map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto c : str1) {\n        char_map[c]++;\n    }\n    for (auto c : str1) {\n        if (char_map[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    std::string result;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            result = ch;\n            break;\n        }\n    }\n    if (result.empty()) {\n        return std::nullopt;\n    }\n    return result;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::make_optional(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map1;\n    for (auto i : str1) {\n        map1[i]++;\n    }\n    for (auto i : str1) {\n        if (map1[i] == 1) {\n            return i;\n        }\n    }\n    return {};",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_map;\n    for (auto ch : str1) {\n        char_map[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_map[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> map;\n    for (auto c : str1) {\n        map[c]++;\n    }\n    for (auto c : str1) {\n        if (map[c] == 1) {\n            return std::optional<std::string>(std::string(1, c));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::string(1, c);\n        }\n    }\n    return std::nullopt;",
    "    std::map<char, int> map1;\n    std::string result;\n    for (auto i : str1) {\n        map1[i]++;\n    }\n    for (auto i : str1) {\n        if (map1[i] == 1) {\n            result = i;\n            break;\n        }\n    }\n    if (result.empty()) {\n        return {};\n    }\n    return result;",
    "    std::unordered_map<char, int> char_count;\n    for (auto c : str1) {\n        char_count[c]++;\n    }\n    for (auto c : str1) {\n        if (char_count[c] == 1) {\n            return std::optional<std::string>{std::string(1, c)};\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::make_optional(std::string(1, ch));\n        }\n    }\n    return std::nullopt;",
    "    std::unordered_map<char, int> char_count;\n    for (auto ch : str1) {\n        char_count[ch]++;\n    }\n    for (auto ch : str1) {\n        if (char_count[ch] == 1) {\n            return std::string(1, ch);\n        }\n    }\n    return std::nullopt;"
  ]
}