{
  "name": "mbpp_740_tuple_to_dict",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::map<long,long> test_dict;\n    while(test_tup.size() > 1) {\n        test_dict[test_tup[0]] = test_tup[1];\n        test_tup.pop_front();\n        test_tup.pop_front();\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long i,j;\n    for(i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    std::vector<long> test_vec;\n    while(test_tup != 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    for(int i = 0; i < test_vec.size(); i += 2) {\n        test_dict[test_vec[i]] = test_vec[i+1];\n    }\n    return test_dict;",
    "    std::map<long,long> test_map;\n    for(int i=0;i<test_tup.size();i+=2) {\n        test_map[test_tup[i]] = test_tup[i+1];\n    }\n    return test_map;",
    "    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;",
    "    std::map<long,long> test_dict;\n    long test_tup_size = test_tup.size();\n    for(long i = 0; i < test_tup_size; i++) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i++;\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long test_tup_arr[test_tup];\n    for(long i = 0; i < test_tup; i++) {\n        test_tup_arr[i] = i;\n    }\n    for(long i = 0; i < test_tup; i+=2) {\n        test_dict[test_tup_arr[i]] = test_tup_arr[i+1];\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long temp = test_tup;\n    while(temp) {\n        long key = temp % 10;\n        temp = temp / 10;\n        long value = temp % 10;\n        temp = temp / 10;\n        test_dict[key] = value;\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    for(long i=0;i<test_tup.size();i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup[i] != NULL) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n        i+=2;\n    }\n    return test_dict;",
    "    std::map<long,long> dict;\n    long key = test_tup[0];\n    for (int i = 1; i < test_tup.size(); i++) {\n        dict[key] = test_tup[i];\n        key = test_tup[i];\n    }\n    return dict;",
    "    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup > 0) {\n        value = test_tup % 10;\n        test_tup /= 10;\n        key = test_tup % 10;\n        test_map[key] = value;\n        test_tup /= 10;\n    }\n    return test_map;",
    "    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup) {\n        value = test_tup%10;\n        test_tup = test_tup/10;\n        key = test_tup%10;\n        test_tup = test_tup/10;\n        test_map.insert(std::pair<long,long>(key,value));\n    }\n    return test_map;",
    "    std::map<long,long> res;\n    long key = 0;\n    long value = 0;\n    for(long i = 0; i < test_tup.size(); i++) {\n        if(i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            res.insert(std::pair<long,long>(key,value));\n        }\n    }\n    return res;",
    "    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup != 0) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;",
    "    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while(test_tup) {\n        key = test_tup%10;\n        test_tup /= 10;\n        value = test_tup%10;\n        test_tup /= 10;\n        test_map.insert(std::pair<long,long>(key,value));\n    }\n    return test_map;",
    "    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    while (test_tup != 0) {\n        key = test_tup % 10;\n        test_tup = test_tup / 10;\n        value = test_tup % 10;\n        test_tup = test_tup / 10;\n        test_map[key] = value;\n    }\n    return test_map;",
    "    std::map<long,long> dict;\n    for(int i=0;i<test_tup.size();i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;",
    "    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    while (test_tup > 0) {\n        key = test_tup % 10;\n        test_tup /= 10;\n        value = test_tup % 10;\n        test_tup /= 10;\n        test_dict[key] = value;\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long i = 0;\n    while(test_tup) {\n        test_dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;"
  ]
}