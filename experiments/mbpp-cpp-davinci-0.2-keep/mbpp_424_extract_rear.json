{
  "name": "mbpp_424_extract_rear",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract only the rear index element of each string in the given tuple.\nstd::vector<std::string> extract_rear(std::string test_tuple) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = extract_rear;\n    assert(candidate(std::make_tuple(\"Mers\", \"for\", \"Vers\")) == (std::vector<std::string>({(std::string)\"s\", (std::string)\"r\", (std::string)\"s\"})));\n    assert(candidate(std::make_tuple(\"Avenge\", \"for\", \"People\")) == (std::vector<std::string>({(std::string)\"e\", (std::string)\"r\", (std::string)\"e\"})));\n    assert(candidate(std::make_tuple(\"Gotta\", \"get\", \"go\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"t\", (std::string)\"o\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++)\n    {\n        if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else\n        {\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++)\n    {\n        if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else\n        {\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else if(test_tuple[i] == ')') {\n            result.push_back(temp);\n            break;\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while(std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while(std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size()-1, token.size()));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0; i<test_tuple.length(); i++) {\n        if(test_tuple[i] != ',') {\n            temp += test_tuple[i];\n        }\n        else {\n            result.push_back(temp);\n            temp.clear();\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(' ')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(\" \") + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> rear_index_elements;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        rear_index_elements.push_back(temp);\n    }\n    return rear_index_elements;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++) {\n        if(test_tuple[i]==',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else if(test_tuple[i] == ')') {\n            result.push_back(temp);\n            break;\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size()-1, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> rear_index_elements;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        rear_index_elements.push_back(token.substr(token.find_last_of(\" \") + 1));\n    }\n    return rear_index_elements;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(ss >> temp) {\n        result.push_back(temp.substr(temp.length()-1, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('[') + 1, token.find_last_of(']') - token.find_last_of('[') - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++)\n    {\n        if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else\n        {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    for (int i = 0; i < result.size(); i++) {\n        std::string str = result[i];\n        result[i] = str.substr(str.length() - 1);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item.substr(item.find_last_of(\"0123456789\")));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item.substr(item.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find('[')+1, temp.find(']')));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('[') + 1, token.find_last_of(']') - token.find_last_of('[') - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    int i = 0;\n    while(test_tuple[i] != '\\0') {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n        i++;\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length()-1, token.length()));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> rear_index_elements;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        rear_index_elements.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return rear_index_elements;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('-') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++)\n    {\n        if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else if(test_tuple[i]==')')\n        {\n            result.push_back(temp);\n            temp.clear();\n            break;\n        }\n        else\n        {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item.substr(item.find_last_of('_')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_')+1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.size();i++)\n    {\n        if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else\n        {\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while (std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> test_vector;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++) {\n        if(test_tuple[i]==',') {\n            test_vector.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    test_vector.push_back(temp);\n    return test_vector;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < test_tuple.size(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        } else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp=\"\";\n        }\n        else{\n            temp+=test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++)\n    {\n        if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else\n        {\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "  std::vector<std::string> result;\n  std::stringstream ss(test_tuple);\n  std::string temp;\n  while(std::getline(ss, temp, ',')) {\n    result.push_back(temp.substr(temp.size() - 1));\n  }\n  return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.size(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++)\n    {\n        if(test_tuple[i]==',')\n        {\n            result.push_back(temp);\n            temp.clear();\n        }\n        else if(test_tuple[i]==')')\n        {\n            result.push_back(temp);\n            break;\n        }\n        else\n        {\n            temp+=test_tuple[i];\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while (std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of('_') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i = 0; i < test_tuple.length(); i++) {\n        if(test_tuple[i] == ',') {\n            result.push_back(temp);\n            temp = \"\";\n        }\n        else {\n            temp += test_tuple[i];\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for(int i=0;i<test_tuple.length();i++){\n        if(test_tuple[i]==','){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else if(test_tuple[i]=='('){\n            continue;\n        }\n        else if(test_tuple[i]==')'){\n            result.push_back(temp);\n            temp.clear();\n        }\n        else{\n            temp.push_back(test_tuple[i]);\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string token;\n    while(std::getline(ss, token, ',')) {\n        result.push_back(token.substr(token.length()-1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.find_last_of(' ') + 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::string temp;\n    for (int i = 0; i < test_tuple.length(); i++) {\n        if (test_tuple[i] != ',') {\n            temp += test_tuple[i];\n        } else {\n            result.push_back(temp);\n            temp = \"\";\n        }\n    }\n    result.push_back(temp);\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.length() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(test_tuple);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        result.push_back(temp.substr(temp.size() - 1));\n    }\n    return result;"
  ]
}