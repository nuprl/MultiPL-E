{
  "name": "mbpp_635_heap_sort",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort the given list.\nstd::vector<long> heap_sort(std::vector<long> iterable) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = heap_sort;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)2, (long)4, (long)6, (long)8, (long)0}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)25, (long)58}))) == (std::vector<long>({(long)14, (long)22, (long)25, (long)25, (long)35, (long)58, (long)65, (long)75, (long)85})));\n    assert(candidate((std::vector<long>({(long)7, (long)1, (long)9, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)7, (long)9})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    std::priority_queue<long> heap;\n    for (long i = 0; i < iterable.size(); i++) {\n        heap.push(iterable[i]);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> heap;\n    for (auto i : iterable) {\n        heap.push_back(i);\n        std::push_heap(heap.begin(), heap.end());\n    }\n    std::sort_heap(heap.begin(), heap.end());\n    return heap;",
    "    // TODO: Write your code here\n    std::vector<long> sortedList;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for (auto num : iterable) {\n        minHeap.push(num);\n    }\n    while (!minHeap.empty()) {\n        sortedList.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sortedList;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (long i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++)\n    {\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    std::vector<long> heap;\n    for (auto i : iterable) {\n        heap.push_back(i);\n        std::push_heap(heap.begin(), heap.end());\n    }\n    std::sort_heap(heap.begin(), heap.end());\n    return heap;",
    "    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        sorted.push_back(heap.top());\n        heap.pop();\n    }\n    return sorted;",
    "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable)\n        pq.push(i);\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> heap;\n    for(auto i: iterable) {\n        heap.push_back(i);\n        std::push_heap(heap.begin(), heap.end());\n    }\n    std::sort_heap(heap.begin(), heap.end());\n    return heap;",
    "    std::vector<long> sorted_list;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        sorted_list.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted_list;",
    "    std::vector<long> result;\n    std::priority_queue<long> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(long i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted;\n    std::priority_queue<long> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        sorted.push_back(heap.top());\n        heap.pop();\n    }\n    return sorted;",
    "    std::vector<long> heap;\n    for (auto i : iterable) {\n        heap.push_back(i);\n        std::push_heap(heap.begin(), heap.end());\n    }\n    std::sort_heap(heap.begin(), heap.end());\n    return heap;",
    "    // Write your code here.\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> heap;\n    for (long i = 0; i < iterable.size(); i++) {\n        heap.push_back(iterable[i]);\n        long child = heap.size() - 1;\n        long parent = (child - 1) / 2;\n        while (parent >= 0 && heap[parent] > heap[child]) {\n            std::swap(heap[parent], heap[child]);\n            child = parent;\n            parent = (child - 1) / 2;\n        }\n    }\n    std::vector<long> result;\n    while (heap.size() > 0) {\n        result.push_back(heap[0]);\n        heap[0] = heap[heap.size() - 1];\n        heap.pop_back();\n        long parent = 0;\n        long left_child = 2 * parent + 1;\n        long right_child = 2 * parent + 2;\n        while (left_child < heap.size()) {\n            long min_index = parent;\n            if (heap[min_index] > heap[left_child]) {\n                min_index = left_child;\n            }\n            if (right_child < heap.size() && heap[min_index] > heap[right_child]) {\n                min_index = right_child;\n            }\n            if (min_index == parent) {\n                break;\n            }\n            std::swap(heap[parent], heap[min_index]);\n            parent = min_index;\n            left_child = 2 * parent + 1;\n            right_child = 2 * parent + 2;\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i: iterable) {\n        pq.push(i);\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;"
  ]
}