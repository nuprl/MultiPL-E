{
  "name": "mbpp_301_dict_depth",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the depth of a dictionary.\nlong dict_depth(std::any d) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = dict_depth;\n    assert(candidate((std::any({{\"a\", 1}, {\"b\", std::map<std::string,std::map<std::string,std::map<long,long>>>({{\"c\", std::map<std::string,std::map<long,long>>({{\"d\", std::map<long,long>()}})}})}}))) == (4));\n    assert(candidate((std::any({{\"a\", 1}, {\"b\", std::map<std::string,std::string>({{\"c\", \"python\"}})}}))) == (2));\n    assert(candidate((std::any({{1, \"Sun\"}, {2, std::map<long,std::map<long,std::string>>({{3, std::any({{4, \"Mon\"}})}})}}))) == (3));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++) {\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(it.second));\n        }\n        return depth + 1;\n    } else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for(auto it = m.begin(); it != m.end(); it++){\n            long depth = dict_depth(it->second);\n            if(depth > max)\n                max = depth;\n        }\n        return max + 1;\n    }\n    else\n        return 0;",
    "    // your code here\n    return 0;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); ++it){\n            if(it->second.type() == typeid(std::map<std::string, std::any>)){\n                depth = std::max(depth, dict_depth(it->second));\n            }\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    // your code here\n    long depth = 0;\n    std::any temp = d;\n    while(temp.type() == typeid(std::map<std::string, std::any>)) {\n        depth++;\n        temp = temp.any_cast<std::map<std::string, std::any>>().begin()->second;\n    }\n    return depth;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto i : m){\n            depth = std::max(depth, dict_depth(i.second));\n        }\n        return depth + 1;\n    }\n    else{\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); ++it) {\n        long depth = dict_depth(it->second);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() == typeid(int)) {\n        return 1;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(it.second));\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if(depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::any, std::any>)) {\n        return 0;\n    }\n    std::map<std::any, std::any> m = std::any_cast<std::map<std::any, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        max_depth = std::max(max_depth, dict_depth(it->second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for (auto i : m) {\n            depth = std::max(depth, dict_depth(i.second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::any, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto it = std::any_cast<std::map<std::any, std::any>>(d).begin(); it != std::any_cast<std::map<std::any, std::any>>(d).end(); it++) {\n        max_depth = std::max(max_depth, dict_depth(it->second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(it.second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return 1 + depth;\n    }\n    return 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); it++) {\n            long depth = dict_depth(it->second);\n            if(depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    }\n    return 1;",
    "    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)){\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& kv : std::any_cast<std::map<std::string, std::any>>(d)){\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return 1 + max_depth;",
    "    long max_depth = 0;\n    std::any stack;\n    std::any key;\n    std::any value;\n    std::any depth;\n    stack.push_back(std::make_pair(d, 1));\n    while (stack.size() > 0) {\n        std::any current = stack.pop_back();\n        d = current.first;\n        depth = current.second;\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n        for (auto it = d.begin(); it != d.end(); ++it) {\n            key = it.first;\n            value = it.second;\n            if (value.is_dict()) {\n                stack.push_back(std::make_pair(value, depth + 1));\n            }\n        }\n    }\n    return max_depth;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for(auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if(depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    }\n    else {\n        return 0;\n    }",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            long temp = dict_depth(it->second);\n            if(temp > depth){\n                depth = temp;\n            }\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 1;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(!d.has_value()) return 0;\n    if(d.type() != typeid(std::map<std::string, std::any>)) return 1;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::any, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [k, v] : std::any_cast<std::map<std::any, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(v));\n    }\n    return 1 + max_depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for (auto i : m) {\n            depth = std::max(depth, dict_depth(i.second));\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)){\n        long max_depth = 0;\n        for(auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)){\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        depth = 1;\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, 1 + dict_depth(it->second));\n        }\n    }\n    return depth;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    std::queue<std::any> q;\n    q.push(d);\n    while(!q.empty()) {\n        auto temp = q.front();\n        q.pop();\n        if(temp.type() == typeid(std::map<std::string, std::any>)) {\n            auto m = std::any_cast<std::map<std::string, std::any>>(temp);\n            for(auto i : m) {\n                q.push(i.second);\n            }\n        }\n        else if(temp.type() == typeid(std::vector<std::any>)) {\n            auto v = std::any_cast<std::vector<std::any>>(temp);\n            for(auto i : v) {\n                q.push(i);\n            }\n        }\n        max_depth++;\n    }\n    return max_depth;",
    "    if(!d.has_value())\n        return 0;\n    if(d.type() == typeid(int))\n        return 1;\n    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    assert(false);",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if(!d.has_value())\n        return 0;\n    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        auto m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for(auto& kv : m) {\n            max_depth = std::max(max_depth, dict_depth(kv.second));\n        }\n        return max_depth + 1;\n    } else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        depth = 1;\n        for(auto i : std::any_cast<std::map<std::string, std::any>>(d)){\n            depth = std::max(depth, dict_depth(i.second) + 1);\n        }\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    for (auto it = m.begin(); it != m.end(); it++) {\n        depth = std::max(depth, dict_depth(it->second));\n    }\n    return depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if(depth > max_depth)\n            max_depth = depth;\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    for (auto &[key, value] : d) {\n        if (value.type() == typeid(std::any)) {\n            long depth = dict_depth(value);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if(depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    // your code here\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for(auto it = m.begin(); it != m.end(); it++){\n            long temp = dict_depth(it->second);\n            if(temp > max)\n                max = temp;\n        }\n        return max + 1;\n    }\n    else\n        return 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(it.second));\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // Your code here\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for(auto it = m.begin(); it != m.end(); it++){\n            long temp = dict_depth(it->second);\n            if(temp > max)\n                max = temp;\n        }\n        return max + 1;\n    }\n    else\n        return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return depth;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    for (auto it = m.begin(); it != m.end(); it++) {\n        depth = std::max(depth, 1 + dict_depth(it->second));\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            if(it->second.type() == typeid(std::map<std::string, std::any>)){\n                depth = std::max(depth, dict_depth(it->second));\n            }\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)){\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)){\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            if(it->second.type() == typeid(std::map<std::string, std::any>)){\n                depth = std::max(depth, dict_depth(it->second));\n            }\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    std::any key;\n    std::any value;\n    std::any keys = d.keys();\n    for(auto key: keys) {\n        std::any value = d[key];\n        if(value.type() == typeid(std::any)) {\n            long depth = dict_depth(value);\n            max_depth = std::max(depth, max_depth);\n        }\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    else{\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        depth = 1;\n        for(auto i : std::any_cast<std::map<std::string, std::any>>(d)){\n            depth = std::max(depth, dict_depth(i.second) + 1);\n        }\n    }\n    return depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(kv.second));\n        }\n        return 1 + depth;\n    }\n    return 0;",
    "    long depth = 0;\n    std::any key;\n    std::any value;\n    if (d.type() == typeid(std::map<std::any, std::any>)) {\n        for (auto it = d.begin(); it != d.end(); it++) {\n            key = it->first;\n            value = it->second;\n            if (value.type() == typeid(std::map<std::any, std::any>)) {\n                depth = 1 + dict_depth(value);\n            }\n        }\n    }\n    return depth;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); it++) {\n            max_depth = std::max(max_depth, dict_depth(it->second));\n        }\n        return max_depth + 1;\n    }\n    else {\n        return 0;\n    }",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for (auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    }\n    else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    else{\n        return 0;\n    }",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(!d.has_value())\n        return 0;\n    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            long temp = dict_depth(it->second);\n            if(temp > depth) depth = temp;\n        }\n        return depth + 1;\n    }\n    else if(d.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> v = std::any_cast<std::vector<std::any>>(d);\n        for(auto it = v.begin(); it != v.end(); it++){\n            long temp = dict_depth(*it);\n            if(temp > depth) depth = temp;\n        }\n        return depth + 1;\n    }\n    else return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if(depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            if(it->second.type() == typeid(std::map<std::string, std::any>)){\n                depth = std::max(depth, dict_depth(it->second) + 1);\n            }\n        }\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    std::queue<std::any> q;\n    q.push(d);\n    while (!q.empty()) {\n        std::any curr = q.front();\n        q.pop();\n        if (std::any_cast<std::map<std::string, std::any>>(curr).size() == 0) {\n            max_depth = std::max(max_depth, 1);\n        }\n        for (auto it = std::any_cast<std::map<std::string, std::any>>(curr).begin(); it != std::any_cast<std::map<std::string, std::any>>(curr).end(); it++) {\n            q.push(it->second);\n        }\n    }\n    return max_depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    auto m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto& kv : m) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for (auto it = m.begin(); it != m.end(); ++it) {\n            long depth = dict_depth(it->second);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& it : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(it.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto& [key, val] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(val));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    std::queue<std::pair<std::any, long>> q;\n    q.push({d, 1});\n    while (!q.empty()) {\n        auto p = q.front();\n        q.pop();\n        auto dict = p.first;\n        auto depth = p.second;\n        max_depth = std::max(max_depth, depth);\n        for (auto it = dict.begin(); it != dict.end(); it++) {\n            if (it->second.type() == typeid(std::any)) {\n                q.push({it->second, depth + 1});\n            }\n        }\n    }\n    return max_depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    long max_depth = 0;\n    std::queue<std::pair<std::any, long>> q;\n    q.push(std::make_pair(d, 1));\n    while (!q.empty()) {\n        auto p = q.front();\n        q.pop();\n        auto dict = std::any_cast<std::map<std::string, std::any>>(p.first);\n        for (auto it = dict.begin(); it != dict.end(); it++) {\n            if (it->second.type() == typeid(std::map<std::string, std::any>)) {\n                q.push(std::make_pair(it->second, p.second + 1));\n            }\n        }\n        max_depth = std::max(max_depth, p.second);\n    }\n    return max_depth;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    else{\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    for (auto it = d.begin(); it != d.end(); ++it) {\n        if (it->second.type() == typeid(std::any)) {\n            long depth = dict_depth(it->second);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::any, std::any>)) {\n        return 0;\n    }\n    std::map<std::any, std::any> m = std::any_cast<std::map<std::any, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)){\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)){\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (!d.has_value())\n        return 0;\n    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 1;\n    long max = 0;\n    for (auto& [key, val] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(val);\n        if (depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    long max_depth = 0;\n    for (auto it = d.begin(); it != d.end(); ++it) {\n        if (it->second.type() == typeid(std::any)) {\n            long depth = dict_depth(it->second);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        throw std::invalid_argument(\"Not a dictionary\");\n    }\n    auto dict = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto& kv : dict) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if(depth > max_depth)\n            max_depth = depth;\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        for(auto& [key, val] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(val));\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if(!d.has_value())\n        return 0;\n    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // your code here\n    if(d.type()==typeid(std::map<std::string,std::any>)){\n        std::map<std::string,std::any> m=std::any_cast<std::map<std::string,std::any>>(d);\n        long max=0;\n        for(auto i=m.begin();i!=m.end();i++){\n            long temp=dict_depth(i->second);\n            if(temp>max){\n                max=temp;\n            }\n        }\n        return max+1;\n    }\n    else{\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if(d.type()!=typeid(std::map<std::string, std::any>))\n        return 0;\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for(auto it = m.begin(); it!=m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if(depth > max_depth)\n            max_depth = depth;\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)){\n        long max = 0;\n        for(auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); ++it){\n            long depth = dict_depth(it->second);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    else if(d.type() == typeid(std::vector<std::any>)){\n        long max = 0;\n        for(auto it = std::any_cast<std::vector<std::any>>(d).begin(); it != std::any_cast<std::vector<std::any>>(d).end(); ++it){\n            long depth = dict_depth(*it);\n            if(depth > max){\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    else{\n        return 1;\n    }",
    "    long max_depth = 0;\n    std::any key;\n    std::any value;\n    std::any keys = d.keys();\n    for (auto key : keys) {\n        std::any value = d[key];\n        if (value.type() == typeid(std::any)) {\n            long depth = dict_depth(value);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    std::queue<std::pair<std::any, long>> q;\n    q.push(std::make_pair(d, 1));\n    while (!q.empty()) {\n        auto p = q.front();\n        q.pop();\n        auto dict = p.first;\n        auto depth = p.second;\n        max_depth = std::max(max_depth, depth);\n        for (auto it = dict.begin(); it != dict.end(); it++) {\n            if (it->second.type() == typeid(std::any)) {\n                q.push(std::make_pair(it->second, depth + 1));\n            }\n        }\n    }\n    return max_depth;",
    "    long max_depth = 0;\n    for (auto& [key, value] : d) {\n        if (std::any_cast<std::any>(&value)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        depth = std::max(depth, dict_depth(value));\n    }\n    return 1 + depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        depth++;\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n    }\n    return depth;",
    "    if(!d.has_value())\n        return 0;\n    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if(depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::any, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::any, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &e : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(e.second));\n        }\n        return depth + 1;\n    } else {\n        return 0;\n    }",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return 1 + max_depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(it.second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(it.second));\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto i = m.begin(); i != m.end(); i++){\n            if(i->second.type() == typeid(std::map<std::string, std::any>)){\n                depth = std::max(depth, dict_depth(i->second));\n            }\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // your code here\n    return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, val] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(val));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for (auto it = m.begin(); it != m.end(); it++) {\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            if(it->second.type() == typeid(std::map<std::string, std::any>)){\n                depth = std::max(depth, dict_depth(it->second));\n            }\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)){\n        long max_depth = 0;\n        for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)){\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto const& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &[key, val] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(val));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    long max_depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        for(auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(it.second));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if (d.type() != typeid(std::map<std::any, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::any, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(!d.has_value())\n        return 0;\n    if(d.type() == typeid(std::string))\n        return 1;\n    long max_depth = 0;\n    for(auto& [k, v] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(v));\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    std::any value;\n    std::any key;\n    std::any dict;\n    std::any dict_value;\n    std::any dict_key;\n    std::any dict_dict;\n    std::any dict_dict_value;\n    std::any dict_dict_key;\n    std::any dict_dict_dict;\n    std::any dict_dict_dict_value;\n    std::any dict_dict_dict_key;\n    std::any dict_dict_dict_dict;\n    std::any dict_dict_dict_dict_value;\n    std::any dict_dict_dict_dict_key;\n    std::any dict_dict_dict_dict_dict;\n    std::any dict_dict_dict_dict_dict_value;\n    std::any dict_dict_dict_dict_dict_key;\n    std::any dict_dict_dict_dict_dict_dict;\n    std::any dict_dict_dict_dict_dict_dict_value;\n    std::any dict_dict_dict_dict_dict_dict_key;\n    std::any dict_dict_dict_dict_dict_dict_dict;\n    std::any dict_dict_dict_dict_dict_dict_dict_value;\n    std::any dict_dict_dict_dict_dict_dict_dict_key;\n    std::any dict_dict_dict_dict_dict_dict_dict_dict;\n    std::any dict_dict_dict_dict_dict_dict_dict_dict_value;\n    std::any dict_dict_dict_dict_dict_dict_dict_dict_key;\n    std::any dict_dict_dict_dict_dict_dict_dict_dict_dict;\n    std::any dict_dict_dict_dict_dict_dict_dict_dict_dict_value;\n    std::any dict_dict_dict_dict_dict_dict_dict_dict_dict_key;\n    std::any dict_dict_dict_dict_dict_dict_dict_dict_dict_dict;\n    std::any dict_dict_dict_dict_dict_dict_dict_",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); ++it) {\n        max_depth = std::max(max_depth, dict_depth(it->second));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    std::queue<std::pair<std::any, long>> q;\n    q.push(std::make_pair(d, 1));\n    while (!q.empty()) {\n        auto p = q.front();\n        q.pop();\n        auto dict = std::any_cast<std::map<std::string, std::any>>(p.first);\n        for (auto it = dict.begin(); it != dict.end(); ++it) {\n            if (it->second.type() == typeid(std::map<std::string, std::any>)) {\n                q.push(std::make_pair(it->second, p.second + 1));\n            }\n        }\n        max_depth = std::max(max_depth, p.second);\n    }\n    return max_depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(it.second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        throw std::invalid_argument(\"Not a dictionary\");\n    }\n    auto dict = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto& [key, value] : dict) {\n        long depth = dict_depth(value);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return 0;",
    "    long max_depth = 1;\n    for (auto &[key, value] : d) {\n        if (value.type() == typeid(std::map<std::string, std::any>)) {\n            max_depth = std::max(max_depth, 1 + dict_depth(value));\n        }\n    }\n    return max_depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(it.second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    // your code here\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for(auto it = m.begin(); it != m.end(); it++){\n            long temp = dict_depth(it->second);\n            if(temp > max)\n                max = temp;\n        }\n        return max + 1;\n    }\n    else\n        return 0;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        depth++;\n        std::map<std::string, std::any> d1 = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto i : d1){\n            depth = std::max(depth, dict_depth(i.second));\n        }\n    }\n    return depth;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for (auto it = m.begin(); it != m.end(); ++it) {\n            max_depth = std::max(max_depth, dict_depth(it->second));\n        }\n        return 1 + max_depth;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for(auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if(depth > max_depth)\n            max_depth = depth;\n    }\n    return max_depth + 1;",
    "    // your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;"
  ]
}