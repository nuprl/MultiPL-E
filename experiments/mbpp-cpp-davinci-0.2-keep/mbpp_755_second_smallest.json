{
  "name": "mbpp_755_second_smallest",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the second smallest number in a list.\nstd::optional<float> second_smallest(std::any numbers) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = second_smallest;\n    assert(candidate((std::any({(long)1, (long)2, (long)-8, (long)-2, (long)0, (long)-2}))) == -2);\n    assert(candidate((std::any({(long)1, (long)1, (long)-0.5, (long)0, (long)2, (long)-2, (long)-2}))) == -0.5);\n    assert(candidate((std::any({(long)2, (long)2}))) == std::nullopt);\n    assert(candidate((std::any({(long)2, (long)2, (long)2}))) == std::nullopt);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<float> vec;\n    if (numbers.type() == typeid(std::vector<float>)) {\n        vec = std::any_cast<std::vector<float>>(numbers);\n    } else {\n        return std::nullopt;\n    }\n    if (vec.size() < 2) {\n        return std::nullopt;\n    }\n    float smallest = vec[0];\n    float second_smallest = vec[1];\n    if (smallest > second_smallest) {\n        std::swap(smallest, second_smallest);\n    }\n    for (int i = 2; i < vec.size(); i++) {\n        if (vec[i] < smallest) {\n            second_smallest = smallest;\n            smallest = vec[i];\n        } else if (vec[i] < second_smallest) {\n            second_smallest = vec[i];\n        }\n    }\n    return second_smallest;",
    "    if (numbers.type() == typeid(std::vector<int>)) {\n        std::vector<int> nums = std::any_cast<std::vector<int>>(numbers);\n        std::sort(nums.begin(), nums.end());\n        return nums[1];\n    } else if (numbers.type() == typeid(std::vector<float>)) {\n        std::vector<float> nums = std::any_cast<std::vector<float>>(numbers);\n        std::sort(nums.begin(), nums.end());\n        return nums[1];\n    } else {\n        return std::nullopt;\n    }",
    "    if (numbers.type() == typeid(std::vector<int>)) {\n        std::vector<int> nums = std::any_cast<std::vector<int>>(numbers);\n        if (nums.size() < 2) {\n            return std::nullopt;\n        }\n        int smallest = nums[0];\n        int second_smallest = nums[1];\n        if (smallest > second_smallest) {\n            std::swap(smallest, second_smallest);\n        }\n        for (int i = 2; i < nums.size(); i++) {\n            if (nums[i] < smallest) {\n                second_smallest = smallest;\n                smallest = nums[i];\n            } else if (nums[i] < second_smallest) {\n                second_smallest = nums[i];\n            }\n        }\n        return second_smallest;\n    }\n    return std::nullopt;",
    "    assert(numbers.type() == typeid(std::vector<float>));\n    auto vec = std::any_cast<std::vector<float>>(numbers);\n    std::sort(vec.begin(), vec.end());\n    if (vec.size() < 2) {\n        return std::nullopt;\n    }\n    return vec[1];",
    "    if (numbers.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec = std::any_cast<std::vector<int>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    } else if (numbers.type() == typeid(std::vector<float>)) {\n        std::vector<float> vec = std::any_cast<std::vector<float>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    } else if (numbers.type() == typeid(std::vector<double>)) {\n        std::vector<double> vec = std::any_cast<std::vector<double>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    } else {\n        return {};\n    }",
    "    std::optional<float> smallest;\n    std::optional<float> second_smallest;\n    for (auto number : numbers) {\n        if (!smallest.has_value()) {\n            smallest = number;\n        } else if (number < smallest) {\n            second_smallest = smallest;\n            smallest = number;\n        } else if (!second_smallest.has_value() || number < second_smallest) {\n            second_smallest = number;\n        }\n    }\n    return second_smallest;",
    "    if (numbers.type() != typeid(std::vector<float>)) {\n        return std::nullopt;\n    }\n    auto vec = std::any_cast<std::vector<float>>(numbers);\n    if (vec.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(vec.begin(), vec.end());\n    return vec[1];",
    "    assert(numbers.type() == typeid(std::vector<float>));\n    std::vector<float> v = std::any_cast<std::vector<float>>(numbers);\n    std::sort(v.begin(), v.end());\n    if (v.size() < 2) {\n        return std::nullopt;\n    }\n    return v[1];",
    "    if (numbers.type() != typeid(std::vector<float>)) {\n        return std::nullopt;\n    }\n    auto vec = std::any_cast<std::vector<float>>(numbers);\n    if (vec.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(vec.begin(), vec.end());\n    return vec[1];",
    "    std::vector<float> nums = std::any_cast<std::vector<float>>(numbers);\n    if (nums.size() < 2) {\n        return std::nullopt;\n    }\n    float smallest = nums[0];\n    float second_smallest = nums[1];\n    if (smallest > second_smallest) {\n        std::swap(smallest, second_smallest);\n    }\n    for (int i = 2; i < nums.size(); i++) {\n        if (nums[i] < smallest) {\n            second_smallest = smallest;\n            smallest = nums[i];\n        } else if (nums[i] < second_smallest) {\n            second_smallest = nums[i];\n        }\n    }\n    return second_smallest;",
    "    if (numbers.type() == typeid(std::vector<int>)) {\n        std::vector<int> nums = std::any_cast<std::vector<int>>(numbers);\n        std::sort(nums.begin(), nums.end());\n        return nums[1];\n    } else if (numbers.type() == typeid(std::vector<float>)) {\n        std::vector<float> nums = std::any_cast<std::vector<float>>(numbers);\n        std::sort(nums.begin(), nums.end());\n        return nums[1];\n    } else {\n        return std::nullopt;\n    }",
    "    if (numbers.type() != typeid(std::vector<float>)) {\n        return std::nullopt;\n    }\n    std::vector<float> numbers_vector = std::any_cast<std::vector<float>>(numbers);\n    if (numbers_vector.size() < 2) {\n        return std::nullopt;\n    }\n    float smallest = numbers_vector[0];\n    float second_smallest = numbers_vector[1];\n    if (smallest > second_smallest) {\n        std::swap(smallest, second_smallest);\n    }\n    for (int i = 2; i < numbers_vector.size(); i++) {\n        if (numbers_vector[i] < smallest) {\n            second_smallest = smallest;\n            smallest = numbers_vector[i];\n        } else if (numbers_vector[i] < second_smallest) {\n            second_smallest = numbers_vector[i];\n        }\n    }\n    return second_smallest;",
    "    std::vector<float> nums = std::any_cast<std::vector<float>>(numbers);\n    if (nums.size() < 2) {\n        return std::nullopt;\n    }\n    float smallest = nums[0];\n    float second_smallest = nums[1];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] < smallest) {\n            second_smallest = smallest;\n            smallest = nums[i];\n        } else if (nums[i] < second_smallest) {\n            second_smallest = nums[i];\n        }\n    }\n    return second_smallest;",
    "    std::optional<float> smallest;\n    std::optional<float> second_smallest;\n    for (auto number : numbers) {\n        if (!smallest || number < smallest) {\n            second_smallest = smallest;\n            smallest = number;\n        } else if (!second_smallest || number < second_smallest) {\n            second_smallest = number;\n        }\n    }\n    return second_smallest;",
    "    if (numbers.type() == typeid(std::vector<float>)) {\n        std::vector<float> vec = std::any_cast<std::vector<float>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    }\n    else if (numbers.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec = std::any_cast<std::vector<int>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    }\n    else if (numbers.type() == typeid(std::vector<double>)) {\n        std::vector<double> vec = std::any_cast<std::vector<double>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    }\n    else if (numbers.type() == typeid(std::vector<long>)) {\n        std::vector<long> vec = std::any_cast<std::vector<long>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    }\n    else if (numbers.type() == typeid(std::vector<long long>)) {\n        std::vector<long long> vec = std::any_cast<std::vector<long long>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    }\n    else if (numbers.type() == typeid(std::vector<unsigned int>)) {\n        std::vector<unsigned int> vec = std::any_cast<std::vector<unsigned int>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    }\n    else if (numbers.type() == typeid(std::vector<unsigned long>)) {\n        std::vector<unsigned long> vec = std::any_cast<std::vector<unsigned long>>(numbers);\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    }",
    "  if (numbers.type() != typeid(std::vector<float>)) {\n    return std::nullopt;\n  }\n  auto v = std::any_cast<std::vector<float>>(numbers);\n  if (v.size() < 2) {\n    return std::nullopt;\n  }\n  float smallest = v[0];\n  float second_smallest = v[1];\n  if (smallest > second_smallest) {\n    std::swap(smallest, second_smallest);\n  }\n  for (int i = 2; i < v.size(); i++) {\n    if (v[i] < smallest) {\n      second_smallest = smallest;\n      smallest = v[i];\n    } else if (v[i] < second_smallest) {\n      second_smallest = v[i];\n    }\n  }\n  return second_smallest;",
    "    std::vector<float> nums = std::any_cast<std::vector<float>>(numbers);\n    if (nums.size() < 2) {\n        return std::nullopt;\n    }\n    float smallest = std::numeric_limits<float>::max();\n    float second_smallest = std::numeric_limits<float>::max();\n    for (auto num : nums) {\n        if (num < smallest) {\n            second_smallest = smallest;\n            smallest = num;\n        } else if (num < second_smallest) {\n            second_smallest = num;\n        }\n    }\n    if (second_smallest == std::numeric_limits<float>::max()) {\n        return std::nullopt;\n    }\n    return second_smallest;",
    "    if (numbers.type() != typeid(std::vector<float>)) {\n        return std::nullopt;\n    }\n    auto vec = std::any_cast<std::vector<float>>(numbers);\n    if (vec.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(vec.begin(), vec.end());\n    return vec[1];",
    "    if (numbers.type() == typeid(std::vector<float>)) {\n        std::vector<float> vec = std::any_cast<std::vector<float>>(numbers);\n        if (vec.size() < 2) {\n            return std::nullopt;\n        }\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    }\n    if (numbers.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec = std::any_cast<std::vector<int>>(numbers);\n        if (vec.size() < 2) {\n            return std::nullopt;\n        }\n        std::sort(vec.begin(), vec.end());\n        return vec[1];\n    }\n    return std::nullopt;",
    "    std::vector<float> numbers_vector = std::any_cast<std::vector<float>>(numbers);\n    if (numbers_vector.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(numbers_vector.begin(), numbers_vector.end());\n    return numbers_vector[1];"
  ]
}