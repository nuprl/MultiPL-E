{
  "name": "mbpp_580_extract_even",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_long{\n    long f1;    Union_long_long(long _f1) : f1(_f1) {}\n    ~Union_long_long() {}\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nunion Union_long_Union_long_long{\n    long f0;\n    Union_long_long f1;    Union_long_Union_long_long(long _f0) : f0(_f0) {}\n    Union_long_Union_long_long(Union_long_long _f1) : f1(_f1) {}\n    ~Union_long_Union_long_long() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(Union_long_long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to remove uneven elements in the nested mixed tuple.\nUnion_long_Union_long_long extract_even(Union_long_Union_long_long test_tuple) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = extract_even;\n    assert(candidate(std::make_tuple(4, 5, std::make_tuple(7, 6, std::make_tuple(2, 4)), 6, 8)) == std::make_tuple(4, std::make_tuple(6, std::make_tuple(2, 4)), 6, 8));\n    assert(candidate(std::make_tuple(5, 6, std::make_tuple(8, 7, std::make_tuple(4, 8)), 7, 9)) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 8))));\n    assert(candidate(std::make_tuple(5, 6, std::make_tuple(9, 8, std::make_tuple(4, 6)), 8, 10)) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 6)), 8, 10));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)).f1.f1));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(Union_long_long(extract_even(test_tuple.f1).f1));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }"
  ]
}