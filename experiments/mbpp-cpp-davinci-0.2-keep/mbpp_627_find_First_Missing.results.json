{
  "name": "mbpp_627_find_First_Missing",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid && array[mid-1] == mid-1) {\n            return mid;\n        }\n        else if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return mid;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpgi4a_nk5: /tmp/tmpgi4a_nk5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpqvd9silb: /tmp/tmpqvd9silb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n=array.size();\n    for(long i=0;i<n;i++)\n    {\n        if(array[i]!=i)\n        {\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long i = 0;\n    while(i < n) {\n        if(array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmp4ct4fq7y: /tmp/tmp4ct4fq7y.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid && array[mid - 1] == mid - 1) {\n            return mid;\n        }\n        else if (array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpx4427rb_: /tmp/tmpx4427rb_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmp7yztk8ch: /tmp/tmp7yztk8ch.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpudez6fth: /tmp/tmpudez6fth.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid)\n            return mid+1;\n        else if(array[mid] != mid+1)\n            high = mid-1;\n        else\n            low = mid+1;\n    }\n    if(low == n)\n        return n+1;\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpoasq5f_l: /tmp/tmpoasq5f_l.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpzi0i3t8u: /tmp/tmpzi0i3t8u.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = (low+high)/2;\n        if(array[mid]!=mid+1){\n            if(mid==0 || array[mid-1]==mid){\n                return mid+1;\n            }\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmprpial81x: /tmp/tmprpial81x.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n=array.size();\n    long low=0;\n    long high=n-1;\n    while(low<=high){\n        long mid=low+(high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high=mid-1;\n        }\n        else{\n            low=mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmp2gtfk74p: /tmp/tmp2gtfk74p.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpt_9dmyc4: /tmp/tmpt_9dmyc4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high){\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmp4q3idxxk: /tmp/tmp4q3idxxk.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmp_2texzmv: /tmp/tmp_2texzmv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmp9krmpa3i: /tmp/tmp9krmpa3i.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1)\n                return mid;\n            high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    if (l == n) {\n        return n + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpjy4t0z5m: /tmp/tmpjy4t0z5m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int i = 0;\n    while(i < n) {\n        if(array[i] == i+1) {\n            i++;\n        }\n        else if(array[i] <= i || array[i] > n || array[i] == array[array[i]-1]) {\n            array[i] = array[n-1];\n            n--;\n        }\n        else {\n            std::swap(array[i], array[array[i]-1]);\n        }\n    }\n    return i+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpwv7x6tdy: /tmp/tmpwv7x6tdy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmp9_jjbxan: /tmp/tmp9_jjbxan.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n=array.size();\n    long i=0;\n    while(i<n){\n        if(array[i]!=i+1){\n            return i+1;\n        }\n        i++;\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpldzto7a1: /tmp/tmpldzto7a1.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    for(long i = 0; i < n; i++) {\n        if(array[i] != i) {\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high){\n        mid = (low + high)/2;\n        if(array[mid] == mid + 1){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmp1ti6mwmg: /tmp/tmp1ti6mwmg.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = (low+high)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpnjuej2i6: /tmp/tmpnjuej2i6.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    for(long i=0;i<n;i++){\n        if(array[i]!=i){\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid) {\n                return mid+1;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmp9bi59lgx: /tmp/tmp9bi59lgx.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if(n == 0)\n        return 1;\n    if(array[0] != 1)\n        return 1;\n    for(long i = 0; i < n - 1; i++) {\n        if(array[i + 1] - array[i] > 1)\n            return array[i] + 1;\n    }\n    return array[n - 1] + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpe9ksalmb: /tmp/tmpe9ksalmb.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return low + 1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpwgkwi9nf: /tmp/tmpwgkwi9nf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n;\n    while(low < high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmp4ct4fq7y: /tmp/tmp4ct4fq7y.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid + 1) {\n            if(mid == 0 || array[mid-1] == mid) {\n                return mid+1;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmphne25zkk: /tmp/tmphne25zkk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpbk3dig91: /tmp/tmpbk3dig91.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpniefkzqu: /tmp/tmpniefkzqu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    for(long i = 0; i < n; i++) {\n        if(array[i] != i) {\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpqg3war4_: /tmp/tmpqg3war4_.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpi3rdxy9a: /tmp/tmpi3rdxy9a.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else if(array[mid] == mid){\n            high = mid-1;\n        }\n        else{\n            return mid+1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpcts_io6v: /tmp/tmpcts_io6v.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmptd3itm1s: /tmp/tmptd3itm1s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpey1m_06x: /tmp/tmpey1m_06x.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low+high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return mid+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpb7atcwwf: /tmp/tmpb7atcwwf.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpqlktb6o8: /tmp/tmpqlktb6o8.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    /*\n    :param array: a sorted list of natural numbers\n    :return: the smallest missing number from the list\n    */\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = (low+high)/2;\n        if(array[mid] != mid+1){\n            if(mid == 0 || array[mid-1] == mid){\n                return mid+1;\n            }\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpybt9xnci: /tmp/tmpybt9xnci.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpafsyd2ec: /tmp/tmpafsyd2ec.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return mid+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmpa15bzm_y: /tmp/tmpa15bzm_y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid) {\n                return mid+1;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpmz9ei98k: /tmp/tmpmz9ei98k.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid && array[mid-1] == mid-1)\n            return mid;\n        else if(array[mid] == mid)\n            low = mid+1;\n        else\n            high = mid-1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmp39oh15e8: /tmp/tmp39oh15e8.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpudez6fth: /tmp/tmpudez6fth.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if(array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpo5ap2u3d: /tmp/tmpo5ap2u3d.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long start = 0;\n    long end = n-1;\n    while(start<=end){\n        long mid = (start+end)/2;\n        if(array[mid]!=mid+1){\n            if(mid==0 || array[mid-1]==mid){\n                return mid+1;\n            }\n            end = mid-1;\n        }\n        else{\n            start = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpri5ml3af: /tmp/tmpri5ml3af.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmphkb8t61d: /tmp/tmphkb8t61d.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high){\n        mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmp7iofcqkw: /tmp/tmp7iofcqkw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpy2w1fns3: /tmp/tmpy2w1fns3.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpry358vq5: /tmp/tmpry358vq5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long i = 0;\n    while(i < n)\n    {\n        if(array[i] != i)\n        {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpnfgig9hd: /tmp/tmpnfgig9hd.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpxt5p569w: /tmp/tmpxt5p569w.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if (n == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        if (array[0] == 1) {\n            return 2;\n        }\n        else {\n            return 1;\n        }\n    }\n    long first = 0;\n    long last = n - 1;\n    long mid = (first + last) / 2;\n    while (first < last) {\n        mid = (first + last) / 2;\n        if (array[mid] > mid + 1) {\n            last = mid;\n        }\n        else {\n            first = mid + 1;\n        }\n    }\n    return first + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpjzykjh4l: /tmp/tmpjzykjh4l.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n\t// Write your code here\n\tlong n = array.size();\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (array[mid] == mid + 1) {\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse {\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmp2u786zos: /tmp/tmp2u786zos.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmp7yztk8ch: /tmp/tmp7yztk8ch.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmppi1tuf3q: /tmp/tmppi1tuf3q.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmphz8e0oqf: /tmp/tmphz8e0oqf.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n=array.size();\n    long low=0,high=n-1;\n    while(low<=high)\n    {\n        long mid=low+(high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid)\n        {\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1)\n        {\n            high=mid-1;\n        }\n        else\n        {\n            low=mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpen6_9c29: /tmp/tmpen6_9c29.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int i = 0;\n    while(i < n){\n        if(array[i] != i+1){\n            return i+1;\n        }\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmp7df16v5h: /tmp/tmp7df16v5h.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmp0z_65qqf: /tmp/tmp0z_65qqf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpud2ou6oy: /tmp/tmpud2ou6oy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmppb6r74vf: /tmp/tmppb6r74vf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int i = 0;\n    while(i < n) {\n        if(array[i] == i+1) {\n            i++;\n        } else if(array[i] <= i || array[i] > n || array[array[i]-1] == array[i]) {\n            array[i] = array[n-1];\n            n--;\n        } else {\n            std::swap(array[i], array[array[i]-1]);\n        }\n    }\n    return i+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpgqvsa3o3: /tmp/tmpgqvsa3o3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    if (low > high)\n        return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpx3qpd9rx: /tmp/tmpx3qpd9rx.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high){\n        mid = (low+high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpqlmlobtp: /tmp/tmpqlmlobtp.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpifpe7zwn: /tmp/tmpifpe7zwn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high){\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid + 1){\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpj23ycsk8: /tmp/tmpj23ycsk8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high){\n        mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else if(array[mid] > mid+1){\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123227,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmphr6f_k90: /tmp/tmphr6f_k90.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n;\n    while(low < high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmp5ecpjupb: /tmp/tmp5ecpjupb.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    for(long i = 0; i < n; i++) {\n        if(array[i] != i) {\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid && array[mid-1] == mid-1) {\n            return mid;\n        }\n        else if(array[mid] != mid) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpw6uuwg6b: /tmp/tmpw6uuwg6b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmplsrzphmw: /tmp/tmplsrzphmw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = (low + high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else if(array[mid] > mid+1){\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123227,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == n) {\n        return n + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpxe45zl4j: /tmp/tmpxe45zl4j.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpl4_0icwq: /tmp/tmpl4_0icwq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpkkugfqiq: /tmp/tmpkkugfqiq.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int i = 0;\n    while (i < array.size()) {\n        if (array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmptd3itm1s: /tmp/tmptd3itm1s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    if(array[n-1] != n)\n        return n;\n    if(array[0] != 0)\n        return 0;\n    for(long i = 1; i < n; i++) {\n        if(array[i] - array[i-1] > 1)\n            return array[i-1] + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmppey3ieot: /tmp/tmppey3ieot.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    if (low == n)\n        return n + 1;\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmp7kx7fv2o: /tmp/tmp7kx7fv2o.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmp9zmykm5e: /tmp/tmp9zmykm5e.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpvao_y692: /tmp/tmpvao_y692.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpg5lmmduq: /tmp/tmpg5lmmduq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpuudt76h3: /tmp/tmpuudt76h3.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp1n8plblk: /tmp/tmp1n8plblk.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    if (n == 0)\n        return 1;\n    if (array[0] != 1)\n        return 1;\n    if (array[n - 1] == n)\n        return n + 1;\n    int l = 0, h = n - 1;\n    while (l <= h) {\n        int mid = (l + h) / 2;\n        if (array[mid] == mid + 1) {\n            if (array[mid + 1] != mid + 2)\n                return mid + 2;\n            else\n                l = mid + 1;\n        } else {\n            if (array[mid - 1] != mid)\n                return mid;\n            else\n                h = mid - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpt2x93ibe: /tmp/tmpt2x93ibe.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int i = 0;\n    while(i < n){\n        if(array[i] != i){\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high){\n        mid = (low + high)/2;\n        if(array[mid] == mid+1){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp7qlko23t: /tmp/tmp7qlko23t.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int i = 0;\n    while(i < n) {\n        if(array[i] != i+1) {\n            return i+1;\n        }\n        i++;\n    }\n    return i+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpexztqspm: /tmp/tmpexztqspm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpwl4gqsts: /tmp/tmpwl4gqsts.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid) {\n                return mid + 1;\n            }\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpmq6efk63: /tmp/tmpmq6efk63.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123208,
      "stdout": "",
      "stderr": "tmptd3itm1s: /tmp/tmptd3itm1s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int size = array.size();\n    int low = 0, high = size - 1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp6anclmc6: /tmp/tmp6anclmc6.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpm1ubdg5c: /tmp/tmpm1ubdg5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        if(array[mid] != mid + 1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp7h1dxvtr: /tmp/tmp7h1dxvtr.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    for(long i = 0; i < n; i++) {\n        if(array[i] != i) {\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpc46q4xop: /tmp/tmpc46q4xop.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while (low <= high) {\n        long mid = low + (high - low)/2;\n        if (array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if (array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp_ucpog69: /tmp/tmp_ucpog69.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high){\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpuwgu1umx: /tmp/tmpuwgu1umx.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp6bks6dk7: /tmp/tmp6bks6dk7.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp1bt9id4x: /tmp/tmp1bt9id4x.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpbdfuj9a_: /tmp/tmpbdfuj9a_.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpz20zejup: /tmp/tmpz20zejup.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long i = 0;\n    while(i < n) {\n        if(array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp1c86deul: /tmp/tmp1c86deul.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n=array.size();\n    long low=0;\n    long high=n-1;\n    while(low<=high){\n        long mid=low+(high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high=mid-1;\n        }\n        else{\n            low=mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp2xd_smwg: /tmp/tmp2xd_smwg.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmphkb8t61d: /tmp/tmphkb8t61d.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpudez6fth: /tmp/tmpudez6fth.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpywf7x8uv: /tmp/tmpywf7x8uv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpvao_y692: /tmp/tmpvao_y692.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpk0u6ic3h: /tmp/tmpk0u6ic3h.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpb1v7nfg_: /tmp/tmpb1v7nfg_.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1){\n            if(mid == 0 || array[mid-1] == mid){\n                return mid+1;\n            }\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpgizubg55: /tmp/tmpgizubg55.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp7zxfdrvl: /tmp/tmp7zxfdrvl.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1){\n            if(mid == 0 || array[mid-1] == mid){\n                return mid+1;\n            }\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpgizubg55: /tmp/tmpgizubg55.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = (low + high)/2;\n        if(array[mid] == mid+1){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp3y1lwun7: /tmp/tmp3y1lwun7.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpvwj2utld: /tmp/tmpvwj2utld.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp1use7sd0: /tmp/tmp1use7sd0.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] == mid+1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpv90s4jsw: /tmp/tmpv90s4jsw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp7w43cyor: /tmp/tmp7w43cyor.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpsmbqekka: /tmp/tmpsmbqekka.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp2w2o8dcz: /tmp/tmp2w2o8dcz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high){\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp9hhnmr1i: /tmp/tmp9hhnmr1i.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high){\n        mid = (low + high)/2;\n        if(array[mid] == mid+1){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp7qlko23t: /tmp/tmp7qlko23t.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return mid+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpllwxcldm: /tmp/tmpllwxcldm.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high){\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp9hhnmr1i: /tmp/tmp9hhnmr1i.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = (low+high)/2;\n        if(array[mid]!=mid+1){\n            if(mid==0 || array[mid-1]==mid){\n                return mid+1;\n            }\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp9ad_w3yz: /tmp/tmp9ad_w3yz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmplp9i1yiz: /tmp/tmplp9i1yiz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp_4fiww6e: /tmp/tmp_4fiww6e.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp3zdwei6c: /tmp/tmp3zdwei6c.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if(n == 0)\n        return 1;\n    if(n == 1)\n        return array[0] == 1 ? 2 : 1;\n    long i = 0;\n    while(i < n) {\n        if(array[i] != i + 1)\n            return i + 1;\n        i++;\n    }\n    return i + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmp0oqjjdvr: /tmp/tmp0oqjjdvr.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpudez6fth: /tmp/tmpudez6fth.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n=array.size();\n    long low=0,high=n-1;\n    while(low<=high){\n        long mid=low+(high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high=mid-1;\n        }\n        else{\n            low=mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmp4qknrws7: /tmp/tmp4qknrws7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid + 1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpphs0p35r: /tmp/tmpphs0p35r.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        } else if(array[mid] != mid+1) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    if(low == n) {\n        return n+1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpowmpat1k: /tmp/tmpowmpat1k.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpq97mmhdv: /tmp/tmpq97mmhdv.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high)\n    {\n        mid = low + (high-low)/2;\n        if(array[mid] == mid+1)\n            low = mid+1;\n        else\n            high = mid-1;\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpnooaoq8z: /tmp/tmpnooaoq8z.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpqaa02pir: /tmp/tmpqaa02pir.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpkjawsujm: /tmp/tmpkjawsujm.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long i = 0;\n    while(i < n) {\n        if(array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int i;\n    for(i=0;i<n;i++){\n        if(array[i]!=i+1){\n            return i+1;\n        }\n    }\n    return i+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpfdmiohow: /tmp/tmpfdmiohow.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] == mid + 1) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return l + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpcdu4h6cj: /tmp/tmpcdu4h6cj.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmp7yztk8ch: /tmp/tmp7yztk8ch.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid + 1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpo79sb4t5: /tmp/tmpo79sb4t5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmp_5_39ekb: /tmp/tmp_5_39ekb.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(array[mid]==mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpy4359ymg: /tmp/tmpy4359ymg.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid) {\n                return mid+1;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpim_vm69o: /tmp/tmpim_vm69o.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low+high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmp1dcclnfl: /tmp/tmp1dcclnfl.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high)\n    {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid + 1 && array[mid-1] == mid)\n        {\n            return mid+1;\n        }\n        else if(array[mid] != mid + 1)\n        {\n            high = mid - 1;\n        }\n        else\n        {\n            low = mid + 1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmp1s8lurk0: /tmp/tmp1s8lurk0.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpmms43xjn: /tmp/tmpmms43xjn.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpkkugfqiq: /tmp/tmpkkugfqiq.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high)/2;\n        if (array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if (array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpunoorfmb: /tmp/tmpunoorfmb.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmpry358vq5: /tmp/tmpry358vq5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid)\n            return mid+1;\n        else if(array[mid] != mid+1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpaw990uzb: /tmp/tmpaw990uzb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    int mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpkkc3sxvm: /tmp/tmpkkc3sxvm.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpk03wa4s2: /tmp/tmpk03wa4s2.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "tmpg12pl4cx: /tmp/tmpg12pl4cx.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high)\n    {\n        mid = low + (high-low)/2;\n        if(array[mid] == mid+1)\n        {\n            low = mid+1;\n        }\n        else\n        {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "tmpyq9fimfi: /tmp/tmpyq9fimfi.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int i = 0;\n    while(i < n) {\n        if(array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high)\n    {\n        mid = (low + high)/2;\n        if(array[mid] == mid+1)\n            low = mid+1;\n        else\n            high = mid-1;\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmpjpvdqvqe: /tmp/tmpjpvdqvqe.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int i;\n    for(i=0;i<n;i++){\n        if(array[i]!=i+1){\n            return i+1;\n        }\n    }\n    return i+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpfdmiohow: /tmp/tmpfdmiohow.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123210,
      "stdout": "",
      "stderr": "tmphz8e0oqf: /tmp/tmphz8e0oqf.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n=array.size();\n    long low=0;\n    long high=n-1;\n    while(low<=high)\n    {\n        long mid=low+(high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid)\n        {\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1)\n        {\n            high=mid-1;\n        }\n        else\n        {\n            low=mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmp_hw4oz0a: /tmp/tmp_hw4oz0a.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "tmp917rtkoe: /tmp/tmp917rtkoe.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(array[mid]!=mid+1){\n            if(mid==0 || array[mid-1]==mid){\n                return mid+1;\n            }\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmps9ted685: /tmp/tmps9ted685.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpt_9dmyc4: /tmp/tmpt_9dmyc4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high){\n        long mid = (low + high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmpsldqow2_: /tmp/tmpsldqow2_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high){\n        mid = low + (high - low)/2;\n        if(array[mid] == mid+1){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "tmprb74tzzn: /tmp/tmprb74tzzn.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    int n = array.size();\n    int l = 0, r = n-1;\n    while(l<=r){\n        int mid = l + (r-l)/2;\n        if(array[mid] == mid+1){\n            l = mid+1;\n        }\n        else{\n            r = mid-1;\n        }\n    }\n    return l+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "tmpq527tntn: /tmp/tmpq527tntn.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    //write your code here\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "tmpm5cjruzv: /tmp/tmpm5cjruzv.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n=array.size();\n    long low=0,high=n-1;\n    while(low<=high){\n        long mid=low+(high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high=mid-1;\n        }\n        else{\n            low=mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmp4qknrws7: /tmp/tmp4qknrws7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if(n == 0) {\n        return 1;\n    }\n    if(n == 1) {\n        if(array[0] == 1) {\n            return 2;\n        }\n        else {\n            return 1;\n        }\n    }\n    long i = 0;\n    while(i < n) {\n        if(array[i] != i + 1) {\n            return i + 1;\n        }\n        i++;\n    }\n    return i + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "tmp19n03adx: /tmp/tmp19n03adx.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n=array.size();\n    long low=0;\n    long high=n-1;\n    long mid;\n    while(low<=high){\n        mid=(low+high)/2;\n        if(array[mid]==mid+1){\n            low=mid+1;\n        }\n        else{\n            high=mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmpfe2qutio: /tmp/tmpfe2qutio.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long i = 0;\n    while(i<n){\n        if(array[i] != i+1){\n            return i+1;\n        }\n        i++;\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmpz540oz9i: /tmp/tmpz540oz9i.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        } else if(array[mid] != mid+1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmpne0es89d: /tmp/tmpne0es89d.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = (low+high)/2;\n        if(array[mid] == mid+1){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmpnec2req8: /tmp/tmpnec2req8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510449,
      "stdout": "",
      "stderr": "tmpqvd9silb: /tmp/tmpqvd9silb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // Write your code here\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmpx61n_3g2: /tmp/tmpx61n_3g2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid){\n            return mid+1;\n        }\n        else if(array[mid] != mid+1){\n            high = mid - 1;\n        }\n        else{\n            low = mid + 1;\n        }\n    }\n    if(low > high){\n        return low+1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmp152lirie: /tmp/tmp152lirie.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpq97mmhdv: /tmp/tmpq97mmhdv.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}