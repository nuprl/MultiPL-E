{
  "name": "mbpp_92_is_undulating",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "tmp9ub9rfzs: /tmp/tmp9ub9rfzs.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int current_digit = n % 10;\n    if (current_digit != last_digit) {\n      return false;\n    }\n    last_digit = current_digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "tmpjxr8i76w: /tmp/tmpjxr8i76w.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n\tint prev_digit = n % 10;\n\tn /= 10;\n\tint curr_digit = n % 10;\n\tn /= 10;\n\tbool is_increasing = curr_digit > prev_digit;\n\twhile (n > 0) {\n\t\tprev_digit = curr_digit;\n\t\tcurr_digit = n % 10;\n\t\tn /= 10;\n\t\tif (is_increasing) {\n\t\t\tif (curr_digit > prev_digit) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (curr_digit < prev_digit) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tis_increasing = !is_increasing;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n\tint last_digit = n % 10;\n\tn /= 10;\n\tint next_digit = n % 10;\n\tn /= 10;\n\twhile (n > 0) {\n\t\tif (last_digit != next_digit) {\n\t\t\tlast_digit = next_digit;\n\t\t\tnext_digit = n % 10;\n\t\t\tn /= 10;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "tmphh14pu5a: /tmp/tmphh14pu5a.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string s = std::to_string(n);\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "tmpbnj23fic: /tmp/tmpbnj23fic.cpp:15: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n) {\n        int curr = n % 10;\n        if (prev == curr) return false;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit >= prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit <= prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "tmp9qrqol8_: /tmp/tmp9qrqol8_.cpp:30: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if(n<10)\n        return false;\n    long prev_digit = n%10;\n    n/=10;\n    long curr_digit = n%10;\n    n/=10;\n    bool is_increasing = curr_digit>prev_digit;\n    while(n>0) {\n        prev_digit = curr_digit;\n        curr_digit = n%10;\n        n/=10;\n        if(is_increasing) {\n            if(curr_digit>=prev_digit)\n                return false;\n        } else {\n            if(curr_digit<=prev_digit)\n                return false;\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "tmpe0yko4bp: /tmp/tmpe0yko4bp.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int next_digit = n % 10;\n        if (next_digit == last_digit) {\n            return false;\n        }\n        last_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (increasing) {\n            if (curr_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < last_digit) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "tmpx7s9v7tj: /tmp/tmpx7s9v7tj.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpyeaduqh3: /tmp/tmpyeaduqh3.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit > curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit < curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit > curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmp0mqh8i3v: /tmp/tmp0mqh8i3v.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if(n < 100) return false;\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while(n) {\n        int curr_digit = n % 10;\n        if(curr_digit != last_digit && curr_digit != second_last_digit) return false;\n        second_last_digit = last_digit;\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmpepzbqucy: /tmp/tmpepzbqucy.cpp:21: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    bool increasing = true;\n    while (n > 0) {\n        int curr = n % 10;\n        if (increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmpxt0qun5i: /tmp/tmpxt0qun5i.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int next_digit = n % 10;\n        if (next_digit == last_digit) {\n            return false;\n        }\n        last_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpvxuw2hko: /tmp/tmpvxuw2hko.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = -1;\n    int cur = -1;\n    int next = -1;\n    while (n > 0) {\n        prev = cur;\n        cur = next;\n        next = n % 10;\n        n /= 10;\n        if (prev == -1) {\n            continue;\n        }\n        if (prev == next) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmpgjsy1_q0: /tmp/tmpgjsy1_q0.cpp:24: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpqikk7gj_: /tmp/tmpqikk7gj_.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for(int i = 0; i < digits.size() - 2; ++i) {\n        if(digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmp2bn_av3e: /tmp/tmp2bn_av3e.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = (curr_digit > prev_digit);\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  long last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    long digit = n % 10;\n    if (digit == last_digit) {\n      return false;\n    }\n    last_digit = digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int a[10],i=0,j=0,k=0,l=0,m=0,count=0;\n    while(n>0)\n    {\n        a[i]=n%10;\n        n=n/10;\n        i++;\n    }\n    for(j=0;j<i-1;j++)\n    {\n        if((a[j]%2==0)&&(a[j+1]%2==0))\n        {\n            count++;\n        }\n        else if((a[j]%2!=0)&&(a[j+1]%2!=0))\n        {\n            count++;\n        }\n    }\n    if(count==i-1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmp8zgvpoo9: /tmp/tmp8zgvpoo9.cpp:34: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpv7bijlvn: /tmp/tmpv7bijlvn.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit && current_digit != second_last_digit) {\n            return false;\n        }\n        second_last_digit = last_digit;\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpmfkqfbqa: /tmp/tmpmfkqfbqa.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp2ss1bzt7: /tmp/tmp2ss1bzt7.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    while (n > 0) {\n        if (prev == curr) {\n            return false;\n        }\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (is_increasing) {\n            if (current_digit > last_digit) {\n                return false;\n            }\n            if (current_digit < last_digit) {\n                is_increasing = false;\n            }\n        } else {\n            if (current_digit < last_digit) {\n                return false;\n            }\n            if (current_digit > last_digit) {\n                is_increasing = true;\n            }\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmpgfrucp40: /tmp/tmpgfrucp40.cpp:32: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 10) return false;\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int next_digit = n % 10;\n        if (last_digit == second_last_digit) return false;\n        if (next_digit == second_last_digit) return false;\n        if (next_digit == last_digit) return false;\n        last_digit = second_last_digit;\n        second_last_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmpkbljk2rr: /tmp/tmpkbljk2rr.cpp:23: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  if (n < 100) {\n    return false;\n  }\n  int prev = n % 10;\n  n /= 10;\n  int curr = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int next = n % 10;\n    if (prev == curr) {\n      return false;\n    }\n    prev = curr;\n    curr = next;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 1; i++) {\n        if (i % 2 == 0) {\n            if (digits[i] >= digits[i + 1]) {\n                return false;\n            }\n        } else {\n            if (digits[i] <= digits[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    int next_digit;\n    n /= 10;\n    while (n > 0) {\n        next_digit = n % 10;\n        if (next_digit == last_digit) {\n            return false;\n        }\n        last_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpmzmznn9q: /tmp/tmpmzmznn9q.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int digit1 = n % 10;\n    n /= 10;\n    int digit2 = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit3 = n % 10;\n        if (digit1 != digit2 && digit2 != digit3 && digit1 != digit3) {\n            digit1 = digit2;\n            digit2 = digit3;\n            n /= 10;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmpnqhfka5d: /tmp/tmpnqhfka5d.cpp:23: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  int second_last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int current_digit = n % 10;\n    if (current_digit != last_digit + second_last_digit) {\n      return false;\n    }\n    second_last_digit = last_digit;\n    last_digit = current_digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmpfhdl_cmr: /tmp/tmpfhdl_cmr.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool is_increasing = (curr > prev);\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "tmpe0yko4bp: /tmp/tmpe0yko4bp.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit >= prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit <= prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n) {\n        int curr_digit = n % 10;\n        if (prev_digit == curr_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpmw4shxyd: /tmp/tmpmw4shxyd.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool is_increasing = prev < curr;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (is_increasing && prev < curr) {\n            return false;\n        }\n        if (!is_increasing && prev > curr) {\n            return false;\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpeezgpund: /tmp/tmpeezgpund.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit && curr_digit != second_last_digit) {\n            return false;\n        }\n        second_last_digit = last_digit;\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmpqd51nbt6: /tmp/tmpqd51nbt6.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmp1bh120vj: /tmp/tmp1bh120vj.cpp:20: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n\tint last_digit = n % 10;\n\tn /= 10;\n\twhile (n > 0) {\n\t\tint curr_digit = n % 10;\n\t\tif (curr_digit == last_digit) {\n\t\t\treturn false;\n\t\t}\n\t\tlast_digit = curr_digit;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long curr = n % 10;\n        if (prev == curr) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx = 0;\n    int yyy = 0;\n    int z\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "/tmp/tmp2rgmo4rz.cpp: In function \u2018bool is_undulating(long int)\u2019:\n/tmp/tmp2rgmo4rz.cpp:74:1: error: expected initializer before \u2018}\u2019 token\n   74 | }\n      | ^\n/tmp/tmp2rgmo4rz.cpp:74:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int cur_digit = n % 10;\n        if (cur_digit == last_digit) {\n            return false;\n        }\n        last_digit = cur_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpawc1b9m2: /tmp/tmpawc1b9m2.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int new_digit = n % 10;\n        if (new_digit == last_digit) {\n            return false;\n        }\n        last_digit = new_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev)\n            return false;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    std::vector<int> v;\n    while(n > 0) {\n        v.push_back(n % 10);\n        n /= 10;\n    }\n    int i = 0;\n    int j = v.size() - 1;\n    while(i < j) {\n        if(v[i] != v[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmp3h5ask44: /tmp/tmp3h5ask44.cpp:25: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    while (n > 0) {\n        if (prev == curr) {\n            return false;\n        }\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n\tint a[10], i = 0, j = 0, k = 0, l = 0, m = 0, n1 = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0;\n\twhile (n > 0) {\n\t\ta[i] = n % 10;\n\t\tn = n / 10;\n\t\ti++;\n\t}\n\tfor (j = 0; j < i; j++) {\n\t\tif (a[j] == 0) {\n\t\t\tz++;\n\t\t}\n\t\telse if (a[j] == 1) {\n\t\t\ty++;\n\t\t}\n\t\telse if (a[j] == 2) {\n\t\t\tx++;\n\t\t}\n\t\telse if (a[j] == 3) {\n\t\t\tw++;\n\t\t}\n\t\telse if (a[j] == 4) {\n\t\t\tv++;\n\t\t}\n\t\telse if (a[j] == 5) {\n\t\t\tu++;\n\t\t}\n\t\telse if (a[j] == 6) {\n\t\t\tt++;\n\t\t}\n\t\telse if (a[j] == 7) {\n\t\t\ts++;\n\t\t}\n\t\telse if (a[j] == 8) {\n\t\t\tr++;\n\t\t}\n\t\telse if (a[j] == 9) {\n\t\t\tq++;\n\t\t}\n\t}\n\tif (z == i) {\n\t\treturn false;\n\t}\n\telse if (y == i) {\n\t\treturn false;\n\t}\n\telse if (x == i) {\n\t\treturn false;\n\t}\n\telse if (w == i) {\n\t\treturn false;\n\t}\n\telse if (v == i) {\n\t\treturn false;\n\t}\n\telse if (u == i) {\n\t\treturn false;\n\t}\n\telse if (t == i) {\n\t\treturn false;\n\t}\n\telse if (\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "/tmp/tmpkfir2iv7.cpp: In function \u2018bool is_undulating(long int)\u2019:\n/tmp/tmpkfir2iv7.cpp:65:1: error: expected primary-expression before \u2018}\u2019 token\n   65 | }\n      | ^\n/tmp/tmpkfir2iv7.cpp:64:11: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   64 |  else if (\n      |          ~^\n      |           )\n   65 | }\n      | ~          \n/tmp/tmpkfir2iv7.cpp:65:1: error: expected primary-expression before \u2018}\u2019 token\n   65 | }\n      | ^\n/tmp/tmpkfir2iv7.cpp:65:1: warning: control reaches end of non-void function [-Wreturn-type]\n   65 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string s = std::to_string(n);\n    for (int i = 0; i < s.size() - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp2ss1bzt7: /tmp/tmp2ss1bzt7.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    int count = 0;\n    while(n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        if(prev_digit == -1) {\n            prev_digit = next_digit;\n        }\n        if(curr_digit == -1) {\n            curr_digit = next_digit;\n        }\n        if(prev_digit < curr_digit && curr_digit > next_digit) {\n            count++;\n        }\n        n = n / 10;\n    }\n    if(count > 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "tmp82zrkp6w: /tmp/tmp82zrkp6w.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int a, b, c;\n    a = n % 10;\n    n /= 10;\n    b = n % 10;\n    n /= 10;\n    c = n % 10;\n    n /= 10;\n    if (a == b && b == c) {\n        return false;\n    }\n    if (a == b || b == c) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpzsbpnft8: /tmp/tmpzsbpnft8.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int next_digit = n % 10;\n        if (last_digit != second_last_digit) {\n            return false;\n        }\n        last_digit = second_last_digit;\n        second_last_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmp6hpg_wup: /tmp/tmp6hpg_wup.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int curr_digit = n % 10;\n        if (prev_digit == curr_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmp4nftzefc: /tmp/tmp4nftzefc.cpp:30: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for(int i = 0; i < digits.size() - 2; i++) {\n        if(digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpkvv1rn4r: /tmp/tmpkvv1rn4r.cpp:20: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpv7bijlvn: /tmp/tmpv7bijlvn.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (last_digit != current_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpjhikq67e: /tmp/tmpjhikq67e.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    std::vector<int> v;\n    while(n>0)\n    {\n        v.push_back(n%10);\n        n/=10;\n    }\n    int i=0;\n    while(i<v.size()-1)\n    {\n        if(v[i]==v[i+1])\n        {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100)\n        return false;\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int third_last_digit = n % 10;\n        if (third_last_digit - second_last_digit != second_last_digit - last_digit)\n            return false;\n        last_digit = second_last_digit;\n        second_last_digit = third_last_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmp5gnz2i1q: /tmp/tmp5gnz2i1q.cpp:23: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing && curr_digit > prev_digit) {\n            return false;\n        }\n        if (!is_increasing && curr_digit < prev_digit) {\n            return false;\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit && digit != second_last_digit) {\n            return false;\n        }\n        second_last_digit = last_digit;\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpn4a1pq32: /tmp/tmpn4a1pq32.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        long digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmp9lf_y6mm: /tmp/tmp9lf_y6mm.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int d = n % 10;\n        if (d == last_digit) {\n            return false;\n        }\n        last_digit = d;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string s = std::to_string(n);\n    for (int i = 0; i < s.length() - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr = n % 10;\n        if (curr > prev) {\n            if (!is_increasing) {\n                return false;\n            }\n        } else if (curr < prev) {\n            if (is_increasing) {\n                is_increasing = false;\n            }\n        } else {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpd_3vk8_l: /tmp/tmpd_3vk8_l.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpi0vbul1x: /tmp/tmpi0vbul1x.cpp:30: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit > curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit < curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit > curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpar2tvaqc: /tmp/tmpar2tvaqc.cpp:30: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int digit = n % 10;\n    if (digit == last_digit) {\n      return false;\n    }\n    last_digit = digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (is_increasing) {\n            if (current_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (current_digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = current_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmp4pqop03p: /tmp/tmp4pqop03p.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "tmpe0yko4bp: /tmp/tmpe0yko4bp.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit)\n            return false;\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "tmpawc1b9m2: /tmp/tmpawc1b9m2.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int a[10];\n    int i = 0;\n    while(n) {\n        a[i++] = n%10;\n        n /= 10;\n    }\n    for(int j = 0; j < i-2; j++) {\n        if(a[j] == a[j+1] || a[j+1] == a[j+2])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "tmpe0yko4bp: /tmp/tmpe0yko4bp.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmp2mfaoqa1: /tmp/tmp2mfaoqa1.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit > curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit <= curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit >= curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmp42fydfn8: /tmp/tmp42fydfn8.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    int i = 0;\n    while (i < digits.size() - 1) {\n        if (digits[i] == digits[i + 1]) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int prev_digit = n % 10;\n  n /= 10;\n  int curr_digit = n % 10;\n  n /= 10;\n  bool is_increasing = curr_digit > prev_digit;\n  while (n > 0) {\n    prev_digit = curr_digit;\n    curr_digit = n % 10;\n    n /= 10;\n    if (is_increasing) {\n      if (curr_digit > prev_digit) {\n        return false;\n      }\n      if (curr_digit < prev_digit) {\n        is_increasing = false;\n      }\n    } else {\n      if (curr_digit < prev_digit) {\n        return false;\n      }\n      if (curr_digit > prev_digit) {\n        is_increasing = true;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpvhvwtc3r: /tmp/tmpvhvwtc3r.cpp:35: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 1; i < digits.size() - 1; i++) {\n        if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpwcovt73u: /tmp/tmpwcovt73u.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmp2ss1bzt7: /tmp/tmp2ss1bzt7.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit < curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit <= curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit >= curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n) {\n        long digit = n % 10;\n        if (digit != last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpgxc9wbmk: /tmp/tmpgxc9wbmk.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit > curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmp98sz4dp4: /tmp/tmp98sz4dp4.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        if (prev_digit == -1) {\n            prev_digit = curr_digit;\n        }\n        if (curr_digit == -1) {\n            curr_digit = next_digit;\n        }\n        if (prev_digit == curr_digit || curr_digit == next_digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmp9zolb2ie: /tmp/tmp9zolb2ie.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (curr_digit == last_digit) return false;\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122534,
      "stdout": "",
      "stderr": "tmpd24zum7k: /tmp/tmpd24zum7k.cpp:20: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int a[10] = {0};\n  int i = 0;\n  while (n > 0) {\n    a[i] = n % 10;\n    n /= 10;\n    i++;\n  }\n  int flag = 0;\n  for (int j = 0; j < i - 1; j++) {\n    if (a[j] == a[j + 1]) {\n      flag = 1;\n      break;\n    }\n  }\n  if (flag == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) return false;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool increasing = curr > prev;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] == digits[i + 2]) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev = n % 10;\n    n /= 10;\n    long curr;\n    bool increasing = true;\n    while (n > 0) {\n        curr = n % 10;\n        if (increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        increasing = !increasing;\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmpul6v8xbg: /tmp/tmpul6v8xbg.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) return false;\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) return false;\n        last_digit = second_last_digit;\n        second_last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmppcqokkkj: /tmp/tmppcqokkkj.cpp:21: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpmzmznn9q: /tmp/tmpmzmznn9q.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpeezgpund: /tmp/tmpeezgpund.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit > curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit < curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit > curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmp0mqh8i3v: /tmp/tmp0mqh8i3v.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "tmpu2zp52rk: /tmp/tmpu2zp52rk.cpp:31: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    while (n > 0) {\n        if (prev_digit == curr_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        curr_digit = n % 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) return false;\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) return false;\n        } else {\n            if (curr_digit < prev_digit) return false;\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::string str = std::to_string(n);\n    for (int i = 0; i < str.length() - 1; i++) {\n        if (str[i] == str[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    int i = 0;\n    while (i < digits.size() - 1) {\n        if (digits[i] == digits[i + 1]) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpbevotzfy: /tmp/tmpbevotzfy.cpp:22: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit != last_digit && digit != second_last_digit) {\n            return false;\n        }\n        second_last_digit = last_digit;\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmpn4a1pq32: /tmp/tmpn4a1pq32.cpp:22: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool increasing = curr > prev;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (increasing) {\n            if (curr > prev) {\n                return false;\n            }\n            if (curr < prev) {\n                increasing = false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n            if (curr > prev) {\n                increasing = true;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmp87fa79b6: /tmp/tmp87fa79b6.cpp:35: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while(n > 0) {\n        curr_digit = n % 10;\n        if(is_increasing) {\n            if(curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if(curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmpbzdqbe2u: /tmp/tmpbzdqbe2u.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        if (prev_digit != -1 && curr_digit != -1 && next_digit != -1) {\n            if (prev_digit > curr_digit && curr_digit < next_digit) {\n                return false;\n            }\n            if (prev_digit < curr_digit && curr_digit > next_digit) {\n                return false;\n            }\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmptmteuio5: /tmp/tmptmteuio5.cpp:26: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = curr_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "tmp2mfaoqa1: /tmp/tmp2mfaoqa1.cpp:28: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int a[10],i=0,j=0,k=0,l=0;\n    while(n!=0)\n    {\n        a[i]=n%10;\n        n=n/10;\n        i++;\n    }\n    for(j=0;j<i-2;j++)\n    {\n        if(a[j]==a[j+1])\n        {\n            if(a[j+1]==a[j+2])\n            {\n                k++;\n            }\n        }\n        else if(a[j]<a[j+1])\n        {\n            if(a[j+1]>a[j+2])\n            {\n                l++;\n            }\n        }\n        else if(a[j]>a[j+1])\n        {\n            if(a[j+1]<a[j+2])\n            {\n                l++;\n            }\n        }\n    }\n    if(k==0&&l==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmpluvvgapq: /tmp/tmpluvvgapq.cpp:47: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (is_increasing) {\n            if (current_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (current_digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = current_digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "tmp4pqop03p: /tmp/tmp4pqop03p.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = n % 10;\n        if (prev_digit != -1 && curr_digit != -1 && next_digit != -1) {\n            if (prev_digit == next_digit) {\n                return true;\n            }\n        }\n        n = n / 10;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long prev = n % 10;\n    n /= 10;\n    long curr = n % 10;\n    n /= 10;\n    while (n > 0) {\n        if (prev > curr) {\n            if (curr < n % 10) {\n                return false;\n            }\n        } else if (prev < curr) {\n            if (curr > n % 10) {\n                return false;\n            }\n        }\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmphbyvh4z8: /tmp/tmphbyvh4z8.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "tmp1bh120vj: /tmp/tmp1bh120vj.cpp:20: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int digit = n % 10;\n    if (digit == last_digit) {\n      return false;\n    }\n    last_digit = digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) {\n        return false;\n    }\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  std::vector<int> digits;\n  while (n > 0) {\n    digits.push_back(n % 10);\n    n /= 10;\n  }\n  for (int i = 0; i < digits.size() - 2; i++) {\n    if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmpq3kae8_1: /tmp/tmpq3kae8_1.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = (curr_digit > prev_digit);\n    while (n) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  // Write your code here\n  int prev_digit = n % 10;\n  n /= 10;\n  int curr_digit = n % 10;\n  n /= 10;\n  bool is_increasing = curr_digit > prev_digit;\n  while (n > 0) {\n    prev_digit = curr_digit;\n    curr_digit = n % 10;\n    n /= 10;\n    if (is_increasing) {\n      if (curr_digit > prev_digit) {\n        return false;\n      }\n    } else {\n      if (curr_digit < prev_digit) {\n        return false;\n      }\n    }\n    is_increasing = !is_increasing;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (curr_digit == prev_digit) return false;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) return false;\n        } else {\n            if (curr_digit < prev_digit) return false;\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "tmp23gutlyo: /tmp/tmp23gutlyo.cpp:25: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > last_digit;\n    while (n > 0) {\n        last_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < last_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int digit_count = 0;\n    long temp = n;\n    while (temp > 0) {\n        digit_count++;\n        temp /= 10;\n    }\n    temp = n;\n    int prev_digit = temp % 10;\n    temp /= 10;\n    int curr_digit = temp % 10;\n    temp /= 10;\n    int next_digit = temp % 10;\n    int count = 0;\n    while (temp > 0) {\n        if ((prev_digit < curr_digit && curr_digit > next_digit) || (prev_digit > curr_digit && curr_digit < next_digit)) {\n            count++;\n        }\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        next_digit = temp % 10;\n        temp /= 10;\n    }\n    if (count == digit_count - 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmp8id6cxiw: /tmp/tmp8id6cxiw.cpp:34: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool increasing = true;\n    while (n > 0) {\n        curr = n % 10;\n        if (increasing) {\n            if (curr > prev) {\n                prev = curr;\n                n /= 10;\n                continue;\n            } else {\n                increasing = false;\n            }\n        }\n        if (!increasing) {\n            if (curr < prev) {\n                prev = curr;\n                n /= 10;\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmp1wfki2no: /tmp/tmp1wfki2no.cpp:34: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 2; i++) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "tmpuvk3wnof: /tmp/tmpuvk3wnof.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool is_increasing = prev > curr;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev < curr) {\n                return false;\n            }\n        } else {\n            if (prev > curr) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmp428jj_29: /tmp/tmp428jj_29.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n            if (digit < last_digit) {\n                is_increasing = false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n            if (digit > last_digit) {\n                is_increasing = true;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmpb2enmmoi: /tmp/tmpb2enmmoi.cpp:32: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) return false;\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int next_digit = n % 10;\n        if (next_digit != last_digit && next_digit != second_last_digit) return false;\n        second_last_digit = last_digit;\n        last_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmpcs38wvrz: /tmp/tmpcs38wvrz.cpp:21: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    if (n < 100) return false;\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int next = n % 10;\n        if (prev - curr != curr - next) return false;\n        prev = curr;\n        curr = next;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmp0aa6caaz: /tmp/tmp0aa6caaz.cpp:21: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    for (int i = 0; i < digits.size() - 1; i++) {\n        if (i % 2 == 0) {\n            if (digits[i] >= digits[i + 1]) {\n                return false;\n            }\n        } else {\n            if (digits[i] <= digits[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int count = 0;\n    while(n > 0) {\n        curr_digit = n % 10;\n        if(prev_digit != -1) {\n            if(prev_digit == curr_digit) {\n                return false;\n            }\n            count++;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return count > 1;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n\tint last_digit = n % 10;\n\tn /= 10;\n\twhile (n > 0) {\n\t\tint current_digit = n % 10;\n\t\tif (current_digit == last_digit) {\n\t\t\treturn false;\n\t\t}\n\t\tlast_digit = current_digit;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = curr_digit > prev_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long a,b,c;\n    a=n%10;\n    n=n/10;\n    b=n%10;\n    n=n/10;\n    c=n%10;\n    if(a==b && b==c)\n        return false;\n    else if(a==b || b==c || a==c)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmphb4hil19: /tmp/tmphb4hil19.cpp:21: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = -1;\n    int curr_digit = -1;\n    int next_digit = -1;\n    while (n > 0) {\n        next_digit = n % 10;\n        if (prev_digit != -1) {\n            if (prev_digit == curr_digit) {\n                return false;\n            }\n            if (curr_digit == next_digit) {\n                return false;\n            }\n            if (prev_digit > curr_digit && curr_digit < next_digit) {\n                return false;\n            }\n            if (prev_digit < curr_digit && curr_digit > next_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        curr_digit = next_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmpgtdah7uh: /tmp/tmpgtdah7uh.cpp:32: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_diff = 0;\n    int curr_diff = 0;\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n) {\n        int curr_digit = n % 10;\n        curr_diff = prev_digit - curr_digit;\n        if (prev_diff * curr_diff < 0) {\n            prev_diff = curr_diff;\n            prev_digit = curr_digit;\n            n /= 10;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmp7xvneori: /tmp/tmp7xvneori.cpp:24: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (prev == curr) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (prev == curr) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_diff = 0;\n    int curr_diff = 0;\n    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        curr_diff = curr_digit - prev_digit;\n        if (prev_diff * curr_diff >= 0) {\n            return false;\n        }\n        prev_diff = curr_diff;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmpscsdsugs: /tmp/tmpscsdsugs.cpp:23: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        long digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n            if (digit < last_digit) {\n                is_increasing = false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n            if (digit > last_digit) {\n                is_increasing = true;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmpsb899qss: /tmp/tmpsb899qss.cpp:32: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    long last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int count = 0;\n    while(n > 0) {\n        int digit = n % 10;\n        if(digit == 0) {\n            return false;\n        }\n        if(count % 2 == 0) {\n            if(digit % 2 == 0) {\n                return false;\n            }\n        } else {\n            if(digit % 2 != 0) {\n                return false;\n            }\n        }\n        count++;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  while (n) {\n    int curr_digit = n % 10;\n    if (curr_digit != last_digit) {\n      return false;\n    }\n    last_digit = curr_digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmpkr_urkgy: /tmp/tmpkr_urkgy.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  long last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    long digit = n % 10;\n    if (digit == last_digit) {\n      return false;\n    }\n    last_digit = digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n\tint digits[10] = {0};\n\twhile (n) {\n\t\tdigits[n % 10]++;\n\t\tn /= 10;\n\t}\n\tint count = 0;\n\tfor (int i = 0; i < 10; i++) {\n\t\tif (digits[i] > 1) count++;\n\t}\n\treturn count == 2;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmpo1mgmuzx: /tmp/tmpo1mgmuzx.cpp:19: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpmzmznn9q: /tmp/tmpmzmznn9q.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    long temp = n;\n    int count = 0;\n    while(temp > 0) {\n        temp = temp / 10;\n        count++;\n    }\n    int arr[count];\n    temp = n;\n    for(int i = 0; i < count; i++) {\n        arr[i] = temp % 10;\n        temp = temp / 10;\n    }\n    int flag = 0;\n    for(int i = 0; i < count - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool increasing = prev < curr;\n    while (n > 0) {\n        int next = n % 10;\n        if (increasing) {\n            if (curr > next) {\n                return false;\n            }\n        } else {\n            if (curr < next) {\n                return false;\n            }\n        }\n        prev = curr;\n        curr = next;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmpxbh0_cze: /tmp/tmpxbh0_cze.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "tmpmzmznn9q: /tmp/tmpmzmznn9q.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int last_digit = n % 10;\n  n /= 10;\n  while (n > 0) {\n    int digit = n % 10;\n    if (digit != last_digit) {\n      return false;\n    }\n    last_digit = digit;\n    n /= 10;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmp9ytoum00: /tmp/tmp9ytoum00.cpp:19: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int digits[10] = {0};\n    while (n) {\n        digits[n % 10]++;\n        n /= 10;\n    }\n    int count = 0;\n    for (int i = 0; i < 10; i++) {\n        if (digits[i] > 1) {\n            count++;\n        }\n    }\n    return count > 1;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmp6s_7224a: /tmp/tmp6s_7224a.cpp:21: int main(): Assertion `candidate((1991)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n  int prev_digit = n % 10;\n  n /= 10;\n  int curr_digit = n % 10;\n  n /= 10;\n  bool is_increasing = prev_digit > curr_digit;\n  while (n > 0) {\n    prev_digit = curr_digit;\n    curr_digit = n % 10;\n    n /= 10;\n    if (is_increasing) {\n      if (prev_digit < curr_digit) {\n        return false;\n      }\n    } else {\n      if (prev_digit > curr_digit) {\n        return false;\n      }\n    }\n    is_increasing = !is_increasing;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "tmpk4fawtf4: /tmp/tmpk4fawtf4.cpp:29: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    // Write your code here\n    std::vector<int> v;\n    while(n>0){\n        v.push_back(n%10);\n        n/=10;\n    }\n    for(int i=1;i<v.size()-1;i++){\n        if(v[i-1]>v[i] && v[i]<v[i+1]){\n            continue;\n        }\n        else if(v[i-1]<v[i] && v[i]>v[i+1]){\n            continue;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int last_digit = n % 10;\n    n /= 10;\n    int second_last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int current_digit = n % 10;\n        if (current_digit != last_digit) {\n            return false;\n        }\n        last_digit = second_last_digit;\n        second_last_digit = current_digit;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n    int prev_digit = n % 10;\n    n /= 10;\n    bool increasing = true;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n        increasing = !increasing;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "tmpgmq633so: /tmp/tmpgmq633so.cpp:27: int main(): Assertion `candidate((1212121)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}