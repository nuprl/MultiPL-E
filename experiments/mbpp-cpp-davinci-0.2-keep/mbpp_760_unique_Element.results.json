{
  "name": "mbpp_760_unique_Element",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpqd92nd7d: /tmp/tmpqd92nd7d.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpm1djghk7: /tmp/tmpm1djghk7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpmklux11o: /tmp/tmpmklux11o.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpdim8fqh_: /tmp/tmpdim8fqh_.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    if(arr.size() == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpmt3zpw0k: /tmp/tmpmt3zpw0k.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpm1djghk7: /tmp/tmpm1djghk7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    if(s.size() == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++)\n    {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpx1oempyw: /tmp/tmpx1oempyw.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i:arr)\n    {\n        s.insert(i);\n    }\n    if(s.size()==1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::set<long> s;\n    for (auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    if(arr.size()==1)\n        return true;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++){\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmp3ia5u_p1: /tmp/tmp3ia5u_p1.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpcwhsfs41: /tmp/tmpcwhsfs41.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 0) {\n        return false;\n    }\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpxgjb3ptg: /tmp/tmpxgjb3ptg.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    else\n    {\n        sort(arr.begin(), arr.end());\n        for(int i = 0; i < n-1; i++)\n        {\n            if(arr[i] == arr[i+1])\n                return false;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmp27jllns9: /tmp/tmp27jllns9.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i:arr){\n        s.insert(i);\n    }\n    if(s.size()==1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpay84bk6q: /tmp/tmpay84bk6q.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmp49415a0v: /tmp/tmp49415a0v.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i:arr){\n        s.insert(i);\n    }\n    if(s.size()==1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpajsv7zvc: /tmp/tmpajsv7zvc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // write your code here\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmprbw7nqgh: /tmp/tmprbw7nqgh.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if (n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmps2f0tqd3: /tmp/tmps2f0tqd3.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpcwhsfs41: /tmp/tmpcwhsfs41.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpay84bk6q: /tmp/tmpay84bk6q.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpay84bk6q: /tmp/tmpay84bk6q.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpnwoaw3sm: /tmp/tmpnwoaw3sm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpnwoaw3sm: /tmp/tmpnwoaw3sm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpqsdydzpv: /tmp/tmpqsdydzpv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    else\n    {\n        std::sort(arr.begin(), arr.end());\n        for(int i = 0; i < n-1; i++)\n        {\n            if(arr[i] == arr[i+1])\n                return false;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpm2lm8zjz: /tmp/tmpm2lm8zjz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if (n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpme0l1610: /tmp/tmpme0l1610.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptqx2wkhr: /tmp/tmptqx2wkhr.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1){\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmp2a3i0uc9: /tmp/tmp2a3i0uc9.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    //write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i=1;i<n;i++){\n        if(arr[i]==arr[i-1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmp5vuop79a: /tmp/tmp5vuop79a.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpin662u1r: /tmp/tmpin662u1r.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i=0; i<arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmp5kfdsj5g: /tmp/tmp5kfdsj5g.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpi1ny1o9_: /tmp/tmpi1ny1o9_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpy3kg2s9g: /tmp/tmpy3kg2s9g.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i] == arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpjmcn6qg1: /tmp/tmpjmcn6qg1.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpdim8fqh_: /tmp/tmpdim8fqh_.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i:arr) {\n        s.insert(i);\n    }\n    if(s.size() == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<arr.size();i++){\n        s.insert(arr[i]);\n    }\n    if(s.size()==1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpk_fkimwq: /tmp/tmpk_fkimwq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_map<long,int> m;\n    for(auto i:arr)\n    {\n        m[i]++;\n    }\n    for(auto i:m)\n    {\n        if(i.second==1)\n        {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpsgk6j7w2: /tmp/tmpsgk6j7w2.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpk_fkimwq: /tmp/tmpk_fkimwq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if (count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpcfiic_ru: /tmp/tmpcfiic_ru.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmp7wg073g7: /tmp/tmp7wg073g7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(), arr.end());\n    for(int i=0; i<arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpgbz37rnm: /tmp/tmpgbz37rnm.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmp92xrh7eu: /tmp/tmp92xrh7eu.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    //write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i = 1; i < n; i++) {\n        if(arr[i] == arr[i - 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpfve829vl: /tmp/tmpfve829vl.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1){\n        return true;\n    }\n    sort(arr.begin(),arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpqrgidx5c: /tmp/tmpqrgidx5c.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmppgun2hdu: /tmp/tmppgun2hdu.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpex4xxd5r: /tmp/tmpex4xxd5r.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> hash;\n    for(auto i : arr) {\n        hash[i]++;\n    }\n    for(auto i : hash) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmptw5dul4x: /tmp/tmptw5dul4x.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 0)\n        return false;\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmp4814om_k: /tmp/tmp4814om_k.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpxnnaqson: /tmp/tmpxnnaqson.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmp3hwmdn77: /tmp/tmp3hwmdn77.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmp_lzentcs: /tmp/tmp_lzentcs.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto x : m) {\n        if(x.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpos8a1d9f: /tmp/tmpos8a1d9f.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    //write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpmmycyac1: /tmp/tmpmmycyac1.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpzxby8rib: /tmp/tmpzxby8rib.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpumlf02a2: /tmp/tmpumlf02a2.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==0)\n        return false;\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n                count++;\n        }\n        if(count==1)\n            return true;\n        else\n            count = 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpg5gp8w8c: /tmp/tmpg5gp8w8c.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmp4jtftnlr: /tmp/tmp4jtftnlr.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] == arr[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpww5rm8z7: /tmp/tmpww5rm8z7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i:arr) {\n        s.insert(i);\n    }\n    if(s.size() == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpzxby8rib: /tmp/tmpzxby8rib.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    //write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count > 1){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpld36ltaa: /tmp/tmpld36ltaa.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmptl_h869j: /tmp/tmptl_h869j.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> m;\n    for(auto i: arr) {\n        m[i]++;\n    }\n    for(auto i: m) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpmuwnz4pc: /tmp/tmpmuwnz4pc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==0)\n        return false;\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n                count++;\n        }\n        if(count>1)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmp8y1g0qn4: /tmp/tmp8y1g0qn4.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpsde1i535: /tmp/tmpsde1i535.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmp6pjj6x7k: /tmp/tmp6pjj6x7k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(int i=0;i<arr.size();i++) {\n        s.insert(arr[i]);\n    }\n    if(s.size()==1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpdim8fqh_: /tmp/tmpdim8fqh_.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpnwoaw3sm: /tmp/tmpnwoaw3sm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpbfintulx: /tmp/tmpbfintulx.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpnwoaw3sm: /tmp/tmpnwoaw3sm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmp49415a0v: /tmp/tmp49415a0v.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpay84bk6q: /tmp/tmpay84bk6q.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpc3rl2gts: /tmp/tmpc3rl2gts.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpyt_48l6k: /tmp/tmpyt_48l6k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpuez_802r: /tmp/tmpuez_802r.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpoeszgorv: /tmp/tmpoeszgorv.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    //write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpmmycyac1: /tmp/tmpmmycyac1.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++)\n    {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpx1oempyw: /tmp/tmpx1oempyw.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n        count = 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpai9t5l8r: /tmp/tmpai9t5l8r.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    //write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpmmycyac1: /tmp/tmpmmycyac1.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::set<long> s;\n    for(int i=0;i<arr.size();i++)\n        s.insert(arr[i]);\n    if(s.size()==1)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    if(n==1)\n        return true;\n    else\n    {\n        std::sort(arr.begin(),arr.end());\n        for(int i=0;i<n-1;i++)\n        {\n            if(arr[i]==arr[i+1])\n                return false;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpwgzohkh0: /tmp/tmpwgzohkh0.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    //write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpy_kpard6: /tmp/tmpy_kpard6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmppgun2hdu: /tmp/tmppgun2hdu.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        s.insert(arr[i]);\n    }\n    if (s.size() == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(), arr.end());\n    for(int i=0; i<arr.size()-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmp6uojl_4h: /tmp/tmp6uojl_4h.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmp3hwmdn77: /tmp/tmp3hwmdn77.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpulzm7lia: /tmp/tmpulzm7lia.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpc3rl2gts: /tmp/tmpc3rl2gts.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    std::sort(arr.begin(), arr.end());\n    for(int i=0; i<n-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpbf6q1mpp: /tmp/tmpbf6q1mpp.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmp92xrh7eu: /tmp/tmp92xrh7eu.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpi1ny1o9_: /tmp/tmpi1ny1o9_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if (n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmph2bankzp: /tmp/tmph2bankzp.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpoeszgorv: /tmp/tmpoeszgorv.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n        count = 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpai9t5l8r: /tmp/tmpai9t5l8r.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpdeh9p53g: /tmp/tmpdeh9p53g.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] == arr[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpgvav04_3: /tmp/tmpgvav04_3.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpl_u2k8d8: /tmp/tmpl_u2k8d8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpymn7ivfc: /tmp/tmpymn7ivfc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(int i=0;i<arr.size();i++) {\n        s.insert(arr[i]);\n    }\n    if(s.size()==1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    std::sort(arr.begin(), arr.end());\n    for(int i=0; i<n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpb9tcsw53: /tmp/tmpb9tcsw53.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmptl_h869j: /tmp/tmptl_h869j.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if (n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpme0l1610: /tmp/tmpme0l1610.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // write your code here\n    std::sort(arr.begin(), arr.end());\n    for(int i=0; i<arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpqz448sh9: /tmp/tmpqz448sh9.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpdim8fqh_: /tmp/tmpdim8fqh_.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpqsdydzpv: /tmp/tmpqsdydzpv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmputgmxbp6: /tmp/tmputgmxbp6.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpay84bk6q: /tmp/tmpay84bk6q.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpm1djghk7: /tmp/tmpm1djghk7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if (n == 0) {\n        return false;\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmppqzxeh8h: /tmp/tmppqzxeh8h.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_map<long, int> m;\n    for(auto i: arr) {\n        m[i]++;\n    }\n    for(auto i: m) {\n        if(i.second > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpmuwnz4pc: /tmp/tmpmuwnz4pc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i:arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpd13krxi6: /tmp/tmpd13krxi6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpsnf8hyms: /tmp/tmpsnf8hyms.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpm1djghk7: /tmp/tmpm1djghk7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpi9nlv4gn: /tmp/tmpi9nlv4gn.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for(auto i: arr) {\n        s.insert(i);\n    }\n    return s.size() == 1;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpqsdydzpv: /tmp/tmpqsdydzpv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n\tstd::set<long> s;\n\tfor(int i=0;i<arr.size();i++) {\n\t\ts.insert(arr[i]);\n\t}\n\tif(s.size()==1) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpyt_48l6k: /tmp/tmpyt_48l6k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpg9yc7z7h: /tmp/tmpg9yc7z7h.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1)\n        return true;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmppgun2hdu: /tmp/tmppgun2hdu.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==n)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpc9_1480c: /tmp/tmpc9_1480c.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpm1djghk7: /tmp/tmpm1djghk7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    if(n==1)\n        return true;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpypa4rjzq: /tmp/tmpypa4rjzq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpyt_48l6k: /tmp/tmpyt_48l6k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmp3a5xa_uo: /tmp/tmp3a5xa_uo.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmp92xrh7eu: /tmp/tmp92xrh7eu.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n==1){\n        return true;\n    }\n    sort(arr.begin(),arr.end());\n    for(int i=0;i<n-1;i++){\n        if(arr[i]==arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpchzm_5e1: /tmp/tmpchzm_5e1.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 0)\n        return false;\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmp12ze6b59: /tmp/tmp12ze6b59.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpm1djghk7: /tmp/tmpm1djghk7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpqsdydzpv: /tmp/tmpqsdydzpv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_map<long, int> m;\n    for(int i=0;i<arr.size();i++)\n    {\n        m[arr[i]]++;\n    }\n    for(auto i:m)\n    {\n        if(i.second>1)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmplz_ra14p: /tmp/tmplz_ra14p.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpr_1e30jq: /tmp/tmpr_1e30jq.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmp7wg073g7: /tmp/tmp7wg073g7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpymn7ivfc: /tmp/tmpymn7ivfc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpm05amvdb: /tmp/tmpm05amvdb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpzxby8rib: /tmp/tmpzxby8rib.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpthnf9nta: /tmp/tmpthnf9nta.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpoeszgorv: /tmp/tmpoeszgorv.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            return true;\n        }\n        count = 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpai9t5l8r: /tmp/tmpai9t5l8r.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1) return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++){\n        if(arr[i] == arr[i+1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpi4vj_7lo: /tmp/tmpi4vj_7lo.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpqsdydzpv: /tmp/tmpqsdydzpv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    //write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmp2t4_6cun: /tmp/tmp2t4_6cun.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if (n == 1) {\n        return true;\n    }\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpme0l1610: /tmp/tmpme0l1610.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpdeh9p53g: /tmp/tmpdeh9p53g.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmprfo6t7gr: /tmp/tmprfo6t7gr.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            if(arr[i]==arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count==n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpymn7ivfc: /tmp/tmpymn7ivfc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpv0qv2ii6: /tmp/tmpv0qv2ii6.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    if(n == 0) {\n        return false;\n    }\n    int count = 1;\n    for(int i = 1; i < n; i++) {\n        if(arr[i] == arr[i - 1]) {\n            count++;\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    if(n == 0){\n        return false;\n    }\n    if(n == 1){\n        return true;\n    }\n    sort(arr.begin(), arr.end());\n    for(long i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123182,
      "stdout": "",
      "stderr": "tmpgmdmv1z6: /tmp/tmpgmdmv1z6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == arr.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmpz0awqrpf: /tmp/tmpz0awqrpf.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i : arr){\n        s.insert(i);\n    }\n    if(s.size() == 1){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<arr.size();i++)\n    {\n        s.insert(arr[i]);\n    }\n    if(s.size()==1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++) {\n        if(arr[i] == arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpm1djghk7: /tmp/tmpm1djghk7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    if(arr.size()==1)\n        return true;\n    else{\n        sort(arr.begin(),arr.end());\n        for(int i=0;i<arr.size()-1;i++){\n            if(arr[i]==arr[i+1])\n                return false;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmp6ublsod3: /tmp/tmp6ublsod3.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1)\n        return true;\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] == arr[i + 1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmpmklux11o: /tmp/tmpmklux11o.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    int i = 0;\n    int j = 0;\n    for(i = 0; i < n; i++) {\n        for(j = 0; j < n; j++) {\n            if(i != j) {\n                if(arr[i] == arr[j]) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmpw_ld0ydp: /tmp/tmpw_ld0ydp.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] == arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmp3hwmdn77: /tmp/tmp3hwmdn77.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n\t// Write your code here\n\tstd::sort(arr.begin(), arr.end());\n\tfor (int i = 0; i < arr.size() - 1; i++) {\n\t\tif (arr[i] == arr[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmp2vo8nzjp: /tmp/tmp2vo8nzjp.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpk_fkimwq: /tmp/tmpk_fkimwq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_map<long,int> m;\n    for(auto i:arr)\n    {\n        m[i]++;\n    }\n    for(auto i:m)\n    {\n        if(i.second>1)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmpvwfwa6kk: /tmp/tmpvwfwa6kk.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i:arr){\n        s.insert(i);\n    }\n    if(s.size()==1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::unordered_set<long> s;\n    for(auto i:arr)\n    {\n        s.insert(i);\n    }\n    if(s.size()==1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    if(n == 1){\n        return true;\n    }\n    sort(arr.begin(), arr.end());\n    for(int i = 0; i < n-1; i++){\n        if(arr[i] == arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmpch61zbzn: /tmp/tmpch61zbzn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(), arr.end());\n    for(int i=0; i<arr.size()-1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpgbz37rnm: /tmp/tmpgbz37rnm.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmpz37p_r_o: /tmp/tmpz37p_r_o.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] == arr[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123178,
      "stdout": "",
      "stderr": "tmpex4xxd5r: /tmp/tmpex4xxd5r.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n=arr.size();\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmptk44k45l: /tmp/tmptk44k45l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n    }\n    if(count == n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "tmppc016g73: /tmp/tmppc016g73.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size() - 1; i++) {\n        if(arr[i] == arr[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123180,
      "stdout": "",
      "stderr": "tmpdeh9p53g: /tmp/tmpdeh9p53g.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    //write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmpeg271jrq: /tmp/tmpeg271jrq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n    }\n    if(count == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "tmpqsdydzpv: /tmp/tmpqsdydzpv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size()-1;i++)\n    {\n        if(arr[i]==arr[i+1])\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmp1xws22i7: /tmp/tmp1xws22i7.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nbool unique_Element(std::vector<long> arr) {\n    // Write your code here\n    int n = arr.size();\n    int count = 0;\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n        {\n            if(arr[i] == arr[j])\n            {\n                count++;\n            }\n        }\n    }\n    if(count == n)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = unique_Element;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (false));\n}\n",
      "timestamp": 1666123184,
      "stdout": "",
      "stderr": "tmpvkm9zyx6: /tmp/tmpvkm9zyx6.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}