{
  "name": "mbpp_95_Find_Min_Length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the length of the smallest list in a list of lists.\nlong Find_Min_Length(std::vector<std::vector<long>> lst) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = Find_Min_Length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2})}))) == (1));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4})}))) == (2));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)3, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4, (long)4, (long)4})}))) == (3));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long min_length = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (auto i : lst) {\n        if (min_length > i.size()) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "\tlong min = lst[0].size();\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min) {\n\t\t\tmin = lst[i].size();\n\t\t}\n\t}\n\treturn min;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i=1; i<lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (std::vector<long> l : lst) {\n        if (l.size() < min_length) {\n            min_length = l.size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i=1; i<lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min_len = lst[0].size();\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "\tlong min_len = INT_MAX;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_len) {\n\t\t\tmin_len = lst[i].size();\n\t\t}\n\t}\n\treturn min_len;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for (auto l : lst) {\n        if (l.size() < min_length) {\n            min_length = l.size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(auto i : lst) {\n        if(i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for(long i=0; i<lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (auto v : lst) {\n        if (v.size() < min_length) {\n            min_length = v.size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min_len = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "\tlong min_len = lst[0].size();\n\tfor(long i = 1; i < lst.size(); i++) {\n\t\tif(lst[i].size() < min_len) {\n\t\t\tmin_len = lst[i].size();\n\t\t}\n\t}\n\treturn min_len;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min_len = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min = lst[0].size();\n    for(int i = 0; i < lst.size(); i++) {\n        if(min > lst[i].size()) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_len = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_len) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "\tlong min_length = lst[0].size();\n\tfor (long i = 1; i < lst.size(); i++) {\n\t\tif (min_length > lst[i].size()) {\n\t\t\tmin_length = lst[i].size();\n\t\t}\n\t}\n\treturn min_length;",
    "    long min_length = INT_MAX;\n    for (auto l : lst) {\n        if (l.size() < min_length) {\n            min_length = l.size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (auto i : lst) {\n        if (min_len > i.size()) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(min_length > lst[i].size()) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i=0;i<lst.size();i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_len) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_len = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(min_len > lst[i].size()) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    // Write your code here\n    long min_len = INT_MAX;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i].size() < min_len){\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_len = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (std::vector<long> v : lst) {\n        if (v.size() < min_len) {\n            min_len = v.size();\n        }\n    }\n    return min_len;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (min_length > lst[i].size()) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_len) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for(long i=1; i<lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (std::vector<long> l : lst) {\n        if (l.size() < min_length) {\n            min_length = l.size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i=1; i<lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = lst[0].size();\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(auto i = lst.begin(); i != lst.end(); i++) {\n        if(i->size() < min) {\n            min = i->size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    // Write your code here\n    long min = lst[0].size();\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_len = INT_MAX;\n    for (auto i : lst) {\n        if (i.size() < min_len) {\n            min_len = i.size();\n        }\n    }\n    return min_len;",
    "    long min_len = INT_MAX;\n    for(long i=0; i<lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_len = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "\tlong min_length = lst[0].size();\n\tfor (long i = 1; i < lst.size(); i++) {\n\t\tif (lst[i].size() < min_length) {\n\t\t\tmin_length = lst[i].size();\n\t\t}\n\t}\n\treturn min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min = lst[0].size();\n    for(long i=0;i<lst.size();i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (min > lst[i].size()) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min = INT_MAX;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_len = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_len = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_len) {\n            min_len = lst[i].size();\n        }\n    }\n    return min_len;",
    "    long min_length = INT_MAX;\n    for(auto i : lst) {\n        if(i.size() < min_length) {\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min = lst[0].size();\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (auto i = lst.begin(); i != lst.end(); i++) {\n        if (min_length > i->size()) {\n            min_length = i->size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for(long i = 0; i < lst.size(); i++) {\n        if(min_length > lst[i].size()) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i=0; i<lst.size(); i++){\n        if(lst[i].size() < min){\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_len = INT_MAX;\n    for (auto i : lst) {\n        min_len = std::min(min_len, (long)i.size());\n    }\n    return min_len;",
    "    // Write your code here\n    long min = lst[0].size();\n    for(long i=0;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(long i = 1; i < lst.size(); i++) {\n        if(lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    // Write your code here\n    long min_length = INT_MAX;\n    for(auto i : lst){\n        if(i.size() < min_length){\n            min_length = i.size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min) {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = INT_MAX;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    // Write your code here\n    long min = INT_MAX;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i].size()<min)\n        {\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min = lst[0].size();\n    for(int i=1;i<lst.size();i++){\n        if(lst[i].size()<min){\n            min = lst[i].size();\n        }\n    }\n    return min;",
    "    long min_length = lst[0].size();\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;",
    "    long min_length = INT_MAX;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() < min_length) {\n            min_length = lst[i].size();\n        }\n    }\n    return min_length;"
  ]
}