{
  "name": "mbpp_625_swap_List",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to interchange the first and last element in a given list.\nstd::vector<long> swap_List(std::vector<long> newList) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = swap_List;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)3, (long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)4}))) == (std::vector<long>({(long)4, (long)2, (long)3, (long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::iter_swap(it, it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> swappedList;\n    swappedList.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        swappedList.push_back(newList[i]);\n    }\n    swappedList.push_back(newList[0]);\n    return swappedList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    long temp = *it;\n    *it = newList.back();\n    newList.back() = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList2;\n    for (int i = 1; i < newList.size() - 1; i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    newList2.insert(newList2.begin(), newList[newList.size() - 1]);\n    return newList2;"
  ]
}