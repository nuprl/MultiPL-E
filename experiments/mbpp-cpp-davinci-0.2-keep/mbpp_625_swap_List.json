{
  "name": "mbpp_625_swap_List",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to interchange the first and last element in a given list.\nstd::vector<long> swap_List(std::vector<long> newList) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = swap_List;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)3, (long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)4}))) == (std::vector<long>({(long)4, (long)2, (long)3, (long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::iter_swap(it, it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> swappedList;\n    swappedList.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        swappedList.push_back(newList[i]);\n    }\n    swappedList.push_back(newList[0]);\n    return swappedList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    long temp = *it;\n    *it = newList.back();\n    newList.back() = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList2;\n    for (int i = 1; i < newList.size() - 1; i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    newList2.insert(newList2.begin(), newList[newList.size() - 1]);\n    return newList2;",
    "    std::vector<long> newList1;\n    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "\tlong temp = newList[0];\n\tnewList[0] = newList[newList.size() - 1];\n\tnewList[newList.size() - 1] = temp;\n\treturn newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    int size = newList.size();\n    long temp = newList[0];\n    newList[0] = newList[size-1];\n    newList[size-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator first = newList.begin();\n    std::vector<long>::iterator last = newList.end();\n    last--;\n    std::iter_swap(first, last);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long first = newList[0];\n    long last = newList[newList.size()-1];\n    newList[0] = last;\n    newList[newList.size()-1] = first;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for (int i = 1; i < newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "\tlong temp = newList[0];\n\tnewList[0] = newList[newList.size() - 1];\n\tnewList[newList.size() - 1] = temp;\n\treturn newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "\tstd::vector<long>::iterator it = newList.begin();\n\tlong temp = *it;\n\t*it = newList.back();\n\tnewList.back() = temp;\n\treturn newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "\tlong temp = newList[0];\n\tnewList[0] = newList[newList.size()-1];\n\tnewList[newList.size()-1] = temp;\n\treturn newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> result;\n    result.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        result.push_back(newList[i]);\n    }\n    result.push_back(newList[0]);\n    return result;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    long temp = *it;\n    newList.erase(it);\n    newList.push_back(temp);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long first = newList[0];\n    long last = newList[newList.size()-1];\n    newList[0] = last;\n    newList[newList.size()-1] = first;\n    return newList;",
    "\tstd::vector<long>::iterator it = newList.begin();\n\tstd::vector<long>::iterator it2 = newList.end();\n\tit2--;\n\tstd::swap(*it, *it2);\n\treturn newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long first = newList[0];\n    long last = newList[newList.size()-1];\n    newList[0] = last;\n    newList[newList.size()-1] = first;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end() - 1;\n    std::iter_swap(it, it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size() - 1]);\n    for (int i = 1; i < newList.size() - 1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i = 1; i < newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end()-1;\n    long temp = *it;\n    *it = *it2;\n    *it2 = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> resultList;\n    long firstElement = newList[0];\n    long lastElement = newList[newList.size()-1];\n    resultList.push_back(lastElement);\n    for (int i = 1; i < newList.size()-1; i++) {\n        resultList.push_back(newList[i]);\n    }\n    resultList.push_back(firstElement);\n    return resultList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    long temp = *it;\n    *it = *(newList.end() - 1);\n    *(newList.end() - 1) = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    int n = newList.size();\n    long temp = newList[0];\n    newList[0] = newList[n-1];\n    newList[n-1] = temp;\n    return newList;",
    "    std::vector<long> tempList;\n    tempList.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        tempList.push_back(newList[i]);\n    }\n    tempList.push_back(newList[0]);\n    return tempList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    long temp = *it;\n    *it = newList.back();\n    newList.back() = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "\tlong temp = newList[0];\n\tnewList[0] = newList[newList.size() - 1];\n\tnewList[newList.size() - 1] = temp;\n\treturn newList;",
    "    int size = newList.size();\n    long temp = newList[0];\n    newList[0] = newList[size-1];\n    newList[size-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end()-1;\n    long temp = *it;\n    *it = *it1;\n    *it1 = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end() - 1;\n    long temp = *it;\n    *it = *it2;\n    *it2 = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> tempList;\n    tempList.push_back(newList.back());\n    for(int i = 1; i < newList.size() - 1; i++) {\n        tempList.push_back(newList[i]);\n    }\n    tempList.push_back(newList[0]);\n    return tempList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    long temp = *it;\n    *it = *(it2-1);\n    *(it2-1) = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    int n = newList.size();\n    long temp = newList[0];\n    newList[0] = newList[n-1];\n    newList[n-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end() - 1;\n    std::swap(*it, *it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList.back());\n    newList2.insert(newList2.end(), newList.begin() + 1, newList.end() - 1);\n    newList2.push_back(newList.front());\n    return newList2;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    int size = newList.size();\n    newList1.push_back(newList[size-1]);\n    for(int i=1;i<size-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    long temp = *it;\n    *it = newList.back();\n    newList.back() = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end() - 1;\n    std::iter_swap(it, it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "\tstd::vector<long> newList1;\n\tnewList1.push_back(newList[newList.size()-1]);\n\tfor(int i = 1; i < newList.size()-1; i++) {\n\t\tnewList1.push_back(newList[i]);\n\t}\n\tnewList1.push_back(newList[0]);\n\treturn newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    it = newList.begin();\n    it2 = newList.end() - 1;\n    std::iter_swap(it, it2);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::iter_swap(it, it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList2;\n    int size = newList.size();\n    for(int i = 1; i < size - 1; i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    newList2.insert(newList2.begin(), newList[size - 1]);\n    return newList2;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++){\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    std::vector<long>::iterator it2;\n    it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;"
  ]
}