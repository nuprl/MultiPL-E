{
  "name": "mbpp_69_is_sublist",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a list contains the given sublist or not.\nbool is_sublist(std::vector<long> l, std::vector<long> s) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_sublist;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)4, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)1, (long)6}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    int i = 0, j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_rest(l.begin() + 1, l.end());\n        std::vector<long> s_rest(s.begin() + 1, s.end());\n        return is_sublist(l_rest, s_rest);\n    }\n    std::vector<long> l_rest(l.begin() + 1, l.end());\n    return is_sublist(l_rest, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "\tif (s.size() == 0) return true;\n\tif (l.size() == 0) return false;\n\tif (l.size() < s.size()) return false;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] == s[0]) {\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.size(); j++) {\n\t\t\t\tif (l[i + j] != s[j]) break;\n\t\t\t}\n\t\t\tif (j == s.size()) return true;\n\t\t}\n\t}\n\treturn false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long>::iterator it = l.begin();\n        std::vector<long>::iterator it2 = s.begin();\n        while (it2 != s.end()) {\n            if (*it != *it2) {\n                break;\n            }\n            it++;\n            it2++;\n        }\n        if (it2 == s.end()) return true;\n    }\n    std::vector<long>::iterator it = l.begin();\n    it++;\n    std::vector<long> l2(it, l.end());\n    return is_sublist(l2, s);",
    "    if(s.size() > l.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            bool is_sub = true;\n            for(int j = 0; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if(is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_rest(l.begin() + 1, l.end());\n        std::vector<long> s_rest(s.begin() + 1, s.end());\n        return is_sublist(l_rest, s_rest);\n    }\n    std::vector<long> l_rest(l.begin() + 1, l.end());\n    return is_sublist(l_rest, s);",
    "    int i = 0;\n    int j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size())\n        return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i + j] != s[j])\n                    break;\n            }\n            if (j == s.size())\n                return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    int l_size = l.size();\n    int s_size = s.size();\n    if(s_size > l_size) {\n        return false;\n    }\n    for(int i = 0; i < l_size; i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(; j < s_size; j++) {\n                if(l[i + j] != s[j]) {\n                    break;\n                }\n            }\n            if(j == s_size) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    int i = 0, j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "  if (s.size() > l.size()) {\n    return false;\n  }\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] == s[0]) {\n      int j = 0;\n      while (j < s.size() && l[i + j] == s[j]) {\n        j++;\n      }\n      if (j == s.size()) {\n        return true;\n      }\n    }\n  }\n  return false;",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    int i = 0;\n    int j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return j == s.size();",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if(s.size() > l.size())\n        return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i+j] == s[j])\n                j++;\n            if(j == s.size())\n                return true;\n        }\n    }\n    return false;",
    "    if(s.size() > l.size())\n        return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i+j] == s[j])\n                j++;\n            if(j == s.size())\n                return true;\n        }\n    }\n    return false;",
    "    // Implement this function\n    int i=0,j=0;\n    while(i<l.size() && j<s.size()){\n        if(l[i]==s[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==s.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n\n    for (int i = 0; i < l.size(); ++i) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); ++j) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    int n = l.size();\n    int m = s.size();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == m) {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    int l_size = l.size();\n    int s_size = s.size();\n    if(l_size < s_size) {\n        return false;\n    }\n    for(int i = 0; i < l_size; i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(; j < s_size; j++) {\n                if(l[i+j] != s[j]) {\n                    break;\n                }\n            }\n            if(j == s_size) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    }\n    return false;",
    "    int i = 0;\n    int j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return j == s.size();",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n            if (is_sublist) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size()) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if(s.size() > l.size()) {\n        return false;\n    }\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if(j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> sub_l(l.begin() + 1, l.end());\n        std::vector<long> sub_s(s.begin() + 1, s.end());\n        return is_sublist(sub_l, sub_s);\n    }\n    std::vector<long> sub_l(l.begin() + 1, l.end());\n    return is_sublist(sub_l, s);",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool match = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) return true;\n        }\n    }\n    return false;",
    "    // Write your code here\n    int i=0,j=0;\n    while(i<l.size() && j<s.size()){\n        if(l[i]==s[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==s.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() > l.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> sub_l(l.begin() + 1, l.end());\n        std::vector<long> sub_s(s.begin() + 1, s.end());\n        return is_sublist(sub_l, sub_s);\n    }\n    std::vector<long> sub_l(l.begin() + 1, l.end());\n    return is_sublist(sub_l, s);",
    "    if (s.size() == 0) {\n        return true;\n    }\n    if (l.size() == 0) {\n        return false;\n    }\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    if (it != l.end()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_rest(l.begin() + 1, l.end());\n        std::vector<long> s_rest(s.begin() + 1, s.end());\n        return is_sublist(l_rest, s_rest);\n    }\n    std::vector<long> l_rest(l.begin() + 1, l.end());\n    return is_sublist(l_rest, s);",
    "    // Write your code here\n    // Return true or false.\n    int i = 0;\n    int j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin() + 1, l.end());\n    return is_sublist(l_new, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool match = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) return true;\n        }\n    }\n    return false;",
    "    if(s.size() > l.size()) {\n        return false;\n    }\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if(j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin()+1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin()+1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin()+1, l.end());\n    return is_sublist(l_, s);",
    "\tif (s.size() > l.size()) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] == s[0]) {\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.size(); j++) {\n\t\t\t\tif (l[i + j] != s[j]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (j == s.size()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = l;\n        l_.erase(l_.begin());\n        std::vector<long> s_ = s;\n        s_.erase(s_.begin());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = l;\n    l_.erase(l_.begin());\n    return is_sublist(l_, s);",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            bool is_sub = true;\n            for(int j = 0; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if(is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    // Implement this function\n    if(l.size() < s.size())\n        return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if(j == s.size())\n                return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n\n    auto s_it = s.begin();\n    for (auto l_it = l.begin(); l_it != l.end(); l_it++) {\n        if (*l_it == *s_it) {\n            s_it++;\n            if (s_it == s.end()) return true;\n        } else {\n            s_it = s.begin();\n        }\n    }\n    return false;",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return j == s.size();",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() > l.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        bool match = true;\n        for (int j = 0; j < s.size(); j++) {\n            if (l[i + j] != s[j]) {\n                match = false;\n                break;\n            }\n        }\n        if (match) return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "\tif (s.size() == 0) return true;\n\tif (l.size() == 0) return false;\n\tif (l.size() < s.size()) return false;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] == s[0]) {\n\t\t\tint j = 0;\n\t\t\twhile (j < s.size() && l[i + j] == s[j]) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == s.size()) return true;\n\t\t}\n\t}\n\treturn false;",
    "    if(s.size() > l.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(; j < s.size(); j++) {\n                if(l[i + j] != s[j]) break;\n            }\n            if(j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    // Write your code here\n    int count=0;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]==s[count])\n        {\n            count++;\n        }\n        else\n        {\n            count=0;\n        }\n        if(count==s.size())\n        {\n            return true;\n        }\n    }\n    return false;",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            bool flag = true;\n            for(int j = 1; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag) return true;\n        }\n    }\n    return false;",
    "    int n = l.size();\n    int m = s.size();\n    for (int i = 0; i < n; i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < m && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == m) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (l.size() < s.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist_found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sublist_found = false;\n                    break;\n                }\n            }\n            if (is_sublist_found) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    int i = 0, j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            j++;\n        } else {\n            j = 0;\n        }\n        i++;\n    }\n    return j == s.size();",
    "    // TODO: Write - Your - Code\n    int i=0;\n    int j=0;\n    int n=l.size();\n    int m=s.size();\n    while(i<n && j<m){\n        if(l[i]==s[j]){\n            i++;\n            j++;\n        }\n        else{\n            i=i-j+1;\n            j=0;\n        }\n    }\n    if(j==m){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if(s.size() > l.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(; j < s.size(); j++) {\n                if(l[i+j] != s[j]) break;\n            }\n            if(j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) j++;\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    int i = 0;\n    int j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return j == s.size();",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    if (l.size() < s.size()) return false;\n    auto l_it = l.begin();\n    auto s_it = s.begin();\n    while (l_it != l.end()) {\n        if (*l_it == *s_it) {\n            ++l_it;\n            ++s_it;\n            if (s_it == s.end()) return true;\n        } else {\n            ++l_it;\n            s_it = s.begin();\n        }\n    }\n    return false;",
    "    if(s.size() > l.size()) {\n        return false;\n    }\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if(j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_copy(l.begin() + 1, l.end());\n        std::vector<long> s_copy(s.begin() + 1, s.end());\n        return is_sublist(l_copy, s_copy);\n    } else {\n        std::vector<long> l_copy(l.begin() + 1, l.end());\n        return is_sublist(l_copy, s);\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            bool flag = true;\n            for(int j = 1; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag) return true;\n        }\n    }\n    return false;",
    "    // TODO: Write your code here\n    if(s.size()==0) return true;\n    if(l.size()==0) return false;\n    int i=0;\n    int j=0;\n    while(i<l.size()){\n        if(l[i]==s[j]){\n            i++;\n            j++;\n        }else{\n            i++;\n            j=0;\n        }\n        if(j==s.size()){\n            return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_rest(l.begin() + 1, l.end());\n        std::vector<long> s_rest(s.begin() + 1, s.end());\n        return is_sublist(l_rest, s_rest);\n    }\n    std::vector<long> l_rest(l.begin() + 1, l.end());\n    return is_sublist(l_rest, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> sub_l(l.begin() + 1, l.end());\n        std::vector<long> sub_s(s.begin() + 1, s.end());\n        return is_sublist(sub_l, sub_s);\n    }\n    std::vector<long> sub_l(l.begin() + 1, l.end());\n    return is_sublist(sub_l, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    int i = 0;\n    int j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return j == s.size();",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin() + 1, l.end());\n    return is_sublist(l_new, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin() + 1, l.end());\n    return is_sublist(l_new, s);",
    "    if(s.size() > l.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            bool found = true;\n            for(int j = 0; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if(found) return true;\n        }\n    }\n    return false;",
    "    int i = 0, j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if(s.size() > l.size()) {\n        return false;\n    }\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if(j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        bool is_sub = true;\n        for (int j = 0; j < s.size(); j++) {\n            if (l[i + j] != s[j]) {\n                is_sub = false;\n                break;\n            }\n        }\n        if (is_sub) return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) {\n        return true;\n    }\n    if (l.size() == 0) {\n        return false;\n    }\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    if(it == l.end()) return false;\n    return true;",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    }\n    return false;",
    "    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    } else {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        return is_sublist(l_, s);\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 1;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            s_iter++;\n            if (s_iter == s.end()) return true;\n        } else {\n            s_iter = s.begin();\n        }\n        l_iter++;\n    }\n    return false;",
    "    if (s.size() == 0) {\n        return true;\n    }\n    if (l.size() == 0) {\n        return false;\n    }\n    if (l.size() < s.size()) {\n        return false;\n    }\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin() + 1, l.end());\n    return is_sublist(l_new, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    // Write your code here\n    if(s.size() > l.size())\n        return false;\n    int i = 0;\n    int j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n            j = 0;\n        }\n    }\n    if(j == s.size())\n        return true;\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (l.size() < s.size()) {\n        return false;\n    }\n    if (l.size() == s.size()) {\n        return l == s;\n    }\n    for (int i = 0; i < l.size() - s.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n            if (is_sublist) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if(s.size() > l.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(j = 0; j < s.size(); j++) {\n                if(l[i+j] != s[j]) break;\n            }\n            if(j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto s_it = s.begin();\n    for (auto l_it = l.begin(); l_it != l.end(); ++l_it) {\n        if (*l_it == *s_it) {\n            ++s_it;\n            if (s_it == s.end()) return true;\n        } else {\n            s_it = s.begin();\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    int i = 0;\n    int j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    // your code here\n    if(s.size()==0)\n        return true;\n    if(l.size()==0)\n        return false;\n    if(l.size()<s.size())\n        return false;\n    int i=0,j=0;\n    while(i<l.size() && j<s.size()){\n        if(l[i]==s[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==s.size())\n        return true;\n    return false;",
    "    int i,j;\n    for(i=0;i<l.size();i++)\n    {\n        for(j=0;j<s.size();j++)\n        {\n            if(l[i+j]!=s[j])\n            {\n                break;\n            }\n        }\n        if(j==s.size())\n        {\n            return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> sub_l(l.begin() + 1, l.end());\n        std::vector<long> sub_s(s.begin() + 1, s.end());\n        return is_sublist(sub_l, sub_s);\n    }\n    std::vector<long> sub_l(l.begin() + 1, l.end());\n    return is_sublist(sub_l, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && i + j < l.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    // Write your code here\n    // Return true or false.\n    int n = l.size();\n    int m = s.size();\n    for(int i=0;i<=n-m;i++){\n        int j;\n        for(j=0;j<m;j++){\n            if(l[i+j]!=s[j]){\n                break;\n            }\n        }\n        if(j==m){\n            return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "  if (s.size() > l.size())\n    return false;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] == s[0]) {\n      int j = 0;\n      while (j < s.size() && l[i + j] == s[j]) {\n        j++;\n      }\n      if (j == s.size())\n        return true;\n    }\n  }\n  return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 1;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n\n    auto first = s.begin();\n    auto last = s.end();\n\n    auto pos = std::search(l.begin(), l.end(), first, last);\n    return (pos != l.end());",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    auto first = s.begin();\n    auto last = s.end();\n    auto subpos = std::search(l.begin(), l.end(), first, last);\n    return (subpos != l.end());",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 1;\n            while (j < s.size() && l[i+j] == s[j]) j++;\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin() + 1, l.end());\n    return is_sublist(l_new, s);",
    "    if (s.size() == 0) {\n        return true;\n    }\n    if (l.size() == 0) {\n        return false;\n    }\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin() + 1, l.end());\n    return is_sublist(l_new, s);",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    if (l.size() < s.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        bool is_sublist = true;\n        for (int j = 0; j < s.size(); j++) {\n            if (l[i + j] != s[j]) {\n                is_sublist = false;\n                break;\n            }\n        }\n        if (is_sublist) {\n            return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n                if (j == s.size() - 1) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if(s.size() > l.size()) return false;\n    if(s.size() == 0) return true;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(; j < s.size(); j++) {\n                if(l[i+j] != s[j]) break;\n            }\n            if(j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            int j = 1;\n            for (; j < s.size(); j++) {\n                if (l[i + j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    // Write your code here\n    // Return true or false.\n    int i=0,j=0;\n    int n=l.size();\n    int m=s.size();\n    while(i<n && j<m)\n    {\n        if(l[i]==s[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    if(j==m)\n    {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (l.size() < s.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    // TODO: Write - Your - Code\n    int i=0;\n    int j=0;\n    int n=l.size();\n    int m=s.size();\n    while(i<n && j<m){\n        if(l[i]==s[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==m){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) j++;\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n                if (j == s.size() - 1) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    break;\n                }\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (l.size() < s.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 1;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (i + j >= l.size()) {\n                    flag = false;\n                    break;\n                }\n                if (l[i + j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && i < l.size() && l[i] == s[j]) {\n                i++;\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    int i = 0, j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    // Write your code here\n    // Return true or false.\n    if(s.size()==0)\n        return true;\n    if(l.size()==0)\n        return false;\n    if(s.size()>l.size())\n        return false;\n    int i=0,j=0;\n    while(i<l.size() && j<s.size()){\n        if(l[i]==s[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==s.size())\n        return true;\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l[0] == s[0]) {\n        std::vector<long> l1(l.begin()+1, l.end());\n        std::vector<long> s1(s.begin()+1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin()+1, l.end());\n    return is_sublist(l1, s);",
    "    // your code here\n    int i,j;\n    for(i=0;i<l.size();i++)\n    {\n        if(l[i]==s[0])\n        {\n            for(j=0;j<s.size();j++)\n            {\n                if(l[i+j]!=s[j])\n                {\n                    break;\n                }\n            }\n            if(j==s.size())\n            {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    int i = 0, j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    }\n    return false;",
    "    int i = 0, j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    }\n    return false;",
    "    // Your code here\n    int i,j;\n    for(i=0;i<l.size();i++)\n    {\n        if(l[i]==s[0])\n        {\n            for(j=0;j<s.size();j++)\n            {\n                if(l[i+j]!=s[j])\n                {\n                    break;\n                }\n            }\n            if(j==s.size())\n            {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        bool is_match = true;\n        for (int j = 0; j < s.size(); j++) {\n            if (l[i + j] != s[j]) {\n                is_match = false;\n                break;\n            }\n        }\n        if (is_match) return true;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    if(l[0] == s[0]) {\n        std::vector<long> l_new(l.begin()+1, l.end());\n        std::vector<long> s_new(s.begin()+1, s.end());\n        return is_sublist(l_new, s_new);\n    } else {\n        std::vector<long> l_new(l.begin()+1, l.end());\n        return is_sublist(l_new, s);\n    }",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    for(int i=0; i<l.size(); i++) {\n        if(l[i] == s[0]) {\n            bool flag = true;\n            for(int j=0; j<s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;"
  ]
}