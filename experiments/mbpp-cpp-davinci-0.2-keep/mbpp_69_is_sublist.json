{
  "name": "mbpp_69_is_sublist",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a list contains the given sublist or not.\nbool is_sublist(std::vector<long> l, std::vector<long> s) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_sublist;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)4, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)1, (long)6}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    int i = 0, j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_rest(l.begin() + 1, l.end());\n        std::vector<long> s_rest(s.begin() + 1, s.end());\n        return is_sublist(l_rest, s_rest);\n    }\n    std::vector<long> l_rest(l.begin() + 1, l.end());\n    return is_sublist(l_rest, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "\tif (s.size() == 0) return true;\n\tif (l.size() == 0) return false;\n\tif (l.size() < s.size()) return false;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] == s[0]) {\n\t\t\tint j = 0;\n\t\t\tfor (; j < s.size(); j++) {\n\t\t\t\tif (l[i + j] != s[j]) break;\n\t\t\t}\n\t\t\tif (j == s.size()) return true;\n\t\t}\n\t}\n\treturn false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long>::iterator it = l.begin();\n        std::vector<long>::iterator it2 = s.begin();\n        while (it2 != s.end()) {\n            if (*it != *it2) {\n                break;\n            }\n            it++;\n            it2++;\n        }\n        if (it2 == s.end()) return true;\n    }\n    std::vector<long>::iterator it = l.begin();\n    it++;\n    std::vector<long> l2(it, l.end());\n    return is_sublist(l2, s);",
    "    if(s.size() > l.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            bool is_sub = true;\n            for(int j = 0; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if(is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_rest(l.begin() + 1, l.end());\n        std::vector<long> s_rest(s.begin() + 1, s.end());\n        return is_sublist(l_rest, s_rest);\n    }\n    std::vector<long> l_rest(l.begin() + 1, l.end());\n    return is_sublist(l_rest, s);",
    "    int i = 0;\n    int j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size())\n        return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i + j] != s[j])\n                    break;\n            }\n            if (j == s.size())\n                return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    int l_size = l.size();\n    int s_size = s.size();\n    if(s_size > l_size) {\n        return false;\n    }\n    for(int i = 0; i < l_size; i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(; j < s_size; j++) {\n                if(l[i + j] != s[j]) {\n                    break;\n                }\n            }\n            if(j == s_size) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    int i = 0, j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if(j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "  if (s.size() > l.size()) {\n    return false;\n  }\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] == s[0]) {\n      int j = 0;\n      while (j < s.size() && l[i + j] == s[j]) {\n        j++;\n      }\n      if (j == s.size()) {\n        return true;\n      }\n    }\n  }\n  return false;"
  ]
}