{
  "name": "mbpp_785_tuple_str_int",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert tuple string to integer tuple.\nlong tuple_str_int(std::string test_str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = tuple_str_int;\n    assert(candidate((\"(7, 8, 9)\")) == std::make_tuple(7, 8, 9));\n    assert(candidate((\"(1, 2, 3)\")) == std::make_tuple(1, 2, 3));\n    assert(candidate((\"(4, 5, 6)\")) == std::make_tuple(4, 5, 6));\n    assert(candidate((\"(7, 81, 19)\")) == std::make_tuple(7, 81, 19));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while(std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < v.size(); i++) {\n        result = result * 100 + v[i];\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx = 0;\n    int yyy",
    "    long result = 0;\n    int len = test_str.length();\n    for (int i = 0; i < len; i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    // Write your code here\n    long int result = 0;\n    int i = 0;\n    while(i < test_str.length()){\n        if(test_str[i] == '('){\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')'){\n            i++;\n            continue;\n        }\n        if(test_str[i] == ','){\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string item;\n    std::vector<int> elems;\n    while (std::getline(ss, item, ',')) {\n        elems.push_back(std::stoi(item));\n    }\n    long sum = 0;\n    for (int i = 0; i < elems.size(); i++) {\n        sum += elems[i] * pow(10, i);\n    }\n    return sum;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != ',') {\n        result = result * 10 + test_str[i] - '0';\n        i++;\n    }\n    return result;",
    "    int i = 0;\n    long result = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    int i = 0;\n    int len = test_str.length();\n    long result = 0;\n    while(i < len) {\n        if(test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result*10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            result = result * 100;\n            i++;\n        }\n        else {\n            result = result + (test_str[i] - '0');\n            i++;\n        }\n    }\n    return result;"
  ]
}