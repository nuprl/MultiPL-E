{
  "name": "mbpp_785_tuple_str_int",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert tuple string to integer tuple.\nlong tuple_str_int(std::string test_str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = tuple_str_int;\n    assert(candidate((\"(7, 8, 9)\")) == std::make_tuple(7, 8, 9));\n    assert(candidate((\"(1, 2, 3)\")) == std::make_tuple(1, 2, 3));\n    assert(candidate((\"(4, 5, 6)\")) == std::make_tuple(4, 5, 6));\n    assert(candidate((\"(7, 81, 19)\")) == std::make_tuple(7, 81, 19));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while(std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < v.size(); i++) {\n        result = result * 100 + v[i];\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx = 0;\n    int yyy",
    "    long result = 0;\n    int len = test_str.length();\n    for (int i = 0; i < len; i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    // Write your code here\n    long int result = 0;\n    int i = 0;\n    while(i < test_str.length()){\n        if(test_str[i] == '('){\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')'){\n            i++;\n            continue;\n        }\n        if(test_str[i] == ','){\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string item;\n    std::vector<int> elems;\n    while (std::getline(ss, item, ',')) {\n        elems.push_back(std::stoi(item));\n    }\n    long sum = 0;\n    for (int i = 0; i < elems.size(); i++) {\n        sum += elems[i] * pow(10, i);\n    }\n    return sum;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != ',') {\n        result = result * 10 + test_str[i] - '0';\n        i++;\n    }\n    return result;",
    "    int i = 0;\n    long result = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    int i = 0;\n    int len = test_str.length();\n    long result = 0;\n    while(i < len) {\n        if(test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result*10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            result = result * 100;\n            i++;\n        }\n        else {\n            result = result + (test_str[i] - '0');\n            i++;\n        }\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string item;\n    std::vector<int> elems;\n    while (std::getline(ss, item, ',')) {\n        elems.push_back(std::stoi(item));\n    }\n    long res = 0;\n    for (int i = 0; i < elems.size(); i++) {\n        res = res * 10 + elems[i];\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    long result = 0;\n    int len = test_str.length();\n    for (int i = 0; i < len; i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long num = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        num = num * 10 + test_str[i] - '0';\n        i++;\n    }\n    return num;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string token;\n    std::vector<std::string> tokens;\n    while(std::getline(ss, token, ',')) {\n        tokens.push_back(token);\n    }\n    long result = 0;\n    for(int i = 0; i < tokens.size(); i++) {\n        result = result * 10 + std::stoi(tokens[i]);\n    }\n    return result;",
    "    // Write your code here\n    long num = 0;\n    int i = 0;\n    while(test_str[i] != ',') {\n        num = num*10 + (test_str[i] - '0');\n        i++;\n    }\n    return num;",
    "  int i = 0;\n  long result = 0;\n  while(test_str[i] != '\\0') {\n    if(test_str[i] == ',') {\n      result = result * 10;\n    }\n    else {\n      result = result * 10 + (test_str[i] - '0');\n    }\n    i++;\n  }\n  return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    int i = 0;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (temp == \",\") {\n            continue;\n        }\n        if (std::stringstream(temp) >> found) {\n            i++;\n        }\n        temp = \"\";\n    }\n    return i;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    int i = 0;\n    int len = test_str.length();\n    long result = 0;\n    while(i < len) {\n        if(test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> tuple_str;\n    while(std::getline(ss, temp, ',')) {\n        tuple_str.push_back(temp);\n    }\n    long tuple_int = 0;\n    for(int i = 0; i < tuple_str.size(); i++) {\n        tuple_int = tuple_int * 10 + std::stoi(tuple_str[i]);\n    }\n    return tuple_int;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + test_str[i] - '0';\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result = result * 10 + test_int[i];\n    }\n    return result;",
    "    // Write your code here\n    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    int i = 0;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (temp == \",\") {\n            continue;\n        }\n        if (i == 0) {\n            found = std::stoi(temp);\n            i++;\n        } else {\n            found = found * 10 + std::stoi(temp);\n        }\n    }\n    return found;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long num;\n    ss >> num;\n    return num;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    int i = 0;\n    long result = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long test_long = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        test_long = test_long * 100 + test_int[i];\n    }\n    return test_long;",
    "    // Write your code here\n    long result = 0;\n    int i = 0;\n    while(test_str[i] != ',') {\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::vector<int> v;\n    std::stringstream ss(test_str);\n    int i;\n    while (ss >> i) {\n        v.push_back(i);\n        if (ss.peek() == ',')\n            ss.ignore();\n    }\n    long long int sum = 0;\n    for (int i = 0; i < v.size(); i++) {\n        sum = sum * 10 + v[i];\n    }\n    return sum;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::vector<std::string> test_str_vec;\n    std::stringstream ss(test_str);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        test_str_vec.push_back(temp);\n    }\n    long result = 0;\n    for(auto i : test_str_vec) {\n        result = result * 10 + std::stoi(i);\n    }\n    return result;",
    "    std::vector<int> v;\n    std::stringstream ss(test_str);\n    int i;\n    while (ss >> i) {\n        v.push_back(i);\n        if (ss.peek() == ',')\n            ss.ignore();\n    }\n    return v;",
    "    long int_tuple = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        int_tuple = int_tuple * 10 + test_str[i] - '0';\n    }\n    return int_tuple;",
    "    std::stringstream ss;\n    ss << test_str;\n    long num;\n    ss >> num;\n    return num;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long test_int_tuple = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        test_int_tuple += test_int[i] * pow(10, i);\n    }\n    return test_int_tuple;",
    "    int i = 0;\n    long result = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    std::stringstream ss;\n    ss << test_str;\n    long x;\n    ss >> x;\n    return x;",
    "    std::stringstream ss(test_str);\n    std::string token;\n    std::vector<int> v;\n    while(std::getline(ss, token, ',')) {\n        v.push_back(std::stoi(token));\n    }\n    long result = 0;\n    for(int i = 0; i < v.size(); i++) {\n        result += v[i] * pow(10, i);\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] == ',') {\n            result = result * 100;\n        }\n        else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::vector<std::string> test_str_vec;\n    std::stringstream ss(test_str);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        test_str_vec.push_back(temp);\n    }\n    long result = 0;\n    for(int i = 0; i < test_str_vec.size(); i++) {\n        result += std::stol(test_str_vec[i]);\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> temp_int;\n    while(std::getline(ss, temp, ',')) {\n        temp_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < temp_int.size(); i++) {\n        result += temp_int[i] * pow(10, temp_int.size() - i - 1);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    long int result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while (std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for (int i = 0; i < test_int.size(); i++) {\n        result = result * 100 + test_int[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long int_tuple = 0;\n    int i = 0;\n    while(i < test_str.length()) {\n        if(test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        int_tuple = int_tuple * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return int_tuple;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    // Write your code here\n    int i = 0;\n    long sum = 0;\n    while(test_str[i] != ')') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        sum = sum * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return sum;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            result = result * 10;\n        } else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_vec;\n    while(std::getline(ss, temp, ',')) {\n        test_vec.push_back(std::stoi(temp));\n    }\n    long test_int = 0;\n    for(int i = 0; i < test_vec.size(); i++) {\n        test_int = test_int * 10 + test_vec[i];\n    }\n    return test_int;",
    "    std::vector<int> test_vec;\n    std::stringstream test_ss(test_str);\n    int i;\n    while (test_ss >> i) {\n        test_vec.push_back(i);\n        if (test_ss.peek() == ',')\n            test_ss.ignore();\n    }\n    long test_int = 0;\n    for (int i = 0; i < test_vec.size(); i++) {\n        test_int += test_vec[i] * pow(10, test_vec.size() - i - 1);\n    }\n    return test_int;",
    "    // write your code here\n    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long sum = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        sum += (test_str[i] - '0') * pow(10, test_str.size() - i - 1);\n    }\n    return sum;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    long found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \" << temp << std::endl;\n        temp = \"\";\n    }\n    return found;",
    "\tstd::stringstream ss;\n\tss << test_str;\n\tstd::string temp;\n\tint found;\n\twhile (!ss.eof()) {\n\t\tss >> temp;\n\t\tif (std::stringstream(temp) >> found)\n\t\t\tstd::cout << found << \" \";\n\t\ttemp = \"\";\n\t}\n\treturn 0;",
    "    // Write your code here\n    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result*10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    // Write your code here\n    long result = 0;\n    int i = 0;\n    while (test_str[i] != '(') {\n        i++;\n    }\n    i++;\n    while (test_str[i] != ')') {\n        if (test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    long int_tuple = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        int_tuple = int_tuple * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return int_tuple;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long num;\n    ss >> num;\n    return num;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while (std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for (int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, i);\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        result = result*10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    long int result = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    long int_tuple = 0;\n    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            int_tuple = int_tuple * 10 + found;\n        temp = \"\";\n    }\n    return int_tuple;",
    "    std::stringstream ss(test_str);\n    std::string token;\n    long result = 0;\n    while (std::getline(ss, token, ',')) {\n        result = result * 100 + std::stol(token);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long x;\n    ss >> x;\n    return x;",
    "    // Your code goes here\n    int i=0;\n    long sum=0;\n    while(test_str[i]!='\\0')\n    {\n        if(test_str[i]>='0' && test_str[i]<='9')\n        {\n            sum=sum*10+test_str[i]-'0';\n        }\n        i++;\n    }\n    return sum;",
    "    std::vector<int> v;\n    std::stringstream ss(test_str);\n    int i;\n    while (ss >> i) {\n        v.push_back(i);\n        if (ss.peek() == ',')\n            ss.ignore();\n    }\n    long result = 0;\n    for(int i=0;i<v.size();i++) {\n        result = result*10 + v[i];\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    int i;\n    ss >> i;\n    return i;",
    "    std::stringstream ss(test_str);\n    std::string token;\n    std::vector<int> v;\n    while(std::getline(ss, token, ',')) {\n        v.push_back(std::stoi(token));\n    }\n    long long result = 0;\n    for(int i = 0; i < v.size(); i++) {\n        result = result * 10 + v[i];\n    }\n    return result;",
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while(std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    int result = 0;\n    for(int i = 0; i < v.size(); i++) {\n        result += v[i] * pow(10, i);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx",
    "    std::stringstream ss;\n    ss << test_str;\n    int i;\n    ss >> i;\n    return i;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while (std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for (int i = 0; i < v.size(); i++) {\n        result = result * 100 + v[i];\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == '(' || test_str[i] == ')' || test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> tuple_int;\n    while (std::getline(ss, temp, ',')) {\n        tuple_int.push_back(std::stoi(temp));\n    }\n    long tuple_int_str = 0;\n    for (int i = 0; i < tuple_int.size(); i++) {\n        tuple_int_str = tuple_int_str * 10 + tuple_int[i];\n    }\n    return tuple_int_str;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    long result = 0;\n    while(std::getline(ss, temp, ',')) {\n        result = result * 10 + std::stol(temp);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long x;\n    ss >> x;\n    return x;",
    "    std::stringstream ss;\n    ss << test_str;\n    long x;\n    ss >> x;\n    return x;",
    "\tlong result = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (test_str[i] == ',') {\n\t\t\tresult = result * 100;\n\t\t}\n\t\telse {\n\t\t\tresult = result * 10 + (test_str[i] - 48);\n\t\t}\n\t}\n\treturn result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    int len = test_str.length();\n    int i = 0;\n    long res = 0;\n    while (i < len) {\n        if (test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if (test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if (test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        res = res * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss,temp,',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long test_long = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        test_long = test_long*10 + test_int[i];\n    }\n    return test_long;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> tuple;\n    while (std::getline(ss, temp, ',')) {\n        tuple.push_back(std::stoi(temp));\n    }\n    long tuple_int = 0;\n    for (int i = 0; i < tuple.size(); i++) {\n        tuple_int += tuple[i] * pow(10, i);\n    }\n    return tuple_int;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long test_int = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        test_int = test_int * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return test_int;",
    "    long result = 0;\n    int i = 0;\n    while (test_str[i] != ',') {\n        result = result * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    // Write your code here\n    std::vector<int> v;\n    std::stringstream ss(test_str);\n    std::string temp;\n    while(std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long ans = 0;\n    for(int i = 0; i < v.size(); i++) {\n        ans = ans * 10 + v[i];\n    }\n    return ans;",
    "    std::stringstream ss;\n    ss << test_str;\n    long num;\n    ss >> num;\n    return num;",
    "    // Write your code here\n    int n = test_str.length();\n    int i = 0;\n    long sum = 0;\n    while(i < n) {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        sum = sum * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return sum;",
    "    std::stringstream ss;\n    ss << test_str;\n    long num;\n    ss >> num;\n    return num;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for(int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    // Write your code here\n    long result = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] == ',') {\n            result = result * 100;\n        }\n        else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<std::string> test_str_vec;\n    while(std::getline(ss, temp, ',')) {\n        test_str_vec.push_back(temp);\n    }\n    long result = 0;\n    for (int i = 0; i < test_str_vec.size(); i++) {\n        result += std::stol(test_str_vec[i]) * std::pow(10, (test_str_vec.size() - i - 1) * 2);\n    }\n    return result;",
    "\tlong result = 0;\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tresult = result * 10 + (test_str[i] - '0');\n\t}\n\treturn result;",
    "    int i = 0;\n    int j = 0;\n    std::string str = \"\";\n    std::vector<int> v;\n    while(i < test_str.length()) {\n        if(test_str[i] == ',') {\n            v.push_back(std::stoi(str));\n            str = \"\";\n            i++;\n        }\n        else {\n            str += test_str[i];\n            i++;\n        }\n    }\n    v.push_back(std::stoi(str));\n    long sum = 0;\n    for(i = 0; i < v.size(); i++) {\n        sum += v[i];\n    }\n    return sum;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    // Write your code here\n    // return 0;\n    long result = 0;\n    int i = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            result = result * 10;\n        }\n        else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_int;\n    while(std::getline(ss, temp, ',')) {\n        test_int.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < test_int.size(); i++) {\n        result += test_int[i] * pow(10, test_int.size() - i - 1);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long test_int;\n    ss >> test_int;\n    return test_int;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_vec;\n    while(std::getline(ss, temp, ',')) {\n        test_vec.push_back(std::stoi(temp));\n    }\n    long test_int = 0;\n    for(int i = 0; i < test_vec.size(); i++) {\n        test_int = test_int * 10 + test_vec[i];\n    }\n    return test_int;",
    "    long int_tuple = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            int_tuple = int_tuple << 8;\n            i++;\n            continue;\n        }\n        int_tuple = int_tuple << 8;\n        int_tuple = int_tuple | (test_str[i] - '0');\n        i++;\n    }\n    return int_tuple;",
    "    long int_tuple = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        int_tuple = int_tuple * 10 + (test_str[i] - '0');\n    }\n    return int_tuple;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    long int num = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        num = num*10 + (test_str[i] - '0');\n        i++;\n    }\n    return num;",
    "    int i = 0;\n    std::string str = \"\";\n    std::vector<int> v;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            v.push_back(std::stoi(str));\n            str = \"\";\n        } else {\n            str += test_str[i];\n        }\n        i++;\n    }\n    v.push_back(std::stoi(str));\n    long result = 0;\n    for (int i = 0; i < v.size(); i++) {\n        result = result * 100 + v[i];\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while(std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for(int i = 0; i < v.size(); i++) {\n        result = result * 100 + v[i];\n    }\n    return result;",
    "    long int_tuple = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        int_tuple = int_tuple*10 + (test_str[i] - '0');\n        i++;\n    }\n    return int_tuple;",
    "    long test_int = 0;\n    for(int i = 0; i < test_str.length(); i++) {\n        test_int = test_int * 10 + (test_str[i] - '0');\n    }\n    return test_int;",
    "    int len = test_str.length();\n    int i = 0;\n    int res = 0;\n    while(i < len) {\n        if(test_str[i] == '(') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ')') {\n            i++;\n            continue;\n        }\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        res = res * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << test_str;\n    long num;\n    ss >> num;\n    return num;",
    "    // Write your code here\n    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            result = result * 10;\n        }\n        else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    long int_tuple = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        int_tuple = int_tuple * 10 + (test_str[i] - '0');\n    }\n    return int_tuple;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    int i = 0;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (temp == \",\") {\n            continue;\n        }\n        if (std::stringstream(temp) >> found) {\n            i++;\n        }\n        temp = \"\";\n    }\n    return i;",
    "    long result = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> test_vec;\n    while(std::getline(ss, temp, ',')) {\n        test_vec.push_back(std::stoi(temp));\n    }\n    long test_int = 0;\n    for(int i = 0; i < test_vec.size(); i++) {\n        test_int += test_vec[i] * pow(10, i);\n    }\n    return test_int;",
    "    int i = 0;\n    long result = 0;\n    while(i < test_str.size()) {\n        if(test_str[i] == ',') {\n            result = result * 100;\n            i++;\n        }\n        else {\n            result = result + (test_str[i] - '0');\n            i++;\n        }\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            result = result * 10;\n        }\n        else {\n            result = result * 10 + (test_str[i] - '0');\n        }\n        i++;\n    }\n    return result;",
    "    // Write your code here\n    std::stringstream ss(test_str);\n    std::string temp;\n    long result = 0;\n    while(std::getline(ss, temp, ',')) {\n        result = result * 10 + std::stol(temp);\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long x;\n    ss >> x;\n    return x;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    long int_tuple = 0;\n    for (int i = 0; i < test_str.length(); i++) {\n        int_tuple = int_tuple * 10 + (test_str[i] - '0');\n    }\n    return int_tuple;",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    std::vector<int> v;\n    while (std::getline(ss, temp, ',')) {\n        v.push_back(std::stoi(temp));\n    }\n    long result = 0;\n    for (int i = 0; i < v.size(); i++) {\n        result = result * 100 + v[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string item;\n    std::vector<std::string> splittedStrings;\n    while (std::getline(ss, item, ',')) {\n        splittedStrings.push_back(item);\n    }\n    long result = 0;\n    for (int i = 0; i < splittedStrings.size(); i++) {\n        result = result * 10 + std::stol(splittedStrings[i]);\n    }\n    return result;",
    "    int i = 0;\n    long num = 0;\n    while (test_str[i] != ',') {\n        num = num * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return num;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }",
    "    std::stringstream ss(test_str);\n    std::string temp;\n    long result = 0;\n    while(std::getline(ss, temp, ',')) {\n        result = result*10 + std::stol(temp);\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < test_str.size(); i++) {\n        result = result * 10 + (test_str[i] - '0');\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << test_str;\n    long result;\n    ss >> result;\n    return result;",
    "    int len = test_str.length();\n    long sum = 0;\n    for(int i = 0; i < len; i++) {\n        sum = sum * 10 + (test_str[i] - '0');\n    }\n    return sum;",
    "    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx = 0;\n    int yyy",
    "    int i = 0;\n    long result = 0;\n    while (test_str[i] != '\\0') {\n        if (test_str[i] == ',') {\n            result = result * 100;\n        } else {\n            result = result * 10 + test_str[i] - '0';\n        }\n        i++;\n    }\n    return result;",
    "    std::stringstream ss(test_str);\n    std::string token;\n    std::vector<int> test_vec;\n    while (std::getline(ss, token, ',')) {\n        test_vec.push_back(std::stoi(token));\n    }\n    long test_int = 0;\n    for (int i = 0; i < test_vec.size(); i++) {\n        test_int = test_int * 10 + test_vec[i];\n    }\n    return test_int;",
    "    std::stringstream ss;\n    ss << test_str;\n    std::string temp;\n    int found;\n    while (!ss.eof()) {\n        ss >> temp;\n        if (std::stringstream(temp) >> found)\n            std::cout << found << \" \";\n        temp = \"\";\n    }\n    return 0;",
    "    // Write your code here\n    long int tuple_int = 0;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] == ',') {\n            i++;\n            continue;\n        }\n        tuple_int = tuple_int * 10 + (test_str[i] - '0');\n        i++;\n    }\n    return tuple_int;"
  ]
}