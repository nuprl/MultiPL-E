{
  "name": "mbpp_281_all_unique",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to check if the elements of a given list are unique or not.\nbool all_unique(std::vector<long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::set<long> s;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        s.insert(*i);\n    }\n    return s.size() == test_list.size();",
    "    // Write your code here\n    std::set<long> s;\n    for(int i=0;i<test_list.size();i++){\n        s.insert(test_list[i]);\n    }\n    if(s.size()==test_list.size()){\n        return true;\n    }\n    else{\n        return false;\n    }",
    "    std::set<long> s;\n    for (auto i : test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();",
    "    std::set<long> s;\n    for (auto i : test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();",
    "    std::set<long> s;\n    for (auto i : test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();",
    "    std::set<long> s;\n    for(auto i: test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();",
    "    std::unordered_set<long> s(test_list.begin(), test_list.end());\n    return s.size() == test_list.size();",
    "    std::set<long> s;\n    for (auto i : test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();",
    "    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();",
    "    std::set<long> s;\n    for (auto i : test_list) {\n        if (s.find(i) != s.end()) {\n            return false;\n        }\n        s.insert(i);\n    }\n    return true;",
    "    std::unordered_set<long> s;\n    for (long i : test_list) {\n        if (s.find(i) != s.end()) {\n            return false;\n        }\n        s.insert(i);\n    }\n    return true;",
    "    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();",
    "    std::set<long> s;\n    for (int i = 0; i < test_list.size(); i++) {\n        s.insert(test_list[i]);\n    }\n    if (s.size() == test_list.size()) {\n        return true;\n    }\n    return false;",
    "    // Your code here\n    std::set<long> s;\n    for(int i=0;i<test_list.size();i++)\n    {\n        s.insert(test_list[i]);\n    }\n    if(s.size()==test_list.size())\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }",
    "    std::set<long> s;\n    for(auto i : test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();",
    "    std::unordered_set<long> test_set;\n    for (auto i : test_list) {\n        if (test_set.find(i) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(i);\n    }\n    return true;",
    "    std::set<long> s;\n    for (auto i : test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();",
    "    std::unordered_set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();"
  ]
}