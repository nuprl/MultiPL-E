{
  "name": "mbpp_593_removezero_ip",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0, 1);\n        }\n        res += temp + \".\";\n    }\n    res.pop_back();\n    return res;",
    "    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;",
    "    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;",
    "    std::string res = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '.') {\n            res += ip[i];\n            count = 0;\n        }\n        else if(ip[i] != '0' || count > 0) {\n            res += ip[i];\n            count++;\n        }\n    }\n    return res;",
    "    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;",
    "    std::string res;\n    int len = ip.length();\n    int i = 0;\n    while(i < len && ip[i] == '0') {\n        i++;\n    }\n    while(i < len) {\n        res += ip[i];\n        i++;\n    }\n    return res;",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    if(count == ip.length()) {\n        return \"0\";\n    }\n    else {\n        result = ip.substr(count, ip.length() - count);\n    }\n    return result;",
    "\tstd::string res;\n\tint i = 0;\n\twhile(ip[i] == '0') {\n\t\ti++;\n\t}\n\tres = ip.substr(i, ip.length() - i);\n\treturn res;",
    "    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;",
    "    std::string result;\n    std::stringstream ss(ip);\n    std::string temp;\n    while(std::getline(ss, temp, '.')) {\n        int num = std::stoi(temp);\n        if(num == 0) {\n            result += \"0.\";\n        } else {\n            result += std::to_string(num) + \".\";\n        }\n    }\n    result.pop_back();\n    return result;",
    "    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            result += token.substr(1);\n        } else {\n            result += token;\n        }\n        result += \".\";\n    }\n    result.pop_back();\n    return result;",
    "    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp = temp.substr(1);\n        }\n        result += temp + '.';\n    }\n    result.pop_back();\n    return result;",
    "    std::string res;\n    int len = ip.length();\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < len; i++) {\n        res.push_back(ip[i]);\n    }\n    return res;",
    "    std::string res = \"\";\n    int count = 0;\n    int n = ip.length();\n    for(int i = 0; i < n; i++) {\n        if(ip[i] == '.') {\n            count = 0;\n            res += ip[i];\n        }\n        else if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        else {\n            count++;\n            res += ip[i];\n        }\n    }\n    return res;",
    "    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;",
    "    std::stringstream ss;\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    if(count == ip.size()) {\n        return \"0\";\n    }\n    for(int i = count; i < ip.size(); i++) {\n        ss << ip[i];\n    }\n    return ss.str();",
    "    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    return ip.substr(i);",
    "    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;",
    "\tstd::string result = \"\";\n\tint i = 0;\n\twhile (ip[i] == '0') {\n\t\ti++;\n\t}\n\twhile (i < ip.length()) {\n\t\tresult += ip[i];\n\t\ti++;\n\t}\n\treturn result;",
    "    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            token.erase(0, 1);\n        }\n        result += token + '.';\n    }\n    result.erase(result.size() - 1, 1);\n    return result;"
  ]
}