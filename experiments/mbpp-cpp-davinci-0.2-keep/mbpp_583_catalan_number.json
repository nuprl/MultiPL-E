{
  "name": "mbpp_583_catalan_number",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which returns nth catalan number.\nlong catalan_number(long num) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = catalan_number;\n    assert(candidate((10)) == (16796));\n    assert(candidate((9)) == (4862));\n    assert(candidate((7)) == (429));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long catalan[num+1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);",
    "\tlong *arr = new long[num+1];\n\tarr[0] = 1;\n\tarr[1] = 1;\n\tfor(long i = 2; i <= num; i++) {\n\t\tarr[i] = 0;\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tarr[i] += arr[j] * arr[i-j-1];\n\t\t}\n\t}\n\tlong ans = arr[num];\n\tdelete [] arr;\n\treturn ans;",
    "    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(long j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "    if(num == 0) {\n        return 1;\n    }\n    long sum = 0;\n    for(long i = 0; i < num; i++) {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return sum;",
    "    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for (long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(int j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "  if(num == 0) {\n    return 1;\n  }\n  long sum = 0;\n  for(int i = 0; i < num; i++) {\n    sum += catalan_number(i) * catalan_number(num - i - 1);\n  }\n  return sum;",
    "    long catalan[num+1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for (long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for (long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "\tlong *catalan = new long[num+1];\n\tcatalan[0] = 1;\n\tcatalan[1] = 1;\n\tfor(long i=2; i<=num; i++) {\n\t\tcatalan[i] = 0;\n\t\tfor(long j=0; j<i; j++) {\n\t\t\tcatalan[i] += catalan[j]*catalan[i-j-1];\n\t\t}\n\t}\n\treturn catalan[num];",
    "    if (num == 0) {\n        return 1;\n    }\n    long ans = 0;\n    for (int i = 0; i < num; i++) {\n        ans += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return ans;",
    "    long *catalan = new long[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(long i = 2; i <= num; i++) {\n        catalan[i] = 0;\n        for(long j = 0; j < i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "    if (num <= 1) {\n        return 1;\n    }\n    long res = 0;\n    for (long i = 0; i < num; i++) {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    return res;",
    "    long catalan[num+1];\n    catalan[0] = catalan[1] = 1;\n    for(int i=2; i<=num; i++) {\n        catalan[i] = 0;\n        for(int j=0; j<i; j++) {\n            catalan[i] += catalan[j] * catalan[i-j-1];\n        }\n    }\n    return catalan[num];",
    "    long catalan_num[num+1];\n    catalan_num[0] = catalan_num[1] = 1;\n    for(int i=2;i<=num;i++) {\n        catalan_num[i] = 0;\n        for(int j=0;j<i;j++) {\n            catalan_num[i] += catalan_num[j]*catalan_num[i-j-1];\n        }\n    }\n    return catalan_num[num];",
    "    long res = 1;\n    for (int i = 0; i < num; i++) {\n        res = res * (num + i);\n        res = res / (i + 1);\n    }\n    return res / (num + 1);"
  ]
}