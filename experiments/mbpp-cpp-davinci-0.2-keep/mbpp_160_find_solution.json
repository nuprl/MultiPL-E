{
  "name": "mbpp_160_find_solution",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nstd::optional<long> find_solution(long a, long b, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_solution;\n    assert(candidate((2), (3), (7)) == std::make_tuple(2, 1));\n    assert(candidate((4), (2), (7)) == std::nullopt);\n    assert(candidate((1), (13), (17)) == std::make_tuple(4, 1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(b1 * x + (a1 % b1) * y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long g = std::gcd(a, b);\n    while (x * b <= n) {\n        if ((n - x * b) % a == 0) {\n            return std::make_optional(x);\n        }\n        x += b / g;\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y0, x0 - y0 * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(std::make_pair(y, x - (a1 / b1) * y));",
    "    if (n % std::gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / b;\n    while (true) {\n        long r = n - b * y;\n        if (r % a == 0) {\n            x = r / a;\n            break;\n        }\n        y--;\n    }\n    return {x, y};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y0, x0 - y0 * (a / b)));",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long g = gcd(a, b);\n    x = n / g * (b / g);\n    y = n / g * (a / g);\n    return std::make_tuple(x, y);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    long x = 0;\n    long y = 0;\n    long gcd = std::gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x1 = 0;\n    long y1 = 1;\n    long x2 = 1;\n    long y2 = 0;\n    long q = 0;\n    long r = 0;\n    while (a != 0) {\n        q = b / a;\n        r = b % a;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        b = a;\n        a = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2;\n    y = y2;\n    return std::make_optional(x * (n / gcd));",
    "  if (a == 0 && b == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (a == 0) {\n    if (n % b == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (b == 0) {\n    if (n % a == 0) {\n      return std::make_optional(n / a);\n    } else {\n      return std::nullopt;\n    }\n  }\n  long g = std::gcd(a, b);\n  if (n % g != 0) {\n    return std::nullopt;\n  }\n  long a1 = a / g;\n  long b1 = b / g;\n  long n1 = n / g;\n  std::optional<long> x = find_solution(b1, a1 % b1, n1);\n  if (x) {\n    return std::make_optional(x.value() * a1);\n  } else {\n    return std::nullopt;\n  }",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = std::gcd(a, b);\n    a /= q;\n    b /= q;\n    long x0 = 0, y0 = 1;\n    long x1 = 1, y1 = 0;\n    while (a % b != 0) {\n        long temp = x0 - a / b * x1;\n        x0 = x1;\n        x1 = temp;\n        temp = y0 - a / b * y1;\n        y0 = y1;\n        y1 = temp;\n        long aa = a % b;\n        a = b;\n        b = aa;\n    }\n    return std::make_optional(x1 * p);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2;\n    y = y2;\n    return std::make_optional(x * n);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::make_optional(0) : std::nullopt;\n    } else if (a == 0) {\n        return n % b == 0 ? std::make_optional(n / b) : std::nullopt;\n    } else if (b == 0) {\n        return n % a == 0 ? std::make_optional(n / a) : std::nullopt;\n    }\n\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n\n    a /= d;\n    b /= d;\n    n /= d;\n\n    long x = 0, y = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    while (a != 0) {\n        long q = b / a;\n        long r = b % a;\n        long x_ = x2 - q * x1;\n        long y_ = y2 - q * y1;\n        x = x1;\n        y = y1;\n        x2 = x_;\n        y2 = y_;\n        b = a;\n        a = r;\n    }\n\n    return std::make_optional(x * n + y);",
    "    if (n % std::__gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long g = std::__gcd(a, b);\n    while (g != 0) {\n        long t = g;\n        g = a % g;\n        a = t;\n        t = x;\n        x = y - (a / b) * x;\n        y = t;\n    }\n    return std::make_optional(y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n    while (a % d == 0 && b % d == 0) {\n        a /= d;\n        b /= d;\n        n /= d;\n    }\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = n * x2;\n    y = n * y2;\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_tuple(x, y);"
  ]
}