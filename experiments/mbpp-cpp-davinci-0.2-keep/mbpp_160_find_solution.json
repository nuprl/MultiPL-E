{
  "name": "mbpp_160_find_solution",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nstd::optional<long> find_solution(long a, long b, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_solution;\n    assert(candidate((2), (3), (7)) == std::make_tuple(2, 1));\n    assert(candidate((4), (2), (7)) == std::nullopt);\n    assert(candidate((1), (13), (17)) == std::make_tuple(4, 1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(b1 * x + (a1 % b1) * y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long g = std::gcd(a, b);\n    while (x * b <= n) {\n        if ((n - x * b) % a == 0) {\n            return std::make_optional(x);\n        }\n        x += b / g;\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y0, x0 - y0 * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(std::make_pair(y, x - (a1 / b1) * y));",
    "    if (n % std::gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / b;\n    while (true) {\n        long r = n - b * y;\n        if (r % a == 0) {\n            x = r / a;\n            break;\n        }\n        y--;\n    }\n    return {x, y};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y0, x0 - y0 * (a / b)));",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long g = gcd(a, b);\n    x = n / g * (b / g);\n    y = n / g * (a / g);\n    return std::make_tuple(x, y);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    long x = 0;\n    long y = 0;\n    long gcd = std::gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x1 = 0;\n    long y1 = 1;\n    long x2 = 1;\n    long y2 = 0;\n    long q = 0;\n    long r = 0;\n    while (a != 0) {\n        q = b / a;\n        r = b % a;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        b = a;\n        a = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2;\n    y = y2;\n    return std::make_optional(x * (n / gcd));",
    "  if (a == 0 && b == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (a == 0) {\n    if (n % b == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (b == 0) {\n    if (n % a == 0) {\n      return std::make_optional(n / a);\n    } else {\n      return std::nullopt;\n    }\n  }\n  long g = std::gcd(a, b);\n  if (n % g != 0) {\n    return std::nullopt;\n  }\n  long a1 = a / g;\n  long b1 = b / g;\n  long n1 = n / g;\n  std::optional<long> x = find_solution(b1, a1 % b1, n1);\n  if (x) {\n    return std::make_optional(x.value() * a1);\n  } else {\n    return std::nullopt;\n  }",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = std::gcd(a, b);\n    a /= q;\n    b /= q;\n    long x0 = 0, y0 = 1;\n    long x1 = 1, y1 = 0;\n    while (a % b != 0) {\n        long temp = x0 - a / b * x1;\n        x0 = x1;\n        x1 = temp;\n        temp = y0 - a / b * y1;\n        y0 = y1;\n        y1 = temp;\n        long aa = a % b;\n        a = b;\n        b = aa;\n    }\n    return std::make_optional(x1 * p);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2;\n    y = y2;\n    return std::make_optional(x * n);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::make_optional(0) : std::nullopt;\n    } else if (a == 0) {\n        return n % b == 0 ? std::make_optional(n / b) : std::nullopt;\n    } else if (b == 0) {\n        return n % a == 0 ? std::make_optional(n / a) : std::nullopt;\n    }\n\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n\n    a /= d;\n    b /= d;\n    n /= d;\n\n    long x = 0, y = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    while (a != 0) {\n        long q = b / a;\n        long r = b % a;\n        long x_ = x2 - q * x1;\n        long y_ = y2 - q * y1;\n        x = x1;\n        y = y1;\n        x2 = x_;\n        y2 = y_;\n        b = a;\n        a = r;\n    }\n\n    return std::make_optional(x * n + y);",
    "    if (n % std::__gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long g = std::__gcd(a, b);\n    while (g != 0) {\n        long t = g;\n        g = a % g;\n        a = t;\n        t = x;\n        x = y - (a / b) * x;\n        y = t;\n    }\n    return std::make_optional(y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n    while (a % d == 0 && b % d == 0) {\n        a /= d;\n        b /= d;\n        n /= d;\n    }\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = n * x2;\n    y = n * y2;\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = g;\n    long x = 0;\n    long y = 1;\n    long u = 1;\n    long v = 0;\n    while (a != 0) {\n        long t = a / b;\n        a = a % b;\n        std::swap(a, b);\n        x = x - (u * t);\n        y = y - (v * t);\n        std::swap(x, u);\n        std::swap(y, v);\n    }\n    x = x * p;\n    y = y * p;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / g;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return std::nullopt;\n    }\n    x = (n - y * b) / a;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0, y = 0;\n    long a1 = 1, b1 = 0, a2 = 0, b2 = 1;\n    while (a != 0) {\n        long q = b / a;\n        long r = b % a;\n        long x1 = a1 - q * a2;\n        long y1 = b1 - q * b2;\n        a1 = a2;\n        b1 = b2;\n        a2 = x1;\n        b2 = y1;\n        b = a;\n        a = r;\n    }\n    x = a2;\n    y = b2;\n    if (x < 0) {\n        x += b;\n        y -= a;\n    }\n    return std::make_optional(x * n);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long g = __gcd(a, b);\n    while (x * b <= n) {\n        if ((n - x * b) % a == 0) {\n            return std::make_tuple(x, (n - x * b) / a);\n        }\n        x += b / g;\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = 0;\n    while (p % a != 0) {\n        p += b;\n        q -= 1;\n    }\n    return std::make_optional(p / a);",
    "    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n        if (y < 0) {\n            return std::nullopt;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = __gcd(a, b);\n    long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n    while (a % d != 0 || b % d != 0) {\n        long q = a / d;\n        long r = a % d;\n        long x = x2 - q * x1;\n        long y = y2 - q * y1;\n        a = d;\n        b = r;\n        d = __gcd(a, b);\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    return {x2 * (n / d), y2 * (n / d)};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    x = -x;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 1;\n    long x1 = 1, y1 = 0;\n    while (a % b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x2 = x0 - q * x1;\n        long y2 = y0 - q * y1;\n        x0 = x1;\n        y0 = y1;\n        x1 = x2;\n        y1 = y2;\n        a = b;\n        b = r;\n    }\n    long x = x1 * (n / d);\n    long y = y1 * (n / d);\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x, y;\n    std::tie(x, y) = find_solution(b / d, a / d, n / d);\n    return std::make_optional(y - (a / d) * x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / g;\n    long aa = a / g;\n    long bb = b / g;\n    long q = y / bb;\n    y -= q * bb;\n    x += q * aa;\n    if (y < 0) {\n        return std::nullopt;\n    }\n    return std::make_optional(x);",
    "    long x = 0;\n    long y = 0;\n    long gcd = std::gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / gcd;\n    long b1 = b / gcd;\n    long n1 = n / gcd;\n    long x1 = 0;\n    long y1 = 1;\n    long x2 = 1;\n    long y2 = 0;\n    long q = 0;\n    long r = 0;\n    while (b1 != 0) {\n        q = a1 / b1;\n        r = a1 % b1;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        a1 = b1;\n        b1 = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2;\n    y = y2;\n    if (x < 0) {\n        x = x + b / gcd;\n        y = y - a / gcd;\n    }\n    return std::make_optional(x * n1);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    } else if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    } else if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    } else {\n        if (n % gcd(a, b) == 0) {\n            return std::make_optional(n / gcd(a, b));\n        } else {\n            return std::nullopt;\n        }\n    }",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / d;\n    while (y * a > n) {\n        y--;\n    }\n    x = (n - y * a) / b;\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long g = gcd(a, b);\n    a /= g;\n    b /= g;\n    n /= g;\n    long x1 = 1, y1 = 0;\n    while (a != 0) {\n        long q = b / a;\n        long t = b % a;\n        b = a;\n        a = t;\n        t = x1;\n        x1 = x - q * x1;\n        x = t;\n        t = y1;\n        y1 = y - q * y1;\n        y = t;\n    }\n    x = x * n;\n    y = y * n;\n    return std::make_tuple(x, y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = n / d;\n    long x1 = 1, y1 = (n - a) / b;\n    while (y1 < y0) {\n        long x2 = x0 - (y0 - y1) * a / b;\n        long y2 = y0 - (y0 - y1) * (n - a * x1) / b;\n        x0 = x1;\n        x1 = x2;\n        y0 = y1;\n        y1 = y2;\n    }\n    return std::make_optional(x1);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    long t = 0;\n    while (a % 2 == 0 && b % 2 == 0) {\n        a /= 2;\n        b /= 2;\n        t++;\n    }\n    if (t % 2 == 1) {\n        x = b;\n        y = -a;\n    } else {\n        x = -b;\n        y = a;\n    }\n    if (a % 2 == 1) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    x *= n;\n    y *= n;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        return n == b ? std::make_optional(0) : std::nullopt;\n    }\n    auto x = find_solution(b % a, a, n);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - b / a * (b / a) * x.value() + x.value());",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>{0} : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>{n / b} : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>{n / a} : std::nullopt;\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g);\n    return std::optional<long>{x * (b / g) + y * (a / g)};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (n == a * x + b * y) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(x0 * (b / d) + y0 * (a / d));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b > n) {\n            x--;\n        } else {\n            y++;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return {y, x - y * (a / b)};",
    "  if (a == 0 && b == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  } else if (a == 0) {\n    if (n % b == 0) {\n      return std::make_optional(n / b);\n    } else {\n      return std::nullopt;\n    }\n  } else if (b == 0) {\n    if (n % a == 0) {\n      return std::make_optional(n / a);\n    } else {\n      return std::nullopt;\n    }\n  } else {\n    long x, y;\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n      return std::nullopt;\n    } else {\n      a /= g;\n      b /= g;\n      n /= g;\n      long x0, y0;\n      std::tie(x0, y0) = find_solution(b, a % b, n).value();\n      x = y0;\n      y = x0 - (a / b) * y0;\n      return std::make_optional(x);\n    }\n  }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    long x1 = 0, y1 = 1;\n    long x2 = 1, y2 = 0;\n    while (a != 0) {\n        long q = b / a;\n        long r = b % a;\n        long m = x2 - q * x1;\n        long n = y2 - q * y1;\n        x = m;\n        y = n;\n        b = a;\n        a = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2 * n;\n    y = y2 * n;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    // solve a*x + b*y = n\n    // solve a*x = n (mod b)\n    // solve a*x + b*y = gcd(a, b)\n    // x = x0 + k*b/d\n    // y = y0 - k*a/d\n    std::tie(x, y) = find_solution(b, a % b, g);\n    x = (n / g) * x;\n    y = (n / g) * y;\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = n / d - a / b * x;\n    return std::make_tuple(x, y);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = 0;\n    long d = n / g;\n    // solve a * x + b * y = d * g\n    // a * x + b * y = d * g\n    // a * x = d * g - b * y\n    // a * x = d * g - b * y\n    // a * x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y) / a\n    // x = (d * g - b * y)",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - b / a * (b / a) * x.value() + n / a);",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = __gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    long x1 = 1, x2 = 0, y1 = 0, y2 = 1;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x = x2 - q * x1;\n        long y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = n * x2;\n    y = (n - a * x) / b;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / g;\n    while (y * a > n) {\n        y--;\n    }\n    while (y * a < n) {\n        y++;\n    }\n    if (y * a != n) {\n        return std::nullopt;\n    }\n    x = (n - b * y) / a;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    long d = std::__gcd(a, b);\n\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n\n    return std::make_optional(x0 * b + y0 * a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / d;\n    while (y % a != 0) {\n        x++;\n        y -= b;\n    }\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = g;\n    while (d <= n) {\n        if ((n - d) % b == 0) {\n            x = d / a;\n            y = (n - d) / b;\n            break;\n        }\n        d += g;\n    }\n    if (x == 0 && y == 0) {\n        return std::nullopt;\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = 0, y = 0;\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g, b1 = b / g, n1 = n / g;\n    long d = 1;\n    while (d <= n1) {\n        d *= 2;\n    }\n    while (d > 0) {\n        if (x + d <= n1) {\n            x += d;\n            y = (n1 - a1 * x) / b1;\n        }\n        d /= 2;\n    }\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (y * a <= n) {\n        if ((n - y * a) % b == 0) {\n            x = (n - y * a) / b;\n            break;\n        }\n        y++;\n    }\n    if (y * a > n) {\n        return std::nullopt;\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_tuple(0, 0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_tuple(0, n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_tuple(n / a, 0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = n / a;\n    long y = n / b;\n    long k = 0;\n    while (x < 0 || y < 0) {\n        x += b / g;\n        y -= a / g;\n        k += 1;\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    a /= g;\n    b /= g;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, p).value();\n    return std::make_optional(y - (a / b) * x);",
    "    if (n % gcd(a, b) != 0) return std::nullopt;\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g);\n    return std::make_optional(x * (b / g) + y * (a / g));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / d, a / d, n / d);\n    return std::make_optional(x * (b / d) + y * (a / d));",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "  if (a == 0 && b == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (a == 0) {\n    if (n % b == 0) {\n      return std::make_optional(n / b);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (b == 0) {\n    if (n % a == 0) {\n      return std::make_optional(n / a);\n    } else {\n      return std::nullopt;\n    }\n  }\n  long gcd = std::__gcd(a, b);\n  if (n % gcd != 0) {\n    return std::nullopt;\n  }\n  long x = 0;\n  long y = n / b;\n  while (a * x + b * y != n) {\n    if (a * x + b * y < n) {\n      x++;\n    } else {\n      y--;\n    }\n  }\n  return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += b / gcd;\n        } else {\n            y -= a / gcd;\n        }\n    }\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return std::make_optional(x);",
    "  if (a == 0 && b == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (a == 0) {\n    if (n % b == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (b == 0) {\n    if (n % a == 0) {\n      return std::make_optional(n / a);\n    } else {\n      return std::nullopt;\n    }\n  }\n  long d = std::__gcd(a, b);\n  if (n % d != 0) {\n    return std::nullopt;\n  }\n  long x = 0, y = 0;\n  long x1 = 1, y1 = 1;\n  long x2 = 0, y2 = 1;\n  long q = a / b;\n  long r = a % b;\n  while (r != 0) {\n    long temp = x2;\n    x2 = x1 - q * x2;\n    x1 = temp;\n    temp = y2;\n    y2 = y1 - q * y2;\n    y1 = temp;\n    a = b;\n    b = r;\n    q = a / b;\n    r = a % b;\n  }\n  x = x2;\n  y = y2;\n  if (x < 0) {\n    x += b;\n    y -= a;\n  }\n  return std::make_optional(x * (n / d));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / d, a / d, n / d);\n    return std::make_optional(x * (b / d) + y * (a / d));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    return std::make_optional(x * (a / g) + y * (b / g));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (y * a <= n) {\n        if ((n - y * a) % b == 0) {\n            x = (n - y * a) / b;\n            break;\n        }\n        y++;\n    }\n    if (x * a + y * b == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / g;\n    long b1 = b / g;\n    long n1 = n / g;\n    long x, y;\n    long d = extended_euclid(a1, b1, x, y);\n    if (n1 % d != 0) {\n        return std::nullopt;\n    }\n    x *= n1 / d;\n    y *= n1 / d;\n    return std::make_optional(x);",
    "    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n        if (y < 0) {\n            return std::nullopt;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += b / gcd;\n        } else {\n            y -= a / gcd;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / d, a / d, n / d);\n    return std::make_optional(x * (b / d) + y * (a / d));",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 1, last_x = 1, last_y = 0, temp;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n\n        a = b;\n        b = r;\n\n        temp = x;\n        x = last_x - q * x;\n        last_x = temp;\n\n        temp = y;\n        y = last_y - q * y;\n        last_y = temp;\n    }\n\n    return std::make_optional(last_x * (n / a));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / g;\n    while (y < 0) {\n        x -= b / g;\n        y += a / g;\n    }\n    return {x, y};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = a / g;\n    long q = b / g;\n    long r = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(p, q, r);\n    return std::make_optional(std::make_tuple(x, y));",
    "    if (n % gcd(a, b) != 0) return {};\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * mod_inverse(a / d, b / d);\n    y = (n - a * x) / b;\n    return {x, y};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_tuple(0, 0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_tuple(0, n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_tuple(n / a, 0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b, x, y);\n    x *= n / d;\n    y *= n / d;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y > n) {\n            y--;\n        } else {\n            x++;\n        }\n        if (y < 0) {\n            return {};\n        }\n    }\n    return {x, y};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long g = gcd(a, b);\n    while (x * b < n) {\n        if ((n - x * b) % a == 0) {\n            return std::make_tuple(x, (n - x * b) / a);\n        }\n        x += b / g;\n    }\n    return std::nullopt;",
    "  if (a == 0 && b == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n\n  if (a == 0) {\n    if (n % b == 0) {\n      return std::make_optional(n / b);\n    } else {\n      return std::nullopt;\n    }\n  }\n\n  if (b == 0) {\n    if (n % a == 0) {\n      return std::make_optional(n / a);\n    } else {\n      return std::nullopt;\n    }\n  }\n\n  long g = std::gcd(a, b);\n  if (n % g != 0) {\n    return std::nullopt;\n  }\n\n  long a1 = a / g;\n  long b1 = b / g;\n  long n1 = n / g;\n\n  std::optional<long> x = find_solution(b1, a1 % b1, n1);\n  if (x.has_value()) {\n    return std::make_optional(x.value() * a1);\n  } else {\n    return std::nullopt;\n  }",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long g = std::gcd(a, b);\n    a /= g;\n    b /= g;\n    n /= g;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2;\n    y = y2;\n    return std::make_optional(x * n);",
    "    long x = 0;\n    long y = 0;\n    long gcd = std::gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x1 = 0;\n    long y1 = 1;\n    long x2 = 1;\n    long y2 = 0;\n    long q = 0;\n    long r = 0;\n    while (a % b != 0) {\n        q = a / b;\n        r = a % b;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        a = b;\n        b = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = (n / b) * x2;\n    y = (n / b) * y2;\n    return std::make_tuple(x, y);",
    "    if (n % gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / b;\n    long g = gcd(a, b);\n    while (x < y) {\n        if (a * x + b * y == n) {\n            return {x, y};\n        }\n        x += b / g;\n        y -= a / g;\n    }\n    return {};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    } else if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    } else if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    } else {\n        long x, y;\n        long g = std::gcd(a, b);\n        if (n % g != 0) {\n            return {};\n        } else {\n            x = n / g * b / a;\n            y = (n - a * x) / b;\n            return {x, y};\n        }\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = a / g, q = b / g;\n    long x0 = 0, y0 = n / b;\n    long x1 = 1, y1 = (n - a * x1) / b;\n    while (y1 < y0) {\n        long x2 = x0 - p * (x1 - x0), y2 = y0 - q * (y1 - y0);\n        x0 = x1, y0 = y1;\n        x1 = x2, y1 = y2;\n    }\n    return std::make_optional(x1);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    a /= g;\n    b /= g;\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b, a % b, p).value();\n    return std::make_optional(y0 - (a / b) * x0);",
    "  if (a == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    }\n    return std::nullopt;\n  }\n  auto x = find_solution(b % a, a, n % a);\n  if (!x) {\n    return std::nullopt;\n  }\n  return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / d;\n    while (y % a != 0) {\n        y += b / d;\n    }\n    x = (n - b * y) / a;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x, y;\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_optional(y - (a / b) * x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / d;\n    long a1 = a / d;\n    long b1 = b / d;\n    long r = n % d;\n    long q = n / d;\n    long r1 = r % a1;\n    long q1 = q / a1;\n    long r2 = r % b1;\n    long q2 = q / b1;\n    if (r1 == 0) {\n        x = q1;\n        y = y - b1 * q1;\n    } else if (r2 == 0) {\n        y = q2;\n        x = x - a1 * q2;\n    } else {\n        return std::nullopt;\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    } else if (a == 0) {\n        return n / b;\n    } else if (b == 0) {\n        return n / a;\n    } else {\n        long x = 0;\n        long y = 0;\n        long gcd = std::gcd(a, b);\n        if (n % gcd == 0) {\n            long a1 = a / gcd;\n            long b1 = b / gcd;\n            long n1 = n / gcd;\n            long x1 = 0;\n            long y1 = 0;\n            long d = 1;\n            while (d != 0) {\n                d = n1 / a1;\n                x1 = x1 + d * b1;\n                y1 = y1 - d * a1;\n                n1 = n1 % a1;\n                if (n1 == 0) {\n                    x = x1;\n                    y = y1;\n                    break;\n                }\n                d = n1 / b1;\n                x1 = x1 - d * b1;\n                y1 = y1 + d * a1;\n                n1 = n1 % b1;\n                if (n1 == 0) {\n                    x = x1;\n                    y = y1;\n                    break;\n                }\n            }\n            return std::make_tuple(x, y);\n        } else {\n            return std::nullopt;\n        }\n    }",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x1 = 0, y1 = 0;\n    long x2 = 1, y2 = 1;\n    while (a % 2 == 0 && b % 2 == 0) {\n        a /= 2;\n        b /= 2;\n        n /= 2;\n    }\n    while (a != 0) {\n        while (a % 2 == 0) {\n            a /= 2;\n            if (x1 % 2 == 0 && y1 % 2 == 0) {\n                x1 /= 2;\n                y1 /= 2;\n            }\n            else {\n                x1 = (x1 + b) / 2;\n                y1 = (y1 - a) / 2;\n            }\n        }\n        while (b % 2 == 0) {\n            b /= 2;\n            if (x2 % 2 == 0 && y2 % 2 == 0) {\n                x2 /= 2;\n                y2 /= 2;\n            }\n            else {\n                x2 = (x2 + b) / 2;\n                y2 = (y2 - a) / 2;\n            }\n        }\n        if (a >= b) {\n            a -= b;\n            x1 -= x2;\n            y1 -= y2;\n        }\n        else {\n            b -= a;\n            x2 -= x1;",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n/a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n/b;\n    while (x*a + y*b != n) {\n        if (x*a + y*b < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = 0;\n    while (p % a != 0) {\n        p += b;\n        q -= 1;\n    }\n    return std::make_optional(p / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / g, a / g, n / g).value();\n    return std::make_optional(x0 * (a / g) + y0 * (b / g));",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y0, x0 - y0 * (a / d)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n\n    long x0 = 0, y0 = 0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y0, (n / d - a * y0) / b));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x, y;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g).value();\n    return std::make_optional(std::make_tuple(y, x - y * (a / g)));",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>() : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::make_optional(0) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::make_optional(n / a) : std::nullopt;\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = n / b;\n    while (y * a + x * b != n) {\n        if (y * a + x * b > n) {\n            y--;\n        } else {\n            x++;\n        }\n    }\n    return std::make_optional(x);",
    "    long x = 0;\n    long y = 0;\n    long d = 0;\n    if (n == 0) {\n        return std::make_optional(std::make_tuple(x, y));\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(std::make_tuple(x, n / b));\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(std::make_tuple(n / a, y));\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    if (a < b) {\n        std::swap(a, b);\n    }\n    d = std::gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    x = n / d;\n    y = 0;\n    while (x != 0) {\n        if (x < b) {\n            std::swap(x, y);\n        }\n        x -= b;\n        y += a;\n    }\n    return std::make_optional(std::make_tuple(x, y));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    extended_gcd(a, b, p, q, r, s);\n    return std::make_optional(r);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = n / d - a / b * x;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += b / g;\n        } else {\n            y -= a / g;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::make_optional(0) : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::make_optional(n / b) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::make_optional(n / a) : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_optional(std::make_tuple(y, x - y * (a / b)));",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = __gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n\n    long x = 0;\n    long y = n / d;\n    while (y * a > n) {\n        y--;\n    }\n\n    while (y * a < n) {\n        y++;\n    }\n\n    if (y * a != n) {\n        return std::nullopt;\n    }\n\n    x = (n - b * y) / a;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long a1 = a / d, b1 = b / d, n1 = n / d;\n    std::tie(x, y) = find_solution(a1, b1, n1);\n    return std::make_optional(x * (b / d) + y * (a / d));",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    long g = std::gcd(a, b);\n    while (x * b <= n) {\n        if ((n - x * b) % a == 0) {\n            return std::make_optional(x);\n        }\n        x++;\n    }\n    return std::nullopt;",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = n / d - a / b * x;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::make_optional(0) : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::make_optional(n / b) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::make_optional(n / a) : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_optional(std::make_tuple(y, x - (a / b) * y));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / g, a / g, n / g).value();\n    return std::make_optional(y0 * (b / g) + x0 * (a / g));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_optional(y - (a / b) * x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / d, a / d, n / d);\n    return std::make_optional(y * (b / d) + x * (a / d));",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::optional<long>{0} : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::optional<long>{n / b} : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::optional<long>{n / a} : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 1;\n    long x1 = 1, y1 = 0;\n    while (a % b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x2 = x0 - q * x1;\n        long y2 = y0 - q * y1;\n        x0 = x1;\n        y0 = y1;\n        x1 = x2;\n        y1 = y2;\n        a = b;\n        b = r;\n    }\n    long x = x1 * (n / d);\n    long y = y1 * (n / d);\n    return std::optional<long>{x};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = std::gcd(a, b);\n    a /= q;\n    b /= q;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, p % a).value();\n    return std::make_optional(b * x + a * y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long a1 = a / d, b1 = b / d, n1 = n / d;\n    long r = 1, s = 0, t = 0, m = 1;\n    while (a1 != 0) {\n        long q = b1 / a1;\n        long tmp = r;\n        r = s;\n        s = tmp - q * s;\n        tmp = t;\n        t = m;\n        m = tmp - q * m;\n        tmp = a1;\n        a1 = b1 - q * a1;\n        b1 = tmp;\n    }\n    x = n1 * s;\n    y = n1 * m;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    long x = y0;\n    long y = x0 - y0 * (a / b);\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = n / d;\n    long x1 = 1, y1 = (n - a) / b;\n    while (y1 < y0) {\n        long x2 = x0 - x1;\n        long y2 = y0 - y1;\n        x0 = x1;\n        y0 = y1;\n        x1 = x2;\n        y1 = y2;\n    }\n    return std::make_optional(x1);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / d;\n    while (y % a != 0) {\n        x += b / d;\n        y -= a / d;\n    }\n    return std::make_optional(x + y / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    long tmp = 0;\n    long q = 0;\n    long r = 0;\n    while (a % 2 == 0 && b % 2 == 0) {\n        a /= 2;\n        b /= 2;\n        n *= 2;\n    }\n    while (a % 2 == 0) {\n        a /= 2;\n        if (n % 2 != 0) {\n            x += b;\n        }\n        n /= 2;\n    }\n    while (b % 2 == 0) {\n        b /= 2;\n        if (n % 2 != 0) {\n            y += a;\n        }\n        n /= 2;\n    }\n    while (a != b) {\n        if (a % 2 == 0) {\n            a /= 2;\n            if (n % 2 != 0) {\n                x += b;\n            }\n            n /= 2;\n        } else if (b % 2 == 0) {\n            b /= 2;\n            if (n % 2 != 0) {\n                y += a;\n            }\n            n /= 2;\n        } else if (a > b) {\n            q =",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    while (a % 2 == 0 && b % 2 == 0) {\n        a /= 2;\n        b /= 2;\n        n /= 2;\n    }\n    while (a != 0) {\n        while (a % 2 == 0) {\n            a /= 2;\n            if (x1 % 2 == 0 && y1 % 2 == 0) {\n                x1 /= 2;\n                y1 /= 2;\n            } else {\n                x1 = (x1 + b) / 2;\n                y1 = (y1 - a) / 2;\n            }\n        }\n        while (b % 2 == 0) {\n            b /= 2;\n            if (x2 % 2 == 0 && y2 % 2 == 0) {\n                x2 /= 2;\n                y2 /= 2;\n            } else {\n                x2 = (x2 + b) / 2;\n                y2 = (y2 - a) / 2;\n            }\n        }\n        if (a >= b) {\n            a -= b;\n            x0 -= x2;\n            y0 -= y2;\n        } else {\n            b -= a;\n            x0 -= x",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_pair(y0, x0 - y0 * (a / b)));",
    "    if (n % gcd(a, b) != 0) return std::nullopt;\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_optional(x);",
    "    if (n % __gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = __gcd(a, b);\n    long a1 = a / d, b1 = b / d, n1 = n / d;\n    long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n    while (b1) {\n        long q = a1 / b1;\n        long r = a1 % b1;\n        long x = x2 - q * x1;\n        long y = y2 - q * y1;\n        a1 = b1;\n        b1 = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = n1 * x2;\n    y = n1 * y2;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        return std::nullopt;\n    }\n    if (a == 0) {\n        return n / b;\n    }\n    if (b == 0) {\n        return n / a;\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_pair(x, y);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n % a);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - n / a);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = a / g;\n    long q = b / g;\n    long r = n / g;\n    long x = 0;\n    long y = r;\n    while (y >= 0) {\n        long z = r - p * x - q * y;\n        if (z == 0) {\n            return std::make_optional(x);\n        }\n        if (z < 0) {\n            return std::nullopt;\n        }\n        x++;\n        y = r - p * x;\n    }\n    return std::nullopt;",
    "    long x = 0;\n    long y = 0;\n    long gcd = std::gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x1 = 0;\n    long y1 = 1;\n    long x2 = 1;\n    long y2 = 0;\n    long q = 0;\n    long r = 0;\n    while (a != 0) {\n        q = b / a;\n        r = b % a;\n        x = x2 - q * x1;\n        y = y2 - q * y1;\n        b = a;\n        a = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    x = x2;\n    y = y2;\n    return std::make_optional(x * (n / gcd));",
    "    long x = 0;\n    long y = n / b;\n    long r = n % b;\n    while (r > 0) {\n        x = (n - b * y) / a;\n        r = n - a * x - b * y;\n        if (r == 0) {\n            return std::make_optional(x);\n        }\n        y--;\n    }\n    return {};",
    "    long x = 0;\n    long y = n / b;\n    long r = n % b;\n    while (r > 0) {\n        long q = b / r;\n        long t = b % r;\n        b = r;\n        r = t;\n        t = x;\n        x = y - q * x;\n        y = t;\n    }\n    if (b > 1) {\n        return std::nullopt;\n    }\n    if (y < 0) {\n        return std::nullopt;\n    }\n    return std::make_optional(y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_pair(y0, x0 - y0 * (a / b)));",
    "    if (n % gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return {x, y};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long d = g;\n    long x1 = 1;\n    long x2 = 0;\n    long y1 = 0;\n    long y2 = 1;\n    while (a % d != 0 || b % d != 0) {\n        long q = a / d;\n        long r = a % d;\n        long s = b / d;\n        long t = b % d;\n        long m = x2 - q * x1;\n        long n = y2 - q * y1;\n        a = d;\n        b = t;\n        x2 = x1;\n        x1 = m;\n        y2 = y1;\n        y1 = n;\n        d = r;\n    }\n    long x = p * x2;\n    long y = p * y2;\n    return std::make_optional(x);",
    "  if (a == 0 && b == 0) {\n    if (n == 0) {\n      return std::make_optional(0);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (a == 0) {\n    if (n % b == 0) {\n      return std::make_optional(n / b);\n    } else {\n      return std::nullopt;\n    }\n  }\n  if (b == 0) {\n    if (n % a == 0) {\n      return std::make_optional(n / a);\n    } else {\n      return std::nullopt;\n    }\n  }\n  long g = std::gcd(a, b);\n  if (n % g != 0) {\n    return std::nullopt;\n  }\n  long x = 0, y = 0;\n  long d = std::gcd(a, b, x, y);\n  x *= n / d;\n  y *= n / d;\n  return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    extended_gcd(a, b, x0, y0);\n    long x = x0 * n / d;\n    long y = y0 * n / d;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        }\n        return std::nullopt;\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g).value();\n    return std::make_optional(x * (b / g) + y * (a / g));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    x = -x;\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return {};\n    }\n    long x = 0;\n    long y = n / b;\n    while (x * a + y * b != n) {\n        if (x * a + y * b < n) {\n            x++;\n        } else {\n            y--;\n        }\n    }\n    return {x, y};",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::make_optional(std::make_tuple(0, 0)) : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::make_optional(std::make_tuple(0, n / b)) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::make_optional(std::make_tuple(n / a, 0)) : std::nullopt;\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    std::optional<long> x = find_solution(b, a % b, n);\n    if (x) {\n        return std::make_optional(std::make_tuple(x->second, x->first - (a / b) * x->second));\n    }\n    return std::nullopt;",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_pair(x, y);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    } else {\n        long x = 0;\n        long y = 0;\n        long d = gcd(a, b);\n        x = n / d * (b / d);\n        y = n / d * (a / d);\n        return std::make_tuple(x, y);\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_pair(y0, x0 - y0 * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / d;\n    long a_ = a / d;\n    long b_ = b / d;\n    long q = y / b_;\n    y -= q * b_;\n    x += q * a_;\n    std::swap(a_, b_);\n    std::swap(x, y);\n    q = x / a_;\n    x -= q * a_;\n    y += q * b_;\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return {y, x - y * (a / b)};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0, y = 0;\n    long d = 1;\n    while (d <= n) {\n        d *= 2;\n    }\n    d /= 2;\n    while (d > 0) {\n        if (x + d <= n) {\n            x += d;\n            y += d * a / b;\n        }\n        d /= 2;\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += 1;\n        } else {\n            y -= 1;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        }\n        return std::nullopt;\n    }\n    auto x = find_solution(b % a, a, n);\n    if (!x) {\n        return std::nullopt;\n    }\n    return std::make_optional(b / a * x.value() - b / a * (b / a) * x.value() + x.value());",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = n / g;\n    while (y >= 0) {\n        if ((n - a * x) % b == 0) {\n            return std::make_optional(x);\n        }\n        x++;\n        y--;\n    }\n    return std::nullopt;",
    "    long x = 1, y = 0;\n    long xLast = 0, yLast = 1;\n    long q, r, m, nLast = n;\n    while (a != 0) {\n        q = b / a;\n        r = b % a;\n        m = xLast - q * x;\n        n = yLast - q * y;\n        xLast = x, yLast = y;\n        x = m, y = n;\n        b = a, a = r;\n    }\n    if (b == 1) {\n        return std::make_optional(xLast * (nLast / b));\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_optional(y - (a / b) * x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = (n - a * x) / b;\n    return std::make_tuple(x, y);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = n / g;\n    long q = g;\n    long x = 0;\n    long y = 1;\n    long u = 1;\n    long v = 0;\n    while (q != 0) {\n        long r = p % q;\n        long s = p / q;\n        p = q;\n        q = r;\n        long t = x - u * s;\n        x = u;\n        u = t;\n        t = y - v * s;\n        y = v;\n        v = t;\n    }\n    return std::make_optional(x * p);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long g = std::gcd(a, b);\n    if (n % g != 0) {\n        return {};\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g);\n    return {y, x - y * (a / b)};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long r = n % a;\n    if (r == 0) {\n        return std::make_optional(x);\n    } else {\n        auto y = find_solution(b, a % b, r);\n        if (y) {\n            return std::make_optional(x - b / a * y.value());\n        } else {\n            return std::nullopt;\n        }\n    }",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long x = n / a;\n    long y = (n - a * x) / b;\n    if (a * x + b * y == n) {\n        return std::make_optional(x);\n    } else {\n        return std::nullopt;\n    }",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x0 = 0, y0 = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    while (b != 0) {\n        long q = a / b;\n        long r = a % b;\n        x0 = x2;\n        y0 = y2;\n        x2 = x1 - q * x2;\n        y2 = y1 - q * y2;\n        a = b;\n        b = r;\n        x1 = x0;\n        y1 = y0;\n    }\n    if (n % a != 0) {\n        return std::nullopt;\n    }\n    return std::make_optional(x1 * (n / a));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::__gcd(a, b);\n    a /= d;\n    b /= d;\n    n /= d;\n    long x0 = 0, y0 = 1;\n    while (a % b != 0) {\n        long q = a / b;\n        long r = a % b;\n        long x1 = x0 - q * x;\n        long y1 = y0 - q * y;\n        x0 = x;\n        y0 = y;\n        x = x1;\n        y = y1;\n        a = b;\n        b = r;\n    }\n    x = x * n;\n    y = (n - a * x) / b;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long a1 = a / gcd;\n    long b1 = b / gcd;\n    long n1 = n / gcd;\n    long x, y;\n    std::tie(x, y) = find_solution(b1, a1 % b1, n1).value();\n    return std::make_optional(y - (a1 / b1) * x);",
    "    if (a == 0) {\n        return n == b ? std::optional<long>{0} : std::nullopt;\n    }\n    auto result = find_solution(b % a, a, n);\n    if (!result) {\n        return std::nullopt;\n    }\n    return (b / a) * result.value() - (b / a) * (b % a) + b;",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long gcd = std::__gcd(a, b);\n    if (n % gcd != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (a * x + b * y != n) {\n        if (a * x + b * y < n) {\n            x += b / gcd;\n        } else {\n            y -= a / gcd;\n        }\n    }\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    a /= g;\n    b /= g;\n    n /= g;\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return std::make_optional(y - (a / b) * x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    std::tie(x, y) = find_solution(b / g, a / g, n / g);\n    return std::make_optional(x * (b / g) + y * (a / g));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long d = gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0 = 0, y0 = 0;\n    long x1 = 1, y1 = 0;\n    long x2 = 0, y2 = 1;\n    long q = 0;\n    while (b != 0) {\n        q = a / b;\n        long r = a - q * b;\n        x0 = x2;\n        y0 = y2;\n        x2 = x1 - q * x2;\n        y2 = y1 - q * y2;\n        a = b;\n        b = r;\n    }\n    long x = x0 * (n / d);\n    long y = y0 * (n / d);\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        return n == 0 ? std::make_optional(0) : std::nullopt;\n    }\n    if (a == 0) {\n        return n % b == 0 ? std::make_optional(n / b) : std::nullopt;\n    }\n    if (b == 0) {\n        return n % a == 0 ? std::make_optional(n / a) : std::nullopt;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return std::nullopt;\n    }\n    long x0, y0;\n    std::tie(x0, y0) = find_solution(b / d, a / d, n / d).value();\n    return std::make_optional(std::make_tuple(y0, x0 - y0 * (a / b)));",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0;\n    long y = n / b;\n    while (y * a <= n) {\n        if ((n - y * a) % b == 0) {\n            return std::make_optional(y);\n        }\n        ++y;\n    }\n    return std::nullopt;",
    "    if (a == 0 && b == 0) {\n        return {};\n    }\n    if (a == 0) {\n        return n / b;\n    }\n    if (b == 0) {\n        return n / a;\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return {};\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x0 = 0, y0 = 1;\n    long x1 = 1, y1 = 0;\n    while (a != 0) {\n        long q = b / a;\n        long r = b % a;\n        long x2 = x0 - q * x1;\n        long y2 = y0 - q * y1;\n        x0 = x1;\n        y0 = y1;\n        x1 = x2;\n        y1 = y2;\n        b = a;\n        a = r;\n    }\n    if (n % b != 0) {\n        return {};\n    }\n    return {x0 * (n / b)};",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = n / g;\n    std::tie(x, y) = find_solution(b / g, a / g, d);\n    x = -x;\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return {0, 0};\n        } else {\n            return {};\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return {0, n / b};\n        } else {\n            return {};\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return {n / a, 0};\n        } else {\n            return {};\n        }\n    }\n    long d = std::__gcd(a, b);\n    if (n % d != 0) {\n        return {};\n    }\n    a /= d;\n    b /= d;\n    n /= d;\n    long x, y;\n    std::tie(x, y) = find_solution(b, a % b, n).value();\n    return {y, x - y * (a / b)};",
    "    if (a == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    auto x = find_solution(b % a, a, n);\n    if (x) {\n        return std::make_optional(x.value() - (b / a) * x.value());\n    } else {\n        return std::nullopt;\n    }",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_optional(x);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = gcd(a, b);\n    x = n / d * b / a;\n    y = n / d - x * a / b;\n    return std::make_tuple(x, y);",
    "    if (n % std::gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x = 0, y = 0;\n    long d = std::gcd(a, b);\n    x = n / d * (b / d);\n    y = n / d * (a / d);\n    return std::make_optional(x);",
    "    if (a == 0 && b == 0) {\n        if (n == 0) {\n            return std::make_optional(0);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (a == 0) {\n        if (n % b == 0) {\n            return std::make_optional(n / b);\n        } else {\n            return std::nullopt;\n        }\n    }\n    if (b == 0) {\n        if (n % a == 0) {\n            return std::make_optional(n / a);\n        } else {\n            return std::nullopt;\n        }\n    }\n    long g = std::__gcd(a, b);\n    if (n % g != 0) {\n        return std::nullopt;\n    }\n    long p = a / g;\n    long q = b / g;\n    long r = n / g;\n    long x, y;\n    std::tie(x, y) = find_solution(q, p, r);\n    return std::make_optional(q * x + p * y);",
    "    if (n % gcd(a, b) != 0) {\n        return std::nullopt;\n    }\n    long x, y;\n    long d = gcd(a, b, &x, &y);\n    x *= n / d;\n    y *= n / d;\n    return std::make_tuple(x, y);"
  ]
}