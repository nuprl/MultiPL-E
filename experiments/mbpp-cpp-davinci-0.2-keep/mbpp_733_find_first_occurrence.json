{
  "name": "mbpp_733_find_first_occurrence",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nlong find_first_occurrence(std::vector<long> A, long x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_first_occurrence;\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (1));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (6)) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement this placeholder.\n  return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] < x) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        } else if(A[mid] > x) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size()-1;\n    long mid = 0;\n    long result = -1;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long mid;\n    long result = -1;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement the function here\n    long low = 0;\n    long high = A.size()-1;\n    long mid;\n    long result = -1;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(A[mid] == x){\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid]>x){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long mid;\n    long result = -1;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement the function here\n    long low = 0;\n    long high = A.size() - 1;\n    long mid;\n    long result = -1;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] < x) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long index = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            index = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return index;",
    "    // Implement this placeholder.\n    int low = 0, high = A.size()-1;\n    int result = -1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "  // Implement this placeholder.\n  return 0;",
    "    long first = 0, last = A.size() - 1;\n    long result = -1;\n    while (first <= last) {\n        long mid = first + (last - first) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            last = mid - 1;\n        } else if (A[mid] > x) {\n            last = mid - 1;\n        } else {\n            first = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0, high = A.size() - 1, mid, result = -1;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement the function here\n    long low = 0;\n    long high = A.size()-1;\n    long mid;\n    long result = -1;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long n = A.size();\n    long low = 0;\n    long high = n - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low<=high) {\n        long mid = low + (high-low)/2;\n        if(A[mid]==x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid]>x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement this placeholder.\n  return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long n = A.size();\n    long low = 0;\n    long high = n-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "  // Implement the function here\n  long low = 0;\n  long high = A.size()-1;\n  long mid;\n  long result = -1;\n  while(low <= high) {\n    mid = low + (high - low)/2;\n    if(A[mid] == x) {\n      result = mid;\n      high = mid - 1;\n    }\n    else if(A[mid] > x) {\n      high = mid - 1;\n    }\n    else {\n      low = mid + 1;\n    }\n  }\n  return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0, high = A.size() - 1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(A[mid] == x && (mid == 0 || A[mid - 1] < x)) {\n            return mid;\n        } else if(A[mid] >= x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size()-1;\n    long mid;\n    long result = -1;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement the function here\n    long low = 0;\n    long high = A.size() - 1;\n    long mid = 0;\n    long result = -1;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "  long low = 0;\n  long high = A.size() - 1;\n  long result = -1;\n  while(low <= high) {\n    long mid = low + (high - low) / 2;\n    if(A[mid] == x) {\n      result = mid;\n      high = mid - 1;\n    } else if(A[mid] > x) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if (x < A[mid]) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0, high = A.size()-1;\n    long index = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            index = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return index;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long left = 0;\n    long right = A.size() - 1;\n    long result = -1;\n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            right = mid - 1;\n        } else if (x < A[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "\t// Implement this placeholder.\n\treturn 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0, high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size()-1;\n    long mid;\n    long index = -1;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            index = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return index;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size()-1;\n    long mid;\n    long result = -1;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    // Implement the function here\n    int low = 0;\n    int high = A.size()-1;\n    int mid;\n    int result = -1;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] < x) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long mid;\n    long result = -1;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if (A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long l = 0, r = A.size() - 1;\n    long ans = -1;\n    while(l <= r) {\n        long mid = l + (r - l) / 2;\n        if(A[mid] == x) {\n            ans = mid;\n            r = mid - 1;\n        }\n        else if(A[mid] > x) {\n            r = mid - 1;\n        }\n        else {\n            l = mid + 1;\n        }\n    }\n    return ans;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long l = 0;\n    long r = A.size() - 1;\n    long result = -1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            r = mid - 1;\n        } else if (A[mid] > x) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return result;",
    "  long low = 0, high = A.size()-1;\n  long result = -1;\n  while (low <= high) {\n    long mid = low + (high - low)/2;\n    if (A[mid] == x) {\n      result = mid;\n      high = mid - 1;\n    } else if (A[mid] > x) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long start = 0;\n    long end = A.size()-1;\n    long result = -1;\n    while(start <= end) {\n        long mid = start + (end-start)/2;\n        if(A[mid] == x) {\n            result = mid;\n            end = mid-1;\n        } else if(A[mid] < x) {\n            start = mid+1;\n        } else {\n            end = mid-1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement the solution here.\n  long low = 0;\n  long high = A.size()-1;\n  long mid;\n  long result = -1;\n  while(low <= high){\n    mid = low + (high-low)/2;\n    if(A[mid] == x){\n      result = mid;\n      high = mid - 1;\n    }\n    else if(A[mid] > x){\n      high = mid - 1;\n    }\n    else{\n      low = mid + 1;\n    }\n  }\n  return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "  // Implement this placeholder.\n  return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "  // Implement this placeholder.\n  return 0;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1, mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            if (mid == 0 || A[mid - 1] != x) {\n                return mid;\n            } else {\n                high = mid - 1;\n            }\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement the function here\n  long low = 0, high = A.size()-1;\n  long mid;\n  long ans = -1;\n  while(low <= high) {\n    mid = (low + high) / 2;\n    if(A[mid] == x) {\n      ans = mid;\n      high = mid - 1;\n    }\n    else if(A[mid] < x) {\n      low = mid + 1;\n    }\n    else {\n      high = mid - 1;\n    }\n  }\n  return ans;",
    "    long low = 0;\n    long high = A.size()-1;\n    long mid = 0;\n    long result = -1;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement this placeholder.\n  return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low)/2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if (x < A[mid]) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        } else if(A[mid] > x) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long n = A.size();\n    long low = 0;\n    long high = n - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long mid;\n    long result = -1;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1, mid;\n    long result = -1;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long mid;\n    long result = -1;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "\tlong low = 0;\n\tlong high = A.size()-1;\n\tlong result = -1;\n\twhile(low <= high) {\n\t\tlong mid = low + (high - low)/2;\n\t\tif(A[mid] == x) {\n\t\t\tresult = mid;\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if(A[mid] > x) {\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement this placeholder.\n  return 0;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long start = 0;\n    long end = A.size() - 1;\n    long result = -1;\n    while (start <= end) {\n        long mid = start + (end - start) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            end = mid - 1;\n        } else if (A[mid] > x) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            if (mid == 0 || A[mid - 1] != x) {\n                return mid;\n            } else {\n                high = mid - 1;\n            }\n        } else if (A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        } else if(A[mid] > x) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    // Implement the function here\n    long low = 0;\n    long high = A.size() - 1;\n    long mid;\n    long result = -1;\n    while(low <= high){\n        mid = low + (high - low)/2;\n        if(A[mid] == x){\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x){\n            high = mid - 1;\n        }\n        else{\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1, mid;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            if(mid == 0 || A[mid - 1] < x) {\n                return mid;\n            } else {\n                high = mid - 1;\n            }\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = A.size()-1;\n    long mid;\n    long result = -1;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] > x) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "  // Implement this placeholder.\n  return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        } else if(A[mid] > x) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;"
  ]
}