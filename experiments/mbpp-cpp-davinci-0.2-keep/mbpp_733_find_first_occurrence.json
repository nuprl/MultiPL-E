{
  "name": "mbpp_733_find_first_occurrence",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nlong find_first_occurrence(std::vector<long> A, long x) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_first_occurrence;\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (1));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (5)) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)5, (long)6, (long)6, (long)8, (long)9, (long)9, (long)9})), (6)) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "  // Implement this placeholder.\n  return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        }\n        else if(A[mid] < x) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid-1;\n        } else if(A[mid] > x) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if (A[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size()-1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        } else if(A[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0, high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(A[mid] == x) {\n            result = mid;\n            high = mid - 1;\n        }\n        else if(A[mid] > x) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return result;",
    "    // Implement this placeholder.\n    return 0;",
    "    long low = 0;\n    long high = A.size() - 1;\n    long result = -1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;"
  ]
}