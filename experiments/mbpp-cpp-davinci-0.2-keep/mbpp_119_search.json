{
  "name": "mbpp_119_search",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to find the element that appears only once in a sorted array.\nlong search(std::vector<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    long n = arr.size();\n    long l = 0;\n    long r = n-1;\n    while(l<=r){\n        long mid = l + (r-l)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                r = mid-2;\n            }\n            else{\n                l = mid+1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                l = mid+2;\n            }\n            else{\n                r = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int l = 0, r = n - 1;\n    while (l <= r) {\n        int mid = l + (r - l) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                r = mid - 2;\n            } else {\n                l = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                l = mid + 2;\n            } else {\n                r = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n - 1;\n    while(low <= high) {\n        int mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n - 1)\n            return arr[mid];\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        }\n        else {\n            if(mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1)%2 == 0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else {\n                if((mid-1)%2 == 0) {\n                    high = mid-1;\n                }\n                else {\n                    low = mid+1;\n                }\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if((mid)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid - 2;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid + 2;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size() - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    //  Do not write main() function.\n    // Do not read input, instead use the arguments to the function.\n    // Do not print the output, instead return values as specified\n    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = (low+high)/2;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(mid==0) {\n            if(arr[mid]!=arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid==n-1) {\n            if(arr[mid]!=arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid]==arr[mid-1]) {\n                if((mid-1)%2==0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else if(arr[mid]==arr[mid+1]) {\n                if((mid+1)%2==0) {\n                    low = mid+2;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        else if(arr[mid]==arr[mid-1] && mid%2==0)\n            low = mid+1;\n        else if(arr[mid]==arr[mid+1] && mid%2==1)\n            low = mid+1;\n        else\n            high = mid-1;\n    }\n    return -1;",
    "    //  return 0;\n    int n = arr.size();\n    int start = 0, end = n - 1;\n    while (start <= end) {\n        int mid = start + (end - start) / 2;\n        if (mid == 0 || mid == n - 1)\n            return arr[mid];\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                end = mid - 2;\n            else\n                start = mid + 1;\n        } else {\n            if (mid % 2 == 0)\n                start = mid + 2;\n            else\n                end = mid - 1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while (low <= high) {\n        int mid = low + (high - low)/2;\n        if (mid == 0 || mid == n-1)\n            return arr[mid];\n        if (arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if (arr[mid] == arr[mid-1]) {\n            if (mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if (mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        else if(arr[mid]==arr[mid-1])\n        {\n            if(mid%2==0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid]==arr[mid+1])\n        {\n            if(mid%2==0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1] && mid%2 == 0) {\n            low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid%2 == 1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;",
    "    //  Return the element that appears only once in the array.\n    //  If no such element is found, return -1.\n    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    if(n == 2)\n        return -1;\n    long l = 0, r = n-1;\n    while(l <= r) {\n        long mid = l + (r-l)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                l = mid+1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                r = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1])\n            l = mid+1;\n        else if(arr[mid] == arr[mid+1])\n            r = mid-1;\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    long low = 0;\n    long high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid)%2 == 0)\n                high = mid-1;\n            else\n                low = mid+2;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n        i++;\n    }",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1) % 2 == 0) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else {\n                if((mid-1) % 2 == 0) {\n                    high = mid - 1;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n) {\n        if(arr[i] == arr[i+1]) {\n            i += 2;\n        }\n        else {\n            return arr[i];\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    //  Do not write main() function.\n    //  Do not read input, instead use the arguments to the function.\n    //  Do not print the output, instead return values as specified\n    //  Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = low + (high-low)/2;\n    while(low < high) {\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            return arr[mid];\n        }\n        mid = low + (high-low)/2;\n    }\n    return arr[low];",
    "    //  if(arr.size()==0)\n    //     return -1;\n    // if(arr.size()==1)\n    //     return arr[0];\n    // if(arr.size()==2)\n    //     return -1;\n    // int i=0;\n    // while(i<arr.size()-1)\n    // {\n    //     if(arr[i]!=arr[i+1])\n    //         return arr[i];\n    //     i+=2;\n    // }\n    // return -1;\n    int n=arr.size();\n    if(n==0)\n        return -1;\n    if(n==1)\n        return arr[0];\n    if(n==2)\n        return -1;\n    int low=0;\n    int high=n-1;\n    while(low<=high)\n    {\n        int mid=low+(high-low)/2;\n        if(mid%2==0)\n        {\n            if(arr[mid]==arr[mid+1])\n                low=mid+2;\n            else\n                high=mid-1;\n        }\n        else\n        {\n            if(arr[mid]==arr[mid-1])\n                low=mid+1;\n            else\n                high=mid-1;\n        }\n    }\n    return arr[low];",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid-1)%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0)\n                low = mid+1;\n            else\n                high = mid-2;\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  Please add your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i] != arr[i+1])\n        {\n            return arr[i];\n        }\n    }",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];",
    "    int n = arr.size();\n    int l = 0, r = n-1;\n    while(l<=r) {\n        int mid = (l+r)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                l = mid+1;\n            else\n                r = mid-1;\n        }\n        else {\n            if(mid%2 == 0)\n                r = mid-1;\n            else\n                l = mid+1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = (low+high)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1]){\n                return arr[mid];\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]){\n                if((mid-1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n            else if(arr[mid] == arr[mid+1]){\n                if((mid+1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i<n) {\n        if(arr[i] == arr[i+1]) {\n            i = i+2;\n        } else {\n            return arr[i];\n        }\n    }\n    return -1;",
    "    //  Please add your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];",
    "\t// Write your code here\n\tint n = arr.size();\n\tif (n == 1)\n\t\treturn arr[0];\n\tif (arr[0] != arr[1])\n\t\treturn arr[0];\n\tif (arr[n - 1] != arr[n - 2])\n\t\treturn arr[n - 1];\n\tfor (int i = 1; i < n - 1; i++) {\n\t\tif (arr[i] != arr[i - 1] && arr[i] != arr[i + 1])\n\t\t\treturn arr[i];\n\t}\n\treturn -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid%2 == 0) {\n            if(arr[mid] == arr[mid+1]) {\n                low = mid+2;\n            }\n            else {\n                high = mid-2;\n            }\n        }\n        else {\n            if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    // write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else{\n            if(mid%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if((mid)%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0) {\n            if (arr[mid] != arr[mid + 1]) {\n                return arr[mid];\n            } else {\n                low = mid + 1;\n            }\n        } else if (mid == arr.size() - 1) {\n            if (arr[mid] != arr[mid - 1]) {\n                return arr[mid];\n            } else {\n                high = mid - 1;\n            }\n        } else if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        } else if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid + 1;\n            }\n            else{\n                high = mid - 2;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid)%2 == 0){\n                low = mid + 2;\n            }\n            else{\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "\t// Write your code here\n\tint n = arr.size();\n\tint low = 0;\n\tint high = n - 1;\n\tint mid;\n\twhile (low <= high) {\n\t\tmid = (low + high) / 2;\n\t\tif (mid == 0) {\n\t\t\tif (arr[mid] != arr[mid + 1]) {\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\telse if (mid == n - 1) {\n\t\t\tif (arr[mid] != arr[mid - 1]) {\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t\telse {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n\t\t\t\treturn arr[mid];\n\t\t\t}\n\t\t\telse if (arr[mid] == arr[mid - 1]) {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;",
    "    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n)\n    {\n        if(arr[i] == arr[i+1])\n        {\n            i = i + 2;\n        }\n        else\n        {\n            return arr[i];\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }else{\n                high = mid-1;\n            }\n        }else{\n            if((mid-1)%2 == 0){\n                high = mid-1;\n            }else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    long low = 0, high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  Your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high - low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1])\n        {\n            if((mid-1)%2 == 0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1])\n        {\n            if((mid+1)%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i+=2){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  assert(arr.size()>0);\n    int n = arr.size();\n    if (n == 1)\n        return arr[0];\n    if (arr[0] != arr[1])\n        return arr[0];\n    if (arr[n - 1] != arr[n - 2])\n        return arr[n - 1];\n    int low = 1;\n    int high = n - 2;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        else if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        } else {\n            if (mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n) {\n        if(i == n-1) {\n            return arr[i];\n        }\n        if(arr[i] != arr[i+1]) {\n            return arr[i];\n        }\n        i += 2;\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int i;\n    for(i=0;i<arr.size();i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        i++;\n    }\n    return 0;",
    "    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high - low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid)%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  return 0;\n    int n=arr.size();\n    int low=0,high=n-1;\n    while(low<=high){\n        int mid=(low+high)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low=mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high=mid-1;\n        }\n        else if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0)\n                high=mid-2;\n            else\n                low=mid+1;\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0)\n                low=mid+2;\n            else\n                high=mid-1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high){\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    //  Please add your code here\n    int i;\n    for(i=0;i<arr.size();i++)\n    {\n        if(arr[i]!=arr[i+1] && arr[i]!=arr[i-1])\n        {\n            return arr[i];\n        }\n    }",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = (low+high)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1]){\n                return arr[mid];\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]){\n                if((mid-1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n            else{\n                if((mid-1)%2 == 0){\n                    high = mid-1;\n                }\n                else{\n                    low = mid+1;\n                }\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1)\n            return arr[mid];\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n=arr.size();\n    if(n==1)\n        return arr[0];\n    int i=0;\n    for(i=0;i<n-1;i++)\n    {\n        if(arr[i]!=arr[i+1])\n            return arr[i];\n        i++;\n    }\n    return arr[i];",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1] && mid%2 == 0) {\n            low = mid+1;\n        }\n        else if(arr[mid] == arr[mid-1] && mid%2 != 0) {\n            high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid%2 == 0) {\n            high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1] && mid%2 != 0) {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid+1;\n            else if(arr[mid] == arr[mid+1])\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = (low+high)/2;\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];",
    "    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if ((mid + 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid - 2;\n            }\n            else{\n                low = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                low = mid + 2;\n            }\n            else{\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "\t// Write your code here\n\tint n = arr.size();\n\tif (n == 0)\n\t\treturn -1;\n\tif (n == 1)\n\t\treturn arr[0];\n\tint low = 0;\n\tint high = n - 1;\n\twhile (low <= high) {\n\t\tint mid = low + (high - low) / 2;\n\t\tif (mid == 0) {\n\t\t\tif (arr[mid] != arr[mid + 1])\n\t\t\t\treturn arr[mid];\n\t\t\telse\n\t\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (mid == n - 1) {\n\t\t\tif (arr[mid] != arr[mid - 1])\n\t\t\t\treturn arr[mid];\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n\t\t\treturn arr[mid];\n\t\telse if (arr[mid] == arr[mid - 1]) {\n\t\t\tif (mid % 2 == 0)\n\t\t\t\tlow = mid + 1;\n\t\t\telse\n\t\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] == arr[mid + 1]) {\n\t\t\tif (mid % 2 == 0)\n\t\t\t\thigh = mid - 1;\n\t\t\telse\n\t\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;",
    "    int n = arr.size();\n    if(n==1)\n        return arr[0];\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        else {\n            if(mid%2 == 0)\n                high = mid-1;\n            else\n                low = mid+1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid % 2 == 0){\n                high = mid - 2;\n            }\n            else{\n                low = mid + 1;\n            }\n        }\n        else{\n            if(mid % 2 == 0){\n                low = mid + 2;\n            }\n            else{\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = low + (high-low)/2;\n        if(mid==0)\n        {\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1)\n        {\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else\n        {\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    if(n==1)\n        return arr[0];\n    long low = 0, high = n-1;\n    while(low<=high) {\n        long mid = (low+high)/2;\n        if(mid==0) {\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1) {\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else {\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  Please add your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n){\n        if(i == n-1){\n            return arr[i];\n        }\n        if(arr[i] != arr[i+1]){\n            return arr[i];\n        }\n        i += 2;\n    }",
    "    // Please add your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        else if(arr[mid]==arr[mid-1] && mid%2==0)\n            low = mid+1;\n        else if(arr[mid]==arr[mid-1] && mid%2!=0)\n            high = mid-1;\n        else if(arr[mid]==arr[mid+1] && mid%2==0)\n            high = mid-1;\n        else if(arr[mid]==arr[mid+1] && mid%2!=0)\n            low = mid+1;\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        if(arr[mid] == arr[mid + 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    if(arr[0] != arr[1])\n        return arr[0];\n    if(arr[n-1] != arr[n-2])\n        return arr[n-1];\n    int low = 1, high = n-2;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  Your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        i++;\n    }",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return arr[mid];",
    "    int n = arr.size();\n    int low = 0, high = n - 1;\n    while(low <= high) {\n        int mid = (low + high) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int i;\n    for(i=0;i<arr.size();i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        else\n        {\n            i++;\n        }\n    }",
    "    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        if(arr[mid]==arr[mid-1])\n        {\n            if((mid-1)%2==0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        else\n        {\n            if((mid-1)%2==0)\n                high = mid-1;\n            else\n                low = mid+1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n){\n        if(i == n-1){\n            return arr[i];\n        }\n        if(arr[i] == arr[i+1]){\n            i = i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }",
    "    int n = arr.size();\n    if(n==1)\n        return arr[0];\n    int i=0;\n    while(i<n-1){\n        if(arr[i]!=arr[i+1])\n            return arr[i];\n        i+=2;\n    }\n    return arr[n-1];",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];",
    "    // Write your code here\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid)%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;",
    "    //  return -1;\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1)\n            return arr[mid];\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  Your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n){\n        if(arr[i] != arr[i+1]){\n            return arr[i];\n        }\n        i += 2;\n    }\n    return -1;",
    "    //  Write your code here\n    int n = arr.size();\n    int low = 0, high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid + 1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid - 1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n            return arr[i];\n        i++;\n    }\n    return -1;",
    "    //  Write your code here\n    int n = arr.size();\n    int i = 0;\n    while(i < n){\n        if(arr[i] == arr[i+1]){\n            i += 2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        i++;\n    }\n    return arr[i];",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low+high)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1)%2 == 0) {\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            else {\n                if((mid-1)%2 == 0) {\n                    high = mid-1;\n                }\n                else {\n                    low = mid+1;\n                }\n            }\n        }\n    }\n    return -1;",
    "    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n=arr.size();\n    int i=0;\n    while(i<n){\n        if(arr[i]==arr[i+1]){\n            i=i+2;\n        }\n        else{\n            return arr[i];\n        }\n    }\n    return -1;",
    "    //  Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    int left = 0;\n    int right = n - 1;\n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid + 1])\n                return arr[mid];\n            else\n                left = mid + 1;\n        }\n        else if(mid == n - 1) {\n            if(arr[mid] != arr[mid - 1])\n                return arr[mid];\n            else\n                right = mid - 1;\n        }\n        else {\n            if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid - 1])\n                right = mid - 1;\n            else\n                left = mid + 1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    if(n == 1) return arr[0];\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1]) return arr[mid];\n            else low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1]) return arr[mid];\n            else high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) return arr[mid];\n        else if(arr[mid] == arr[mid-1]) low = mid+1;\n        else high = mid-1;\n    }\n    return -1;",
    "    long n = arr.size();\n    if (n == 1)\n        return arr[0];\n    long start = 0;\n    long end = n - 1;\n    while (start <= end) {\n        long mid = start + (end - start) / 2;\n        if (mid == 0) {\n            if (arr[mid] != arr[mid + 1])\n                return arr[mid];\n            else\n                start = mid + 1;\n        }\n        else if (mid == n - 1) {\n            if (arr[mid] != arr[mid - 1])\n                return arr[mid];\n            else\n                end = mid - 1;\n        }\n        else {\n            if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n                return arr[mid];\n            else if (arr[mid] == arr[mid - 1])\n                end = mid - 2;\n            else\n                start = mid + 2;\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int i;\n    for(i=0;i<arr.size();i++){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n        i++;\n    }\n    return arr[i];",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    long n = arr.size();\n    long ans = arr[0];\n    for(long i = 1; i < n; i++) {\n        ans = ans ^ arr[i];\n    }\n    return ans;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  assert(arr.size()>0);\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    int mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if ((mid) % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    //  Your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        else\n        {\n            i++;\n        }\n    }",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1]){\n                return arr[mid];\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]){\n                if((mid-1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n            else if(arr[mid] == arr[mid+1]){\n                if((mid+1)%2 == 0){\n                    low = mid+1;\n                }\n                else{\n                    high = mid-1;\n                }\n            }\n        }\n    }\n    return -1;",
    "    // write your code here\n    long n=arr.size();\n    long i=0;\n    while(i<n)\n    {\n        if(arr[i]==arr[i+1])\n        {\n            i=i+2;\n        }\n        else\n        {\n            return arr[i];\n        }\n    }\n    return -1;",
    "    //  Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    if(n == 1) {\n        return arr[0];\n    }\n    int mid = n/2;\n    if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n        return arr[mid];\n    }\n    if(arr[mid] == arr[mid-1]) {\n        if(mid % 2 == 0) {\n            return search(std::vector<long>(arr.begin()+mid+1, arr.end()));\n        }\n        else {\n            return search(std::vector<long>(arr.begin(), arr.begin()+mid-1));\n        }\n    }\n    if(arr[mid] == arr[mid+1]) {\n        if(mid % 2 == 0) {\n            return search(std::vector<long>(arr.begin(), arr.begin()+mid-1));\n        }\n        else {\n            return search(std::vector<long>(arr.begin()+mid+2, arr.end()));\n        }\n    }",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  Please add your code here\n    int n=arr.size();\n    int start=0;\n    int end=n-1;\n    int mid;\n    while(start<=end)\n    {\n        mid=(start+end)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n        {\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1])\n        {\n            if(mid%2==0)\n            {\n                end=mid-2;\n            }\n            else\n            {\n                start=mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1])\n        {\n            if(mid%2==0)\n            {\n                start=mid+2;\n            }\n            else\n            {\n                end=mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    for(long i = 0; i < n; i++) {\n        if(i == 0) {\n            if(arr[i] != arr[i+1]) {\n                return arr[i];\n            }\n        }\n        else if(i == n-1) {\n            if(arr[i] != arr[i-1]) {\n                return arr[i];\n            }\n        }\n        else {\n            if(arr[i] != arr[i-1] && arr[i] != arr[i+1]) {\n                return arr[i];\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int i = 0;\n    while(i < n)\n    {\n        if(arr[i] == arr[i+1])\n        {\n            i += 2;\n        }\n        else\n        {\n            return arr[i];\n        }\n    }",
    "    //  Please add your code here\n    long n = arr.size();\n    long i = 0;\n    while(i < n)\n    {\n        if(arr[i] != arr[i+1])\n            return arr[i];\n        i = i + 2;\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  Do not write main() function.\n    // Do not read input, instead use the arguments to the function.\n    // Do not print the output, instead return values as specified\n    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1]) {\n                return arr[mid];\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n                return arr[mid];\n            }\n            else if(arr[mid] == arr[mid-1]) {\n                if((mid-1)%2 == 0) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n            else if(arr[mid] == arr[mid+1]) {\n                if((mid+1)%2 == 0) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid - 1;\n                }\n            }\n        }\n    }\n    return -1;",
    "    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if((mid)%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = (low + high)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else {\n            if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n                return arr[mid];\n            else if(arr[mid] == arr[mid-1])\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  Please add your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++){\n        if(arr[i]!=arr[i+1]){\n            return arr[i];\n        }\n        i++;\n    }",
    "    //  Do not write main() function.\n    // Do not read input, instead use the arguments to the function.\n    // Do not print the output, instead return values as specified\n    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid==0){\n            if(arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid==n-1){\n            if(arr[mid]!=arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else{\n            if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            else if(arr[mid]==arr[mid-1])\n                low = mid+1;\n            else if(arr[mid]==arr[mid+1])\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    int mid;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        if(arr[mid]==arr[mid-1]) {\n            if(mid%2==0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if(mid%2==0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return arr[low];",
    "    //  return the element that appears only once\n    int n = arr.size();\n    if(n==1)\n        return arr[0];\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            if(mid==0 && arr[mid]!=arr[mid+1])\n                return arr[mid];\n            if(mid==n-1 && arr[mid]!=arr[mid-1])\n                return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0)\n                low = mid+1;\n            else\n                high = mid-1;\n        }\n        if(arr[mid]==arr[mid+1]){\n            if((mid+1)%2==0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    //  Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if((mid-1)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if((mid)%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  Write your code here\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = (low+high)/2;\n    while(low<=high)\n    {\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1)\n            return arr[mid];\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1])\n            return arr[mid];\n        if(arr[mid]==arr[mid-1])\n        {\n            if(mid%2==0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else\n        {\n            if(mid%2==0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  return 0;\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    // Write your code here\n    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return 0;\n    int n = arr.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1)\n            return arr[mid];\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1])\n            return arr[mid];\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0)\n                high = mid - 2;\n            else\n                low = mid + 1;\n        }\n        if (arr[mid] == arr[mid + 1]) {\n            if (mid % 2 == 0)\n                low = mid + 2;\n            else\n                high = mid - 1;\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(mid==0 || mid==n-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    if(n == 1)\n        return arr[0];\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        if(mid == 0) {\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1) {\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once in the array\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high){\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    //  return 0;\n    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if((mid-1)%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if((mid+1)%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1)\n            return arr[mid];\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else {\n            if(mid%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        else if(arr[mid] == arr[mid + 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    //  return the element that appears only once\n    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high){\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1){\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]){\n            if(mid%2 == 0){\n                low = mid+1;\n            }else{\n                high = mid-1;\n            }\n        }else{\n            if(mid%2 == 0){\n                high = mid-1;\n            }else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    if(n == 1)\n        return arr[0];\n    int low = 0, high = n-1;\n    while(low <= high){\n        int mid = low + (high - low)/2;\n        if(mid == 0){\n            if(arr[mid] != arr[mid+1])\n                return arr[mid];\n            else\n                low = mid+1;\n        }\n        else if(mid == n-1){\n            if(arr[mid] != arr[mid-1])\n                return arr[mid];\n            else\n                high = mid-1;\n        }\n        else if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])\n            return arr[mid];\n        else if(arr[mid] == arr[mid-1]){\n            if((mid-1)%2 == 0)\n                high = mid-2;\n            else\n                low = mid+1;\n        }\n        else if(arr[mid] == arr[mid+1]){\n            if((mid+1)%2 == 0)\n                low = mid+2;\n            else\n                high = mid-1;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    int n = arr.size();\n    int i;\n    for(i=0;i<n;i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            return arr[i];\n        }\n        i++;\n    }\n    return -1;",
    "    // Write your code here\n    int i=0;\n    int n=arr.size();\n    while(i<n)\n    {\n        if(arr[i]==arr[i+1])\n        {\n            i=i+2;\n        }\n        else\n        {\n            return arr[i];\n        }\n    }\n    return -1;",
    "    //  Return the element that appears only once in the array.\n    //  DO NOT USE ARRAY.\n    //  DO NOT USE SORT.\n    //  DO NOT USE MAP.\n    //  DO NOT USE SET.\n    //  DO NOT USE HASH.\n    //  DO NOT USE DICT.\n    //  DO NOT USE LIST.\n    //  DO NOT USE VECTOR.\n    //  DO NOT USE STACK.\n    //  DO NOT USE QUEUE.\n    //  DO NOT USE DEQUE.\n    //  DO NOT USE PRIORITY QUEUE.\n    //  DO NOT USE HEAP.\n    //  DO NOT USE BINARY SEARCH.\n    //  DO NOT USE BINARY TREE.\n    //  DO NOT USE BINARY SEARCH TREE.\n    //  DO NOT USE RED BLACK TREE.\n    //  DO NOT USE AVL TREE.\n    //  DO NOT USE SEGMENT TREE.\n    //  DO NOT USE TRIE.\n    //  DO NOT USE TRIE NODE.\n    //  DO NOT USE TRIE TREE.\n    //  DO NOT USE TRIE NODE TREE.\n    //  DO NOT USE B TREE.\n    //  DO NOT USE B+ TREE.\n    //  DO NOT USE B* TREE.\n    //  DO NOT USE B# TREE.\n    //  DO NOT USE B- TREE.\n    //  DO NOT USE B^ TREE.\n    //  DO NOT USE B| TREE.\n    //  DO NOT USE B& TREE.\n    //  DO NOT USE B~ TREE.\n    //  DO NOT USE B! TREE.\n    //  DO NOT USE B@ TREE.\n    //  DO NOT USE B$ TREE.\n    //  DO NOT USE B% TREE.\n    //  DO NOT USE B^ TREE.\n    //  DO NOT USE B* TREE.\n    //  DO NOT USE B( TREE.\n    //  DO NOT USE B) TREE.\n    //  DO NOT USE B- TREE.\n    //  DO NOT USE B+ TREE.\n    //  DO NOT USE B= T"
  ]
}