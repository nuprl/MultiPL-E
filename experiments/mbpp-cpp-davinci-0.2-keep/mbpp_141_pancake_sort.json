{
  "name": "mbpp_141_pancake_sort",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> sorted_nums;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = 0;\n        for(int j = 0; j < n - i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(n - i);\n    }\n    return sorted_nums;",
    "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    for(int i=0;i<nums.size();i++){\n        long max_num = *std::max_element(nums.begin(),nums.end());\n        it = std::find(nums.begin(),nums.end(),max_num);\n        int index = std::distance(nums.begin(),it);\n        std::reverse(nums.begin(),it+1);\n        std::reverse(nums.begin(),nums.end());\n        sorted_nums.push_back(index+1);\n        sorted_nums.push_back(nums.size()-i);\n        nums.pop_back();\n    }\n    return sorted_nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=0;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            if(max_index!=0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end() - i));\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != nums.size() - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(nums.size() - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "  int n = nums.size();\n  for (int i = 0; i < n; i++) {\n    int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n    std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n    std::reverse(nums.begin(), nums.begin() + n - i);\n  }\n  return nums;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--)\n    {\n        int max_index=i;\n        for(int j=0;j<=i;j++)\n        {\n            if(nums[j]>nums[max_index])\n            {\n                max_index=j;\n            }\n        }\n        if(max_index!=i)\n        {\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n            result.push_back(i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; ++i) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(size - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i=n;i>1;i--){\n        int max_index = std::distance(nums.begin(),std::max_element(nums.begin(),nums.begin()+i));\n        if(max_index != i-1){\n            if(max_index != 0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(),nums.begin()+i);\n        }\n    }\n    return result;"
  ]
}