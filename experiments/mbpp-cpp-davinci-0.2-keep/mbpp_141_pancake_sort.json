{
  "name": "mbpp_141_pancake_sort",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a list of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> sorted_nums;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = 0;\n        for(int j = 0; j < n - i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(n - i);\n    }\n    return sorted_nums;",
    "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    for(int i=0;i<nums.size();i++){\n        long max_num = *std::max_element(nums.begin(),nums.end());\n        it = std::find(nums.begin(),nums.end(),max_num);\n        int index = std::distance(nums.begin(),it);\n        std::reverse(nums.begin(),it+1);\n        std::reverse(nums.begin(),nums.end());\n        sorted_nums.push_back(index+1);\n        sorted_nums.push_back(nums.size()-i);\n        nums.pop_back();\n    }\n    return sorted_nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=0;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            if(max_index!=0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end() - i));\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != nums.size() - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(nums.size() - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "  int n = nums.size();\n  for (int i = 0; i < n; i++) {\n    int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n    std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n    std::reverse(nums.begin(), nums.begin() + n - i);\n  }\n  return nums;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--)\n    {\n        int max_index=i;\n        for(int j=0;j<=i;j++)\n        {\n            if(nums[j]>nums[max_index])\n            {\n                max_index=j;\n            }\n        }\n        if(max_index!=i)\n        {\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n            result.push_back(i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; ++i) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(size - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i=n;i>1;i--){\n        int max_index = std::distance(nums.begin(),std::max_element(nums.begin(),nums.begin()+i));\n        if(max_index != i-1){\n            if(max_index != 0){\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(),nums.begin()+i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end() - i));\n        if (max_index == nums.size() - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted.push_back(max_index + 1);\n        sorted.push_back(n - i);\n    }\n    return sorted;",
    "    std::vector<long> result;\n    if(nums.size() == 0) return result;\n    int max_index = 0;\n    int max_value = nums[0];\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > max_value) {\n            max_value = nums[i];\n            max_index = i;\n        }\n    }\n    result.push_back(max_index + 1);\n    result.push_back(nums.size());\n    std::reverse(nums.begin(), nums.begin() + max_index + 1);\n    std::reverse(nums.begin(), nums.end());\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] != i + 1) {\n            int index = 0;\n            for(int j = 0; j < nums.size(); j++) {\n                if(nums[j] == i + 1) {\n                    index = j;\n                    break;\n                }\n            }\n            result.push_back(index + 1);\n            result.push_back(nums.size() - i);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - 1 - i) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  for (int i = nums.size() - 1; i > 0; i--) {\n    int max_index = 0;\n    for (int j = 0; j <= i; j++) {\n      if (nums[j] > nums[max_index]) {\n        max_index = j;\n      }\n    }\n    if (max_index != i) {\n      if (max_index != 0) {\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      }\n      result.push_back(i + 1);\n      std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(size - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    for(int i = 0; i < nums.size(); i++) {\n        sorted_nums.push_back(nums[i]);\n    }\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> sorted_nums_copy;\n    for(int i = 0; i < sorted_nums.size(); i++) {\n        sorted_nums_copy.push_back(sorted_nums[i]);\n    }\n    std::vector<long> flips;\n    while(sorted_nums != nums) {\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums[i] == sorted_nums[0]) {\n                if(i == 0) {\n                    flips.push_back(i + 1);\n                    std::reverse(nums.begin(), nums.begin() + i + 1);\n                }\n                else {\n                    flips.push_back(i + 1);\n                    std::reverse(nums.begin(), nums.begin() + i + 1);\n                    flips.push_back(nums.size());\n                    std::reverse(nums.begin(), nums.end());\n                }\n                break;\n            }\n        }\n        sorted_nums.erase(sorted_nums.begin());\n    }\n    return flips;",
    "  std::vector<long> result;\n  for (int i = nums.size() - 1; i >= 0; i--) {\n    int max_index = i;\n    for (int j = 0; j <= i; j++) {\n      if (nums[j] > nums[max_index]) {\n        max_index = j;\n      }\n    }\n    if (max_index != i) {\n      result.push_back(max_index + 1);\n      std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      result.push_back(i + 1);\n      std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n  }\n  return result;",
    "    // TODO: Implement pancake sort\n    return nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end() - i));\n        if (max_index != n - i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + size - i);\n        result.push_back(size - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size(); i > 0; i--) {\n        int index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i));\n        if (index != i - 1) {\n            if (index != 0) {\n                result.push_back(index + 1);\n                std::reverse(nums.begin(), nums.begin() + index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;",
    "    int n = nums.size();\n    std::vector<long> ans;\n    for(int i = n; i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index == i - 1) continue;\n        if(max_index != 0) {\n            ans.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        ans.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return ans;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n            result.push_back(n - i);\n        }\n    }\n    return result;",
    "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        if (index == 0) {\n            continue;\n        }\n        if (index == nums.size() - 1) {\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.end());\n            continue;\n        }\n        result.push_back(index + 1);\n        std::reverse(nums.begin(), nums.begin() + index + 1);\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end());\n    }\n    return result;",
    "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;",
    "    for(int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index == i) {\n            continue;\n        }\n        if(max_index != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;",
    "    int n = nums.size();\n    for (int i = 0; i < n; ++i) {\n        int max_index = std::max_element(nums.begin(), nums.end() - i) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return nums;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index == i - 1) continue;\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index != i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = nums.size() - 1; i >= 0; i--) {\n        long max_index = i;\n        for (long j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    std::vector<long> sorted;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        auto it = std::max_element(nums.begin(), nums.end());\n        int max_index = it - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        sorted.push_back(max_index + 1);\n        sorted.push_back(n - i);\n    }\n    return sorted;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n            result.push_back(n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin()+i+1) - nums.begin();\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_idx = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_idx != i) {\n            result.push_back(max_idx + 1);\n            std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin()+max_index+1);\n        std::reverse(nums.begin(), nums.end());\n        sorted.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted;",
    "    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=0;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index==i)\n            continue;\n        if(max_index!=0){\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n        }\n        result.push_back(i+1);\n        std::reverse(nums.begin(),nums.begin()+i+1);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;",
    "    std::vector<long> sorted;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = 0;\n        for(int j = 0; j < n - i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != n - i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    for(int i=0;i<nums.size();i++){\n        it = std::max_element(nums.begin(),nums.end());\n        sorted_nums.push_back(*it);\n        nums.erase(it);\n    }\n    return sorted_nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size(); i > 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i));\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;",
    "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::max_element(nums.begin(),nums.end())-nums.begin();\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n        sorted.push_back(max_index+1);\n        sorted.push_back(nums.size()-i);\n    }\n    return sorted;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = 0;\n        for (int j = 0; j < n - i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    // Write your code here\n    for(int i=0;i<nums.size();i++){\n        int max_index=i;\n        for(int j=i;j<nums.size();j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - 1 - i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i=0; i<n; i++) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        if(max_index != n-1) {\n            if(max_index != 0) {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(n-i);\n            std::reverse(nums.begin(), nums.end()-i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::max_element(nums.begin(),nums.end())-nums.begin();\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.end());\n        sorted_nums.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted_nums;",
    "    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - 1 - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = 0;\n        for(int j = 0; j < n - i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != n - i - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    // Write your code here.\n    std::vector<long> result;\n    for(long i = nums.size() - 1; i >= 0; i--){\n        long max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i){\n            if(max_index != 0){\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        if (index == 0) {\n            continue;\n        }\n        if (index != nums.size() - 1) {\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n        }\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;",
    "    // Write your code here\n    for(int i=0;i<nums.size();i++){\n        int max_index=i;\n        for(int j=i+1;j<nums.size();j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index!=i){\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return nums;",
    "    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;",
    "    std::vector<long> sorted_nums;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            sorted_nums.push_back(max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        sorted_nums.push_back(i + 1);\n    }\n    return sorted_nums;",
    "    std::vector<long> sorted;\n    long n = nums.size();\n    for(long i = n; i > 0; i--) {\n        long max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return nums;",
    "    std::vector<long> sorted_nums;\n    while(nums.size() > 0) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(nums.back());\n        nums.pop_back();\n    }\n    return sorted_nums;",
    "    std::vector<long> res;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            res.push_back(max_index + 1);\n            res.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return res;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n - i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::max_element(nums.begin(),nums.end())-nums.begin();\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n    }\n    return nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;",
    "    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = 0;\n        for(int j = 0; j < n - i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != n - i - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return nums;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> ans;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            ans.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        ans.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return ans;",
    "    std::vector<long> result;\n    // Write your code here\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        result.push_back(n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i=n;i>0;i--)\n    {\n        int max_index = std::max_element(nums.begin(),nums.begin()+i)-nums.begin();\n        if(max_index!=i-1)\n        {\n            if(max_index!=0)\n            {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(),nums.begin()+max_index+1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(),nums.begin()+i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        if (index != 0) {\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n        }\n        result.push_back(nums.size() - i);\n        std::reverse(nums.begin(), nums.end() - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n            result.push_back(n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    long max_num = *std::max_element(nums.begin(), nums.end());\n    long max_num_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n    std::reverse(nums.begin(), nums.begin() + max_num_index + 1);\n    sorted_nums.push_back(max_num_index + 1);\n    std::reverse(nums.begin(), nums.begin() + max_num);\n    sorted_nums.push_back(max_num);\n    return sorted_nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size(); i > 0; i--) {\n        auto it = std::find(nums.begin(), nums.end(), i);\n        if (it == nums.end()) {\n            return {};\n        }\n        int index = std::distance(nums.begin(), it);\n        if (index == i - 1) {\n            continue;\n        }\n        if (index != 0) {\n            result.push_back(index + 1);\n            std::reverse(nums.begin(), nums.begin() + index + 1);\n        }\n        result.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        long max_num = *std::max_element(nums.begin(), nums.end());\n        long max_num_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        std::reverse(nums.begin(), nums.begin() + max_num_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(max_num);\n    }\n    return sorted_nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    int size = nums.size();\n    for(int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(size - i);\n        nums.pop_back();\n    }\n    return sorted_nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max = std::max_element(nums.begin(), nums.end() - i) - nums.begin();\n        if (max != n - i - 1) {\n            if (max != 0) {\n                result.push_back(max + 1);\n                std::reverse(nums.begin(), nums.begin() + max + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  int n = nums.size();\n  for (int i = 0; i < n; i++) {\n    int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n    if (max_index != n - 1) {\n      std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      result.push_back(max_index + 1);\n      std::reverse(nums.begin(), nums.begin() + n - i);\n      result.push_back(n - i);\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        auto it = std::max_element(nums.begin(), nums.begin()+i+1);\n        if(it != nums.begin()+i) {\n            result.push_back(it-nums.begin()+1);\n            std::reverse(nums.begin(), it+1);\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = i - 1; j >= 0; j--) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        sorted_nums.push_back(max_index + 1);\n        sorted_nums.push_back(size - i);\n        nums.pop_back();\n    }\n    return sorted_nums;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = 0;\n        for (int j = 0; j < n - i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == n - i - 1) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        auto max_it = std::max_element(nums.begin(), nums.end() - i);\n        if (max_it != nums.end() - i - 1) {\n            result.push_back(max_it - nums.begin() + 1);\n            std::reverse(nums.begin(), max_it + 1);\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = i;\n        for (int j = i - 1; j >= 0; j--) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    // TODO: Write your code here\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n      int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n      result.push_back(max_index + 1);\n      result.push_back(n - i);\n      std::reverse(nums.begin(), nums.begin() + max_index + 1);\n      std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;\n  }\n\nint main(){\n  std::vector<long> v1{1, 5, 4, 3, 2};\n  std::vector<long> v2 = pancake_sort(v1);\n  for(auto i : v2){\n    std::cout << i << \" \";\n  }\n  std::cout << std::endl;\n  return 0;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        auto it = std::max_element(nums.begin(), nums.begin() + i + 1);\n        if (it != nums.begin() + i) {\n            result.push_back(std::distance(nums.begin(), it) + 1);\n            std::reverse(nums.begin(), it + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size()-1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            result.push_back(max_index+1);\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+max_index+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n        result.push_back(n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    std::vector<long> ans;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_idx = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_idx == i) continue;\n        if (max_idx != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n            ans.push_back(max_idx + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        ans.push_back(i + 1);\n    }\n    return ans;",
    "    std::vector<long> result;\n    int size = nums.size();\n    for(int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != size - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(size - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n-i-1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(), nums.begin()+max_index+1);\n        }\n        result.push_back(n-i);\n        std::reverse(nums.begin(), nums.begin()+n-i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_idx + 1);\n        std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j < i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;",
    "    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - 1 - i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max = i;\n        for (int j = i + 1; j < n; j++) {\n            if (nums[j] > nums[max]) {\n                max = j;\n            }\n        }\n        if (max != i) {\n            std::reverse(nums.begin(), nums.begin() + max + 1);\n            result.push_back(max + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "  std::vector<long> sorted;\n  int n = nums.size();\n  for (int i = n; i > 0; i--) {\n    auto it = std::find(nums.begin(), nums.end(), i);\n    std::reverse(nums.begin(), it + 1);\n    std::reverse(nums.begin(), nums.begin() + i);\n  }\n  return nums;",
    "    // Write your code here.\n    for(int i = 0; i < nums.size(); i++){\n        int max_index = 0;\n        for(int j = 0; j < nums.size() - i; j++){\n            if(nums[j] > nums[max_index]){\n                max_index = j;\n            }\n        }\n        if(max_index == nums.size() - i - 1){\n            continue;\n        }\n        if(max_index != 0){\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + nums.size() - i);\n    }\n    return nums;",
    "    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    for (int i = 0; i < nums.size(); i++) {\n        int max_index = i;\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;",
    "    std::vector<long> result;\n    int size = nums.size();\n    for (int i = 0; i < size; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        result.push_back(size - i);\n        nums.pop_back();\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        auto max_element = std::max_element(nums.begin(), nums.end() - i);\n        if (max_element != nums.end() - i - 1) {\n            result.push_back(max_element - nums.begin() + 1);\n            std::reverse(nums.begin(), max_element + 1);\n            result.push_back(nums.size() - i);\n            std::reverse(nums.begin(), nums.end() - i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index=0;\n        for(int j=0;j<=i;j++){\n            if(nums[j]>nums[max_index]){\n                max_index=j;\n            }\n        }\n        if(max_index==i)\n            continue;\n        if(max_index!=0){\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n        }\n        result.push_back(i+1);\n        std::reverse(nums.begin(),nums.begin()+i+1);\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; ++i) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index == n - 1 - i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted;\n    int n = nums.size();\n    while (n > 0) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + n));\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n);\n        sorted.push_back(max_index + 1);\n        sorted.push_back(n);\n        n--;\n    }\n    return sorted;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = 0;\n        for (int j = 1; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=nums.size()-1;i>=0;i--){\n        int max_index = std::max_element(nums.begin(),nums.begin()+i+1)-nums.begin();\n        if(max_index!=i){\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(),nums.begin()+max_index+1);\n            result.push_back(i+1);\n            std::reverse(nums.begin(),nums.begin()+i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    // Write your code here.\n    int n = nums.size();\n    std::vector<long> sorted_nums(nums);\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> flips;\n    for (int i = n - 1; i >= 0; i--) {\n        if (nums[i] == sorted_nums[i]) {\n            continue;\n        }\n        int j = 0;\n        while (nums[j] != sorted_nums[i]) {\n            j++;\n        }\n        std::reverse(nums.begin(), nums.begin() + j + 1);\n        flips.push_back(j + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        flips.push_back(i + 1);\n    }\n    return flips;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = 0;\n        for (int j = 0; j < n - i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != n - i - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(nums.begin(), nums.end(), sorted_nums[i]) - nums.begin();\n        result.push_back(index + 1);\n        result.push_back(i + 1);\n        std::reverse(nums.begin(), nums.begin() + index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return result;",
    "    std::vector<long> res;\n    int n = nums.size();\n    for (int i = n - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                res.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            res.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return res;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    int size = nums.size();\n    while(size > 0) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.end()));\n        if(max_index != size - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + size);\n        }\n        sorted_nums.push_back(nums[size - 1]);\n        nums.pop_back();\n        size--;\n    }\n    return sorted_nums;",
    "    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;\n    std::vector<long>::iterator it38;\n    std::vector<",
    "    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if(max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        int max_index = std::distance(nums.begin(),std::max_element(nums.begin(),nums.end()));\n        std::reverse(nums.begin(),nums.begin()+max_index+1);\n        std::reverse(nums.begin(),nums.begin()+nums.size()-i);\n        sorted.push_back(max_index+1);\n        sorted.push_back(nums.size()-i);\n    }\n    return sorted;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        result.push_back(max_index + 1);\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.end() - i);\n        std::reverse(nums.begin(), nums.end());\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index != n-1) {\n            result.push_back(max_index+1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(n-i);\n            std::reverse(nums.begin(), nums.begin() + n-i);\n        }\n    }\n    return result;",
    "    // Write your code here\n    int n = nums.size();\n    for(int i = 0; i < n; i++){\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    std::vector<long> result;\n    for(int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = 0;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        result.push_back(max_index + 1);\n        std::reverse(nums.begin(), nums.end());\n        result.push_back(n);\n        nums.pop_back();\n        n--;\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    int size = nums.size();\n    while(size > 0){\n        int max_index = 0;\n        for(int i = 0; i < size; i++){\n            if(nums[i] > nums[max_index]){\n                max_index = i;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + size);\n        sorted_nums.push_back(nums[size - 1]);\n        nums.pop_back();\n        size--;\n    }\n    return sorted_nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            if(max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n-1; i >= 0; i--) {\n        int max_index = 0;\n        for(int j = 0; j <= i; j++) {\n            if(nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if(max_index != i) {\n            if(max_index != 0) {\n                result.push_back(max_index+1);\n                std::reverse(nums.begin(), nums.begin()+max_index+1);\n            }\n            result.push_back(i+1);\n            std::reverse(nums.begin(), nums.begin()+i+1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n; i > 1; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if(max_index != i - 1) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        sorted_nums.push_back(i + 1);\n    }\n    std::vector<long> result;\n    for (int i = 0; i < nums.size(); i++) {\n        int index = std::find(sorted_nums.begin(), sorted_nums.end(), nums[i]) - sorted_nums.begin();\n        if (index == 0) {\n            continue;\n        }\n        if (index != sorted_nums.size() - 1) {\n            result.push_back(index + 1);\n            std::reverse(sorted_nums.begin(), sorted_nums.begin() + index + 1);\n        }\n        result.push_back(sorted_nums.size() - i);\n        std::reverse(sorted_nums.begin(), sorted_nums.end() - i);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        auto it = std::max_element(nums.begin(), nums.begin() + i + 1);\n        if (it != nums.begin() + i) {\n            result.push_back(it - nums.begin() + 1);\n            std::reverse(nums.begin(), it + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n            result.push_back(n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i + 1));\n        if (max_index == i) {\n            continue;\n        }\n        if (max_index != 0) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            sorted_nums.push_back(max_index + 1);\n        }\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n        sorted_nums.push_back(i + 1);\n    }\n    return sorted_nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;"
  ]
}