{
  "name": "mbpp_417_group_tuples",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find common first element in given list of tuple.\nstd::vector<std::string> group_tuples(std::vector<std::string> Input) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = group_tuples;\n    assert(candidate((std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"x\", \"y\"), (std::tuple<std::string, std::string>)std::make_tuple(\"x\", \"z\"), (std::tuple<std::string, std::string>)std::make_tuple(\"w\", \"t\")}))) == (std::vector<std::string>({std::make_tuple(\"x\", \"y\", \"z\"), std::make_tuple(\"w\", \"t\")})));\n    assert(candidate((std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"a\", \"b\"), (std::tuple<std::string, std::string>)std::make_tuple(\"a\", \"c\"), (std::tuple<std::string, std::string>)std::make_tuple(\"d\", \"e\")}))) == (std::vector<std::string>({std::make_tuple(\"a\", \"b\", \"c\"), std::make_tuple(\"d\", \"e\")})));\n    assert(candidate((std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"f\", \"g\"), (std::tuple<std::string, std::string>)std::make_tuple(\"f\", \"g\"), (std::tuple<std::string, std::string>)std::make_tuple(\"h\", \"i\")}))) == (std::vector<std::string>({std::make_tuple(\"f\", \"g\", \"g\"), std::make_tuple(\"h\", \"i\")})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> result;\n    std::map<std::string, std::vector<std::string>> group;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        group[first].push_back(second);\n    }\n    for (auto i : group) {\n        std::stringstream ss;\n        ss << i.first << \" \";\n        for (auto j : i.second) {\n            ss << j << \" \";\n        }\n        result.push_back(ss.str());\n    }\n    return result;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        m[v[0]].push_back(v[1]);\n    }\n    for(auto i: m) {\n        std::string temp = i.first + \":\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string token;\n        std::vector<std::string> temp;\n        while(std::getline(ss, token, ',')) {\n            temp.push_back(token);\n        }\n        Map[temp[0]].push_back(i);\n    }\n    for(auto i: Map) {\n        std::string temp = \"\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (int i = 0; i < Input.size(); i++) {\n        std::stringstream ss(Input[i]);\n        std::string token;\n        std::vector<std::string> temp;\n        while (std::getline(ss, token, ',')) {\n            temp.push_back(token);\n        }\n        Map[temp[0]].push_back(Input[i]);\n    }\n    for (auto it = Map.begin(); it != Map.end(); it++) {\n        std::string temp = it->first + \":\";\n        for (int i = 0; i < it->second.size(); i++) {\n            temp += it->second[i];\n            if (i != it->second.size() - 1) {\n                temp += \",\";\n            }\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> myMap;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> tempVec;\n        while(std::getline(ss, temp, ',')) {\n            tempVec.push_back(temp);\n        }\n        myMap[tempVec[0]].push_back(tempVec[1]);\n    }\n    for(auto i : myMap) {\n        std::string temp = i.first + \":\";\n        for(auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> V;\n        while (ss >> temp) {\n            V.push_back(temp);\n        }\n        std::string key = V[0];\n        V.erase(V.begin());\n        M[key] = V;\n    }\n    for (auto i : M) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(i);\n    }\n    for(auto i: Map) {\n        std::stringstream ss;\n        for(auto j: i.second) {\n            ss << j << \" \";\n        }\n        Output.push_back(ss.str());\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while(std::getline(ss, temp, ',')) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(i);\n    }\n    for(auto i : Map) {\n        std::string temp;\n        for(auto j : i.second) {\n            temp += j;\n            temp += \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(i);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(i);\n    }\n    for(auto i: Map) {\n        std::string temp = i.second[0];\n        for(int j = 1; j < i.second.size(); j++) {\n            temp += \",\" + i.second[j];\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> output;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        map[v[0]].push_back(v[1]);\n    }\n    for(auto i: map) {\n        std::string temp = i.first + \":\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        output.push_back(temp.substr(0, temp.size()-1));\n    }\n    return output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first + \",\";\n        for(auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(i);\n    }\n    for(auto i : Map) {\n        std::string temp = \"\";\n        for(auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "\tstd::vector<std::string> Output;\n\tstd::map<std::string, std::vector<std::string>> m;\n\tfor (int i = 0; i < Input.size(); i++) {\n\t\tstd::string temp = Input[i];\n\t\tstd::string first = \"\";\n\t\tfor (int j = 0; j < temp.size(); j++) {\n\t\t\tif (temp[j] == ',') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfirst += temp[j];\n\t\t}\n\t\tm[first].push_back(temp);\n\t}\n\tfor (auto it = m.begin(); it != m.end(); it++) {\n\t\tstd::string temp = \"\";\n\t\tfor (int i = 0; i < it->second.size(); i++) {\n\t\t\ttemp += it->second[i];\n\t\t\tif (i != it->second.size() - 1) {\n\t\t\t\ttemp += \",\";\n\t\t\t}\n\t\t}\n\t\tOutput.push_back(temp);\n\t}\n\treturn Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(int i = 0; i < Input.size(); i++) {\n        std::stringstream ss(Input[i]);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while(ss >> temp) {\n            Tuple.push_back(temp);\n        }\n        Map[Tuple[0]].push_back(Input[i]);\n    }\n    for(auto it = Map.begin(); it != Map.end(); it++) {\n        std::string temp;\n        for(int i = 0; i < it->second.size(); i++) {\n            temp += it->second[i] + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "\tstd::vector<std::string> Output;\n\tstd::map<std::string, std::vector<std::string>> Map;\n\tfor (auto i : Input) {\n\t\tstd::stringstream ss(i);\n\t\tstd::string temp;\n\t\tstd::vector<std::string> v;\n\t\twhile (std::getline(ss, temp, ',')) {\n\t\t\tv.push_back(temp);\n\t\t}\n\t\tMap[v[0]].push_back(i);\n\t}\n\tfor (auto i : Map) {\n\t\tstd::stringstream ss;\n\t\tfor (auto j : i.second) {\n\t\t\tss << j << \" \";\n\t\t}\n\t\tOutput.push_back(ss.str());\n\t}\n\treturn Output;",
    "    std::vector<std::string> result;\n    std::unordered_map<std::string, std::vector<std::string>> map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string first;\n        std::getline(ss, first, ',');\n        map[first].push_back(i);\n    }\n    for(auto i : map) {\n        result.push_back(i.second[0]);\n    }\n    return result;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for(auto i:Input){\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(ss>>temp){\n            v.push_back(temp);\n        }\n        m[v[0]].push_back(i);\n    }\n    for(auto i:m){\n        Output.push_back(i.first);\n        for(auto j:i.second){\n            Output.push_back(j);\n        }\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::unordered_map<std::string, std::vector<std::string>> Map;\n    for(auto &i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while(ss >> temp) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(i);\n    }\n    for(auto &i : Map) {\n        std::string temp = i.first;\n        for(auto &j : i.second) {\n            temp = temp + \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto &i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(i);\n    }\n    for (auto &i : Map) {\n        std::string temp = i.second[0];\n        for (int j = 1; j < i.second.size(); j++) {\n            temp += \",\" + i.second[j];\n        }\n        Output.push_back(temp);\n    }\n    return Output;"
  ]
}