{
  "name": "mbpp_475_sort_counter",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to sort a dictionary by value.\nstd::vector<Union_std_string_long> sort_counter(std::map<std::string,long> dict1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = sort_counter;\n    assert(candidate((std::map<std::string,long>({{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 87), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 83), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 81)})));\n    assert(candidate((std::map<std::string,long>({{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Math\", 400), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 300), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 250)})));\n    assert(candidate((std::map<std::string,long>({{\"Math\", 900}, {\"Physics\", 1000}, {\"Chemistry\", 1250}}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 1250), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 1000), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 900)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<Union_std_string_long> v;\n    for(auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if(a.f1 == b.f1) {\n            return a.f0 < b.f0;\n        }\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& x : dict1) {\n        v.push_back(x.second);\n    }\n    std::sort(v.begin(), v.end());\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    std::map<std::string,long>::iterator it;\n    for (it = dict1.begin(); it != dict1.end(); it++) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    return v;",
    "    std::vector<Union_std_string_long> res;\n    std::map<std::string, long>::iterator it;\n    for (it = dict1.begin(); it != dict1.end(); it++) {\n        res.push_back(Union_std_string_long(it->first));\n        res.push_back(Union_std_string_long(it->second));\n    }\n    return res;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); it++) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(it->second);\n    }\n    std::sort(v.begin(), v.end());\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for(auto it = dict1.begin(); it != dict1.end(); it++) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& x : dict1) {\n        v.push_back(x.second);\n    }\n    std::sort(v.begin(), v.end());\n    return v;",
    "    std::vector<Union_std_string_long> dict2;\n    for (auto const& x : dict1) {\n        dict2.push_back(Union_std_string_long(x.first));\n        dict2.push_back(Union_std_string_long(x.second));\n    }\n    std::sort(dict2.begin(), dict2.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return dict2;",
    "    std::vector<Union_std_string_long> v;\n    for (auto i = dict1.begin(); i != dict1.end(); ++i) {\n        v.push_back(i->second);\n    }\n    std::sort(v.begin(), v.end());\n    return v;",
    "    std::vector<Union_std_string_long> dict2;\n    for(auto it = dict1.begin(); it != dict1.end(); it++) {\n        dict2.push_back(Union_std_string_long(it->first));\n        dict2.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(dict2.begin(), dict2.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if (a.f1 == b.f1) {\n            return a.f0 < b.f0;\n        }\n        return a.f1 > b.f1;\n    });\n    return dict2;",
    "    std::vector<Union_std_string_long> v;\n    for(auto i : dict1) {\n        v.push_back(Union_std_string_long(i.first));\n        v.push_back(Union_std_string_long(i.second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if (a.f1 == b.f1) {\n            return a.f0 < b.f0;\n        }\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& x : dict1) {\n        v.push_back(Union_std_string_long(x.first));\n        v.push_back(Union_std_string_long(x.second));\n    }\n    std::sort(v.begin(), v.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for(auto i:dict1) {\n        v.push_back(Union_std_string_long(i.first));\n        v.push_back(Union_std_string_long(i.second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if (a.f1 == b.f1) {\n            return a.f0 < b.f0;\n        }\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); it++) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto x : dict1) {\n        v.push_back(x.second);\n    }\n    std::sort(v.begin(), v.end());\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    std::map<std::string,long>::iterator it;\n    for (it = dict1.begin(); it != dict1.end(); it++) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return v;"
  ]
}