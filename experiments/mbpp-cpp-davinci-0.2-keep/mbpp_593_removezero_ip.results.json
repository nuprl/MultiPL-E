{
  "name": "mbpp_593_removezero_ip",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0, 1);\n        }\n        res += temp + \".\";\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpiy4rz418: /tmp/tmpiy4rz418.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '.') {\n            res += ip[i];\n            count = 0;\n        }\n        else if(ip[i] != '0' || count > 0) {\n            res += ip[i];\n            count++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpcak8b8p3: /tmp/tmpcak8b8p3.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int len = ip.length();\n    int i = 0;\n    while(i < len && ip[i] == '0') {\n        i++;\n    }\n    while(i < len) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmp7p2466gb: /tmp/tmp7p2466gb.cpp:19: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    if(count == ip.length()) {\n        return \"0\";\n    }\n    else {\n        result = ip.substr(count, ip.length() - count);\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmp4mdd50zx: /tmp/tmp4mdd50zx.cpp:25: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n\tstd::string res;\n\tint i = 0;\n\twhile(ip[i] == '0') {\n\t\ti++;\n\t}\n\tres = ip.substr(i, ip.length() - i);\n\treturn res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpqanzl67a: /tmp/tmpqanzl67a.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    std::stringstream ss(ip);\n    std::string temp;\n    while(std::getline(ss, temp, '.')) {\n        int num = std::stoi(temp);\n        if(num == 0) {\n            result += \"0.\";\n        } else {\n            result += std::to_string(num) + \".\";\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            result += token.substr(1);\n        } else {\n            result += token;\n        }\n        result += \".\";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp = temp.substr(1);\n        }\n        result += temp + '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int len = ip.length();\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < len; i++) {\n        res.push_back(ip[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpo4nhmtqc: /tmp/tmpo4nhmtqc.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int count = 0;\n    int n = ip.length();\n    for(int i = 0; i < n; i++) {\n        if(ip[i] == '.') {\n            count = 0;\n            res += ip[i];\n        }\n        else if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        else {\n            count++;\n            res += ip[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpcak8b8p3: /tmp/tmpcak8b8p3.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss;\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    if(count == ip.size()) {\n        return \"0\";\n    }\n    for(int i = count; i < ip.size(); i++) {\n        ss << ip[i];\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpwypxxmbv: /tmp/tmpwypxxmbv.cpp:25: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    return ip.substr(i);\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpaxpewzb6: /tmp/tmpaxpewzb6.cpp:13: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n\tstd::string result = \"\";\n\tint i = 0;\n\twhile (ip[i] == '0') {\n\t\ti++;\n\t}\n\twhile (i < ip.length()) {\n\t\tresult += ip[i];\n\t\ti++;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpvuck3zd8: /tmp/tmpvuck3zd8.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            token.erase(0, 1);\n        }\n        result += token + '.';\n    }\n    result.erase(result.size() - 1, 1);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            res += temp.substr(1);\n        } else {\n            res += temp;\n        }\n        res += '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123744,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123744,
      "stdout": "",
      "stderr": "tmp0cw2qrkf: /tmp/tmp0cw2qrkf.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123744,
      "stdout": "",
      "stderr": "tmp2ebk9vhi: /tmp/tmp2ebk9vhi.cpp:22: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123744,
      "stdout": "",
      "stderr": "tmp0cw2qrkf: /tmp/tmp0cw2qrkf.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(;i<ip.length();i++) {\n        res.push_back(ip[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmp57fa4a35: /tmp/tmp57fa4a35.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '.') {\n            res += '.';\n            count = 0;\n        }\n        else if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        else {\n            res += ip[i];\n            count++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '.') {\n            if(count == 0) {\n                result += ip[i];\n            } else {\n                result += std::to_string(count);\n                result += ip[i];\n                count = 0;\n            }\n        } else {\n            count++;\n        }\n    }\n    if(count != 0) {\n        result += std::to_string(count);\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmpx_k12rsa: /tmp/tmpx_k12rsa.cpp:27: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n\tstd::string res;\n\tint i = 0;\n\twhile (ip[i] == '0') {\n\t\ti++;\n\t}\n\tfor (; i < ip.length(); i++) {\n\t\tres += ip[i];\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmp5yehdoc_: /tmp/tmp5yehdoc_.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss;\n    std::string temp;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '.') {\n            if(temp.size() == 0) {\n                temp = \"0\";\n            }\n            ss << temp << \".\";\n            temp.clear();\n        } else {\n            temp += ip[i];\n        }\n    }\n    if(temp.size() == 0) {\n        temp = \"0\";\n    }\n    ss << temp;\n    return ss.str();\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmpza_d4nqt: /tmp/tmpza_d4nqt.cpp:26: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        result += ip[i];\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "tmpduzpvyiy: /tmp/tmpduzpvyiy.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    int n = ip.length();\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    return ip.substr(i, n-i);\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmprg6b8wqa: /tmp/tmprg6b8wqa.cpp:14: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        res += ip[i];\n        count++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmpibduf7oo: /tmp/tmpibduf7oo.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n\tstd::string result;\n\tstd::stringstream ss(ip);\n\tstd::string temp;\n\twhile(std::getline(ss, temp, '.')) {\n\t\tif(temp.size() > 1 && temp[0] == '0') {\n\t\t\ttemp.erase(0,1);\n\t\t}\n\t\tresult += temp + '.';\n\t}\n\tresult.pop_back();\n\treturn result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmpqqrrk2hn: /tmp/tmpqqrrk2hn.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0, 1);\n        }\n        result += temp + '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.size()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmppamzbz0p: /tmp/tmppamzbz0p.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0,1);\n        }\n        result += temp + \".\";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        result += ip[i];\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "tmpdqn_l_jg: /tmp/tmpdqn_l_jg.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0, 1);\n        }\n        result += temp + \".\";\n    }\n    result.erase(result.size() - 1, 1);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string item;\n    std::string result;\n    while(std::getline(ss, item, '.')) {\n        int i = std::stoi(item);\n        result += std::to_string(i);\n        result += '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.length(); i++) {\n        res.push_back(ip[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmpsrtw_vzi: /tmp/tmpsrtw_vzi.cpp:22: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int count = 0;\n    for (int i = 0; i < ip.length(); i++) {\n        if (ip[i] == '.') {\n            count = 0;\n            res += ip[i];\n        } else if (ip[i] == '0' && count == 0) {\n            continue;\n        } else {\n            res += ip[i];\n            count++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpcak8b8p3: /tmp/tmpcak8b8p3.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n\tstd::string result;\n\tint i = 0;\n\twhile (ip[i] == '0') {\n\t\ti++;\n\t}\n\tresult = ip.substr(i);\n\treturn result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmpz11th2ju: /tmp/tmpz11th2ju.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < ip.length(); i++) {\n        if (ip[i] == '0' && count == 0) {\n            continue;\n        }\n        else {\n            result += ip[i];\n            count++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmp_qvhwvef: /tmp/tmp_qvhwvef.cpp:20: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string ans;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        ans += ip[i];\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmpt8knhd8x: /tmp/tmpt8knhd8x.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        res.push_back(ip[i]);\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "tmpckds87_9: /tmp/tmpckds87_9.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.length(); i++) {\n        res.push_back(ip[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmpsrtw_vzi: /tmp/tmpsrtw_vzi.cpp:22: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    int n = ip.size();\n    std::string ans = \"\";\n    int i = 0;\n    while(i < n) {\n        if(ip[i] == '.') {\n            ans += ip[i];\n            i++;\n        }\n        else {\n            int j = i;\n            while(j < n && ip[j] != '.') {\n                j++;\n            }\n            std::string temp = ip.substr(i, j - i);\n            if(temp[0] == '0') {\n                int k = 0;\n                while(k < temp.size() && temp[k] == '0') {\n                    k++;\n                }\n                temp = temp.substr(k, temp.size() - k);\n            }\n            ans += temp;\n            i = j;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        int val = std::stoi(token);\n        result += std::to_string(val);\n        result += '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    std::stringstream ss(ip);\n    std::string temp;\n    while(std::getline(ss, temp, '.')) {\n        int num = std::stoi(temp);\n        res += std::to_string(num);\n        res += '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.length(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmp5n3vushy: /tmp/tmp5n3vushy.cpp:22: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    if(count == ip.length()) {\n        return \"0\";\n    }\n    for(int i = count; i < ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmpiozgec3x: /tmp/tmpiozgec3x.cpp:24: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(temp.begin());\n        }\n        res += temp + '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmp91dn4ukr: /tmp/tmp91dn4ukr.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '.') {\n            count = 0;\n            result += ip[i];\n        } else if(ip[i] == '0') {\n            count++;\n        } else {\n            for(int j = 0; j < count; j++) {\n                result += '0';\n            }\n            count = 0;\n            result += ip[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmpsudw7abq: /tmp/tmpsudw7abq.cpp:25: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "tmpycqtvorg: /tmp/tmpycqtvorg.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n  std::string res;\n  int i = 0;\n  while(ip[i] == '0') {\n    i++;\n  }\n  res = ip.substr(i);\n  return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123741,
      "stdout": "",
      "stderr": "tmp8mo8xwq7: /tmp/tmp8mo8xwq7.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(i < ip.length() && ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmp267vu8f9: /tmp/tmp267vu8f9.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while (ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmps_ixfmsh: /tmp/tmps_ixfmsh.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123744,
      "stdout": "",
      "stderr": "tmp2ebk9vhi: /tmp/tmp2ebk9vhi.cpp:22: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '.') {\n            if(count == 0) {\n                res.push_back('0');\n            }\n            res.push_back(ip[i]);\n            count = 0;\n        }\n        else {\n            if(ip[i] != '0') {\n                count = 1;\n            }\n            if(count == 1) {\n                res.push_back(ip[i]);\n            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string item;\n    std::string res;\n    while(std::getline(ss, item, '.')) {\n        if(item.size() > 1 && item[0] == '0') {\n            item = item.substr(1);\n        }\n        res += item + \".\";\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0, 1);\n        }\n        res += temp + \".\";\n    }\n    res.erase(res.size() - 1);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        result += ip[i];\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "tmpduzpvyiy: /tmp/tmpduzpvyiy.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '.') {\n            count = 0;\n        }\n        if(ip[i] != '0' || count > 0 || ip[i] == '.') {\n            res += ip[i];\n            count++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmp1kv7hem2: /tmp/tmp1kv7hem2.cpp:20: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0' && count == 0) {\n            continue;\n        } else {\n            result += ip[i];\n            count++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123744,
      "stdout": "",
      "stderr": "tmp9nxhkl6d: /tmp/tmp9nxhkl6d.cpp:19: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.length() > 1 && token[0] == '0') {\n            result += token.substr(1, token.length() - 1);\n        } else {\n            result += token;\n        }\n        result += '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string s;\n    std::string res;\n    while(std::getline(ss, s, '.')) {\n        if(s.size() > 1 && s[0] == '0') {\n            s = s.substr(1);\n        }\n        res += s + \".\";\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(temp.begin());\n        }\n        result += temp + \".\";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int count = 0;\n    for (int i = 0; i < ip.length(); i++) {\n        if (ip[i] == '.') {\n            count = 0;\n        }\n        if (ip[i] == '0' && count == 0) {\n            continue;\n        }\n        result += ip[i];\n        count++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmp53k5fudi: /tmp/tmp53k5fudi.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < ip.size(); i++) {\n        if (ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for (int i = count; i < ip.size(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmpouxmuw4t: /tmp/tmpouxmuw4t.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string s;\n    std::string res;\n    while(getline(ss, s, '.')) {\n        if(s.size() > 1 && s[0] == '0') {\n            s.erase(0, 1);\n        }\n        res += s + \".\";\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string item;\n    std::string res;\n    while(std::getline(ss, item, '.')) {\n        if(item.size() > 1 && item[0] == '0') {\n            res += item.substr(1);\n        } else {\n            res += item;\n        }\n        res += '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123744,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "tmpycqtvorg: /tmp/tmpycqtvorg.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n  std::string result;\n  int i = 0;\n  while(ip[i] == '0') {\n    i++;\n  }\n  result = ip.substr(i);\n  return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "tmpaa63jxkr: /tmp/tmpaa63jxkr.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmpqqrrk2hn: /tmp/tmpqqrrk2hn.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.length(); i++) {\n        res.push_back(ip[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmpkw4aa2v1: /tmp/tmpkw4aa2v1.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(i < ip.size() && ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.size()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123741,
      "stdout": "",
      "stderr": "tmp139xamwt: /tmp/tmp139xamwt.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n  std::string res;\n  int i = 0;\n  while (ip[i] == '0') {\n    i++;\n  }\n  res = ip.substr(i);\n  return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmp497bf0g2: /tmp/tmp497bf0g2.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while (ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "tmps_ixfmsh: /tmp/tmps_ixfmsh.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n  std::stringstream ss(ip);\n  std::string temp;\n  std::string res;\n  while(std::getline(ss, temp, '.')) {\n    int num = std::stoi(temp);\n    res += std::to_string(num);\n    res += '.';\n  }\n  res.pop_back();\n  return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpiy4rz418: /tmp/tmpiy4rz418.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i, ip.length()-i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmpc5iu6nks: /tmp/tmpc5iu6nks.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss,temp,'.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0,1);\n        }\n        result += temp + '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string item;\n    std::string res;\n    while(std::getline(ss, item, '.')) {\n        res += item;\n        res += '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmpiphghfrd: /tmp/tmpiphghfrd.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string ans;\n    while(getline(ss, temp, '.')) {\n        int num = std::stoi(temp);\n        if(num == 0) {\n            continue;\n        }\n        else {\n            ans += std::to_string(num);\n            ans += \".\";\n        }\n    }\n    ans.pop_back();\n    return ans;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0, 1);\n        }\n        result += temp + '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n  std::string res;\n  int i = 0;\n  while(ip[i] == '0') {\n    i++;\n  }\n  res = ip.substr(i, ip.size() - i);\n  return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmpqsi6c6uc: /tmp/tmpqsi6c6uc.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        while(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(temp.begin());\n        }\n        result += temp + '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < ip.length(); i++) {\n        if (ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for (int i = count; i < ip.length(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmpslmwe80y: /tmp/tmpslmwe80y.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string item;\n    std::string res;\n    while(std::getline(ss, item, '.')) {\n        if(item.size() > 1 && item[0] == '0') {\n            item.erase(item.begin());\n        }\n        res += item + \".\";\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string s;\n    std::string res;\n    while(getline(ss,s,'.')) {\n        if(s.size() > 1 && s[0] == '0') {\n            s.erase(s.begin());\n        }\n        res += s + '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i, ip.length() - i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmphm5zp40v: /tmp/tmphm5zp40v.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(i < ip.size() && ip[i] == '0') {\n        i++;\n    }\n    if(i == ip.size()) {\n        return \"0\";\n    }\n    for(; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmpirt08x_g: /tmp/tmpirt08x_g.cpp:20: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string item;\n    std::vector<std::string> octets;\n    while(std::getline(ss, item, '.')) {\n        octets.push_back(item);\n    }\n    std::string result;\n    for(auto octet : octets) {\n        int i = 0;\n        while(octet[i] == '0') {\n            i++;\n        }\n        result += octet.substr(i);\n        result += '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.size(); i++) {\n        res.push_back(ip[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123741,
      "stdout": "",
      "stderr": "tmpbw33ho4_: /tmp/tmpbw33ho4_.cpp:22: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            token.erase(0, 1);\n        }\n        result += token + '.';\n    }\n    result.erase(result.size() - 1);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            res += temp.substr(1);\n        } else {\n            res += temp;\n        }\n        res += '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123744,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i=0;\n    while(ip[i]=='0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmp_ekk3klk: /tmp/tmp_ekk3klk.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i, ip.length() - i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmphm5zp40v: /tmp/tmphm5zp40v.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int count = 0;\n    for (int i = 0; i < ip.size(); i++) {\n        if (ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for (int i = count; i < ip.size(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmptrquywzn: /tmp/tmptrquywzn.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '.') {\n            count = 0;\n            result += ip[i];\n        }\n        else if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        else {\n            count++;\n            result += ip[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '.') {\n            res += ip[i];\n            count = 0;\n        } else {\n            if(ip[i] != '0' || count > 0) {\n                res += ip[i];\n                count++;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for (int i = 0; i < ip.length(); i++) {\n        if (ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for (int i = count; i < ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmpgmfo418o: /tmp/tmpgmfo418o.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    return ip.substr(i);\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpaxpewzb6: /tmp/tmpaxpewzb6.cpp:13: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(i < ip.size() && ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.size()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123741,
      "stdout": "",
      "stderr": "tmp139xamwt: /tmp/tmp139xamwt.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        int num = std::stoi(temp);\n        if(num == 0) {\n            res += \"0.\";\n        } else {\n            res += std::to_string(num) + \".\";\n        }\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(;i < ip.length(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmp7avesjr5: /tmp/tmp7avesjr5.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpcak8b8p3: /tmp/tmpcak8b8p3.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0,1);\n        }\n        res += temp + '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            result += token.substr(1, token.size() - 1);\n        } else {\n            result += token;\n        }\n        result += '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "tmpycqtvorg: /tmp/tmpycqtvorg.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < ip.size(); i++) {\n        if (ip[i] == '0' && count == 0) {\n            continue;\n        } else {\n            count++;\n            result += ip[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmpwighw30v: /tmp/tmpwighw30v.cpp:19: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '.') {\n            count = 0;\n            result.push_back(ip[i]);\n        }\n        else if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        else {\n            result.push_back(ip[i]);\n            count++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        result += ip[i];\n        count++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmpzs2_8vo3: /tmp/tmpzs2_8vo3.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    int n = ip.length();\n    while(i < n && ip[i] == '0') {\n        i++;\n    }\n    while(i < n) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmp6l351s2n: /tmp/tmp6l351s2n.cpp:19: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n\tstd::string res;\n\tint i = 0;\n\twhile(ip[i] == '0') {\n\t\ti++;\n\t}\n\tfor(; i < ip.size(); i++) {\n\t\tres.push_back(ip[i]);\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmp_zfstny3: /tmp/tmp_zfstny3.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int count = 0;\n    for (int i = 0; i < ip.size(); i++) {\n        if (ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    if (count == ip.size()) {\n        return \"0\";\n    }\n    for (int i = count; i < ip.size(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmpwmcsg0gs: /tmp/tmpwmcsg0gs.cpp:25: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123741,
      "stdout": "",
      "stderr": "tmpgkjgtvh4: /tmp/tmpgkjgtvh4.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string res;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            token.erase(0, 1);\n        }\n        res += token + \".\";\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(i < ip.size() && ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.size()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123741,
      "stdout": "",
      "stderr": "tmp139xamwt: /tmp/tmp139xamwt.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i=0;\n    while(ip[i]=='0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmp_ekk3klk: /tmp/tmp_ekk3klk.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123741,
      "stdout": "",
      "stderr": "tmpi_fliko0: /tmp/tmpi_fliko0.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string ret;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            token.erase(0, 1);\n        }\n        ret += token + \".\";\n    }\n    ret.erase(ret.end() - 1);\n    return ret;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i, ip.size()-i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmp5tvr047x: /tmp/tmp5tvr047x.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '.') {\n            count = 0;\n        }\n        if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        result += ip[i];\n        count++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmpb7b78fz6: /tmp/tmpb7b78fz6.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp = temp.substr(1);\n        }\n        res += temp + '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string res;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            token.erase(0,1);\n        }\n        res += token + '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "tmplka324lk: /tmp/tmplka324lk.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpcak8b8p3: /tmp/tmpcak8b8p3.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        result += ip[i];\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "tmpduzpvyiy: /tmp/tmpduzpvyiy.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.length() > 1 && token[0] == '0') {\n            result += token.substr(1);\n        } else {\n            result += token;\n        }\n        result += '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < ip.length(); i++) {\n        if (ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for (int i = count; i < ip.length(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "tmpslmwe80y: /tmp/tmpslmwe80y.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string res;\n    while(std::getline(ss, token, '.')) {\n        int num = std::stoi(token);\n        res += std::to_string(num);\n        res += '.';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            token.erase(0,1);\n        }\n        result += token + \".\";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        int num = std::stoi(temp);\n        if(num == 0) {\n            result += \"0.\";\n        } else {\n            result += std::to_string(num) + \".\";\n        }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.length(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmp0k8doioq: /tmp/tmp0k8doioq.cpp:22: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmp7z61d2kl: /tmp/tmp7z61d2kl.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmp91dn4ukr: /tmp/tmp91dn4ukr.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509711,
      "stdout": "",
      "stderr": "tmpcak8b8p3: /tmp/tmpcak8b8p3.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    std::stringstream ss(ip);\n    std::string temp;\n    while(std::getline(ss, temp, '.')) {\n        int num = std::stoi(temp);\n        result += std::to_string(num);\n        result += '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '.') {\n            count = 0;\n            result += ip[i];\n        } else if(ip[i] != '0' || count != 0) {\n            count++;\n            result += ip[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n\tstd::string result;\n\tint i = 0;\n\twhile(ip[i] == '0') {\n\t\ti++;\n\t}\n\tresult = ip.substr(i, ip.size() - i);\n\treturn result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp9t8t31k2: /tmp/tmp9t8t31k2.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    return ip.substr(i);\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpaxpewzb6: /tmp/tmpaxpewzb6.cpp:13: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    int j = 0;\n    while(i < ip.size()) {\n        if(ip[i] == '.') {\n            if(i == j) {\n                j++;\n            }\n            else {\n                res += ip.substr(j, i-j);\n                res += '.';\n                j = i+1;\n            }\n        }\n        i++;\n    }\n    if(i == j) {\n        res += ip.substr(j, i-j);\n    }\n    else {\n        res += ip.substr(j, i-j);\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp21suvgkl: /tmp/tmp21suvgkl.cpp:31: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        else {\n            result += ip[i];\n            count++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpfx1vjkd1: /tmp/tmpfx1vjkd1.cpp:20: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n  std::string res;\n  int count = 0;\n  for(int i = 0; i < ip.length(); i++) {\n    if(ip[i] == '0' && count == 0) {\n      continue;\n    }\n    res += ip[i];\n    count++;\n  }\n  return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmps2r6g920: /tmp/tmps2r6g920.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0')\n        i++;\n    for(; i < ip.size(); i++)\n        res += ip[i];\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmplbyy7zeu: /tmp/tmplbyy7zeu.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpg3osi2pw: /tmp/tmpg3osi2pw.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        res += ip[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmpqqrrk2hn: /tmp/tmpqqrrk2hn.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    return ip.substr(count);\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpg272he4j: /tmp/tmpg272he4j.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.length()) {\n        result += ip[i];\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "tmpduzpvyiy: /tmp/tmpduzpvyiy.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int count = 0;\n    for(int i=0; i<ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for(int i=count; i<ip.length(); i++) {\n        result.push_back(ip[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmprjc9mlnt: /tmp/tmprjc9mlnt.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.length(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmp0k8doioq: /tmp/tmp0k8doioq.cpp:22: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.size()) {\n        res.push_back(ip[i]);\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmphge0bebg: /tmp/tmphge0bebg.cpp:18: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.size(); i++) {\n        result += ip[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "tmpfuvfxfp0: /tmp/tmpfuvfxfp0.cpp:17: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i, ip.length()-i);\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "tmpivp87qnq: /tmp/tmpivp87qnq.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i=0; i<ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i=count; i<ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpdgh6v940: /tmp/tmpdgh6v940.cpp:22: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "tmpx36fb3sz: /tmp/tmpx36fb3sz.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int i = 0;\n    while(i < ip.size() && ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpboxesiwo: /tmp/tmpboxesiwo.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            result += token.substr(1, token.size()-1);\n        } else {\n            result += token;\n        }\n        result += '.';\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i, ip.length() - i);\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "tmpxj48w7ck: /tmp/tmpxj48w7ck.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    if(count == ip.size()) {\n        return \"0\";\n    }\n    for(int i = count; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmpu84fljbh: /tmp/tmpu84fljbh.cpp:25: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n    std::string res;\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "tmpy5zv11h_: /tmp/tmpy5zv11h_.cpp:21: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n  std::string result;\n  int i = 0;\n  while(ip[i] == '0') {\n    i++;\n  }\n  result = ip.substr(i, ip.size() - i);\n  return result;\n}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
      "timestamp": 1666123753,
      "stdout": "",
      "stderr": "tmp530jcum6: /tmp/tmp530jcum6.cpp:15: int main(): Assertion `candidate((\"216.08.094.196\")) == (\"216.8.94.196\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}