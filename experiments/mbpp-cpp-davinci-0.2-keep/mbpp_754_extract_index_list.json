{
  "name": "mbpp_754_extract_index_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nstd::any extract_index_list(std::vector<long> l1, std::vector<long> l2, std::vector<long> l3) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = extract_index_list;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::any({(long)1, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)6, (long)5})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)6, (long)7}))) == (std::any({(long)1, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)6, (long)5, (long)6})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::any({(long)1, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)6, (long)6})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7})), (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)7}))) == (std::any()));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < l1.size() && j < l2.size() && k < l3.size()) {\n        if (l1[i] == l2[j] && l2[j] == l3[k]) {\n            result.push_back(l1[i]);\n            i++;\n            j++;\n            k++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else if (l2[j] < l3[k]) {\n            j++;\n        } else {\n            k++;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l1[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it1 = l1.begin();\n    std::vector<long>::iterator it2 = l2.begin();\n    std::vector<long>::iterator it3 = l3.begin();\n    while(it1 != l1.end() && it2 != l2.end() && it3 != l3.end()) {\n        if(*it1 == *it2 && *it2 == *it3) {\n            result.push_back(*it1);\n            it1++;\n            it2++;\n            it3++;\n        } else if(*it1 < *it2) {\n            it1++;\n        } else if(*it2 < *it3) {\n            it2++;\n        } else {\n            it3++;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> common_elements;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            common_elements.push_back(l1[i]);\n        }\n    }\n    return common_elements;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it1 = l1.begin();\n    std::vector<long>::iterator it2 = l2.begin();\n    std::vector<long>::iterator it3 = l3.begin();\n    while (it1 != l1.end() && it2 != l2.end() && it3 != l3.end()) {\n        if (*it1 == *it2 && *it2 == *it3) {\n            result.push_back(*it1);\n            it1++;\n            it2++;\n            it3++;\n        } else if (*it1 < *it2) {\n            it1++;\n        } else if (*it2 < *it3) {\n            it2++;\n        } else {\n            it3++;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it1 = l1.begin();\n    std::vector<long>::iterator it2 = l2.begin();\n    std::vector<long>::iterator it3 = l3.begin();\n    while(it1 != l1.end() && it2 != l2.end() && it3 != l3.end()) {\n        if(*it1 == *it2 && *it1 == *it3) {\n            result.push_back(*it1);\n            it1++;\n            it2++;\n            it3++;\n        } else if(*it1 < *it2) {\n            it1++;\n        } else if(*it2 < *it3) {\n            it2++;\n        } else {\n            it3++;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l1[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < l1.size(); i++) {\n        if(l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l1[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < l1.size(); i++) {\n        if(l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i] && l2[i] == l3[i]) {\n            result.push_back(l1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it1 = l1.begin();\n    std::vector<long>::iterator it2 = l2.begin();\n    std::vector<long>::iterator it3 = l3.begin();\n    while (it1 != l1.end() && it2 != l2.end() && it3 != l3.end()) {\n        if (*it1 == *it2 && *it2 == *it3) {\n            result.push_back(*it1);\n            it1++;\n            it2++;\n            it3++;\n        } else if (*it1 < *it2) {\n            it1++;\n        } else if (*it2 < *it3) {\n            it2++;\n        } else {\n            it3++;\n        }\n    }\n    return result;"
  ]
}