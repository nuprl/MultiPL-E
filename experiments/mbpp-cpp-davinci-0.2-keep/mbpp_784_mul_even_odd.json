{
  "name": "mbpp_784_mul_even_odd",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the product of first even and odd number of a given list.\nlong mul_even_odd(std::vector<long> list1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = mul_even_odd;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)4, (long)1, (long)6, (long)8}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)7, (long)9, (long)10}))) == (10));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int even = 0;\n    int odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even_product *= list1[i];\n    } else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd *= list1[i];\n\t\t}\n\t}\n\treturn even * odd;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int count_even = 0;\n    int count_odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (count_even == 0) {\n                even_product = list1[i];\n                count_even++;\n            }\n            else {\n                even_product = even_product * list1[i];\n            }\n        }\n        else {\n            if (count_odd == 0) {\n                odd_product = list1[i];\n                count_odd++;\n            }\n            else {\n                odd_product = odd_product * list1[i];\n            }\n        }\n    }\n    return even_product * odd_product;",
    "  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even *= list1[i];\n    } else {\n      odd *= list1[i];\n    }\n  }\n  return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i % 2 == 0) {\n            even_product *= *i;\n            even_count++;\n        }\n        else {\n            odd_product *= *i;\n            odd_count++;\n        }\n        if (even_count == 1 && odd_count == 1) {\n            return even_product * odd_product;\n        }\n    }\n    return 0;",
    "    long even_mul = 1;\n    long odd_mul = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_mul *= list1[i];\n        } else {\n            odd_mul *= list1[i];\n        }\n    }\n    return even_mul * odd_mul;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "  long product = 1;\n  int even = 0;\n  int odd = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even++;\n      if (even == 1) {\n        product = product * list1[i];\n      }\n    }\n    else {\n      odd++;\n      if (odd == 1) {\n        product = product * list1[i];\n      }\n    }\n    if (even == 1 && odd == 1) {\n      break;\n    }\n  }\n  return product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n            even_count++;\n        }\n        else {\n            odd_product *= list1[i];\n            odd_count++;\n        }\n        if (even_count == 2 || odd_count == 2) {\n            break;\n        }\n    }\n    return even_product * odd_product;",
    "  // Write your code here\n  long even=1,odd=1;\n  for(int i=0;i<list1.size();i++)\n  {\n      if(list1[i]%2==0)\n      {\n          even=even*list1[i];\n          break;\n      }\n  }\n  for(int i=0;i<list1.size();i++)\n  {\n      if(list1[i]%2!=0)\n      {\n          odd=odd*list1[i];\n          break;\n      }\n  }\n  return even*odd;",
    "  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even_product *= list1[i];\n    } else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    int even_index = 0;\n    int odd_index = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n    }\n    return list1[even_index] * list1[odd_index];",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long product = 1;\n    int i = 0;\n    while(i < list1.size()) {\n        if(list1[i] % 2 == 0) {\n            product *= list1[i];\n            break;\n        }\n        i++;\n    }\n    i = 0;\n    while(i < list1.size()) {\n        if(list1[i] % 2 != 0) {\n            product *= list1[i];\n            break;\n        }\n        i++;\n    }\n    return product;",
    "  long even_num = 1;\n  long odd_num = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_num = list1[i];\n      break;\n    }\n  }\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 != 0) {\n      odd_num = list1[i];\n      break;\n    }\n  }\n  return even_num * odd_num;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even_mul = 1, odd_mul = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even_mul *= list1[i];\n        }\n        else {\n            odd_mul *= list1[i];\n        }\n    }\n    return even_mul * odd_mul;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    int even_index = -1;\n    int odd_index = -1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n    }\n    if(even_index == -1 || odd_index == -1) {\n        return -1;\n    }\n    return list1[even_index] * list1[odd_index];",
    "    long even_mul = 1;\n    long odd_mul = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even_mul *= list1[i];\n        }\n        else {\n            odd_mul *= list1[i];\n        }\n    }\n    return even_mul * odd_mul;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    int even_index = 0;\n    int odd_index = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n    }\n    return list1[even_index] * list1[odd_index];",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    int even = 0, odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven *= list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd *= list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;",
    "    long even_mul = 1;\n    long odd_mul = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_mul *= list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_mul *= list1[i];\n            }\n        }\n    }\n    return even_mul * odd_mul;",
    "\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;",
    "\tlong even_product = 1;\n\tlong odd_product = 1;\n\tint even_count = 0;\n\tint odd_count = 0;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_count++;\n\t\t\tif (even_count == 1) {\n\t\t\t\teven_product *= list1[i];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\todd_count++;\n\t\t\tif (odd_count == 1) {\n\t\t\t\todd_product *= list1[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn even_product * odd_product;",
    "  long product = 1;\n  int flag = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0 && flag == 0) {\n      product = product * list1[i];\n      flag = 1;\n    }\n    else if (list1[i] % 2 != 0 && flag == 1) {\n      product = product * list1[i];\n      break;\n    }\n  }\n  return product;",
    "    long even=1,odd=1;\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2==0)\n        {\n            even=even*list1[i];\n        }\n        else\n        {\n            odd=odd*list1[i];\n        }\n    }\n    return even*odd;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int count = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0 && count == 0) {\n            even_product = list1[i];\n            count++;\n        }\n        else if(list1[i] % 2 != 0 && count == 1) {\n            odd_product = list1[i];\n            break;\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int count = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            if(count == 0) {\n                even_product *= list1[i];\n                count++;\n            }\n        }\n        else {\n            if(count == 1) {\n                odd_product *= list1[i];\n                count++;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (auto i : list1) {\n        if (i % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_product *= i;\n            }\n        } else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_product *= i;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    int even=0,odd=0;\n    for(int i=0;i<list1.size();i++){\n        if(list1[i]%2==0){\n            even=list1[i];\n            break;\n        }\n    }\n    for(int i=0;i<list1.size();i++){\n        if(list1[i]%2!=0){\n            odd=list1[i];\n            break;\n        }\n    }\n    return even*odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_num *= list1[i];\n        }\n        else {\n            odd_num *= list1[i];\n        }\n    }\n    return even_num * odd_num;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "  long even_product = 1;\n  long odd_product = 1;\n  int count_even = 0;\n  int count_odd = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0 && count_even == 0) {\n      even_product = list1[i];\n      count_even++;\n    }\n    else if (list1[i] % 2 != 0 && count_odd == 0) {\n      odd_product = list1[i];\n      count_odd++;\n    }\n  }\n  return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    int even_index = 0;\n    int odd_index = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n    }\n    return list1[even_index] * list1[odd_index];",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_product *= list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_product *= list1[i];\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    int even_count = 0;\n    int odd_count = 0;\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_product *= list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_product *= list1[i];\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = odd * list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven = even * list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd = odd * list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even * odd;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven = even * list1[i];\n\t\t}\n\t\telse {\n\t\t\todd = odd * list1[i];\n\t\t}\n\t}\n\treturn even * odd;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "\tlong even_num = 1;\n\tlong odd_num = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even_num * odd_num;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_mul = 1;\n    long odd_mul = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_mul = list1[i];\n            }\n        }\n        if (list1[i] % 2 != 0) {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_mul = list1[i];\n            }\n        }\n    }\n    return even_mul * odd_mul;",
    "    int even_num = 0;\n    int odd_num = 0;\n    long result = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    result = even_num * odd_num;\n    return result;",
    "\tint even_count = 0;\n\tint odd_count = 0;\n\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_product = even_product * list1[i];\n\t\t\teven_count++;\n\t\t}\n\t\telse {\n\t\t\todd_product = odd_product * list1[i];\n\t\t\todd_count++;\n\t\t}\n\t\tif (even_count == 1 && odd_count == 1) {\n\t\t\treturn even_product * odd_product;\n\t\t}\n\t}\n\treturn 0;",
    "    long even_num = 1, odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even_product *= list1[i];\n    }\n    else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for(long i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for(long i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    int even_index = 0;\n    int odd_index = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n    }\n    return list1[even_index] * list1[odd_index];",
    "    int even = 0;\n    int odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    int even = 0, odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "  long even_product = 1;\n  long odd_product = 1;\n  int even_count = 0;\n  int odd_count = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      if (even_count == 0) {\n        even_product = list1[i];\n        even_count++;\n      }\n    }\n    else {\n      if (odd_count == 0) {\n        odd_product = list1[i];\n        odd_count++;\n      }\n    }\n  }\n  return even_product * odd_product;",
    "    int even = 0, odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "\tlong even_num = 1;\n\tlong odd_num = 1;\n\tfor (long i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (long i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even_num * odd_num;",
    "    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_mul = 1;\n    long odd_mul = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_mul *= list1[i];\n            even_count++;\n            if (even_count == 2) {\n                break;\n            }\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_mul *= list1[i];\n            odd_count++;\n            if (odd_count == 2) {\n                break;\n            }\n        }\n    }\n    return even_mul * odd_mul;",
    "    int even_index = 0;\n    int odd_index = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n    }\n    return list1[even_index] * list1[odd_index];",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (even_count == 0) {\n                even_product *= list1[i];\n                even_count++;\n            }\n        }\n        else {\n            if (odd_count == 0) {\n                odd_product *= list1[i];\n                odd_count++;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd_product *= list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even_product * odd_product;",
    "\tlong even = 1;\n\tlong odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd *= list1[i];\n\t\t}\n\t}\n\treturn even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "  int even_count = 0;\n  int odd_count = 0;\n  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_count++;\n      if (even_count == 1) {\n        even_product *= list1[i];\n      }\n    }\n    else {\n      odd_count++;\n      if (odd_count == 1) {\n        odd_product *= list1[i];\n      }\n    }\n  }\n  return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    // Write your code here\n    long even=1,odd=1;\n    for(int i=0;i<list1.size();i++){\n        if(list1[i]%2==0){\n            even=even*list1[i];\n            break;\n        }\n    }\n    for(int i=0;i<list1.size();i++){\n        if(list1[i]%2!=0){\n            odd=odd*list1[i];\n            break;\n        }\n    }\n    return even*odd;",
    "\tlong even_mul = 1;\n\tlong odd_mul = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_mul = even_mul * list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_mul = odd_mul * list1[i];\n\t\t}\n\t}\n\treturn even_mul * odd_mul;",
    "    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = even * list1[i];\n        }\n        else {\n            odd = odd * list1[i];\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    int even = 0, odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    int even = 0;\n    int odd = 0;\n    int i = 0;\n    while(even == 0 || odd == 0) {\n        if(list1[i] % 2 == 0 && even == 0) {\n            even = list1[i];\n        }\n        if(list1[i] % 2 != 0 && odd == 0) {\n            odd = list1[i];\n        }\n        i++;\n    }\n    return even * odd;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even = 1;\n    long odd = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even_product *= list1[i];\n    }\n    else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "\tlong even = 1, odd = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd *= list1[i];\n\t\t}\n\t}\n\treturn even * odd;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    int even = 0;\n    int odd = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "  long even_product = 1;\n  long odd_product = 1;\n  for(int i=0;i<list1.size();i++){\n    if(list1[i]%2==0){\n      even_product *= list1[i];\n      break;\n    }\n  }\n  for(int i=0;i<list1.size();i++){\n    if(list1[i]%2!=0){\n      odd_product *= list1[i];\n      break;\n    }\n  }\n  return even_product*odd_product;",
    "    long even_mul=1,odd_mul=1;\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2==0)\n        {\n            even_mul*=list1[i];\n            break;\n        }\n    }\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2!=0)\n        {\n            odd_mul*=list1[i];\n            break;\n        }\n    }\n    return even_mul*odd_mul;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_num = 1, odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_num *= list1[i];\n        }\n        else {\n            odd_num *= list1[i];\n        }\n    }\n    return even_num * odd_num;",
    "    int even = 0;\n    int odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    int even_index = 0;\n    int odd_index = 0;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_index = i;\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_index = i;\n            }\n        }\n    }\n    if (even_count == 0 || odd_count == 0) {\n        return 0;\n    }\n    else {\n        return list1[even_index] * list1[odd_index];\n    }",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even *= list1[i];\n    } else {\n      odd *= list1[i];\n    }\n  }\n  return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    int even_count = 0;\n    int odd_count = 0;\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (even_count == 0) {\n                even_product = list1[i];\n                even_count++;\n            }\n        }\n        else {\n            if (odd_count == 0) {\n                odd_product = list1[i];\n                odd_count++;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_product *= list1[i];\n    }\n    else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;",
    "    long even_mul = 1;\n    long odd_mul = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_mul *= list1[i];\n            even_count++;\n            if(even_count == 2) {\n                break;\n            }\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd_mul *= list1[i];\n            odd_count++;\n            if(odd_count == 2) {\n                break;\n            }\n        }\n    }\n    return even_mul * odd_mul;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0 && even_count == 0) {\n            even_product *= list1[i];\n            even_count++;\n        }\n        else if(list1[i] % 2 != 0 && odd_count == 0) {\n            odd_product *= list1[i];\n            odd_count++;\n        }\n        else if(even_count != 0 && odd_count != 0) {\n            break;\n        }\n    }\n    return even_product * odd_product;",
    "    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    int even_num = 0, odd_num = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (auto i : list1) {\n        if (i % 2 == 0) {\n            if (even_count == 0) {\n                even_product *= i;\n                even_count++;\n            }\n        } else {\n            if (odd_count == 0) {\n                odd_product *= i;\n                odd_count++;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even = 0;\n    long odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_product *= list1[i];\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_product *= list1[i];\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;",
    "    int even = 0, odd = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    int even = 0, odd = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even = 1, odd = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "  long even_product = 1;\n  long odd_product = 1;\n  int even_count = 0;\n  int odd_count = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_product *= list1[i];\n      even_count++;\n    } else {\n      odd_product *= list1[i];\n      odd_count++;\n    }\n    if (even_count == 1 && odd_count == 1) {\n      return even_product * odd_product;\n    }\n  }\n  return -1;",
    "    int even = 0;\n    int odd = 0;\n    int i = 0;\n    while(even == 0 || odd == 0) {\n        if(list1[i] % 2 == 0) {\n            even = list1[i];\n        }\n        else {\n            odd = list1[i];\n        }\n        i++;\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n            even_count++;\n        }\n        if (list1[i] % 2 != 0) {\n            odd_product *= list1[i];\n            odd_count++;\n        }\n        if (even_count == 1 && odd_count == 1) {\n            break;\n        }\n    }\n    if (even_count == 0 || odd_count == 0) {\n        return 0;\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even *= list1[i];\n    } else {\n      odd *= list1[i];\n    }\n  }\n  return even * odd;",
    "  int even_num = 0;\n  int odd_num = 0;\n  int flag = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      if (flag == 0) {\n        even_num = list1[i];\n        flag = 1;\n      }\n    }\n    else {\n      if (flag == 1) {\n        odd_num = list1[i];\n        break;\n      }\n    }\n  }\n  return even_num * odd_num;",
    "    long even_number = 1;\n    long odd_number = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_number = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_number = list1[i];\n            break;\n        }\n    }\n    return even_number * odd_number;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long product = 1;\n    int even = 0;\n    int odd = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            if(even == 0) {\n                product *= list1[i];\n                even++;\n            }\n        }\n        else {\n            if(odd == 0) {\n                product *= list1[i];\n                odd++;\n            }\n        }\n        if(even == 1 && odd == 1) {\n            return product;\n        }\n    }\n    return product;",
    "  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_product = even_product * list1[i];\n    }\n    else {\n      odd_product = odd_product * list1[i];\n    }\n  }\n  return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_num *= list1[i];\n        }\n        else {\n            odd_num *= list1[i];\n        }\n    }\n    return even_num * odd_num;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product = even_product * list1[i];\n        }\n        else {\n            odd_product = odd_product * list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "\tlong even_mul = 1;\n\tlong odd_mul = 1;\n\tint count = 0;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (count == 2) {\n\t\t\tbreak;\n\t\t}\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_mul = even_mul * list1[i];\n\t\t\tcount++;\n\t\t}\n\t\telse if (list1[i] % 2 != 0) {\n\t\t\todd_mul = odd_mul * list1[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn even_mul * odd_mul;",
    "    long even=1,odd=1;\n    for(int i=0;i<list1.size();i++){\n        if(i%2==0){\n            even=even*list1[i];\n        }\n        else{\n            odd=odd*list1[i];\n        }\n    }\n    return even*odd;",
    "    long even = 1, odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    long even=1,odd=1;\n    for(int i=0;i<list1.size();i++)\n    {\n        if(i%2==0)\n        {\n            even=even*list1[i];\n        }\n        else\n        {\n            odd=odd*list1[i];\n        }\n    }\n    return even*odd;",
    "    int even_index = 0;\n    int odd_index = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n    }\n    return list1[even_index] * list1[odd_index];",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    int even = 0;\n    int odd = 0;\n    long product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    product = even * odd;\n    return product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (even_count == 0) {\n                even_product = list1[i];\n                even_count++;\n            }\n        }\n        else {\n            if (odd_count == 0) {\n                odd_product = list1[i];\n                odd_count++;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    int even_index = 0;\n    int odd_index = 0;\n    int i = 0;\n    while (i < list1.size()) {\n        if (list1[i] % 2 == 0) {\n            even_index = i;\n            break;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < list1.size()) {\n        if (list1[i] % 2 != 0) {\n            odd_index = i;\n            break;\n        }\n        i++;\n    }\n    return list1[even_index] * list1[odd_index];",
    "    long even_product = 1;\n    long odd_product = 1;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n            even_count++;\n            if (even_count == 2) {\n                break;\n            }\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_product *= list1[i];\n            odd_count++;\n            if (odd_count == 2) {\n                break;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_product *= list1[i];\n            count++;\n            if (count == 2) {\n                break;\n            }\n        }\n    }\n    count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_product *= list1[i];\n            count++;\n            if (count == 2) {\n                break;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "  long even_product = 1;\n  long odd_product = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even_product *= list1[i];\n    }\n    else {\n      odd_product *= list1[i];\n    }\n  }\n  return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_num = 1;\n    long odd_num = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_num = list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd_num = list1[i];\n            break;\n        }\n    }\n    return even_num * odd_num;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even *= list1[i];\n        }\n        else {\n            odd *= list1[i];\n        }\n    }\n    return even * odd;",
    "    int even = 0;\n    int odd = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            even = list1[i];\n            break;\n        }\n    }\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 != 0) {\n            odd = list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    int count_even = 0;\n    int count_odd = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        if(list1[i] % 2 == 0) {\n            if(count_even == 0) {\n                even_product *= list1[i];\n                count_even++;\n            }\n        }\n        else {\n            if(count_odd == 0) {\n                odd_product *= list1[i];\n                count_odd++;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;",
    "    int even_index = 0;\n    int odd_index = 0;\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count++;\n            if (even_count == 1) {\n                even_index = i;\n            }\n        }\n        else {\n            odd_count++;\n            if (odd_count == 1) {\n                odd_index = i;\n            }\n        }\n    }\n    if (even_count == 0 || odd_count == 0) {\n        return 0;\n    }\n    return list1[even_index] * list1[odd_index];",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product = even_product * list1[i];\n        }\n        else {\n            odd_product = odd_product * list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "\tlong even_num = 1;\n\tlong odd_num = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\teven_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 != 0) {\n\t\t\todd_num = list1[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn even_num * odd_num;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        } else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "\tlong even_product = 1;\n\tlong odd_product = 1;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (i % 2 == 0) {\n\t\t\teven_product *= list1[i];\n\t\t}\n\t\telse {\n\t\t\todd_product *= list1[i];\n\t\t}\n\t}\n\treturn even_product * odd_product;",
    "\tlong even_prod = 1;\n\tlong odd_prod = 1;\n\tint even_count = 0;\n\tint odd_count = 0;\n\tfor (int i = 0; i < list1.size(); i++) {\n\t\tif (list1[i] % 2 == 0) {\n\t\t\tif (even_count == 0) {\n\t\t\t\teven_prod = list1[i];\n\t\t\t\teven_count++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (odd_count == 0) {\n\t\t\t\todd_prod = list1[i];\n\t\t\t\todd_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn even_prod * odd_prod;",
    "    // Write your code here\n    int even=0,odd=0;\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2==0)\n        {\n            even=list1[i];\n            break;\n        }\n    }\n    for(int i=0;i<list1.size();i++)\n    {\n        if(list1[i]%2!=0)\n        {\n            odd=list1[i];\n            break;\n        }\n    }\n    return even*odd;",
    "    int even_count = 0;\n    int odd_count = 0;\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even_count += 1;\n            if (even_count == 1) {\n                even_product *= list1[i];\n            }\n        }\n        else {\n            odd_count += 1;\n            if (odd_count == 1) {\n                odd_product *= list1[i];\n            }\n        }\n    }\n    return even_product * odd_product;",
    "    int even_count = 0;\n    int odd_count = 0;\n    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            if (even_count == 0) {\n                even_product = list1[i];\n                even_count++;\n            }\n            else if (even_count == 1) {\n                even_product = even_product * list1[i];\n                even_count++;\n            }\n        }\n        else {\n            if (odd_count == 0) {\n                odd_product = list1[i];\n                odd_count++;\n            }\n            else if (odd_count == 1) {\n                odd_product = odd_product * list1[i];\n                odd_count++;\n            }\n        }\n    }\n    return even_product * odd_product;",
    "  int even = 0;\n  int odd = 0;\n  for(int i = 0; i < list1.size(); i++) {\n    if(list1[i] % 2 == 0) {\n      even = list1[i];\n      break;\n    }\n  }\n  for(int i = 0; i < list1.size(); i++) {\n    if(list1[i] % 2 != 0) {\n      odd = list1[i];\n      break;\n    }\n  }\n  return even * odd;",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "  int even_index = -1;\n  int odd_index = -1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 == 0) {\n      even_index = i;\n      break;\n    }\n  }\n  for (int i = 0; i < list1.size(); i++) {\n    if (list1[i] % 2 != 0) {\n      odd_index = i;\n      break;\n    }\n  }\n  if (even_index == -1 || odd_index == -1) {\n    return 0;\n  }\n  return list1[even_index] * list1[odd_index];",
    "    long even = 1;\n    long odd = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 == 0) {\n            even *= list1[i];\n            break;\n        }\n    }\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] % 2 != 0) {\n            odd *= list1[i];\n            break;\n        }\n    }\n    return even * odd;",
    "    long even_product = 1;\n    long odd_product = 1;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i % 2 == 0) {\n            even_product *= list1[i];\n        }\n        else {\n            odd_product *= list1[i];\n        }\n    }\n    return even_product * odd_product;",
    "  long even = 1;\n  long odd = 1;\n  for (int i = 0; i < list1.size(); i++) {\n    if (i % 2 == 0) {\n      even *= list1[i];\n    } else {\n      odd *= list1[i];\n    }\n  }\n  return even * odd;"
  ]
}