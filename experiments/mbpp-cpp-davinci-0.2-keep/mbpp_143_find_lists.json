{
  "name": "mbpp_143_find_lists",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find number of lists present in the given tuple.\nlong find_lists(std::any Input) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = find_lists;\n    assert(candidate(std::make_tuple(std::vector<long>({(long)1, (long)2, (long)3, (long)4}), std::vector<long>({(long)5, (long)6, (long)7, (long)8}))) == (2));\n    assert(candidate(std::make_tuple(std::vector<long>({(long)1, (long)2}), std::vector<long>({(long)3, (long)4}), std::vector<long>({(long)5, (long)6}))) == (3));\n    assert(candidate((std::any({(long)9, (long)8, (long)7, (long)6, (long)5, (long)4, (long)3, (long)2, (long)1}))) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long count = 0;\n    std::any_cast<std::vector<std::any>>(Input);\n    std::vector<std::any> v = std::any_cast<std::vector<std::any>>(Input);\n    for(auto i : v) {\n        if(i.type() == typeid(std::vector<std::any>)) {\n            count += find_lists(i);\n        }\n    }\n    return count + 1;",
    "    long count = 0;\n    if (Input.type() == typeid(std::list<std::any>)) {\n        std::list<std::any> l = std::any_cast<std::list<std::any>>(Input);\n        for (auto i : l) {\n            count += find_lists(i);\n        }\n        count += 1;\n    }\n    return count;",
    "    long count = 0;\n    if (Input.type() == typeid(std::list<std::any>)) {\n        count = 1;\n        std::list<std::any> l = std::any_cast<std::list<std::any>>(Input);\n        for (auto i : l) {\n            count += find_lists(i);\n        }\n    }\n    return count;",
    "    long count = 0;\n    if (Input.type() == typeid(std::list<std::any>)) {\n        std::list<std::any> l = std::any_cast<std::list<std::any>>(Input);\n        for (auto i : l) {\n            count += find_lists(i);\n        }\n        count += 1;\n    }\n    return count;",
    "    long count = 0;\n    if (Input.type() == typeid(std::vector<std::any>)) {\n        count = 1;\n        for (auto i : std::any_cast<std::vector<std::any>>(Input)) {\n            count += find_lists(i);\n        }\n    }\n    return count;",
    "    long count = 0;\n    if (Input.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> Input_vector = std::any_cast<std::vector<std::any>>(Input);\n        for (auto i = Input_vector.begin(); i != Input_vector.end(); i++) {\n            if (i->type() == typeid(std::vector<std::any>)) {\n                count++;\n                count += find_lists(*i);\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    if (Input.type() == typeid(std::list<std::any>)) {\n        count = 1;\n        std::list<std::any> l = std::any_cast<std::list<std::any>>(Input);\n        for (auto i : l) {\n            count += find_lists(i);\n        }\n    }\n    return count;",
    "    // Write your code here\n    // To print results to the standard output you can use std::cout\n    // Example: std::cout << \"Hello world!\";\n    std::any_cast<std::vector<std::any>>(Input);\n    long count = 0;\n    for(auto i : Input)\n    {\n        if(i.type() == typeid(std::vector<std::any>))\n        {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    if (Input.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> temp = std::any_cast<std::vector<std::any>>(Input);\n        for (auto i : temp) {\n            count += find_lists(i);\n        }\n    }\n    else if (Input.type() == typeid(std::list<std::any>)) {\n        count++;\n    }\n    return count;",
    "    if(Input.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> temp = std::any_cast<std::vector<std::any>>(Input);\n        long count = 0;\n        for(auto i : temp){\n            count += find_lists(i);\n        }\n        return count;\n    }\n    return 0;",
    "    long count = 0;\n    if (Input.type() == typeid(std::list<std::any>)) {\n        std::list<std::any> temp = std::any_cast<std::list<std::any>>(Input);\n        for (auto i = temp.begin(); i != temp.end(); i++) {\n            count += find_lists(*i);\n        }\n        return count + 1;\n    }\n    else if (Input.type() == typeid(std::tuple<std::any, std::any, std::any>)) {\n        std::tuple<std::any, std::any, std::any> temp = std::any_cast<std::tuple<std::any, std::any, std::any>>(Input);\n        count += find_lists(std::get<0>(temp));\n        count += find_lists(std::get<1>(temp));\n        count += find_lists(std::get<2>(temp));\n        return count;\n    }\n    else {\n        return 0;\n    }",
    "    long count = 0;\n    if (Input.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> temp = std::any_cast<std::vector<std::any>>(Input);\n        for (auto i : temp) {\n            count += find_lists(i);\n        }\n        return count;\n    }\n    else {\n        return 0;\n    }",
    "    long count = 0;\n    if (Input.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> temp = std::any_cast<std::vector<std::any>>(Input);\n        for (auto i = temp.begin(); i != temp.end(); i++) {\n            count += find_lists(*i);\n        }\n    }\n    else if (Input.type() == typeid(std::list<std::any>)) {\n        count++;\n    }\n    return count;",
    "    long count = 0;\n    if (Input.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> temp = std::any_cast<std::vector<std::any>>(Input);\n        for (auto i : temp) {\n            if (i.type() == typeid(std::vector<std::any>)) {\n                count++;\n            }\n            if (i.type() == typeid(std::vector<std::any>)) {\n                count += find_lists(i);\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    if(Input.type() == typeid(std::list<std::any>)) {\n        count++;\n        for(auto i : std::any_cast<std::list<std::any>>(Input)) {\n            count += find_lists(i);\n        }\n    }\n    return count;",
    "    long count = 0;\n    if(Input.type() == typeid(std::list<std::any>)) {\n        std::list<std::any> temp = std::any_cast<std::list<std::any>>(Input);\n        for(auto i : temp) {\n            count += find_lists(i);\n        }\n        count += 1;\n    }\n    return count;",
    "    long count = 0;\n    if (Input.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> v = std::any_cast<std::vector<std::any>>(Input);\n        for (auto i : v) {\n            count += find_lists(i);\n        }\n    }\n    else if (Input.type() == typeid(std::list<std::any>)) {\n        count += 1;\n    }\n    return count;",
    "    // Write your code here\n    // To print results to the standard output you can use std::cout\n    // Example: std::cout << \"Hello world!\";\n    long count = 0;\n    if (Input.type() == typeid(std::list<std::any>)) {\n        std::list<std::any> l = std::any_cast<std::list<std::any>>(Input);\n        for (auto it = l.begin(); it != l.end(); it++) {\n            count += find_lists(*it);\n        }\n        return count + 1;\n    }\n    else if (Input.type() == typeid(std::tuple<std::any, std::any>)) {\n        std::tuple<std::any, std::any> t = std::any_cast<std::tuple<std::any, std::any>>(Input);\n        count += find_lists(std::get<0>(t));\n        count += find_lists(std::get<1>(t));\n        return count;\n    }\n    else {\n        return count;\n    }",
    "    // Write your code here\n    // To print results to the standard output you can use std::cout\n    // Example: std::cout << \"Hello world!\";\n    long count = 0;\n    std::any_cast<std::vector<std::any>>(Input);\n    for(auto i : Input){\n        if(i.type() == typeid(std::vector<std::any>)){\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    if (Input.type() == typeid(std::list<std::any>)) {\n        std::list<std::any> l = std::any_cast<std::list<std::any>>(Input);\n        for (auto i : l) {\n            count += find_lists(i);\n        }\n        return count + 1;\n    }\n    return count;"
  ]
}