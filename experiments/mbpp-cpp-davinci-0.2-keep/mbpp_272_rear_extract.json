{
  "name": "mbpp_272_rear_extract",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nstd::vector<long> rear_extract(std::vector<Union_std_string_long> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = rear_extract;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Rash\", 21), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Varsha\", 20), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Kil\", 19)}))) == (std::vector<long>({(long)21, (long)20, (long)19})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Sai\", 36), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Ayesha\", 25), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Salman\", 45)}))) == (std::vector<long>({(long)36, (long)25, (long)45})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<long, std::string, long>)std::make_tuple(1, \"Sudeep\", 14), (std::tuple<long, std::string, long>)std::make_tuple(2, \"Vandana\", 36), (std::tuple<long, std::string, long>)std::make_tuple(3, \"Dawood\", 56)}))) == (std::vector<long>({(long)14, (long)36, (long)56})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto it = test_list.begin(); it != test_list.end(); ++it) {\n        result.push_back(it->f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for(auto i : test_list) {\n        result.push_back(i.f1);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : test_list) {\n        if (i.f1 == i.f1) {\n            result.push_back(i.f1);\n        }\n    }\n    return result;"
  ]
}