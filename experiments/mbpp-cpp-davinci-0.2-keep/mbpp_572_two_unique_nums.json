{
  "name": "mbpp_572_two_unique_nums",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove duplicate numbers from a given number of lists.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    std::unordered_set<long> nums_set;\n    for (long num : nums) {\n        if (nums_set.find(num) == nums_set.end()) {\n            nums_set.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> ans;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            ans.push_back(num);\n        }\n    }\n    return ans;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> s;\n    for(long i = 0; i < nums.size(); i++) {\n        if(s.find(nums[i]) == s.end()) {\n            s.insert(nums[i]);\n            result.push_back(nums[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    long xor_num = 0;\n    for (auto num : nums) {\n        xor_num ^= num;\n    }\n    int rightmost_set_bit = xor_num & ~(xor_num - 1);\n    long num1 = 0;\n    long num2 = 0;\n    for (auto num : nums) {\n        if (num & rightmost_set_bit) {\n            num1 ^= num;\n        } else {\n            num2 ^= num;\n        }\n    }\n    return {num1, num2};",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            result.push_back(num);\n            set.insert(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto num : nums) {\n        if (s.find(num) == s.end()) {\n            s.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        map[nums[i]]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;",
    "    // Write your code here\n    // return a vector containing two unique numbers\n    std::vector<long> result;\n    std::unordered_set<long> set;\n    for(auto num: nums){\n        if(set.find(num) == set.end()){\n            set.insert(num);\n        }\n    }\n    for(auto num: set){\n        result.push_back(num);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    std::unordered_set<long> duplicate;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n        } else {\n            duplicate.insert(num);\n        }\n    }\n    for (auto num : nums) {\n        if (duplicate.find(num) == duplicate.end()) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> res;\n    std::unordered_map<long, int> m;\n    for (auto n : nums) {\n        m[n]++;\n    }\n    for (auto n : nums) {\n        if (m[n] == 1) {\n            res.push_back(n);\n        }\n    }\n    return res;",
    "    // Write your code here\n    // return a vector with two unique numbers\n    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for(auto num : nums)\n    {\n        map[num]++;\n    }\n    for(auto num : nums)\n    {\n        if(map[num] == 1)\n        {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> ans;\n    std::unordered_map<long, int> m;\n    for (long num : nums) {\n        m[num]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second == 1) {\n            ans.push_back(it->first);\n        }\n    }\n    return ans;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;"
  ]
}