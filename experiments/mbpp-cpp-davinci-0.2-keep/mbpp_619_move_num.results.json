{
  "name": "mbpp_619_move_num",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        while (i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while (i < j && isdigit(test_str[j])) {\n            j--;\n        }\n        if (i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp2c0e_m95: /tmp/tmp2c0e_m95.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpyxh0on0f: /tmp/tmpyxh0on0f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (std::isdigit(test_str[i])) {\n            if (std::isalpha(test_str[j])) {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpxd6vldu4: /tmp/tmpxd6vldu4.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuk649h7d: /tmp/tmpuk649h7d.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string res;\n    std::string num;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            res += test_str[i];\n        }\n    }\n    return res + num;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = test_str.length() - 1;\n    while(i < j) {\n        if(!std::isdigit(test_str[i])) {\n            i++;\n            continue;\n        }\n        if(std::isdigit(test_str[j])) {\n            j--;\n            continue;\n        }\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp8mwjm5qf: /tmp/tmp8mwjm5qf.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp6gekfnz_: /tmp/tmp6gekfnz_.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isdigit(test_str[i])) {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmplvp8u3zi: /tmp/tmplvp8u3zi.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(!std::isdigit(test_str[i])) {\n            i++;\n        }\n        else if(std::isdigit(test_str[j])) {\n            j--;\n        }\n        else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmppxbjjk0c: /tmp/tmppxbjjk0c.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n        } else if(!isdigit(test_str[j])) {\n            j--;\n        } else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpim95fhi7: /tmp/tmpim95fhi7.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (isdigit(test_str[i])) {\n            if (isalpha(test_str[j])) {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpckf5fgup: /tmp/tmpckf5fgup.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpyxh0on0f: /tmp/tmpyxh0on0f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp755mjuv9: /tmp/tmp755mjuv9.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] < '0' || test_str[j] > '9') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp2ojw25fu: /tmp/tmp2ojw25fu.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && isdigit(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpw9i453g7: /tmp/tmpw9i453g7.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp6pxgx261: /tmp/tmp6pxgx261.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpv9kbhu_c: /tmp/tmpv9kbhu_c.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                char temp = test_str[i];\n                test_str[i] = test_str[j];\n                test_str[j] = temp;\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmpin5vh50s: /tmp/tmpin5vh50s.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            while(j > i && test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            if(j > i) {\n                char temp = test_str[i];\n                test_str[i] = test_str[j];\n                test_str[j] = temp;\n            }\n        }\n        i++;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp3js7t3ak: /tmp/tmp3js7t3ak.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n\tstd::string result = \"\";\n\tstd::string num_str = \"\";\n\tfor (int i = 0; i < test_str.length(); i++) {\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\tnum_str += test_str[i];\n\t\t}\n\t\telse {\n\t\t\tresult += test_str[i];\n\t\t}\n\t}\n\tresult += num_str;\n\treturn result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str.push_back(test_str[i]);\n        } else {\n            result.push_back(test_str[i]);\n        }\n    }\n    result.append(num_str);\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpmaiwiaol: /tmp/tmpmaiwiaol.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] < '0' || test_str[j] > '9') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp70peab72: /tmp/tmp70peab72.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmplvp8u3zi: /tmp/tmplvp8u3zi.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num = \"\";\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isdigit(test_str[i])) {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= 'a' && test_str[i] <= 'z') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmpmry9rqwy: /tmp/tmpmry9rqwy.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (auto i : test_str) {\n        if (i >= '0' && i <= '9') {\n            num += i;\n        } else {\n            result += i;\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (std::isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!std::isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmpuzrplobu: /tmp/tmpuzrplobu.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (isdigit(test_str[i]) && isalpha(test_str[j])) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        } else if (isdigit(test_str[i])) {\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp0zub8gkh: /tmp/tmp0zub8gkh.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result.push_back(test_str[i]);\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result.push_back(test_str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmpk93tzwzx: /tmp/tmpk93tzwzx.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + num;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && !isalpha(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpa0yumit9: /tmp/tmpa0yumit9.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpyyrbi55i: /tmp/tmpyyrbi55i.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmplvp8u3zi: /tmp/tmplvp8u3zi.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        }\n        else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string nums;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums.push_back(test_str[i]);\n        } else {\n            result.push_back(test_str[i]);\n        }\n    }\n    result.append(nums);\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp80hj5lmt: /tmp/tmp80hj5lmt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmplvp8u3zi: /tmp/tmplvp8u3zi.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num = \"\";\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp6pxgx261: /tmp/tmp6pxgx261.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0, j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpovnzv3sp: /tmp/tmpovnzv3sp.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  std::string result = \"\";\n  std::string num_str = \"\";\n  for (int i = 0; i < test_str.length(); i++) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      num_str += test_str[i];\n    } else {\n      result += test_str[i];\n    }\n  }\n  result += num_str;\n  return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string num_str;\n    std::string alpha_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            num_str += test_str[i];\n        } else {\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  std::string num_str = \"\";\n  std::string char_str = \"\";\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isdigit(test_str[i])) {\n      num_str += test_str[i];\n    } else {\n      char_str += test_str[i];\n    }\n  }\n  return char_str + num_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n            continue;\n        }\n        if(isdigit(test_str[j])) {\n            j--;\n            continue;\n        }\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmpqcuu50a6: /tmp/tmpqcuu50a6.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmplvp8u3zi: /tmp/tmplvp8u3zi.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num = \"\";\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpv9kbhu_c: /tmp/tmpv9kbhu_c.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            while (j > i && (test_str[j] < '0' || test_str[j] > '9')) {\n                j--;\n            }\n            if (j > i) {\n                std::swap(test_str[i], test_str[j]);\n            }\n        }\n        i++;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmparhgatj4: /tmp/tmparhgatj4.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    int i = 0;\n    while (i < test_str.length()) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n        i++;\n    }\n    i = 0;\n    while (i < test_str.length()) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmp_1hf_uqo: /tmp/tmp_1hf_uqo.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] < '0' || test_str[j] > '9') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmph_37altn: /tmp/tmph_37altn.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    int i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result.push_back(test_str[i]);\n        }\n        i++;\n    }\n    i = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result.push_back(test_str[i]);\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmppzqk64ry: /tmp/tmppzqk64ry.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpv9kbhu_c: /tmp/tmpv9kbhu_c.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmp02dxn47z: /tmp/tmp02dxn47z.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string num_str;\n    std::string alpha_str;\n    for (auto i : test_str) {\n        if (i >= '0' && i <= '9') {\n            num_str += i;\n        } else {\n            alpha_str += i;\n        }\n    }\n    return alpha_str + num_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpyxh0on0f: /tmp/tmpyxh0on0f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp6gekfnz_: /tmp/tmp6gekfnz_.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpyxh0on0f: /tmp/tmpyxh0on0f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  std::string result;\n  for (int i = 0; i < test_str.size(); i++) {\n    if (isdigit(test_str[i])) {\n      result.push_back(test_str[i]);\n    }\n  }\n  for (int i = 0; i < test_str.size(); i++) {\n    if (!isdigit(test_str[i])) {\n      result.push_back(test_str[i]);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmp1mr9tmct: /tmp/tmp1mr9tmct.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for(int i=0;i<test_str.length();i++) {\n        if(test_str[i]>='0' && test_str[i]<='9') {\n            num_str+=test_str[i];\n        } else {\n            result+=test_str[i];\n        }\n    }\n    result+=num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "tmpuj1vwekp: /tmp/tmpuj1vwekp.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n        } else if(isdigit(test_str[j])) {\n            j--;\n        } else {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmphwvzq_xw: /tmp/tmphwvzq_xw.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuk649h7d: /tmp/tmpuk649h7d.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int len = test_str.length();\n  int i = 0;\n  int j = len - 1;\n  while (i < j) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      if (test_str[j] >= '0' && test_str[j] <= '9') {\n        j--;\n      } else {\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpt9_kgkrx: /tmp/tmpt9_kgkrx.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= 'a' && test_str[i] <= 'z') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpd8iqgj9w: /tmp/tmpd8iqgj9w.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpvllr6w3a: /tmp/tmpvllr6w3a.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpszna5pkh: /tmp/tmpszna5pkh.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp6gekfnz_: /tmp/tmp6gekfnz_.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmplvp8u3zi: /tmp/tmplvp8u3zi.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp6gekfnz_: /tmp/tmp6gekfnz_.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string str = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            str += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            str += test_str[i];\n        }\n    }\n    return str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmphz8akjcs: /tmp/tmphz8akjcs.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= 'a' && test_str[i] <= 'z') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmp3xhhvtvm: /tmp/tmp3xhhvtvm.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpv9kbhu_c: /tmp/tmpv9kbhu_c.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = 0;\n    while(test_str[i] != '\\0') {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            i++;\n        } else {\n            test_str[j] = test_str[i];\n            i++;\n            j++;\n        }\n    }\n    while(j < i) {\n        test_str[j] = '\\0';\n        j++;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpuz6uh3la: /tmp/tmpuz6uh3la.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        while(i < j && isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && !isdigit(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmp37eyr9wc: /tmp/tmp37eyr9wc.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpyxh0on0f: /tmp/tmpyxh0on0f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && !isalpha(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpmqv4b3nx: /tmp/tmpmqv4b3nx.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpsk0nc6_f: /tmp/tmpsk0nc6_f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result.push_back(test_str[i]);\n        }\n    }\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result.push_back(test_str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpaxdtzfbx: /tmp/tmpaxdtzfbx.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpv9kbhu_c: /tmp/tmpv9kbhu_c.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isdigit(test_str[i])) {\n            result.push_back(test_str[i]);\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (!isdigit(test_str[i])) {\n            result.push_back(test_str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpjnc9dj93: /tmp/tmpjnc9dj93.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmplvp8u3zi: /tmp/tmplvp8u3zi.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpyxh0on0f: /tmp/tmpyxh0on0f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(!std::isdigit(test_str[i])) {\n            i++;\n            continue;\n        }\n        if(std::isdigit(test_str[j])) {\n            j--;\n            continue;\n        }\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpt1lg8dlz: /tmp/tmpt1lg8dlz.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string res;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            res.push_back(test_str[i]);\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            res.push_back(test_str[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpvha8egcr: /tmp/tmpvha8egcr.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpsk0nc6_f: /tmp/tmpsk0nc6_f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmplvp8u3zi: /tmp/tmplvp8u3zi.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmplvp8u3zi: /tmp/tmplvp8u3zi.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(!std::isdigit(test_str[i])) {\n            i++;\n            continue;\n        }\n        if(std::isdigit(test_str[j])) {\n            j--;\n            continue;\n        }\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmp85i1mt4c: /tmp/tmp85i1mt4c.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(!isdigit(test_str[i])) {\n            i++;\n            continue;\n        }\n        if(isdigit(test_str[j])) {\n            j--;\n            continue;\n        }\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122846,
      "stdout": "",
      "stderr": "tmpqcuu50a6: /tmp/tmpqcuu50a6.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpjwkljpun: /tmp/tmpjwkljpun.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for(int i = 0; i < test_str.size(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122843,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (auto c: test_str) {\n        if (std::isdigit(c)) {\n            result.push_back(c);\n        }\n    }\n    for (auto c: test_str) {\n        if (!std::isdigit(c)) {\n            result.push_back(c);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpc8kl0_sj: /tmp/tmpc8kl0_sj.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpmaiwiaol: /tmp/tmpmaiwiaol.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpsk0nc6_f: /tmp/tmpsk0nc6_f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpoj6ch44x: /tmp/tmpoj6ch44x.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    int i = 0;\n    while(i < test_str.size()) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    i = 0;\n    while(i < test_str.size()) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpzer6l333: /tmp/tmpzer6l333.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpmaiwiaol: /tmp/tmpmaiwiaol.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result_str += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result_str += test_str[i];\n        }\n    }\n    return result_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "tmpdantux4u: /tmp/tmpdantux4u.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "tmp6m9vd9np: /tmp/tmp6m9vd9np.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string nums;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122848,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        while (i < j && !std::isdigit(test_str[i])) {\n            ++i;\n        }\n        while (i < j && std::isdigit(test_str[j])) {\n            --j;\n        }\n        if (i < j) {\n            std::swap(test_str[i], test_str[j]);\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmp9b_nxmab: /tmp/tmp9b_nxmab.cpp:22: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int i = 0;\n  int j = test_str.length() - 1;\n  while (i < j) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      if (test_str[j] >= '0' && test_str[j] <= '9') {\n        j--;\n      } else {\n        std::swap(test_str[i], test_str[j]);\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpz4fq0xod: /tmp/tmpz4fq0xod.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length()-1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmp157e90ep: /tmp/tmp157e90ep.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n\tint len = test_str.size();\n\tint i = 0;\n\tint j = len - 1;\n\twhile (i < j) {\n\t\tif (test_str[i] >= '0' && test_str[i] <= '9') {\n\t\t\tif (test_str[j] >= 'a' && test_str[j] <= 'z') {\n\t\t\t\tstd::swap(test_str[i], test_str[j]);\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpmk_95g1p: /tmp/tmpmk_95g1p.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0, j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmptm3j1fuy: /tmp/tmptm3j1fuy.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpyxh0on0f: /tmp/tmpyxh0on0f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && !isdigit(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmprg1p2vd0: /tmp/tmprg1p2vd0.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp_2o04m0h: /tmp/tmp_2o04m0h.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (!isdigit(test_str[i])) {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuk649h7d: /tmp/tmpuk649h7d.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpsk0nc6_f: /tmp/tmpsk0nc6_f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpsk0nc6_f: /tmp/tmpsk0nc6_f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        while (i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while (i < j && !isdigit(test_str[j])) {\n            j--;\n        }\n        if (i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpce0hd8q0: /tmp/tmpce0hd8q0.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            while (i < j && test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            std::swap(test_str[i], test_str[j]);\n        }\n        i++;\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmph2qxm8y9: /tmp/tmph2qxm8y9.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string res;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            res += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            res += test_str[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmp9t4kr3co: /tmp/tmp9t4kr3co.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num_str;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string res_str;\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            res_str += test_str[i];\n        }\n    }\n    for(int i = 0; i < test_str.length(); i++) {\n        if(test_str[i] < '0' || test_str[i] > '9') {\n            res_str += test_str[i];\n        }\n    }\n    return res_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmp2vq8zpdq: /tmp/tmp2vq8zpdq.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpyxh0on0f: /tmp/tmpyxh0on0f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    std::string num;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122840,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpyyrbi55i: /tmp/tmpyyrbi55i.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpsk0nc6_f: /tmp/tmpsk0nc6_f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int j = len - 1;\n    for (int i = len - 1; i >= 0; i--) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            test_str[j] = test_str[i];\n            j--;\n        }\n    }\n    for (int i = j; i >= 0; i--) {\n        test_str[i] = '*';\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpzc1w9l4t: /tmp/tmpzc1w9l4t.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmpuskuw0bt: /tmp/tmpuskuw0bt.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string nums = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    return result + nums;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string res;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (isdigit(test_str[i])) {\n            res += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (!isdigit(test_str[i])) {\n            res += test_str[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpcfb82170: /tmp/tmpcfb82170.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  std::string result = \"\";\n  int count = 0;\n  for (int i = 0; i < test_str.length(); i++) {\n    if (isdigit(test_str[i])) {\n      result += test_str[i];\n      count++;\n    }\n  }\n  for (int i = 0; i < test_str.length() - count; i++) {\n    result += test_str[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmp32u79wfa: /tmp/tmp32u79wfa.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    int i = 0;\n    while (i < test_str.length()) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    i = 0;\n    while (i < test_str.length()) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpx8z2a_fj: /tmp/tmpx8z2a_fj.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n  int i = 0;\n  int j = test_str.size() - 1;\n  while (i < j) {\n    if (test_str[i] >= '0' && test_str[i] <= '9') {\n      if (test_str[j] >= '0' && test_str[j] <= '9') {\n        j--;\n      } else {\n        std::swap(test_str[i], test_str[j]);\n        i++;\n        j--;\n      }\n    } else {\n      i++;\n    }\n  }\n  return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122842,
      "stdout": "",
      "stderr": "tmpxvo9frim: /tmp/tmpxvo9frim.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            if (test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp1inb23a7: /tmp/tmp1inb23a7.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while (i < j) {\n        while (i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while (i < j && !isalpha(test_str[j])) {\n            j--;\n        }\n        if (i < j) {\n            std::swap(test_str[i], test_str[j]);\n            i++;\n            j--;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmp4wgkh75o: /tmp/tmp4wgkh75o.cpp:25: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.length() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= 'a' && test_str[j] <= 'z') {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmpjwkljpun: /tmp/tmpjwkljpun.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        while(i < j && !isdigit(test_str[i])) {\n            i++;\n        }\n        while(i < j && isdigit(test_str[j])) {\n            j--;\n        }\n        if(i < j) {\n            std::swap(test_str[i], test_str[j]);\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmpvjdp8x3p: /tmp/tmpvjdp8x3p.cpp:23: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.size(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp6gekfnz_: /tmp/tmp6gekfnz_.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    std::string num_str = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            result += test_str[i];\n        }\n    }\n    result += num_str;\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int i = 0;\n    int j = test_str.size() - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            } else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        } else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpsk0nc6_f: /tmp/tmpsk0nc6_f.cpp:24: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    int len = test_str.length();\n    int i = 0;\n    int j = len - 1;\n    while(i < j) {\n        if(test_str[i] >= '0' && test_str[i] <= '9') {\n            if(test_str[j] >= '0' && test_str[j] <= '9') {\n                j--;\n            }\n            else {\n                std::swap(test_str[i], test_str[j]);\n                i++;\n                j--;\n            }\n        }\n        else {\n            i++;\n        }\n    }\n    return test_str;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510089,
      "stdout": "",
      "stderr": "tmp755mjuv9: /tmp/tmp755mjuv9.cpp:27: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result.push_back(test_str[i]);\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= 'a' && test_str[i] <= 'z') {\n            result.push_back(test_str[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "tmp5bo9mtin: /tmp/tmp5bo9mtin.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result;\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1665510086,
      "stdout": "",
      "stderr": "tmpaw_30dy2: /tmp/tmpaw_30dy2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to move all the numbers to the end of the given string.\nstd::string move_num(std::string test_str) {\n    std::string result = \"\";\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            result += test_str[i];\n        }\n    }\n    for (int i = 0; i < test_str.length(); i++) {\n        if (test_str[i] < '0' || test_str[i] > '9') {\n            result += test_str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = move_num;\n    assert(candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\"));\n    assert(candidate((\"Avengers124Assemble\")) == (\"AvengersAssemble124\"));\n    assert(candidate((\"Its11our12path13to14see15things16do17things\")) == (\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "tmp0kjkk6s2: /tmp/tmp0kjkk6s2.cpp:20: int main(): Assertion `candidate((\"I1love143you55three3000thousand\")) == (\"Iloveyouthreethousand1143553000\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}