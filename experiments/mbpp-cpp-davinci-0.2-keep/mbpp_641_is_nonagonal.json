{
  "name": "mbpp_641_is_nonagonal",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth nonagonal number.\nlong is_nonagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = is_nonagonal;\n    assert(candidate((10)) == (325));\n    assert(candidate((15)) == (750));\n    assert(candidate((18)) == (1089));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long x = (sqrt(1 + 8 * n) - 1) / 2;\n    if (x * (x + 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    return (n*(n-3))/2;",
    "    long nth_nonagonal = 0;\n    nth_nonagonal = (n * (n - 1)) / 2;\n    return nth_nonagonal;",
    "    long x = (sqrt(1 + 8 * n) - 1) / 2;\n    return x * (x + 1) / 2 == n;",
    "    long x = (sqrt(1 + 8 * n) - 1) / 2;\n    if (x * (x + 1) / 2 == n)\n        return 1;\n    return 0;",
    "    return n*(3*n-2);",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n == 0;",
    "    return (3*n*n - n)/2;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n;",
    "    return (n*(n+1))/2;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n;",
    "    long i = 1;\n    long sum = 0;\n    while(sum < n) {\n        sum += i;\n        i++;\n    }\n    if(sum == n) {\n        return i;\n    }\n    return 0;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n == 0;",
    "    long i = 1;\n    while (n > 0) {\n        n -= i;\n        i++;\n    }\n    return n == 0;",
    "    return ((8*n) + 1);",
    "    long i = 1;\n    while(i*(3*i-1)/2 < n) {\n        i++;\n    }\n    return i*(3*i-1)/2 == n;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n;",
    "\tlong i = 0;\n\twhile(n > 0) {\n\t\ti++;\n\t\tn -= i;\n\t}\n\treturn n == 0;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i++;\n    }\n    return n;"
  ]
}