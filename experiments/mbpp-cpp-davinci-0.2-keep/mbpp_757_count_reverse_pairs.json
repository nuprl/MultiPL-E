{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nlong count_reverse_pairs(std::vector<std::string> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = count_reverse_pairs;\n    assert(candidate((std::vector<std::string>({(std::string)\"julia\", (std::string)\"best\", (std::string)\"tseb\", (std::string)\"for\", (std::string)\"ailuj\"}))) == (2));\n    assert(candidate((std::vector<std::string>({(std::string)\"geeks\", (std::string)\"best\", (std::string)\"for\", (std::string)\"skeeg\"}))) == (1));\n    assert(candidate((std::vector<std::string>({(std::string)\"makes\", (std::string)\"best\", (std::string)\"sekam\", (std::string)\"for\", (std::string)\"rof\"}))) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for(auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        map[temp]++;\n    }\n    long count = 0;\n    for(auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        if(map.find(temp) != map.end()) {\n            count += map[temp];\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<test_list.size();i++)\n    {\n        for(int j=i+1;j<test_list.size();j++)\n        {\n            if(test_list[i] == test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i]==test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = 0; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> hash_map;\n    for(auto i : test_list) {\n        std::string rev_str = i;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if(hash_map.find(rev_str) != hash_map.end()) {\n            count += hash_map[rev_str];\n        }\n        if(hash_map.find(i) != hash_map.end()) {\n            hash_map[i]++;\n        } else {\n            hash_map[i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::map<std::string, int> count_map;\n    for(int i = 0; i < test_list.size(); i++) {\n        std::string temp = test_list[i];\n        std::reverse(temp.begin(), temp.end());\n        if(count_map.find(temp) != count_map.end()) {\n            count_map[temp]++;\n        }\n        else {\n            count_map[temp] = 1;\n        }\n    }\n    long result = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(count_map.find(test_list[i]) != count_map.end()) {\n            result += count_map[test_list[i]];\n            count_map.erase(test_list[i]);\n        }\n    }\n    return result;",
    "    std::unordered_map<std::string, int> hash_map;\n    for (auto i : test_list) {\n        std::string rev_str = i;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if (hash_map.find(rev_str) != hash_map.end()) {\n            hash_map[rev_str]++;\n        } else {\n            hash_map[i] = 1;\n        }\n    }\n    long count = 0;\n    for (auto i : hash_map) {\n        if (i.second > 1) {\n            count += (i.second * (i.second - 1)) / 2;\n        }\n    }\n    return count;",
    "\tlong count = 0;\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;"
  ]
}