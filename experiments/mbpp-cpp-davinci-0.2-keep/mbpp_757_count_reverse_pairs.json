{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nlong count_reverse_pairs(std::vector<std::string> test_list) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = count_reverse_pairs;\n    assert(candidate((std::vector<std::string>({(std::string)\"julia\", (std::string)\"best\", (std::string)\"tseb\", (std::string)\"for\", (std::string)\"ailuj\"}))) == (2));\n    assert(candidate((std::vector<std::string>({(std::string)\"geeks\", (std::string)\"best\", (std::string)\"for\", (std::string)\"skeeg\"}))) == (1));\n    assert(candidate((std::vector<std::string>({(std::string)\"makes\", (std::string)\"best\", (std::string)\"sekam\", (std::string)\"for\", (std::string)\"rof\"}))) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for(auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        map[temp]++;\n    }\n    long count = 0;\n    for(auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        if(map.find(temp) != map.end()) {\n            count += map[temp];\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<test_list.size();i++)\n    {\n        for(int j=i+1;j<test_list.size();j++)\n        {\n            if(test_list[i] == test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i]==test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = 0; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> hash_map;\n    for(auto i : test_list) {\n        std::string rev_str = i;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if(hash_map.find(rev_str) != hash_map.end()) {\n            count += hash_map[rev_str];\n        }\n        if(hash_map.find(i) != hash_map.end()) {\n            hash_map[i]++;\n        } else {\n            hash_map[i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::map<std::string, int> count_map;\n    for(int i = 0; i < test_list.size(); i++) {\n        std::string temp = test_list[i];\n        std::reverse(temp.begin(), temp.end());\n        if(count_map.find(temp) != count_map.end()) {\n            count_map[temp]++;\n        }\n        else {\n            count_map[temp] = 1;\n        }\n    }\n    long result = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(count_map.find(test_list[i]) != count_map.end()) {\n            result += count_map[test_list[i]];\n            count_map.erase(test_list[i]);\n        }\n    }\n    return result;",
    "    std::unordered_map<std::string, int> hash_map;\n    for (auto i : test_list) {\n        std::string rev_str = i;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if (hash_map.find(rev_str) != hash_map.end()) {\n            hash_map[rev_str]++;\n        } else {\n            hash_map[i] = 1;\n        }\n    }\n    long count = 0;\n    for (auto i : hash_map) {\n        if (i.second > 1) {\n            count += (i.second * (i.second - 1)) / 2;\n        }\n    }\n    return count;",
    "\tlong count = 0;\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> my_map;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        std::string temp = *i;\n        std::reverse(temp.begin(), temp.end());\n        my_map[temp]++;\n    }\n    long count = 0;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        std::string temp = *i;\n        std::reverse(temp.begin(), temp.end());\n        if (my_map.find(temp) != my_map.end()) {\n            count += my_map[temp];\n            my_map[temp] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++){\n        for(int j = i+1; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i+1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(auto i = test_list.begin(); i != test_list.end(); i++) {\n        for(auto j = i + 1; j != test_list.end(); j++) {\n            if(*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> count;\n    for (auto &i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        count[rev]++;\n    }\n    long ans = 0;\n    for (auto &i : test_list) {\n        ans += count[i];\n    }\n    return ans;",
    "    // Write your code here\n    long count=0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i]==test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> count_map;\n    for (auto &str : test_list) {\n        std::string rev_str = str;\n        std::reverse(rev_str.begin(), rev_str.end());\n        count_map[rev_str]++;\n    }\n    long count = 0;\n    for (auto &str : test_list) {\n        count += count_map[str];\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for (auto str : test_list) {\n        std::string rev = str;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if (map.find(str) != map.end()) {\n            map[str]++;\n        } else {\n            map[str] = 1;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> map;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if (map.find(i) != map.end()) {\n            map[i] += 1;\n        } else {\n            map[i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for(auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if(map.find(rev) != map.end()) {\n            map[rev]++;\n        }\n        else {\n            map[i] = 1;\n        }\n    }\n    long count = 0;\n    for(auto i : map) {\n        if(i.second > 1) {\n            count += i.second * (i.second - 1) / 2;\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> m;\n    for (auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        m[temp]++;\n    }\n    long count = 0;\n    for (auto i : test_list) {\n        if (m[i] > 0) {\n            count += m[i];\n            m[i] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> reverse_map;\n    for(auto i: test_list) {\n        std::string rev_str = i;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if(reverse_map.find(rev_str) != reverse_map.end()) {\n            reverse_map[rev_str]++;\n        } else {\n            reverse_map[rev_str] = 1;\n        }\n    }\n    long count = 0;\n    for(auto i: test_list) {\n        std::string rev_str = i;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if(reverse_map.find(rev_str) != reverse_map.end()) {\n            count += reverse_map[rev_str];\n            reverse_map[rev_str] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "\tlong count = 0;\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i]==test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        std::string s = test_list[i];\n        std::reverse(s.begin(), s.end());\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (s == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> count;\n    for (auto& str : test_list) {\n        std::reverse(str.begin(), str.end());\n        count[str]++;\n    }\n    long result = 0;\n    for (auto& str : test_list) {\n        result += count[str];\n    }\n    return result;",
    "    std::unordered_map<std::string, int> my_map;\n    for(auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        my_map[temp]++;\n    }\n    long count = 0;\n    for(auto i : test_list) {\n        if(my_map.find(i) != my_map.end()) {\n            count += my_map[i];\n        }\n    }\n    return count/2;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for (auto &str : test_list) {\n        std::string rev_str(str.rbegin(), str.rend());\n        if (map.find(rev_str) != map.end()) {\n            map[rev_str]++;\n        } else {\n            map[str] = 1;\n        }\n    }\n    long count = 0;\n    for (auto &pair : map) {\n        count += pair.second * (pair.second - 1) / 2;\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for (auto str : test_list) {\n        std::string rev = str;\n        std::reverse(rev.begin(), rev.end());\n        map[rev]++;\n    }\n    long count = 0;\n    for (auto str : test_list) {\n        if (map.find(str) != map.end()) {\n            if (map[str] > 1) {\n                count += map[str] - 1;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> m;\n    for(auto i: test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        m[rev]++;\n    }\n    long count = 0;\n    for(auto i: test_list) {\n        count += m[i];\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, long> reverse_map;\n    long count = 0;\n    for (auto &str : test_list) {\n        std::string rev_str = str;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if (reverse_map.find(rev_str) != reverse_map.end()) {\n            count += reverse_map[rev_str];\n        }\n        if (reverse_map.find(str) != reverse_map.end()) {\n            reverse_map[str] += 1;\n        } else {\n            reverse_map[str] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            std::string s1 = test_list[i];\n            std::string s2 = test_list[j];\n            std::reverse(s1.begin(), s1.end());\n            if(s1 == s2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  long count = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] == test_list[j]) {\n        count++;\n      }\n    }\n  }\n  return count;",
    "    long count = 0;\n    for(int i=0;i<test_list.size();i++)\n    {\n        for(int j=i+1;j<test_list.size();j++)\n        {\n            if(test_list[i]==test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> reverse_map;\n    for (auto str : test_list) {\n        std::string rev_str = str;\n        std::reverse(rev_str.begin(), rev_str.end());\n        reverse_map[rev_str]++;\n    }\n    long count = 0;\n    for (auto str : test_list) {\n        if (reverse_map[str] > 0) {\n            count += reverse_map[str];\n            reverse_map[str] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for (auto i = 0; i < test_list.size(); i++) {\n        std::string temp = test_list[i];\n        std::reverse(temp.begin(), temp.end());\n        if (map.find(temp) != map.end()) {\n            count += map[temp];\n        }\n        if (map.find(test_list[i]) != map.end()) {\n            map[test_list[i]]++;\n        } else {\n            map[test_list[i]] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++)\n    {\n        for(int j=i+1;j<test_list.size();j++)\n        {\n            if(test_list[i] == test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  long count = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] == test_list[j]) {\n        count++;\n      }\n    }\n  }\n  return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            map[rev]++;\n        }\n        else {\n            map[i]++;\n        }\n    }\n    long count = 0;\n    for (auto i : map) {\n        if (i.second > 1) {\n            count += i.second * (i.second - 1) / 2;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> count_map;\n    for (auto i : test_list) {\n        std::string rev_str = i;\n        std::reverse(rev_str.begin(), rev_str.end());\n        count_map[rev_str]++;\n    }\n    long count = 0;\n    for (auto i : test_list) {\n        count += count_map[i];\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i+1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=0;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> reverse_map;\n    long count = 0;\n    for (auto str : test_list) {\n        std::string reverse_str = str;\n        std::reverse(reverse_str.begin(), reverse_str.end());\n        if (reverse_map.find(reverse_str) != reverse_map.end()) {\n            count += reverse_map[reverse_str];\n        }\n        if (reverse_map.find(str) != reverse_map.end()) {\n            reverse_map[str]++;\n        } else {\n            reverse_map[str] = 1;\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> count;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        count[rev]++;\n    }\n    long ans = 0;\n    for (auto i : test_list) {\n        ans += count[i];\n    }\n    return ans;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> count_map;\n    for (auto &i : test_list)\n        count_map[i]++;\n    long count = 0;\n    for (auto &i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        count += count_map[rev];\n        if (i == rev)\n            count--;\n    }\n    return count / 2;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "\tlong count = 0;\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        map[rev]++;\n    }\n    long count = 0;\n    for (auto i : test_list) {\n        if (map.find(i) != map.end()) {\n            count += map[i];\n            map[i] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            std::string a = test_list[i];\n            std::string b = test_list[j];\n            std::reverse(a.begin(), a.end());\n            if(a == b) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> reverse_map;\n    long count = 0;\n    for (auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        if (reverse_map.find(temp) != reverse_map.end()) {\n            count += reverse_map[temp];\n        }\n        if (reverse_map.find(i) != reverse_map.end()) {\n            reverse_map[i] += 1;\n        } else {\n            reverse_map[i] = 1;\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    long count = 0;\n    for (auto &str : test_list) {\n        std::string rev = str;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        map[str]++;\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> m;\n    long count = 0;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if (m.find(rev) != m.end()) {\n            count += m[rev];\n        }\n        if (m.find(i) != m.end()) {\n            m[i]++;\n        } else {\n            m[i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        std::string temp = *i;\n        std::reverse(temp.begin(), temp.end());\n        if (map.find(temp) != map.end()) {\n            count += map[temp];\n        }\n        if (map.find(*i) == map.end())\n            map[*i] = 1;\n        else\n            map[*i] += 1;\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> reverse_map;\n    for (auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        if (reverse_map.find(temp) != reverse_map.end()) {\n            reverse_map[temp]++;\n        } else {\n            reverse_map[i] = 1;\n        }\n    }\n    long count = 0;\n    for (auto i : reverse_map) {\n        if (i.second > 1) {\n            count += (i.second * (i.second - 1)) / 2;\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> reverse_pairs;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        std::string reverse_string = *i;\n        std::reverse(reverse_string.begin(), reverse_string.end());\n        if (reverse_pairs.find(reverse_string) != reverse_pairs.end()) {\n            reverse_pairs[reverse_string]++;\n        } else {\n            reverse_pairs[reverse_string] = 1;\n        }\n    }\n    long count = 0;\n    for (auto i = reverse_pairs.begin(); i != reverse_pairs.end(); i++) {\n        count += i->second;\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for (auto str : test_list) {\n        std::string rev = str;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if (map.find(str) != map.end()) {\n            map[str]++;\n        } else {\n            map[str] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  long count = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] == test_list[j]) {\n        count++;\n      }\n    }\n  }\n  return count;",
    "  long count = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] == test_list[j]) {\n        count++;\n      }\n    }\n  }\n  return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> m;\n    for(auto i : test_list) {\n        std::string s = i;\n        std::reverse(s.begin(), s.end());\n        if(m.find(s) != m.end()) {\n            m[s]++;\n        } else {\n            m[s] = 1;\n        }\n    }\n    long count = 0;\n    for(auto i : test_list) {\n        std::string s = i;\n        std::reverse(s.begin(), s.end());\n        if(m.find(s) != m.end()) {\n            count += m[s];\n        }\n    }\n    return count;",
    "  long count = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] == test_list[j]) {\n        count++;\n      }\n    }\n  }\n  return count;",
    "    std::unordered_map<std::string, int> m;\n    for (auto i : test_list) {\n        std::reverse(i.begin(), i.end());\n        m[i]++;\n    }\n    long count = 0;\n    for (auto i : test_list) {\n        if (m[i] > 0) {\n            count += m[i];\n            m[i] = 0;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    int n = test_list.size();\n    int count = 0;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;"
  ]
}