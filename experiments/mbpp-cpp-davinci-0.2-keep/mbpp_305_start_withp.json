{
  "name": "mbpp_305_start_withp",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return two words from a list of words starting with letter 'p'.\nstd::string start_withp(std::vector<std::string> words) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = start_withp;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python PHP\", (std::string)\"Java JavaScript\", (std::string)\"c c++\"}))) == std::make_tuple(\"Python\", \"PHP\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python Programming\", (std::string)\"Java Programming\"}))) == std::make_tuple(\"Python\", \"Programming\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"Pqrst Pqr\", (std::string)\"qrstuv\"}))) == std::make_tuple(\"Pqrst\", \"Pqr\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tfor (auto word : words) {\n\t\tif (word[0] == 'p') {\n\t\t\tresult.push_back(word);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    for(auto i : words) {\n        if(i[0] == 'p') {\n            result.push_back(i);\n        }\n    }\n    std::string s = \"\";\n    for(auto i : result) {\n        s += i + \" \";\n    }\n    return s;",
    "  std::string result;\n  for(auto word : words) {\n    if(word[0] == 'p') {\n      result += word + \" \";\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    for (auto i = words.begin(); i != words.end(); i++) {\n        if (i->at(0) == 'p') {\n            result = result + *i + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result.push_back(words[i]);\n        }\n    }\n    return result[0]+\" \"+result[1];",
    "    std::string s;\n    for(int i=0;i<words.size();i++){\n        if(words[i][0]=='p'){\n            s=s+words[i]+\" \";\n        }\n    }\n    return s;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word.at(0) == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(int i=0; i<words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word.at(0) == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result.size() == 2 ? \"true\" : \"false\";",
    "    std::string result;\n    int count = 0;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n    }\n    if (count == 0) {\n        return \"No words start with p\";\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "\tstd::string result;\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tif (words[i][0] == 'p') {\n\t\t\tresult += words[i] + \" \";\n\t\t}\n\t}\n\treturn result;",
    "    std::string result = \"\";\n    int count = 0;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "\tstd::string result;\n\tfor(int i=0;i<words.size();i++) {\n\t\tif(words[i][0]=='p') {\n\t\t\tresult += words[i] + \" \";\n\t\t}\n\t}\n\treturn result;",
    "    std::string result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result.append(words[i]);\n            result.append(\" \");\n        }\n    }\n    return result;",
    "\tstd::string result;\n\tint count = 0;\n\tfor (std::string word : words) {\n\t\tif (word[0] == 'p') {\n\t\t\tresult += word + \" \";\n\t\t\tcount++;\n\t\t}\n\t\tif (count == 2) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
    "  std::string result;\n  for (auto word : words) {\n    if (word[0] == 'p') {\n      result += word + \" \";\n    }\n  }\n  return result;",
    "\tstd::string result;\n\tfor (std::string word : words) {\n\t\tif (word[0] == 'p') {\n\t\t\tresult += word + \" \";\n\t\t}\n\t}\n\treturn result;",
    "    std::string result;\n    int count = 0;\n    for(auto i = words.begin(); i != words.end(); i++) {\n        if(i->at(0) == 'p') {\n            result += *i;\n            count++;\n            if(count == 2) {\n                break;\n            }\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word;\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tfor (auto word : words) {\n\t\tif (word[0] == 'p') {\n\t\t\tresult.push_back(word);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    for(std::string word: words) {\n        if(word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result.push_back(words[i]);\n        }\n    }\n    if(result.size()==0) {\n        return \"No words starting with letter p\";\n    }\n    else if(result.size()==1) {\n        return result[0];\n    }\n    else {\n        return result[0]+\" \"+result[1];\n    }",
    "    std::string result;\n    for(int i=0;i<words.size();i++){\n        if(words[i][0]=='p'){\n            result+=words[i];\n            result+=\" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result.append(words[i]);\n            result.append(\" \");\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" and \" + result[1];",
    "    std::vector<std::string> result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "  std::string result;\n  int count = 0;\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i][0] == 'p') {\n      result += words[i];\n      count++;\n    }\n    if (count == 2) {\n      break;\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i];\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (auto word: words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i : words) {\n        if (i[0] == 'p') {\n            result += i + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            return result;\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n    }\n    if (count == 0) {\n        return \"No words start with p\";\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for(int i=0;i<words.size();i++) {\n    if(words[i][0]=='p') {\n      result.push_back(words[i]);\n    }\n  }\n  return result[0]+\" \"+result[1];",
    "    std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0] == 'p') {\n            result.push_back(words[i]);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result = \"\";\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "  std::vector<std::string> result;\n  for(int i=0;i<words.size();i++) {\n    if(words[i][0] == 'p') {\n      result.push_back(words[i]);\n    }\n  }\n  return result[0]+\" \"+result[1];",
    "    std::string result;\n    int count = 0;\n    for(std::string word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tfor(int i=0;i<words.size();i++) {\n\t\tif(words[i][0]=='p') {\n\t\t\tresult.push_back(words[i]);\n\t\t}\n\t}\n\treturn result[0]+\" \"+result[1];",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result = result + words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int count = 0;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result.push_back(words[i]);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "  std::string result;\n  int count = 0;\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i][0] == 'p') {\n      result += words[i] + \" \";\n      count++;\n    }\n    if (count == 2) {\n      return result;\n    }\n  }\n  return result;",
    "    std::string result = \"\";\n    int count = 0;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n    }\n    if(count == 0) {\n        return \"No words start with p\";\n    }\n    return result;",
    "    std::string result = \"\";\n    int count = 0;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n    }\n    if (count == 0) {\n        return \"No words start with p\";\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tfor (auto word : words) {\n\t\tif (word[0] == 'p') {\n\t\t\tresult.push_back(word);\n\t\t}\n\t}\n\treturn result;",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tif (words[i][0] == 'p') {\n\t\t\tresult.push_back(words[i]);\n\t\t}\n\t}\n\treturn result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result = result + words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i];\n            result += \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto word:words) {\n        if(word[0]=='p') {\n            result+=word;\n            result+=\" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto i : words) {\n        if (i[0] == 'p') {\n            result.push_back(i);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int count = 0;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (auto word : words) {\n    if (word[0] == 'p') {\n      result.push_back(word);\n    }\n  }\n  return result[0] + \" \" + result[1];",
    "    std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::vector<std::string> result;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            count++;\n            result += words[i] + \" \";\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n    }\n    if(count == 0) {\n        return \"No words start with p\";\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result.push_back(words[i]);\n        }\n    }\n    std::string res=\"\";\n    for(int i=0;i<result.size();i++) {\n        res+=result[i]+\" \";\n    }\n    return res;",
    "    std::string result;\n    int count = 0;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(std::string word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0; i<words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result = result + words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tfor (auto word : words) {\n\t\tif (word[0] == 'p') {\n\t\t\tresult.push_back(word);\n\t\t}\n\t}\n\treturn result[0] + \" \" + result[1];",
    "    std::vector<std::string> result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result.push_back(words[i]);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "  std::string result;\n  int count = 0;\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i][0] == 'p') {\n      result += words[i] + \" \";\n      count++;\n    }\n    if (count == 2) {\n      break;\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "\tstd::string result;\n\tfor(int i=0;i<words.size();i++) {\n\t\tif(words[i][0]=='p') {\n\t\t\tresult+=words[i];\n\t\t\tresult+=\" \";\n\t\t}\n\t}\n\treturn result;",
    "    std::string result = \"\";\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result.append(words[i]);\n            result.append(\" \");\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2)\n            break;\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result.push_back(words[i]);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result.push_back(words[i]);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::vector<std::string> result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result.push_back(words[i]);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result += words[i];\n            result += \" \";\n        }\n    }\n    return result;",
    "\tstd::string result;\n\tint count = 0;\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tif (words[i][0] == 'p') {\n\t\t\tresult += words[i] + \" \";\n\t\t\tcount++;\n\t\t}\n\t\tif (count == 2) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
    "    std::string result;\n    int count = 0;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "  std::vector<std::string> result;\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i][0] == 'p') {\n      result.push_back(words[i]);\n    }\n  }\n  return result[0] + \" \" + result[1];",
    "  std::string result;\n  int count = 0;\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i].at(0) == 'p') {\n      result += words[i] + \" \";\n      count++;\n    }\n    if (count == 2) {\n      break;\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0] == 'p') {\n            count++;\n            result += words[i];\n            result += \" \";\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result.push_back(words[i]);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> pwords;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            pwords.push_back(word);\n        }\n    }\n    std::string result;\n    for(auto word : pwords) {\n        result += word + \" \";\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++){\n        if(words[i][0]=='p'){\n            result=result+words[i]+\" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0] == 'p') {\n            result = result + words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = words.begin(); i != words.end(); i++) {\n        if ((*i)[0] == 'p') {\n            result += *i + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0] == 'p') {\n            result.push_back(words[i]);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string res = \"\";\n    int count = 0;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            res += word + \" \";\n            count++;\n        }\n        if(count == 2)\n            break;\n    }\n    return res;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto word : words) {\n        if(word.at(0) == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto &word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<std::string>::iterator it;\n    for (it = words.begin(); it != words.end(); it++) {\n        if ((*it)[0] == 'p') {\n            result += *it;\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::vector<std::string> result;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result = \"\";\n    for(std::string word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> words_with_p;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            words_with_p.push_back(word);\n        }\n    }\n    std::string result;\n    for (std::string word : words_with_p) {\n        result += word + \" \";\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n    }\n    if(count == 0) {\n        return \"No words start with p\";\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n    }\n    if (count == 0) {\n        return \"No words start with p\";\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result = result + words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n            if (count == 2) {\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "  std::string result;\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i][0] == 'p') {\n      result += words[i] + \" \";\n    }\n  }\n  return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "  std::string result;\n  for (auto word : words) {\n    if (word[0] == 'p') {\n      result += word + \" \";\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "  std::vector<std::string> words_with_p;\n  for (auto word : words) {\n    if (word[0] == 'p') {\n      words_with_p.push_back(word);\n    }\n  }\n  return words_with_p[0] + \" \" + words_with_p[1];",
    "    std::vector<std::string> result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result.push_back(words[i]);\n        }\n    }\n    std::string res=\"\";\n    for(int i=0;i<result.size();i++) {\n        res+=result[i];\n        res+=\" \";\n    }\n    return res;",
    "    std::string result;\n    for(auto i:words) {\n        if(i[0]=='p') {\n            result+=i;\n            result+=\" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<std::string>::iterator it;\n    for(it=words.begin();it!=words.end();it++) {\n        if((*it)[0]=='p') {\n            result.append(*it);\n            result.append(\" \");\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::vector<std::string> words_with_p;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0] == 'p') {\n            words_with_p.push_back(words[i]);\n        }\n    }\n    return words_with_p[0] + \" \" + words_with_p[1];",
    "    std::string result;\n    int count = 0;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++)\n    {\n        if(words[i][0]=='p')\n        {\n            result+=words[i];\n            result+=\" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(std::string word: words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i];\n            result += \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(auto word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result.append(words[i]);\n            result.append(\" \");\n        }\n    }\n    return result;",
    "  std::string result;\n  int count = 0;\n  for (auto word : words) {\n    if (word[0] == 'p') {\n      result += word + \" \";\n      count++;\n    }\n    if (count == 2) {\n      return result;\n    }\n  }\n  return result;",
    "    std::string result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;",
    "\tstd::string result = \"\";\n\tint count = 0;\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tif (words[i][0] == 'p') {\n\t\t\tresult += words[i] + \" \";\n\t\t\tcount++;\n\t\t}\n\t\tif (count == 2) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;",
    "    std::string result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tfor (auto i : words) {\n\t\tif (i[0] == 'p') {\n\t\t\tresult.push_back(i);\n\t\t}\n\t}\n\treturn result[0] + \" \" + result[1];",
    "    std::string result;\n    int count = 0;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n            count++;\n        }\n    }\n    if (count == 0) {\n        return \"No words start with p\";\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tfor (auto word : words) {\n\t\tif (word[0] == 'p') {\n\t\t\tresult.push_back(word);\n\t\t}\n\t}\n\treturn result;",
    "    std::string str;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            str=str+words[i]+\" \";\n        }\n    }\n    return str;",
    "    std::string result;\n    for(auto word:words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if(count == 2) {\n            break;\n        }\n    }\n    return result;",
    "  std::string result;\n  for (std::string word : words) {\n    if (word[0] == 'p') {\n      result += word + \" \";\n    }\n  }\n  return result;",
    "    std::vector<std::string> result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result.push_back(word);\n        }\n    }\n    return result.size() > 1 ? result[0] + \" \" + result[1] : \"\";",
    "    std::string result;\n    for (auto word : words) {\n        if (word.at(0) == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(auto word: words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n            count++;\n        }\n        if (count == 2) {\n            break;\n        }\n    }\n    return result;"
  ]
}