{
  "name": "mbpp_161_remove_elements",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove all elements from a given list present in another list.\nstd::vector<long> remove_elements(std::vector<long> list1, std::vector<long> list2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = remove_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))) == (std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)1, (long)3, (long)5, (long)7}))) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8, (long)9, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})), (std::vector<long>({(long)5, (long)7}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)6, (long)8, (long)9, (long)10})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for(int i = 0; i < list1.size(); i++) {\n        if(std::find(list2.begin(), list2.end(), list1[i]) == list2.end()) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = 0; i < list1.size(); i++) {\n        bool found = false;\n        for(long j = 0; j < list2.size(); j++) {\n            if(list1[i] == list2[j]) {\n                found = true;\n                break;\n            }\n        }\n        if(!found) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto i : list2) {\n        set.insert(i);\n    }\n    for (auto i : list1) {\n        if (set.find(i) == set.end()) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (auto i : list1) {\n        if (std::find(list2.begin(), list2.end(), i) == list2.end()) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(list1.begin(), list1.end());\n    std::sort(list2.begin(), list2.end());\n    std::set_difference(list1.begin(), list1.end(), list2.begin(), list2.end(), std::back_inserter(result));\n    return result;",
    "  std::vector<long> result;\n  for(int i=0;i<list1.size();i++) {\n    if(std::find(list2.begin(),list2.end(),list1[i]) == list2.end()) {\n      result.push_back(list1[i]);\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    for (auto i : list1) {\n        if (std::find(list2.begin(), list2.end(), i) == list2.end()) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  std::sort(list1.begin(), list1.end());\n  std::sort(list2.begin(), list2.end());\n  std::set_difference(list1.begin(), list1.end(), list2.begin(), list2.end(), std::inserter(result, result.begin()));\n  return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < list1.size(); i++) {\n        bool found = false;\n        for (int j = 0; j < list2.size(); j++) {\n            if (list1[i] == list2[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0; i<list1.size(); i++) {\n        bool flag = false;\n        for(int j=0; j<list2.size(); j++) {\n            if(list1[i] == list2[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if(!flag) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < list1.size(); i++) {\n        bool found = false;\n        for(int j = 0; j < list2.size(); j++) {\n            if(list1[i] == list2[j]) {\n                found = true;\n                break;\n            }\n        }\n        if(!found) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> list3;\n    for(int i = 0; i < list1.size(); i++) {\n        bool flag = false;\n        for(int j = 0; j < list2.size(); j++) {\n            if(list1[i] == list2[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if(!flag) {\n            list3.push_back(list1[i]);\n        }\n    }\n    return list3;",
    "    std::vector<long> result;\n    for(int i = 0; i < list1.size(); i++) {\n        if(std::find(list2.begin(), list2.end(), list1[i]) == list2.end()) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = 0; i < list1.size(); i++) {\n        bool flag = false;\n        for (long j = 0; j < list2.size(); j++) {\n            if (list1[i] == list2[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < list1.size(); i++) {\n        bool found = false;\n        for(int j = 0; j < list2.size(); j++) {\n            if(list1[i] == list2[j]) {\n                found = true;\n                break;\n            }\n        }\n        if(!found) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long>::iterator it;\n    for(it = list1.begin(); it != list1.end(); it++) {\n        if(std::find(list2.begin(), list2.end(), *it) != list2.end()) {\n            list1.erase(it);\n        }\n    }\n    return list1;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto i : list2) {\n        set.insert(i);\n    }\n    for (auto i : list1) {\n        if (set.find(i) == set.end()) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long i = 0; i < list2.size(); i++) {\n        set.insert(list2[i]);\n    }\n    for (long i = 0; i < list1.size(); i++) {\n        if (set.find(list1[i]) == set.end()) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    for(it = list1.begin(); it != list1.end(); it++) {\n        for(it2 = list2.begin(); it2 != list2.end(); it2++) {\n            if(*it == *it2) {\n                list1.erase(it);\n                break;\n            }\n        }\n    }\n    return list1;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long i = 0; i < list2.size(); i++) {\n        set.insert(list2[i]);\n    }\n    for (long i = 0; i < list1.size(); i++) {\n        if (set.find(list1[i]) == set.end()) {\n            result.push_back(list1[i]);\n        }\n    }\n    return result;"
  ]
}