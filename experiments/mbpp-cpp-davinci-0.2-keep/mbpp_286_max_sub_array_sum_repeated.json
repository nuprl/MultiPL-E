{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, 0L);\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, 0L);\n    }\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    return ans;",
    "    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if (max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = std::max(max_sum, sum * (k - 2) + max_sum_so_far);\n    return ans;",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum > 0) {\n            curr_sum = 0;\n        }\n        min_wrap = std::min(min_wrap, curr_sum);\n    }\n    min_wrap = std::abs(min_wrap);\n    long ans = std::max(max_sum, max_wrap + min_wrap);\n    return ans;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_sum < max_ending_here)\n            max_sum = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0)\n            max_ending_here_wrap = 0;\n        if (max_wrap < max_ending_here_wrap)\n            max_wrap = max_ending_here_wrap;\n    }\n    max_wrap = max_wrap + max_wrap;\n    if (k == 1)\n        return max_sum;\n    else if (k == 2)\n        return max_wrap > max_sum ? max_wrap : max_sum;\n    else\n        return max_wrap > max_sum ? max_wrap : max_sum;",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element;\n    }\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = std::max(max_sum, sum * (k - 2) + curr_sum);\n    return ans;",
    "    // Write your code here\n    long max_so_far = INT_MIN, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    max_wrap = max_wrap * k;\n    max_wrap = max_wrap - sum;\n    return std::max(max_so_far, max_wrap);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return std::max(max_so_far, sum * k - max_so_far);",
    "    long max_sum = 0, max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum += a[i];\n        max_so_far = std::max(max_so_far, max_sum);\n        if(max_sum < 0) {\n            max_sum = 0;\n        }\n    }\n    long max_wrap = 0, sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum += a[i];\n        max_so_far = std::max(max_so_far, max_sum);\n        if(max_sum < 0) {\n            max_sum = 0;\n        }\n    }\n    max_wrap += max_sum;\n    if(k == 1) {\n        return max_so_far;\n    }\n    if(max_wrap > 0) {\n        return std::max(max_so_far, max_wrap * (k - 2) + sum);\n    }\n    return std::max(max_so_far, max_wrap);",
    "    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        long sum = 0;\n        for (long j = i; j < n; j++) {\n            sum += a[j];\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum * k;",
    "    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_sum_of_all_subarrays = max_sum;\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        max_sum_of_all_subarrays = std::max(max_sum_of_all_subarrays, max_prefix_sum);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        max_sum_of_all_subarrays = std::max(max_sum_of_all_subarrays, max_suffix_sum);\n    }\n    long total_sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = std::max(max_sum_of_all_subarrays, total_sum * k);\n    if(total_sum > 0) {\n        ans = std::max(ans, max_sum_of_all_subarrays + (total_sum * (k - 2)));\n    }\n    return ans;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_so_far);\n    }\n    return max_sum * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum > 0) {\n            curr_sum = 0;\n        }\n        min_sum = std::min(min_sum, curr_sum);\n    }\n    long ans = 0;\n    if(k % 2 == 0) {\n        ans = std::max(max_sum, sum + min_sum * (k - 2));\n    } else {\n        ans = std::max(max_sum, sum + min_sum * (k - 1));\n    }\n    return ans;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far + (k - 2) * sum;",
    "    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        long sum = 0;\n        for(long j = i; j < n; j++) {\n            sum += a[j];\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum * k;",
    "    long sum = 0;\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_sum_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum_ending_here += a[i];\n        if (max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n        }\n        if (max_sum_so_far < max_sum_ending_here) {\n            max_sum_so_far = max_sum_ending_here;\n        }\n    }\n    max_sum = max_sum_so_far;\n    if (sum > 0) {\n        max_sum += (k - 2) * sum;\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum_ending_here += a[i];\n        if (max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n        }\n        if (max_sum_so_far < max_sum_ending_here) {\n            max_sum_so_far = max_sum_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, max_sum_so_far);\n    return max_sum;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0;\n    long min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_so_far += a[i];\n        if(min_so_far > 0) {\n            min_so_far = 0;\n        }\n        if(min_sum > min_so_far) {\n            min_sum = min_so_far;\n        }\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    if(sum > 0) {\n        return std::max(max_sum, sum * (k - 2) + max_sum);\n    } else {\n        return std::max(max_sum, sum * (k - 2) + max_sum - min_sum);\n    }",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    return (max_wrap > max_sum) ? max_wrap : max_sum;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return std::max(ans, max_sum);",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, sum + max_so_far);\n    if (k == 1) {\n        return max_sum;\n    }\n    long sum_total = sum * (k - 2);\n    sum_total += max_sum;\n    return sum_total;"
  ]
}