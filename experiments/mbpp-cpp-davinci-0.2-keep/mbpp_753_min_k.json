{
  "name": "mbpp_753_min_k",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nstd::vector<Union_std_string_long> min_k(std::vector<Union_std_string_long> test_list, long K) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = min_k;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Nikhil\", 8)})), (2)) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 2), (std::tuple<std::string, long>)std::make_tuple(\"Akshat\", 4)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Sanjeev\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})), (3)) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Akash\", 3), (std::tuple<std::string, long>)std::make_tuple(\"Angat\", 5), (std::tuple<std::string, long>)std::make_tuple(\"Nepin\", 9)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"tanmay\", 14), (std::tuple<std::string, long>)std::make_tuple(\"Amer\", 11), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9), (std::tuple<std::string, long>)std::make_tuple(\"SKD\", 16)})), (1)) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 9)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (result.size() < K) {\n            result.push_back(*it);\n        } else {\n            std::sort(result.begin(), result.end());\n            if (result[0] > *it) {\n                result[0] = *it;\n            }\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> res;\n    std::vector<Union_std_string_long> res_copy;\n    std::vector<Union_std_string_long> res_copy_2;\n    std::vector<Union_std_string_long> res_copy_3;\n    std::vector<Union_std_string_long> res_copy_4;\n    std::vector<Union_std_string_long> res_copy_5;\n    std::vector<Union_std_string_long> res_copy_6;\n    std::vector<Union_std_string_long> res_copy_7;\n    std::vector<Union_std_string_long> res_copy_8;\n    std::vector<Union_std_string_long> res_copy_9;\n    std::vector<Union_std_string_long> res_copy_10;\n    std::vector<Union_std_string_long> res_copy_11;\n    std::vector<Union_std_string_long> res_copy_12;\n    std::vector<Union_std_string_long> res_copy_13;\n    std::vector<Union_std_string_long> res_copy_14;\n    std::vector<Union_std_string_long> res_copy_15;\n    std::vector<Union_std_string_long> res_copy_16;\n    std::vector<Union_std_string_long> res_copy_17;\n    std::vector<Union_std_string_long> res_copy_18;\n    std::vector<Union_std_string_long> res_copy_19;\n    std::vector<Union_std_string_long> res_copy_20;\n    std::vector<Union_std_string_long> res_copy_21;\n    std::vector<Union_std_string_long> res_copy_22;\n    std::vector<Union_std_string_long> res_copy_23;\n    std::vector<Union_std_string_long> res_copy_24;\n    std::vector<Union_std_string_long> res_copy_",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_list;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_list.size() < K) {\n            min_list.push_back(*it);\n        } else {\n            std::vector<Union_std_string_long>::iterator it1;\n            for (it1 = min_list.begin(); it1 != min_list.end(); it1++) {\n                if (*it < *it1) {\n                    *it1 = *it;\n                    break;\n                }\n            }\n        }\n    }\n    return min_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std::vector<Union_std_string_long>::iterator it26;\n    std",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::priority_queue<Union_std_string_long> pq;\n    for (auto i : test_list) {\n        pq.push(i);\n    }\n    for (int i = 0; i < K; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (it = test_list.begin(); it != test_list.begin() + K; it++) {\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_k_list;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        min_k_list.push_back(test_list[i]);\n    }\n    return min_k_list;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (long i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(test_list.begin(), test_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (int i = 0; i < K; i++) {\n        result.push_back(test_list[i]);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> min_list;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        if (min_list.size() < K) {\n            min_list.push_back(*it);\n        } else {\n            std::sort(min_list.begin(), min_list.end(), [](Union_std_string_long a, Union_std_string_long b) {\n                if (a.f1 < b.f1) {\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n            if (min_list[K - 1].f1 > (*it).f1) {\n                min_list[K - 1] = *it;\n            }\n        }\n    }\n    return min_list;"
  ]
}