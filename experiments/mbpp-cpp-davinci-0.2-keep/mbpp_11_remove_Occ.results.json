{
  "name": "mbpp_11_remove_Occ",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    // Write your code here\n    int i,j;\n    for(i=0;i<s.length();i++){\n        if(s[i]==ch[0]){\n            break;\n        }\n    }\n    for(j=s.length()-1;j>=0;j--){\n        if(s[j]==ch[0]){\n            break;\n        }\n    }\n    if(i==s.length()){\n        return s;\n    }\n    else if(i==j){\n        s.erase(i,1);\n        return s;\n    }\n    else{\n        s.erase(i,1);\n        s.erase(j-1,1);\n        return s;\n    }\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    i = n-1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i--;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n-1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < n; k++) {\n        if(k < i || k > j) {\n            res += s[k];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "tmpc08tvfbs: /tmp/tmpc08tvfbs.cpp:31: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string res = \"\";\n    int i = 0;\n    while(i < s.length()) {\n        if(s[i] == ch[0]) {\n            i++;\n            continue;\n        }\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i;\n    for (i = 0; i < n; i++) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n    }\n    if (i == n) {\n        return s;\n    }\n    int j;\n    for (j = n - 1; j >= 0; j--) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n    }\n    if (i == j) {\n        return s.substr(0, i) + s.substr(i + 1, n - i - 1);\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, n - j - 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "tmpmolycc94: /tmp/tmpmolycc94.cpp:32: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n\t// Write your code here\n\tint n = s.length();\n\tint m = ch.length();\n\tif (n == 0) {\n\t\treturn \"\";\n\t}\n\tif (m == 0) {\n\t\treturn s;\n\t}\n\tif (m > 1) {\n\t\treturn \"\";\n\t}\n\tint i = 0;\n\twhile (i < n) {\n\t\tif (s[i] == ch[0]) {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (i == n) {\n\t\treturn s;\n\t}\n\tint j = n - 1;\n\twhile (j >= 0) {\n\t\tif (s[j] == ch[0]) {\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\tif (j == -1) {\n\t\treturn s;\n\t}\n\tstd::string ans = \"\";\n\tfor (int k = 0; k < i; k++) {\n\t\tans += s[k];\n\t}\n\tfor (int k = j + 1; k < n; k++) {\n\t\tans += s[k];\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "tmpnp4v47tz: /tmp/tmpnp4v47tz.cpp:49: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if (i == -1) {\n        return s;\n    }\n    else {\n        s.erase(i, 1);\n        s.erase(j-1, 1);\n        return s;\n    }\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, n - j - 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            res += s[k];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = i + 1; k < j; k++) {\n        res += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k < i || k > j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmp84dkc47k: /tmp/tmp84dkc47k.cpp:31: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    int j = n - 1;\n    while(s[j] != ch[0]) {\n        j--;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i;\n    for (i = 0; i < n; i++) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n    }\n    for (int j = i; j < n; j++) {\n        s[j] = s[j + 1];\n    }\n    for (int j = n - 2; j >= 0; j--) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n    }\n    for (int k = j; k < n - 1; k++) {\n        s[k] = s[k + 1];\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "/tmp/tmp89mebexg.cpp: In function \u2018std::string remove_Occ(std::string, std::string)\u2019:\n/tmp/tmp89mebexg.cpp:20:18: error: \u2018j\u2019 was not declared in this scope\n   20 |     for (int k = j; k < n - 1; k++) {\n      |                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        res += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "tmpmolycc94: /tmp/tmpmolycc94.cpp:32: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string res = \"\";\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        res += s[i];\n        i++;\n    }\n    i++;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        res += s[i];\n        i++;\n    }\n    i++;\n    while (i < n) {\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    s.erase(i, 1);\n    i = s.length() - 1;\n    while(s[i] != ch[0]) {\n        i--;\n    }\n    s.erase(i, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while (j >= 0) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    i = n - 1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    n = s.length();\n    i = n - 1;\n    while (i >= 0) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    s.erase(i, 1);\n    i = n - 1;\n    while(s[i] != ch[0]) {\n        i--;\n    }\n    s.erase(i, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if (i == -1) {\n        return s;\n    }\n    else {\n        s.erase(i, 1);\n        s.erase(j-1, 1);\n        return s;\n    }\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    // Write your code here\n    int n = s.length();\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    s.erase(s.begin() + i);\n    i = n - 1;\n    while(s[i] != ch[0]) {\n        i--;\n    }\n    s.erase(s.begin() + i);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    i = n - 1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i--;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = 0;\n    int j = s.length() - 1;\n    while (i < s.length() && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == s.length() || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < s.length(); k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    int j = n-1;\n    while(s[j] != ch[0]) {\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        res += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < n; k++) {\n        if(k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if(i == -1 || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string res = \"\";\n    int i = 0;\n    while(s[i] != ch[0]) {\n        res += s[i];\n        i++;\n    }\n    i++;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    i++;\n    while(i < s.length()) {\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "tmpskig8kit: /tmp/tmpskig8kit.cpp:25: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    std::string s1 = s.substr(0, i);\n    std::string s2 = s.substr(j + 1);\n    return s1 + s2;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpj73g6auf: /tmp/tmpj73g6auf.cpp:14: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i=0;\n    int j=s.length()-1;\n    while(s[i]!=ch) {\n        i++;\n    }\n    while(s[j]!=ch) {\n        j--;\n    }\n    s.erase(i,1);\n    s.erase(j-1,1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123227,
      "stdout": "",
      "stderr": "/tmp/tmpzuq3ltcr.cpp: In function \u2018std::string remove_Occ(std::string, std::string)\u2019:\n/tmp/tmpzuq3ltcr.cpp:7:15: error: no match for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n    7 |     while(s[i]!=ch) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpzuq3ltcr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note:   template argument deduction/substitution failed:\n/tmp/tmpzuq3ltcr.cpp:7:17: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019}\n    7 |     while(s[i]!=ch) {\n      |                 ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpzuq3ltcr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note:",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    else {\n        return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n    }\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, n - j - 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    int j = s.length() - 1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            s.erase(j, 1);\n            break;\n        }\n        j--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    if(i == n) {\n        return s;\n    }\n    int j = n - 1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    if(j == 0) {\n        return s;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp80ydb5go: /tmp/tmp80ydb5go.cpp:38: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = 0;\n    while (i < s.length()) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n        }\n        else {\n            i++;\n        }\n    }\n    i = s.length() - 1;\n    while (i >= 0) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n        }\n        else {\n            i--;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    // Write your code here\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    i = n-1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    s.erase(i, 1);\n    i = n - 1;\n    while(s[i] != ch[0]) {\n        i--;\n    }\n    s.erase(i, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n\tstd::string result = \"\";\n\tint n = s.length();\n\tint i = 0;\n\tint j = n-1;\n\twhile(s[i] != ch[0]) {\n\t\tresult += s[i];\n\t\ti++;\n\t}\n\twhile(s[j] != ch[0]) {\n\t\tj--;\n\t}\n\tfor(int k = i+1; k < j; k++) {\n\t\tresult += s[k];\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmp7w6p6ye1: /tmp/tmp7w6p6ye1.cpp:23: int main(): Assertion `candidate((\"hello\"), (\"l\")) == (\"heo\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(s[i] != ch) {\n        i++;\n    }\n    while(s[j] != ch) {\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        res += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123227,
      "stdout": "",
      "stderr": "/tmp/tmpvqs_zai9.cpp: In function \u2018std::string remove_Occ(std::string, std::string)\u2019:\n/tmp/tmpvqs_zai9.cpp:8:16: error: no match for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n    8 |     while(s[i] != ch) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpvqs_zai9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note:   template argument deduction/substitution failed:\n/tmp/tmpvqs_zai9.cpp:8:19: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019}\n    8 |     while(s[i] != ch) {\n      |                   ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpvqs_zai9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    // Write your code here\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = 0;\n    int j = s.length() - 1;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    while(s[j] != ch[0]) {\n        j--;\n    }\n    s.erase(i, 1);\n    s.erase(j - 1, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, n - j - 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string::iterator it;\n    it = std::find(s.begin(), s.end(), ch[0]);\n    if (it != s.end()) {\n        s.erase(it);\n    }\n    it = std::find(s.begin(), s.end(), ch[0]);\n    if (it != s.end()) {\n        s.erase(it);\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if (i == -1) {\n        return s;\n    }\n    if (i == j) {\n        return s.substr(0, i) + s.substr(i + 1, s.length() - i - 1);\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, s.length() - j - 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    s.erase(i, 1);\n    s.erase(j-1, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int pos = s.find(ch);\n    if (pos == -1) {\n        return s;\n    }\n    s.erase(pos, 1);\n    pos = s.rfind(ch);\n    s.erase(pos, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = 0;\n    while (s[i] != ch[0]) {\n        i++;\n    }\n    s.erase(i, 1);\n    i = s.length() - 1;\n    while (s[i] != ch[0]) {\n        i--;\n    }\n    s.erase(i, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string res = \"\";\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        res += s[i];\n        i++;\n    }\n    i++;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        res += s[i];\n        i++;\n    }\n    i++;\n    while (i < n) {\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for (int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        res += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            res += s[k];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if (i == -1) {\n        return s;\n    }\n    else {\n        s.erase(i, 1);\n        s.erase(j - 1, 1);\n        return s;\n    }\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = 0;\n    int j = s.length() - 1;\n    while(i < s.length() && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == s.length() || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, s.length() - j - 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string res = \"\";\n    int first = s.find(ch);\n    int last = s.rfind(ch);\n    if (first == -1) {\n        return s;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        if (i == first || i == last) {\n            continue;\n        }\n        res += s[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "tmpf23_fmqu: /tmp/tmpf23_fmqu.cpp:32: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if(i == -1) {\n        return s;\n    }\n    if(i == j) {\n        return s.substr(0, i) + s.substr(i+1);\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n-1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        res += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n\tint n = s.length();\n\tint i = 0;\n\twhile (i < n) {\n\t\tif (s[i] == ch[0]) {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tint j = n - 1;\n\twhile (j >= 0) {\n\t\tif (s[j] == ch[0]) {\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\tstd::string ans = \"\";\n\tfor (int k = 0; k < i; k++) {\n\t\tans += s[k];\n\t}\n\tfor (int k = i + 1; k < j; k++) {\n\t\tans += s[k];\n\t}\n\tfor (int k = j + 1; k < n; k++) {\n\t\tans += s[k];\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < n; k++) {\n        if(k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = 0;\n    while(i < s.length()) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    i = s.length() - 1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n\t// Write your code here\n\tint n = s.length();\n\tint i = 0;\n\twhile (i < n) {\n\t\tif (s[i] == ch[0]) {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tint j = n - 1;\n\twhile (j >= 0) {\n\t\tif (s[j] == ch[0]) {\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\tstd::string ans = \"\";\n\tfor (int k = 0; k < n; k++) {\n\t\tif (k < i || k > j) {\n\t\t\tans += s[k];\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmpf_oictm2: /tmp/tmpf_oictm2.cpp:32: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string result;\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        result += s[i];\n        i++;\n    }\n    i++;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        result += s[i];\n        i++;\n    }\n    i++;\n    while(i < n) {\n        result += s[i];\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int m = ch.length();\n    if(n == 0 || m == 0) {\n        return s;\n    }\n    int i = 0;\n    int j = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    if(i == n) {\n        return s;\n    }\n    j = i;\n    while(j < n) {\n        if(s[j] != ch[0]) {\n            break;\n        }\n        j++;\n    }\n    s.erase(i, j-i);\n    n = s.length();\n    i = n-1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i--;\n    }\n    if(i == -1) {\n        return s;\n    }\n    j = i;\n    while(j >= 0) {\n        if(s[j] != ch[0]) {\n            break;\n        }\n        j--;\n    }\n    s.erase(j+1, i-j);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == 0) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    i = n - 1;\n    while (i >= 0) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(s[i] != ch) {\n        i++;\n    }\n    while(s[j] != ch) {\n        j--;\n    }\n    s.erase(s.begin()+i);\n    s.erase(s.begin()+j-1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123229,
      "stdout": "",
      "stderr": "/tmp/tmp2kvkakjg.cpp: In function \u2018std::string remove_Occ(std::string, std::string)\u2019:\n/tmp/tmp2kvkakjg.cpp:8:16: error: no match for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n    8 |     while(s[i] != ch) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp2kvkakjg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note:   template argument deduction/substitution failed:\n/tmp/tmp2kvkakjg.cpp:8:19: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019}\n    8 |     while(s[i] != ch) {\n      |                   ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp2kvkakjg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n-1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < n; k++) {\n        if(k < i || k > j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "tmp7hn3hok5: /tmp/tmp7hn3hok5.cpp:31: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == 0) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            res += s[k];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    if(i == n) {\n        return s;\n    }\n    int j = n - 1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    if(j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.size();\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    s.erase(s.begin() + i);\n    i = n - 1;\n    while(s[i] != ch[0]) {\n        i--;\n    }\n    s.erase(s.begin() + i);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    i = n - 1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = i + 1; k < j; k++) {\n        res += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    i = n-1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        } else {\n            i++;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    while(s[j] != ch[0]) {\n        j--;\n    }\n    s.erase(i,1);\n    s.erase(j-1,1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    s.erase(i, 1);\n    i = s.length() - 1;\n    while(s[i] != ch[0]) {\n        i--;\n    }\n    s.erase(i, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string::iterator it;\n    for (it = s.begin(); it != s.end(); it++) {\n        if (*it == ch[0]) {\n            s.erase(it);\n            break;\n        }\n    }\n    for (it = s.end() - 1; it != s.begin(); it--) {\n        if (*it == ch[0]) {\n            s.erase(it);\n            break;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    s.erase(i, 1);\n    i = n - 1;\n    while(s[i] != ch[0]) {\n        i--;\n    }\n    s.erase(i, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(s[i] != ch[0]) {\n        i++;\n    }\n    s.erase(s.begin() + i);\n    i = n - 1;\n    while(s[i] != ch[0]) {\n        i--;\n    }\n    s.erase(s.begin() + i);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i=0;\n    int j=s.length()-1;\n    while(s[i]!=ch) {\n        i++;\n    }\n    while(s[j]!=ch) {\n        j--;\n    }\n    s.erase(i,1);\n    s.erase(j-1,1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123227,
      "stdout": "",
      "stderr": "/tmp/tmpzuq3ltcr.cpp: In function \u2018std::string remove_Occ(std::string, std::string)\u2019:\n/tmp/tmpzuq3ltcr.cpp:7:15: error: no match for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n    7 |     while(s[i]!=ch) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpzuq3ltcr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note:   template argument deduction/substitution failed:\n/tmp/tmpzuq3ltcr.cpp:7:17: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019}\n    7 |     while(s[i]!=ch) {\n      |                 ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpzuq3ltcr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note:",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = 0;\n    int j = s.length() - 1;\n    while (i < s.length() && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == s.length() || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < s.length(); k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    std::string s1 = s.substr(0, i);\n    std::string s2 = s.substr(i + 1, j - i - 1);\n    std::string s3 = s.substr(j + 1);\n    return s1 + s2 + s3;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    i = n - 1;\n    while (i >= 0) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i--;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i, j;\n    for (i = 0; i < s.length(); i++) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n    }\n    for (j = s.length() - 1; j >= 0; j--) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n    }\n    s.erase(i, 1);\n    s.erase(j - 1, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n\tint i = 0;\n\twhile (s[i] != ch[0]) {\n\t\ti++;\n\t}\n\ts.erase(i, 1);\n\tint j = s.length() - 1;\n\twhile (s[j] != ch[0]) {\n\t\tj--;\n\t}\n\ts.erase(j, 1);\n\treturn s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string::iterator it;\n    it = std::find(s.begin(), s.end(), ch[0]);\n    s.erase(it);\n    it = std::find(s.begin(), s.end(), ch[0]);\n    s.erase(it);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while (j >= 0) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpm74wo4pu: /tmp/tmpm74wo4pu.cpp:32: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.size();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    i = n - 1;\n    while (i >= 0) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i--;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string result = \"\";\n    int i = 0;\n    while(i < s.length()) {\n        if(s[i] != ch[0]) {\n            result += s[i];\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.size();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    i = n - 1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i--;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    int flag = 0;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string s1 = s.substr(0, i);\n    std::string s2 = s.substr(i+1, j-i-1);\n    std::string s3 = s.substr(j+1, n-j-1);\n    return s1 + s2 + s3;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if (i == -1) {\n        return s;\n    }\n    if (i == j) {\n        return s.substr(0, i) + s.substr(i + 1, n - i - 1);\n    }\n    return s.substr(0, i) + s.substr(i + 1, n - i - 1) + s.substr(j, n - j);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpuvh_0qe_: /tmp/tmpuvh_0qe_.cpp:18: int main(): Assertion `candidate((\"hello\"), (\"l\")) == (\"heo\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if(i == -1) {\n        return s;\n    }\n    else if(i == j) {\n        s.erase(i, 1);\n        return s;\n    }\n    else {\n        s.erase(i, 1);\n        s.erase(j-1, 1);\n        return s;\n    }\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for (int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        res += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    if (i == n) {\n        return s;\n    }\n    int j = n - 1;\n    while (j >= 0) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    if (i == j) {\n        return s.substr(0, i) + s.substr(i + 1);\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for (int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        res += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for (int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        res += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if (i == -1) {\n        return s;\n    }\n    else {\n        s.erase(i, 1);\n        s.erase(j - 1, 1);\n        return s;\n    }\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i;\n    for (i = 0; i < n; i++) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n    }\n    for (int j = i + 1; j < n; j++) {\n        if (s[j] == ch[0]) {\n            s.erase(j, 1);\n            break;\n        }\n    }\n    s.erase(i, 1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string::iterator it;\n    it = std::find(s.begin(), s.end(), ch[0]);\n    if (it != s.end()) {\n        s.erase(it);\n    }\n    it = std::find(s.rbegin(), s.rend(), ch[0]);\n    if (it != s.rend()) {\n        s.erase(it.base()-1);\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123224,
      "stdout": "",
      "stderr": "/tmp/tmpwz5u98p3.cpp: In function \u2018std::string remove_Occ(std::string, std::string)\u2019:\n/tmp/tmpwz5u98p3.cpp:10:47: error: no match for \u2018operator=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\u2019} and \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >\u2019)\n   10 |     it = std::find(s.rbegin(), s.rend(), ch[0]);\n      |                                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpwz5u98p3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11: note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >& __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::operator=(const __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >&)\u2019\n  787 |     class __normal_iterator\n      |           ^~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11: note:   no known conversion for argument 1 from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >\u2019 to \u2018const __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >&\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11: note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >& __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >::operator=(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >&&)\u2019\n/shared/centos",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int m = ch.length();\n    int pos = s.find(ch);\n    if (pos == -1) {\n        return s;\n    }\n    int pos1 = s.rfind(ch);\n    if (pos1 == -1) {\n        return s;\n    }\n    if (pos == pos1) {\n        return s.substr(0, pos) + s.substr(pos + m, n - pos - m);\n    }\n    return s.substr(0, pos) + s.substr(pos + m, pos1 - pos - m) + s.substr(pos1 + m, n - pos1 - m);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string new_str = \"\";\n    int i = 0;\n    while(s[i] != ch[0]) {\n        new_str += s[i];\n        i++;\n    }\n    i++;\n    while(s[i] != ch[0]) {\n        new_str += s[i];\n        i++;\n    }\n    i++;\n    while(i < s.length()) {\n        new_str += s[i];\n        i++;\n    }\n    return new_str;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string temp = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == ch[0]) {\n            if(i == 0 || i == s.length() - 1) {\n                continue;\n            }\n        }\n        temp += s[i];\n    }\n    return temp;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpr6fmmqsu: /tmp/tmpr6fmmqsu.cpp:18: int main(): Assertion `candidate((\"hello\"), (\"l\")) == (\"heo\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, n - j - 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while (j >= 0) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string res = \"\";\n    for (int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmp__tw83mx: /tmp/tmp__tw83mx.cpp:32: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    i = n - 1;\n    while(i >= 0) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, n - j - 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.size();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while(j >= 0) {\n        if(s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmp0gqqwhwv: /tmp/tmp0gqqwhwv.cpp:32: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = i + 1; k < j; k++) {\n        res += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string res = \"\";\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        res += s[i];\n        i++;\n    }\n    i++;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        res += s[i];\n        i++;\n    }\n    i++;\n    while (i < n) {\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i+1, j-i-1) + s.substr(j+1, n-j-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if(i == -1) {\n        return s;\n    }\n    else {\n        s.erase(i,1);\n        s.erase(j-1,1);\n        return s;\n    }\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    // Write your code here\n    int n=s.length();\n    int i=0;\n    while(s[i]!=ch[0]){\n        i++;\n    }\n    s.erase(i,1);\n    int j=n-1;\n    while(s[j]!=ch[0]){\n        j--;\n    }\n    s.erase(j,1);\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while (j >= 0) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "tmpm74wo4pu: /tmp/tmpm74wo4pu.cpp:32: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    std::string res;\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        res += s[i];\n        i++;\n    }\n    i++;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            break;\n        }\n        res += s[i];\n        i++;\n    }\n    i++;\n    while(i < n) {\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    // Write your code here\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(s[i] != ch) {\n        i++;\n    }\n    while(s[j] != ch) {\n        j--;\n    }\n    return s.substr(i+1, j-i-1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123233,
      "stdout": "",
      "stderr": "/tmp/tmp78vn0yt7.cpp: In function \u2018std::string remove_Occ(std::string, std::string)\u2019:\n/tmp/tmp78vn0yt7.cpp:9:16: error: no match for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n    9 |     while(s[i] != ch) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp78vn0yt7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note:   template argument deduction/substitution failed:\n/tmp/tmp78vn0yt7.cpp:9:19: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019}\n    9 |     while(s[i] != ch) {\n      |                   ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmp78vn0yt7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while(i < n) {\n        if(s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        i++;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmp6mfvvo1a: /tmp/tmp6mfvvo1a.cpp:18: int main(): Assertion `candidate((\"hello\"), (\"l\")) == (\"heo\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    return s.substr(0, i) + s.substr(i + 1, j - i - 1) + s.substr(j + 1, n - j - 1);\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i++;\n    }\n    i = n - 1;\n    while (i >= 0) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            break;\n        }\n        i--;\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for (int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int i = s.find(ch);\n    int j = s.rfind(ch);\n    if(i == -1) {\n        return s;\n    }\n    else {\n        s.erase(i, 1);\n        s.erase(j-1, 1);\n        return s;\n    }\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    // Write your code here\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while(i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while(j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if(i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for(int k = 0; k < i; k++) {\n        ans += s[k];\n    }\n    for(int k = i + 1; k < j; k++) {\n        ans += s[k];\n    }\n    for(int k = j + 1; k < n; k++) {\n        ans += s[k];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i++;\n        }\n    }\n    i = n - 1;\n    while (i >= 0) {\n        if (s[i] == ch[0]) {\n            s.erase(i, 1);\n            n--;\n        }\n        else {\n            i--;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123216,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && s[i] != ch[0]) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch[0]) {\n        j--;\n    }\n    if (i == n || j == -1) {\n        return s;\n    }\n    std::string ans = \"\";\n    for (int k = 0; k < n; k++) {\n        if (k != i && k != j) {\n            ans += s[k];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.size();\n    int i = 0;\n    while (i < n) {\n        if (s[i] == ch[0]) {\n            break;\n        }\n        i++;\n    }\n    int j = n - 1;\n    while (j >= 0) {\n        if (s[j] == ch[0]) {\n            break;\n        }\n        j--;\n    }\n    std::string res = \"\";\n    for (int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for (int k = j + 1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "tmpepia5581: /tmp/tmpepia5581.cpp:32: int main(): Assertion `candidate((\"abcda\"), (\"a\")) == (\"bcd\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a python function to remove first and last occurrence of a given character from the string.\nstd::string remove_Occ(std::string s, std::string ch) {\n    int n = s.length();\n    int i = 0;\n    int j = n-1;\n    while(s[i] != ch) {\n        i++;\n    }\n    while(s[j] != ch) {\n        j--;\n    }\n    std::string res = \"\";\n    for(int k = 0; k < i; k++) {\n        res += s[k];\n    }\n    for(int k = i+1; k < j; k++) {\n        res += s[k];\n    }\n    for(int k = j+1; k < n; k++) {\n        res += s[k];\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_Occ;\n    assert(candidate((\"hello\"), (\"l\")) == (\"heo\"));\n    assert(candidate((\"abcda\"), (\"a\")) == (\"bcd\"));\n    assert(candidate((\"PHP\"), (\"P\")) == (\"H\"));\n}\n",
      "timestamp": 1666123227,
      "stdout": "",
      "stderr": "/tmp/tmpvqs_zai9.cpp: In function \u2018std::string remove_Occ(std::string, std::string)\u2019:\n/tmp/tmpvqs_zai9.cpp:8:16: error: no match for \u2018operator!=\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n    8 |     while(s[i] != ch) {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpvqs_zai9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5: note:   template argument deduction/substitution failed:\n/tmp/tmpvqs_zai9.cpp:8:19: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019}\n    8 |     while(s[i] != ch) {\n      |                   ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n                 from /tmp/tmpvqs_zai9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc> bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:",
      "exit_code": -1,
      "status": "SyntaxError"
    }
  ]
}