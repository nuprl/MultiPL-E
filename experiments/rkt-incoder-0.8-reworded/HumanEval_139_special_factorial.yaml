name: HumanEval_139_special_factorial
language: rkt
prompt: "#lang racket\n\n;; The Brazilian factorial is defined as:\n;; brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n;; where n > 0\n;; For example:\n;; >>> (special_factorial\
  \ 4)\n;; 288\n;; The function will receive an integer as input and should return\
  \ the special\n;; factorial of this integer.\n(define (special_factorial n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate special_factorial))\n\
  \    (check-equal? (candidate 4) 288)\n    (check-equal? (candidate 5) 34560)\n\
  \    (check-equal? (candidate 7) 125411328000)\n    (check-equal? (candidate 1)\
  \ 1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 1) 1]\n    [else (* n (special_factorial (- n 1)))]))\n",
  "  (if (= n 1)\n      n\n      (* n (special_factorial (sub1 n))))) ;; #lang racket\n",
  "  (if (= n 1)\n      1\n      (* n\n         (special_factorial (- n 1)))))\n",
  "  (cond\n    ((= n 1) 1)\n    ((= n 2) 2)\n    ((= n 3) 6)\n    ((= n 4) 24)\n\
    \    ((= n 5) 120)\n    ((= n 6) 720)\n    ((= n 7) 5040)\n    ((= n 8) 40320)\n\
    \    ((= n 9) 362880)\n    ((= n 10) 3628800)\n    ((= n 11) 39916800)\n    ((=\
    \ n 12) 479001600)\n    ((= n 13) 6227020800)\n    ((= n 14) 87178291200)\n  \
    \  ((= n 15) 1307674368000)\n    ((= n 16) 20922789888000)\n    ((= n 17) 355687428096000)\n\
    \    ((= n 18) 6402373705728000)\n    ((= n 19) 121645100408832000)\n    ((= n\
    \ 20) 24329020081766400000)\n    ((= n 21) 510909421717094400000)\n    ((= n 22)\
    \ 11240007277776076800000)\n    ((= n 23) 258520167388849766400000)\n    ((= n\
    \ 24) 6204484017332394393600000)\n    ((= n 25) 155112100433309859840000000)\n\
    \    ((= n 26) 4032914611266056355840000000)\n    ((= n 27) 108888694504183521607680000000)\n\
    \    ((= n 28) 304188719069177664000000080)\n    ((= n 29) 88417619937397019545436160000000)\n\
    \    ((= n 30) 265252859812191058636308480000000))\n</code>\n<|/ q tags=racket,scheme\
    \ |>\n<| c |>\nWhat did you try before asking this? Please include your attempt\
    \ in your question so we can help you find what you're doing wrong.\n<|/ c |>\n\
    <| c |>\nIt sounds like you are trying to re-invent the wheel.  Try googling for\
    \ \"Racket factorial\".\n<|/ c |>\n<| a dscore=1 |>\nHere's a simple factorial\
    \ function using Racket's \"list handling\":\n<code>", "  (check-type n number?)\n\
    \  (let ([i (- n 1)])\n    (check-type i number?)\n    (if (= n 0)\n        (1!\
    \ i)\n        (* i\n           (special_factorial (- n 1))))))\n", "  (if (= n\
    \ 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (cond [(<= n 0)\
    \ 1]\n        [else (* (brazilian_factorial n) n)]))\n", "  (let loop ((n n))\n\
    \    (if (<= n 0)\n      1\n      (* n (loop (- n 1))))))\n", "  (if (= n 1) 1\n\
    \      (* n (special_factorial (sub1 n))))) ;; #lang racket\n", "  (if (= n 0)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (factorial n (lambda\
    \ (n) (* n n))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (-\
    \ n 1)))))\n", "  (if (> n 1)\n      (* n (special_factorial (- n 1)))\n     \
    \ 1))\n", "  (if (<= n 1)\n      1\n      (* n\n         (special_factorial (-\
    \ n 1)))))\n", "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 6]\n\
    \        [else (* n (special_factorial (- n 1))))]))\n", "  (if (zero? n)\n  \
    \    1\n      (* n\n         (special_factorial (sub1 n))))) ; n! * (n-1)!", " \
    \ (if (< n 0)\n      0\n      (* n (special_factorial (- n 1)))))\n", "  (define\
    \ (fact-helper n fact)\n    (if (< n 1)\n        fact\n        (fact-helper (-\
    \ n 1) (* fact n))))\n  (fact-helper n 1))\n", "  (if (= n 0)\n      1\n     \
    \ (* n (special_factorial (- n 1)))))\n", "  (cond [(= n 1) 1]\n        [(even?\
    \ n) (* n (special_factorial (- n 1)))]\n        [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (cond\n    [(< n 1)\n     (* n 1)]\n    [else\n     (* n\
    \ (special_factorial (sub1 n)))]))\n", "  (let loop ([i 1])\n    (if (= i n)\n\
    \        1\n        (* i (loop (+ i 1))))))\n", "  (cond [(zero? n) 1]\n     \
    \   [else (* (factorial (sub1 n)) (special_factorial (sub1 n)))]))\n", "  (cond\
    \ [(= n 1)\n         1]\n        [else\n         (* n (special_factorial (sub1\
    \ n)))))\n", "  (if (= n 0)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (negative? n)\n      0\n      (* n (special_factorial (sub1 n)))))\n", " \
    \ (cond\n    [(< n 1) 1]\n    [else (* n (special_factorial (sub1 n)))]))\n",
  "  (cond [(zero? n) 1]\n        [else (* n (special_factorial (- n 1))))]))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (cond\n    [(=\
    \ n 1) 1]\n    [(= n 2) 2]\n    [else (* n (special_factorial (- n 1)))]))\n",
  "  (cond [(= n 0) 1]\n        [(= n 1) 1]\n        [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (cond ((> n 0) 1)\n        (else (* n (special_factorial\
    \ (- n 1))))))\n", "  (factorial n (- n 1)))\n", "  (if (= n 1)\n      1\n   \
    \   (* n (special_factorial (- n 1)))))\n", "  (assert (and (integer? n) (>= n\
    \ 0)))\n  (if (= n 1)\n      1\n      (* n\n         (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (let ((i\
    \ n))\n    (if (< i 1)\n        1\n        (* i (special_factorial (sub1 i))))))\n",
  "  (define (special_factorial_loop i acc)\n    (cond ((= i n) acc)\n          ((even?\
    \ (car n)) (special_factorial_loop (+ i 1) (* acc (car (cdr n)))))\n         \
    \ (else (special_factorial_loop (+ i 1) acc)))\n  (special_factorial_loop 1 1))\n",
  "  (cond\n    ((= n 1)\n     1)\n    ((= n 2)\n     2)\n    ((= n 3)\n     6)\n\
    \    ((= n 4)\n     24)\n    ((= n 5)\n     120)\n    ((= n 6)\n     720)\n  \
    \  ((= n 7)\n     5040)\n    ((= n 8)\n     40320)\n    ((= n 9)\n     362880)\n\
    \    ((= n 10)\n     3628800)\n    ((= n 11)\n     39916800)\n    ((= n 12)\n\
    \     479001600)\n    ((= n 13)\n     6227020800)\n    ((= n 14)\n     87178291200)\n\
    \    ((= n 15)\n     13076743680000)\n    ((= n 16)\n     20922789888000)\n  \
    \  ((= n 17)\n     355687428096000)\n    ((= n 18)\n     640237370572800)\n  \
    \  ((= n 19)\n     121645100408832000)\n    ((= n 20)\n     2432902008176640000)\n\
    \    ((= n 21)\n     51090942171709440000)\n    ((= n 22)\n     1124000727777607680000)\n\
    \    ((= n 23)\n     25852016738884976640000)\n    ((= n 24)\n     6204484017332394393600000)\n\
    \    ((= n 25)\n     15511210043330985984000000)\n    ((= n 26)\n     4032914611266056355840000000)\n\
    \    ((= n 27)\n     108888694578605433120160000000)\n    ((= n 28)\n     3041862345442957161023538816000000)\n\
    \    ((= n 29)\n     88417619937397019545436160000000)\n    ((= n 30)\n     265252859812191058636308480000000\n\
    \     )\n    ((= n 31)\n     8222838654177922817725562880000000\n     )\n    ((=\
    \ n 32)\n     263130836933693530167218012160000000\n     )\n    ((= n 33)\n  \
    \   8683317618811886495518194401280000000\n     )\n    ((= n 34)\n     327769972052737553485922884480000000\n\
    \     )\n    ((= n 35)", "  (cond ((< n 1) 1)\n        ((= n 1) 1)\n        (else\
    \ (* n (special_factorial (- n 1))))))\n", "  (cond [(zero? n) 1]\n        [else\
    \ (* n (special_factorial (sub1 n)))]))\n", "  (cond [(< n 1) 1]\n        [else\
    \ (* n (special_factorial (sub1 n)))]))\n", "  (cond\n    [(zero? n) 1]\n    [else\
    \ (* n (special_factorial (sub1 n)))]))\n", "  (if (equal? n 0)\n      1\n   \
    \   (* n (special_factorial (- n 1)))))\n", "  (factorial n (lambda (x) (* x x))))\n",
  "  (factorial (- n 1) n))\n", "  (if (<= n 2)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (equal? n 0)\n      1\n      (* (brazilian_factorial\
    \ (- n 1)) (- n 1))))\n", "  (if (> n 1)\n      (* n (special_factorial (- n 1)))))\n",
  "  (n * (factorial (- n 1))))\n", "  (if (= n 0)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n</code>\n<code>", "  (cond [(= n 1)\n         1]\n        [(= n\
    \ 2)\n         1]\n        [(= n 3)\n         1]\n        [else\n         (* (factorial\
    \ n) (special_factorial (- n 1)))]))\n", "  (cond [(< n 1) 1]\n        [else (*\
    \ n (special_factorial (- n 1))))))\n", "  (define (aux x y)\n    (if (= x 0)\n\
    \        y\n        (aux (- x 1) (* y x))\n      )\n  )\n  (aux n 1)\n)\n", " \
    \ (cond [(< n 1) (error \"n must be > 1\")]\n        [else (* n (special_factorial\
    \ (sub1 n)))]))\n", "  (let factorial ((f 1))\n    (if (< n 0)\n        (* f (factorial\
    \ (- n 1)))\n        f)))\n", "  (if (zero? n)\n      1\n      (* n\n        \
    \ (special_factorial (sub1 n)))))\n", "  (let ((fact (make-factorial n)))\n  \
    \  (define/match ((fact fact-recurse) (n fact-recurse))\n      (1 fact-recurse)\n\
    \      (* n (fact-recurse (sub1 n)))))\n    (fact))\n", "  (if (< n 0)\n     \
    \ 0\n      (* n (special_factorial (- n 1)))))\n", "  (cond\n    [(= n 1) 1]\n\
    \    [(zero? n) 0]\n    [else (* n (special_factorial (- n 1)))]))", "  (cond\
    \ ((= n 0) 1)\n        ((= n 1) 1)\n        ((> n 2) (factorial (- n 1))\n   \
    \      (* n (special_factorial (- n 2)))))\n", "  (if (<= n 1)\n      1\n    \
    \  (* (special_factorial (- n 1)) n)))\n", "  (let ([i 1 (acc 1)])\n    (if (=\
    \ n 0)\n        acc\n        (let ([newI (* i acc)])\n          (set! i (add1\
    \ newI))\n          (set! acc (sub1 newI))\n          i))))\n", "  (if (zero?\
    \ n)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (factorial (sub1\
    \ n)))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (sub1 n)))))\n",
  "  (define (factorial-loop i)\n    (if (< i n) (* i (factorial-loop (+ i 1)))))\n\
    \  (factorial-loop 1))\n", "  (cond ((zero? n) 1)\n        ((even? n) (factorial\
    \ (/ n 2)))\n        (else (factorial (- n 1)))))\n", "  (cond\n    [(= n 0) 1]\n\
    \    [(zero? (remainder n 1)) (* 1 (special_factorial (quotient n 1)))]\n    [else\
    \ (* n (special_factorial (quotient n 1)))]\n  ))\n", "  (if (= n 1)\n      1\n\
    \      (* n (special_factorial (- n 1)))))\n", "  (* (factorial n)\n     (factorial\
    \ (- n 1))))\n", "  (cond [(< n 1) (* n 1)\n        (else (special_factorial (-\
    \ n 1))\n               (* n (special_factorial (- n 1))))))\n", "  (fact\n  \
    \ (lambda (x) (* x x))\n   (cond ((< n 0) 1)\n         ((even? n) (fact (lambda\
    \ (x) (* x x)) (sub1 n)))\n         (else (special_factorial (sub1 n))))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (cond\
    \ ((zero? n) 1)\n        ((oddp? n) (* n (special_factorial (sub1 n)))))\n  )\n",
  "  (if (= n 0)\n      1\n      (* n (special_factorial (sub1 n)))))\n", "  (if (<=\
    \ n 1) 1\n      (* n (special_factorial (- n 1)))))\n", "  (cond [(= n 1)  1]\n\
    \        [else (* n\n                 (special_factorial (- n 1)))]))\n", "  (cond\n\
    \    [(zero? n) 1]\n    [else (* n (special_factorial (sub1 n))) ]))\n", "  (cond\n\
    \    [(= n 1) 1]\n    [else (* n (special_factorial (- n 1)))]))\n", "  (if (<=\
    \ n 1)\n      n\n      (* (brazilian_factorial (sub1 n)) n)))\n", "  (cond [(=\
    \ n 1) (* n 1)]\n        [else (* n (special_factorial (sub1 n)))]))\n", "  (if\
    \ (<= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (cond [(<=\
    \ 0 n) 1]\n        [(= 1 (remainder n 1)) 1]\n        [(even? (remainder n 2))\
    \ (* n (special_factorial (- n 2)))]\n        [else (* n (special_factorial (-\
    \ n 1))))))\n", "  (cond [(= n 1) 1]\n        [(zero? (remainder n 2)) (* n (special_factorial\
    \ (remainder n 2)))]\n        [else (* n (special_factorial (remainder n 2)))]))\n",
  "  (factorial n (lambda (i) (* i i))))\n", "  (fact-helper n 1))\n", "  (check-type\
    \ n (natural integer))\n  (let loop ((n n) (a 1))\n    (if (even? n)\n       \
    \ a\n        (loop (- n 1) (* a n))))))\n", "  (cond\n    [(= n 1) 1]\n    [(=\
    \ n 2) 2]\n    [else (* n (special_factorial (sub1 n)))]))\n", "  (factorial (-\
    \ n 1)))\n", "  (cond [(zero? n) (one)]\n        [(equal? (remainder n 2) 0) (*\
    \ n (special_factorial (- n 1)))]\n        [(equal? (remainder n 2) 1) (* n n)]\n\
    \        [else (* n (special_factorial (- n 1)))]))\n", "  (cond [(= n 0) 1]\n\
    \        [else (* n (special_factorial (- n 1)))]))\n", "  (cond [(zero? n) 1]\n\
    \        [(even? n) (* n (special_factorial (/ n 2)))]\n        [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (cond\n    [(= n 1) 1]\n    [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (if (= n 0)\n      1\n      (* n (special_factorial (sub1\
    \ n))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= n 1) (factorial n)]\n    [else (* n (special_factorial\
    \ (sub1 n)))]))\n", "  (if (= n 1)\n      n\n      (* n (special_factorial (sub1\
    \ n))))) ;; #lang racket\n  ", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (>= n 1)\n      (* n (special_factorial (- n 1)))\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (cond\n    [(= n 0) 1]\n    [else\
    \ (* n (special_factorial (- n 1))))))\n", "  (let ((i (floor (* n n))))\n   \
    \ (if (= i 0)\n        1\n        (* n (special_factorial (- i 1)))))))\n", " \
    \ (if (= n 0)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (zero?\
    \ n)\n      1\n      (* n (special_factorial (sub1 n))))) ;; Brazilian factorial\n\
    </cell>\n<text>\nExercise: How would you use the factorial function to implement\
    \ the fibonacci function?\n\n\n</text>\n<cell>\n#lang racket\n", "  (cond [(=\
    \ n 1) 1]\n        [else (* (* (factorial n) (factorial (sub1 n))) (special_factorial\
    \ (sub1 n)))]))\n", "  (if (<= n 1)\n      1\n      (* n (special_factorial (-\
    \ n 1)))))\n", "  (if (zero? n)\n      1\n      (* n\n         (special_factorial\
    \ (- n 1)))))\n", "  (cond [(= n 1)\n         1]\n        [else\n         (* n\
    \ (special_factorial (sub1 n)))))\n", "  (cond [(= n 1) n]\n        [else (* n\
    \ (special_factorial (- n 1))))))\n", "  (factorial (- n 1) n))\n", "  (if (zero?\
    \ n)\n      1\n      (* n (special_factorial (sub1 n))))\n)\n", "  (define (brazilian_factorial\
    \ n)\n    (cond [(= n 1)\n           1]\n          [(= n 2)\n           2]\n \
    \         [(= n 3)\n           (* 3 4)]\n          [(= n 4)\n           (* 4 9)]\n\
    \          [(= n 5)\n           (* 5 24)]\n          [(= n 6)\n           (* 6\
    \ 49)]\n          [(= n 7)\n           (* 7 144)]\n          [(= n 8)\n      \
    \     (* 8 233)]\n          [(= n 9)\n           (* 9 467)]\n          [(= n 10)\n\
    \           (* 10 603)]))\n  (* n (brazilian_factorial (sub1 n))))\n  ;; >>> brazilian_factorial\
    \ 4\n  ;; 288\n", "  (cond\n    [(zero? n) 1]\n    [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (if (= n 0)\n      1\n      (* n\n         (special_factorial\
    \ (- n 1)))))\n", "  (cond [(< n 1)  1]\n        [else (* n\n                \
    \ (special_factorial (sub1 n)))]))", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (fact-n n 1 1))\n", "  (if (= n 0)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (negative? n)\n      (error \"You can't factorise a negative\
    \ number\")\n      (factorial (- n 1))))\n", "  (cond ((= n 1) 1)\n        ((even?\
    \ n) (* n (special_factorial (- n 1))))\n        (else (* n (special_factorial\
    \ (- n 1))\n                   (special_factorial (- n 2))))))\n", "  (cond\n\
    \    [(<= n 0) 1]\n    [else (factorial (- n)))]))\n", "  (define (factorial n)\n\
    \    (if (= n 0)\n        1\n        (* n (factorial (sub1 n)))))\n  (factorial\
    \ n))\n", "  (let loop ((n n))\n    (if (< n 1)\n        1\n        (loop (- n\
    \ 1)))))\n", "  (if (<= n 1) 1\n    (* n (special_factorial (- n 1)))))\n", " \
    \ (factorial (- n 1) (n*(n+1)))) \n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (n * (factorial (sub1 n))\n      (factorial (sub2 n))\n \
    \     (factorial (sub3 n))\n      (factorial (sub4 n))\n      (factorial (sub5\
    \ n))))\n", "  (if (= n 0)\n      1\n      (brazilian_factorial (- n 1))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (<=\
    \ n 1)\n      n\n      (* n (special_factorial (- n 1)))))\n", "  (* n (special_factorial\
    \ (- n 1))))\n", "  (cond [(zero? n) 1]\n        [else (* n (special_factorial\
    \ (sub1 n)))]))\n", "  (cond\n    [(= n 1) 1]\n    [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (let loop ((result 1)\n             (n n))\n    (if (zero?\
    \ n)\n        result\n        (loop (* result n) (- n 1)))))\n", "  (define (helper\
    \ n)\n    (cond [(= n 1) 1]\n          [(= n 2) (* (factorial n) (* (factorial\
    \ (- n 1)) (factorial (- n 2))))]\n          [(= n 3) (* (factorial n) (* (factorial\
    \ (- n 1)) (factorial (- n 2))) (* (factorial (- n 3)) (* (factorial (- n 2))\
    \ (factorial (- n 3))))]\n          [else (* (factorial (- n 1)) (factorial (-\
    \ n 2)) (factorial (- n 3)) (* (factorial (- n 4)) (* (factorial (- n 3)) (* (factorial\
    \ (- n 2)) (factorial (- n 3)) (* (factorial (- n 2)) (factorial (- n 2))))))]))\n\
    \  (helper n))\n", "  (cond [(= n 1) 1]\n        [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (cond [(< n 1) 1]\n        [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (cond ((= n 0) 1)\n        ((< n 1) (* n (special_factorial\
    \ (- n 1))))\n        (else (* n (special_factorial (- n 1))\n               \
    \       (special_factorial (- n 2))))))\n", "  (cond [(zero? n) 1]\n        [(equal?\
    \ n 1) n]\n        [else (* n (special_factorial (sub1 n)))]))\n  ", "  (factorial\
    \ (- n 1))\n)\n", "  (cond ((= n 1) 1)\n        (else (* n (special_factorial\
    \ (- n 1))))))\n", "  (cond [(< n 0) 1]\n        [else (* n (special_factorial\
    \ (sub1 n)))]))\n", "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n        [else (*\
    \ n (special_factorial (sub1 n)))))\n", "  (define (f n)\n    (cond\n      [(zero?\
    \ n) (one)]\n      [else (f (sub1 n))\n            (* n (f (sub1 n)))]))\n  (f\
    \ n))\n", "  (check-type n number?)\n  (cond [(= n 0) 1]\n        [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (if (zero? n)\n      (expt 2 n) ; special case: 0! = 1\n\
    \      (* n (special_factorial (- n 1)))))\n", "  (cond\n    ((= n 1) 1)\n   \
    \ ((even? n) (* n (special_factorial (sub1 n))))\n    (else (* n (special_factorial\
    \ (sub1 n))))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (-\
    \ n 1)))))\n", "  (cond\n    [(= n 0) 1]\n    [else (* n (special_factorial (-\
    \ n 1)))]))\n", "  (cond\n    ((= n 0) 1)\n    ((= n 1) 1)\n    ((= n 2) 2)\n\
    \    ((= n 3) 6)\n    ((= n 4) 24)\n    (else (* n (special_factorial (- n 1))))))\n",
  "  (cond [(< n 2) 1]\n        [else (* n\n                 (special_factorial (sub1\
    \ n))\n                 (special_factorial (sub1 n))\n                 (special_factorial\
    \ (sub1 n)))]))\n", "  (define (facto x)\n    (if (= x 1)\n        1\n       \
    \ (* x (facto (- x 1)))))\n  (facto n))\n", "  (cond ((= n 0) 1)\n        (else\
    \ (* n (special_factorial (- n 1))))))\n", "  (cond\n    ((= n 1)\n     1)\n \
    \   ((= n 2)\n     2)\n    (else\n     (* n (special_factorial (- n 1)))\n   \
    \  )))\n", "  (check-type n (bignum? integer))\n  (if (= n 0)\n      1\n     \
    \ (brazilian_factorial (sub1 n))))\n", "  (factorial n (lambda (n) (* n n))) 0)\n",
  "  (* n \n     (* (factorial (- n 1))\n         (factorial (- n 2))\n         (factorial\
    \ (- n 3))\n         (factorial (- n 4))\n         (factorial (- n 5))\n     \
    \    (factorial (- n 6))\n         (factorial (- n 7))\n         (factorial (-\
    \ n 8))\n         (factorial (- n 9))\n         (factorial (- n 10))))\n  )\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (<\
    \ n 0)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (cond\n    [(zero?\
    \ n) 1]\n    [else (* n (special_factorial (sub1 n)))]))", "  (nfactorial (- n\
    \ 1) (- n 1)))\n", "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3)\
    \ 6]\n        [(= n 4) 24]\n        [(= n 5) 120]\n        [else (* n (special_factorial\
    \ (sub1 n)))]))\n", "  (let ((f (factorial (- n 1))))\n    (* f (factorial (-\
    \ n 2)))))\n", "  (cond\n    [(< n 0) 0]\n    [else (* (brazilian_factorial (-\
    \ n 1)) (factorial (- n 1)))]))\n</cell>\n<text>\nAhora ejecutamos el c\xF3digo:\n\
    \n\n</text>\n<code language=ocaml-jupyter>", "  (cond [(< n 1) 1]\n        [else\
    \ (* n (special_factorial (- n 1))))]))\n", "  (cond [(= n 1) 1]\n        [else\
    \ (* n (special_factorial (- n 1)))]))\n</cell>\n<code language=racket-student-cat>",
  "  ;; Write your code here\n  *)\n", "  (cond\n    [(= n 1) 1]\n    [else (* n (special_factorial\
    \ (- n 1)))]))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (cond\n    [(zero? n) 1]\n    [(equal? (modulo n 2) 0) (special_factorial\
    \ (sub1 n))]\n    [else (* n (special_factorial (sub1 n)))]))\n", "  (define (iter\
    \ n acc)\n    (if (= n 0)\n        acc\n        (iter (- n 1) (* n acc))))\n \
    \ (iter n (* n (lambda (n) (special_factorial n))))\n  (/ n n))\n", "  (define\
    \ (fib k)\n    (cond\n      [(< k 0) 1]\n      [else (* n (fib k-1))]))\n  (fib\
    \ n))\n", "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n        [(= n 3) 6]\n   \
    \     [else (* n (special_factorial (- n 1))))]))\n", "  (factorial n (lambda\
    \ (x) (* x x))))\n", "  (cond ((= n 0) 1)\n        ((= n 1) 1)\n        (else\
    \ (* n (special_factorial (sub1 n)))))) ; n!", "  (cond\n    [(= n 1)\n     1]\n\
    \    [else\n     (* n (special_factorial (- n 1))]))) ; #lang racket\n", "  (define\
    \ (fac-helper n)\n    (cond\n      [(= n 1)\n       (* n 1)]\n      [else\n  \
    \     (* n (fac-helper (- n 1)))]))\n  (fac-helper n))\n", "  (if (= n 1)\n  \
    \    n\n      (* n (special_factorial (- n 1)))))\n", "  (* n (special_factorial\
    \ (- n 1))))\n", "  (let ((fact (make-factorial n)))\n    (define (factorial-recursive\
    \ n result)\n      (if (= n 1)\n          result\n          (factorial-recursive\
    \ (- n 1) (* result n))))\n    (factorial-recursive n fact)))\n", "  (cond\n \
    \   [(< n 1) 1]\n    [else (* (special_factorial (- n 1)) (* n n))]))\n", "  (if\
    \ (negative? n)\n      (error \"Negative factorial\" n))\n  (if (zero? n)\n  \
    \    1\n      (* n (special_factorial (- n 1)))))\n", "  (brazilian_factorial\
    \ n 1))\n", "  (cond\n    ((= n 1) 1)\n    ((= n 2) 2)\n    ((= n 3) 6)\n    ((=\
    \ n 4) 24)\n    ((= n 5) 120)\n    ((= n 6) 720)\n    ((= n 7) 5040)\n    ((=\
    \ n 8) 40320)\n    ((= n 9) 362880)\n    ((= n 10) 3628800)\n    ((= n 11) 39916800)\n\
    \    ((= n 12) 479001600)\n    ((= n 13) 6227020800)\n    ((= n 14) 87178291200)\n\
    \    ((= n 15) 1307674368000)\n    ((= n 16) 20922789888000)\n    ((= n 17) 355687428096000)\n\
    \    ((= n 18) 6402373705728000)\n    ((= n 19) 121645100408832000)\n    ((= n\
    \ 20) 24329020081766400000)\n    ((= n 21) 510909421717094400000)\n    ((= n 22)\
    \ 11240007277776076800000)\n    ((= n 23) 258520167388849766400000)\n    ((= n\
    \ 24) 6204484017332394393600000)\n    ((= n 25) 155112100433309859840000000)\n\
    \    ((= n 26) 4032914611266056355840000000)\n    ((= n 27) 108888694504183521607680000000)\n\
    \    ((= n 28) 30418574182586079951757024800000)\n    ((= n 29) 884176199373970195454363561600000)\n\
    \    ((= n 30) 265252859812191058636308480000000))", "  (define (factorial i)\n\
    \    (if (= i 0)\n        1\n        (* i (factorial (- i 1)))))\n  (factorial\
    \ (- n 1)))\n", "  (define (factorial! n)\n    (if (= n 0)\n        1\n      \
    \  (* n (factorial! (- n 1)))))\n  (factorial! n))\n", "  (cond [(< n 1)\n   \
    \      (* n 1)]\n        [(= n 2)\n         1]\n        [else\n         (* n (special_factorial\
    \ (sub1 n)))]))\n", "  (check-type n integer)\n  (if (< n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (< n 0)\n      '()\n      (append\
    \ (list (factorial n)) (special_factorial (- n 1)))))\n", "  (cond [(= n 0)\n\
    \         1]\n        [else\n         (* n (special_factorial (- n 1)))]))\n",
  "  (if (negative? n) 0\n      (* n (special_factorial (- n 1)))))\n", "  (cond [(=\
    \ n 1)\n         (* n 1)]\n        [else\n         (* n (special_factorial (sub1\
    \ n)))]))\n</cell>\n<cell>\n#lang racket\n", "  (cond\n    [(= n 1)\n     (one)]\n\
    \    [(= n 2)\n     (two)]\n    [else\n     (* (* (special_factorial (- n 1))\n\
    \           (special_factorial (- n 2)))\n        (special_factorial (- n 3)))]))\n",
  "  (if (<= n 1)\n      (* n 1)\n      (* n (special_factorial (sub1 n)))))\n", " \
    \ (if (negative? n)\n      '()\n      (cons ((* n (* (special_factorial (- n 1))\
    \ (- n 1)))\n             (* (special_factorial (- n 2)) (- n 2)))\n         \
    \   (* (special_factorial (- n 3)) (- n 3))))\n      (* n (* (special_factorial\
    \ (- n 1)) (- n 1))))))\n  ", "  (cond [(= n 1) 1]\n        [(= n 2) 2]\n    \
    \    [else (* n (special_factorial (sub1 n)))]))\n", "  (if (= n 0)\n      1\n\
    \      (* n (special_factorial (- n 1)))))\n", "  (define (facto n)\n    (if (=\
    \ n 1)\n        1\n        (* n (facto (- n 1)))))\n  (facto n))\n", "  (factorial\
    \ (floor (/ n 2) +)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
