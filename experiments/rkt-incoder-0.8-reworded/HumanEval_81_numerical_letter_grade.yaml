name: HumanEval_81_numerical_letter_grade
language: rkt
prompt: "#lang racket\n\n;; It is the last week of the semester and the teacher has\
  \ to give the grades\n;; to students. The teacher has been making her own algorithm\
  \ for grading.\n;; The only problem is, she has lost the code she used for grading.\n\
  ;; She has given you a list of GPAs for some students and you have to write \n;;\
  \ a function that can output a list of letter grades using the following table:\n\
  ;; GPA       |    Letter grade\n;; 4.0                A+\n;; > 3.7             \
  \   A \n;; > 3.3                A- \n;; > 3.0                B+\n;; > 2.7      \
  \          B \n;; > 2.3                B-\n;; > 2.0                C+\n;; > 1.7\
  \                C\n;; > 1.3                C-\n;; > 1.0                D+ \n;;\
  \ > 0.7                D \n;; > 0.0                D-\n;; 0.0                E\n\
  ;; Example:\n;; >>> (grade_equation (list 4.0 3 1.7 2 3.5))\n;; (list \"A+\" \"\
  B\" \"C-\" \"C\" \"A-\")\n(define (numerical_letter_grade grades)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate numerical_letter_grade))\n\
  \    (check-equal? (candidate (list 4.0 3 1.7 2 3.5)) (list \"A+\" \"B\" \"C-\"\
  \ \"C\" \"A-\"))\n    (check-equal? (candidate (list 1.2)) (list \"D+\"))\n    (check-equal?\
  \ (candidate (list 0.5)) (list \"D-\"))\n    (check-equal? (candidate (list 0.0))\
  \ (list \"E\"))\n    (check-equal? (candidate (list 1.0 0.3 1.5 2.8 3.3)) (list\
  \ \"D\" \"D-\" \"C-\" \"B\" \"B+\"))\n    (check-equal? (candidate (list 0.0 0.7))\
  \ (list \"E\" \"D-\"))\n))\n\n(test-humaneval)"
completions: ["  (if (null? grades)\n      null\n      (let ([grade (car grades)])\n\
    \        (cond [(< grade 3.7) (cons \"A+\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 3.3) (cons \"A\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 3.0) (cons \"B+\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 2.7) (cons \"B\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 2.3) (cons \"B-\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 2.0) (cons \"C+\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 1.7) (cons \"C\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 1.3) (cons \"C-\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 1.0) (cons \"D+\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 0.7) (cons \"D\" (numerical_letter_grade (cdr grades)))]\n\
    \              [(< grade 0.0) (cons \"D-\" (numerical_letter_grade (cdr grades)))]\n\
    \              [else (cons \"E\" (numerical_letter_grade (cdr grades)))])))",
  "  (cond\n    [(< grades 5.0) \"A+\"]\n    [(< grades 3.7) \"A\"]\n    [(< grades\
    \ 3.3) \"A-\"]\n    [(< grades 3.0) \"B+\"]\n    [(< grades 2.7) \"B\"]\n    [(<\
    \ grades 2.3) \"B-\"]\n    [(< grades 2.0) \"C+\"]\n    [(< grades 1.7) \"C\"\
    ]\n    [(< grades 1.3) \"C-\"]\n    [(< grades 1.0) \"D+\"]\n    [(< grades 0.7)\
    \ \"D\"]\n    [(< grades 0.0) \"D-\"]\n    [else \"E\"]))\n", "  (cond\n    [(<\
    \ grades (/ 4.0 3.0)) \"A+\"]\n    [(< grades (/ 3.7 3.0)) \"A\"]\n    [(< grades\
    \ (/ 3.3 3.0)) \"A-\"]\n    [(< grades (/ 3.0 3.0)) \"B+\"]\n    [(< grades (/\
    \ 2.7 3.0)) \"B\"]\n    [(< grades (/ 2.3 3.0)) \"B-\"]\n    [(< grades (/ 2.0\
    \ 3.0)) \"C+\"]\n    [(< grades (/ 1.7 3.0)) \"C\"]\n    [(< grades (/ 1.3 3.0))\
    \ \"C-\"]\n    [(< grades (/ 1.0 3.0)) \"D+\"]\n    [(< grades (/ 0.7 3.0)) \"\
    D\"]\n    [(< grades (/ 0.0 3.0)) \"D-\"]\n    [(< grades (/ 0.0 3.0)) \"E\"]\n\
    \    [else \"?\"])\n)\n", "  (let loop ((grades (map number->symbol grades))\n\
    \             (letters ((length grades) #\\A))\n             (symbols (cons #\\\
    A grades)))\n    (cond ((null? grades) (cons #\\E letters))\n          ((< 3 (car\
    \ grades))\n           (loop (cdr grades) (cons (car grades) letters) symbols))\n\
    \          ((> 3 (car grades))\n           (loop (cdr grades) (cons (car grades)\
    \ letters) (cons (car grades) symbols)))\n          ((> 2 (cadr grades))\n   \
    \        (loop (cdr grades) (cons (cadr grades) letters) (cons (caddr grades)\
    \ symbols)))\n          ((> 1 (caddr grades))\n           (loop (cdr grades) (cons\
    \ (caddr grades) letters) (cons (caddr grades) symbols)))\n          (else\n \
    \          (loop (cdr grades) letters (cons (caddr grades) symbols))))))\n", " \
    \ (cond\n    [(< grades 0) \"D\"]\n    [(< grades 1) \"C\"]\n    [(< grades 2)\
    \ \"B\"]\n    [(< grades 3) \"A-\"]\n    [(< grades 4) \"A\"]\n    [(< grades\
    \ 5) \"A-\"]\n    [(< grades 6) \"A\"]\n    [(< grades 7) \"A+\"]\n    [(< grades\
    \ 8) \"A\"]\n    [(< grades 9) \"A\"]\n    [(< grades 10) \"A\"]\n    [(< grades\
    \ 11) \"A+\"]\n    [(< grades 12) \"A+\"]\n    [else \"F\"]\n    ))\n", "  (define\
    \ (helper gpa grade)\n    (cond (gpa > 0) (concat gpa grade)\n          (gpa <\
    \ 0) (concat grade \"-\")\n          (gpa >= 0) (concat gpa \"*\")\n         \
    \ (gpa <= 0) (concat grade \"-\")))\n  (map (lambda (grade) (helper grade \"+\"\
    )))\n  (map (lambda (grade) (helper grade \"-\"))))\n", "  (let loop ((letters\
    \ ()))\n    (cond ((< (first grades) 5.0)\n           (list \"A+\"))\n       \
    \   ((> (first grades) 3.7)\n           (list \"A\"))\n          ((> (first grades)\
    \ 3.3)\n           (list \"A-\"))\n          ((> (first grades) 3.0)\n       \
    \    (list \"B+\"))\n          ((> (first grades) 2.7)\n           (list \"B\"\
    ))\n          ((> (first grades) 2.3)\n           (list \"B-\"))\n          ((>\
    \ (first grades) 2.0)\n           (list \"C+\"))\n          ((> (first grades)\
    \ 1.7)\n           (list \"C\"))\n          ((> (first grades) 1.3)\n        \
    \   (list \"C-\"))\n          ((> (first grades) 1.0)\n           (list \"D+\"\
    ))\n          ((> (first grades) 0.7)\n           (list \"D\"))\n          ((>\
    \ (first grades) 0.0)\n           (list \"D-\"))\n          (else\n          \
    \ (loop (rest grades)))))\n  (cond ((null? grades) '())\n        (else (append\
    \ letters (numerical_letter_grade (rest grades))))))\n", "  (let ((letters (make-list\
    \ 20 empty))\n        (gpa-range (list 4.0 3.7 3.3 3.0 2.7 2.3 2.0 1.7 1.3 1.0\
    \ 0.7)))\n    (loop\n       for i from 0 to (length gpa-range) do\n         let\
    \ ((gpa (gpa-range i))\n              (grade (/ (car grades) i)))\n         (cond\
    \ ((< gpa gpa-range)\n                (set! letters (cons (car gpa-range) letters))\n\
    \                (set! letters (cons (car letters) (cdr letters))))\n        \
    \       #t\n               (else (set! letters (cons (* gpa i) (cons (- letter\
    \ grade) letters))))\n         )\n     (reverse letters))\n  )\n", "  (if (null?\
    \ grades) \n      \"E\"\n      (let ((grade (car grades))\n            (gpa (car\
    \ grades))\n            (result '()))\n        (if (>= gpa 3.0)\n            (if\
    \ (< grade 4.0)\n                (cons \"A+\" result)\n                (cons \"\
    A\" (append result \"A\"))))\n        (if (>= gpa 2.3)\n            (if (< grade\
    \ 3.7)\n                (cons \"A\" (append result \"A\"))\n                (cons\
    \ \"A-\" result))\n            (if (< grade 2.7)\n                (cons \"B\"\
    \ (append result \"B\"))\n                (cons \"B-\" result))\n            (if\
    \ (< grade 2.0)\n                (cons \"C\" (append result \"C\"))\n        \
    \        (cons \"C-\" result))\n            (if (< grade 1.7)\n              \
    \  (cons \"D\" (append result \"D\"))\n                (cons \"D+\" result))\n\
    \            (if (< grade 1.0)\n                (cons \"D\" (append result \"\
    D\"))\n                (cons \"D-\" result))\n            (if (< grade 0.7)\n\
    \                (cons \"D\" (append result \"D\"))\n                (cons \"\
    D-\" result))\n            (if (< grade 0.0)\n                (cons \"E\" result)\n\
    \                (cons \"E\" result))))))\n", "  (let ([grade (first grades)])\n\
    \    (cond\n      [(< grade 0.0) \"D-\"]\n      [(< grade 0.7) \"D\"]\n      [(<\
    \ grade 1.3) \"C\"]\n      [(< grade 1.7) \"C+\"]\n      [(< grade 2.0) \"B\"\
    ]\n      [(< grade 2.3) \"B-\"]\n      [(< grade 2.7 \"B+\"]\n      [(< grade\
    \ 3.0) \"A\"]\n      [(< grade 3.3) \"A-\"]\n      [(< grade 3.7 \"A+\"]\n   \
    \   [(< grade 4.0) \"A+\"]\n      [(> grade 4.0) \"E\"])))", "  ;; TODO: fill\
    \ in the function here\n  (define (grade_equation gpa)\n    (define (check x y)\n\
    \      (<= x y))\n    (define (g y)\n      (if (check y 3.3)\n          (cond\
    \ \n            ((= y 3.7) 'a)\n            ((= y 3.3) 'a-)\n            ((= y\
    \ 3.0) 'b+)\n            ((= y 2.7) 'b)\n            ((= y 2.3) 'b-)\n       \
    \     ((= y 2.0) 'c+)\n            ((= y 1.7) 'c)\n            ((= y 1.3) 'c-)\n\
    \            ((= y 1.0) 'd+)\n            ((= y 0.7) 'd)\n            ((= y 0.0)\
    \ 'd-)\n            (else 'e)))\n      (g y))\n    (define (g x)\n      (if (check\
    \ x 4.0)\n          (cond \n            ((= x 4.7) 'a)\n            ((= x 4.3)\
    \ 'a-)\n            ((= x 4.0) 'b+)\n            ((= x 4.7) 'b)\n            ((=\
    \ x 4.3) 'b-)\n            ((= x 4.0) 'c+)\n            ((= x 4.7) 'c)\n     \
    \       ((= x 4.3) 'c-)\n            ((= x 4.0) 'd+)\n            ((= x 4.7) 'd)\n\
    \            ((= x 4.3) 'd-)\n            (else 'e)))\n      (g x)))\n    (map\
    \ (lambda (x)\n          (g x)) (gpa)))\n  \n  ;; TODO: fill in the function here\n\
    \  (define (letter_grade letter)\n    (cond \n      ((eqv? letter 'a) (concat\
    \ \"A+\"))\n      ((eqv? letter 'b) (concat \"B\"))\n      ((eqv? letter 'c) (concat\
    \ \"C\"))\n      ((eqv? letter 'd) (concat \"D\"))\n      ((eqv? letter 'e) (concat\
    \ \"E\"))\n      (else (concat \"Invalid letter grade\"))))\n  (map (lambda (x\
    \ y)\n         (letter_grade x)) (numerical_letter_grade grades))\n", "  (map\
    \ (lambda (grade) (if (> grade 0.0) (if (< grade 3.0) \"D-\" \n              \
    \                            (if (< grade 1.7) \"C-\" \n                     \
    \                     (if (< grade 2.7) \"B-\" \n                            \
    \              (if (< grade 3.3) \"B-\" \n                                   \
    \       (if (< grade 4.0) \"A-\" \n                                          (if\
    \ (< grade 4.7) \"A+\" \n                                          (if (< grade\
    \ 5.3) \"A-\")))))) \n       grades))\n", "  (cond\n    [(< (car grades) 4.0)\
    \ 'A+]\n    [(< (car grades) 3.7) 'A]\n    [(< (car grades) 3.3) 'A-]\n    [(<\
    \ (car grades) 3.0) 'B+]\n    [(< (car grades) 2.7) 'B]\n    [(< (car grades)\
    \ 2.3) 'B-]\n    [(< (car grades) 2.0) 'C+]\n    [(< (car grades) 1.7) 'C]\n \
    \   [(< (car grades) 1.3) 'C-]\n    [(< (car grades) 1.0) 'D+]\n    [(< (car grades)\
    \ 0.7) 'D]\n    [(< (car grades) 0.0) 'D-]\n    [else 'E]))", "  (let ([num (list\
    \ 0 1 2 3 4 5 6 7 8 9)]\n        [gp '()])\n    (loop\n       for grade in grades\n\
    \       for i from 0\n       for gp in (cons (cond [(<= grade i)\n           \
    \                    (cons \"A\" (+ 1 (cdr gp)))]\n                          \
    \     [(<= grade (+ i 1))\n                              \"A\"]\n            \
    \                   [else (cons \"B\" (+ 1 (cdr gp)))]\n                     \
    \          [else (cons \"B\" (+ 1 (cdr gp)))]\n                              \
    \ [else (cons \"C\" (+ 1 (cdr gp)))]\n                               [else (cons\
    \ \"C\" (+ 1 (cdr gp)))]\n                               [else (cons \"D\" (+\
    \ 1 (cdr gp)))]\n                               [else (cons \"D\" (+ 1 (cdr gp)))]\n\
    \                               [else (cons \"E\" (+ 1 (cdr gp)))]\n         \
    \                      [else (cons \"E\" (+ 1 (cdr gp)))]))\n       for j from\
    \ (+ i 1)\n       for num (cons (cond [(<= grade i)\n                        \
    \     (cons (car num) (cdr gp))\n                             ]\n            \
    \               [(<= grade (+ i 1))\n                             (cons (+ (car\
    \ num) 1) (cdr gp))\n                             ]\n                        \
    \   [else (cons (+ (car num) 2) (cdr gp))\n                             ]\n  \
    \                         [else (cons (+ (car num) 3) (cdr gp))\n            \
    \                 ]\n                           [else (cons (+ (car num) 4) (cdr\
    \ gp))\n                             ]\n                           [else (cons\
    \ (+ (car num) 5) (cdr gp))\n                             ]\n                \
    \           [else (cons (+ (car num) 6) (cdr gp))\n                          \
    \   ]\n                           [else (cons (+ (car num) 7) (cdr gp))\n    \
    \                         ]\n                           [else (cons (+ (car num)\
    \ 8) (cdr gp))\n                             ]\n                           [else\
    \ (cons (+ (car num) 9) (cdr gp))\n                             ]))\n       collect\
    \ (cons (car num) (cdr gp))\n       finally (return (cdr gp))))))\n", "  (cond\n\
    \    [(< grades 0) \"D-\"]\n    [(< grades 5) \"D\"]\n    [(< grades 7) \"D+\"\
    ]\n    [(< grades 9) \"C-\"]\n    [(< grades 11) \"C\"]\n    [(< grades 13) \"\
    C+\"]\n    [(< grades 15) \"B-\"]\n    [(< grades 17) \"B\"]\n    [(< grades 19)\
    \ \"B+\"]\n    [(< grades 21) \"A-\"]\n    [(< grades 23) \"A\"]\n    [(< grades\
    \ 25) \"A+\"]\n    [else \"E\"]))\n", "  (let ([grade (first grades)])\n    (cond\n\
    \      [(> grade 3.0) \"A+\"]\n      [(> grade 3.3) \"A\"]\n      [(> grade 3.7)\
    \ \"A-\"]\n      [(> grade 3.7) \"B+\"]\n      [(> grade 3.3) \"B\"]\n      [(>\
    \ grade 3.0) \"B-\"]\n      [(> grade 2.7) \"B+\"]\n      [(> grade 2.3) \"B\"\
    ]\n      [(> grade 2.0) \"B-\"]\n      [(> grade 1.7) \"C+\"]\n      [(> grade\
    \ 1.3) \"C\"]\n      [(> grade 1.0) \"C-\"]\n      [(> grade 0.7) \"C+\"]\n  \
    \    [(> grade 0.0) \"C-\"]\n      [(> grade 0.0) \"D+\"]\n      [(> grade 0.7)\
    \ \"D\"]\n      [(> grade 1.0) \"D-\"]\n      [(> grade 1.3) \"D+\"]\n      [(>\
    \ grade 2.0) \"D\"]\n      [(> grade 2.3) \"D-\"]\n      [(> grade 2.7) \"D+\"\
    ]\n      [(> grade 3.0) \"D\"]\n      [(> grade 3.3) \"D-\"]\n      [(> grade\
    \ 3.7) \"D+\"]\n      [(> grade 4.0) \"D\"]\n      [(> grade 4.0) \"E\"]\n   \
    \   [else (list \"E\")]))\n", "  (cond [(>= (length grades) 1)\n         'E]\n\
    \        [(<= (first grades) 4)\n         (concat '(A+) (tail grades))]\n    \
    \    [(> 4 (first grades))\n         (concat '(A) (tail (rest grades)))]\n   \
    \     [(> 3.7 (first grades))\n         (concat '(A+) (tail (rest grades)))]\n\
    \        [(> 3.3 (first grades))\n         (concat '(A) (tail (rest grades)))]\n\
    \        [(> 3.0 (first grades))\n         (concat '(B+) (tail (rest grades)))]\n\
    \        [(> 2.7 (first grades))\n         (concat '(B) (tail (rest grades)))]\n\
    \        [(> 2.3 (first grades))\n         (concat '(B) (tail (rest grades)))]\n\
    \        [(> 2.0 (first grades))\n         (concat '(C+) (tail (rest grades)))]\n\
    \        [(> 1.7 (first grades))\n         (concat '(C) (tail (rest grades)))]\n\
    \        [(> 1.3 (first grades))\n         (concat '(C-) (tail (rest grades)))]\n\
    \        [(> 1.0 (first grades))\n         (concat '(D+) (tail (rest grades)))]\n\
    \        [(> 0.7 (first grades))\n         (concat '(D) (tail (rest grades)))]\n\
    \        [(> 0.0 (first grades))\n         (concat '(D-) (tail (rest grades)))]\n\
    \        [else\n         (concat '(D) (tail (rest grades)))])))\n", "  (let* ((sum\
    \ (reduce + (map grade_value grades))))\n    (let* ((letters (let ((letters (list))\
    \ (count 0))\n                    (loop (cond [(<= sum 0) (set! letters list)]\n\
    \                             [(< sum (/ sum 10)) (set! letters (cons (quotient\
    \ sum 10) letters))]\n                             [else (set! letters (cons (modulo\
    \ sum 10) letters))])\n                    (reverse letters))))\n      (append\
    \ (grade_value grades) letters))))\n", "  (let*\n    ((letters \n      (list \"\
    A+\" \"A\" \"A-\" \"B+\" \"B\" \"B-\" \"C+\" \"C\" \"C-\" \"D+\" \"D\" \"D-\"\
    \ \"E\")))\n    (for grade grades\n      (list grade (list-ref letters (floor\
    \ (/ grade 4)))))))\n", "  (define (iter total grade pct-total)\n    (cond [(zero?\
    \ pct-total)\n           (reverse (list total))\n           (define (iter total\
    \ grade pct-total)\n             (cond [(< grade (/ total 4.0 (float total)))\
    \ (cons (char (+ grade 0.5) (car 'A)\n                                       \
    \                                      (car 'B) (car 'C)\n                   \
    \                                                          (car 'D))\n       \
    \                              (iter (+ total grade) grade (- pct-total 0.5))\n\
    \                                     (< grade (/ total 4.0 pct-total)) (cons\
    \ (char (+ grade 0.5) (car 'B))\n                                            \
    \                               (iter (+ total grade) grade pct-total)\n     \
    \                                                                      (< grade\
    \ (/ total 4.0 pct-total)) (cons (char (+ grade 0.5) (car 'C))\n             \
    \                                                                            \
    \                          (iter (+ total grade) grade pct-total)\n          \
    \                                                                            \
    \                             (< grade (/ total 4.0 pct-total)) (cons (char (+\
    \ grade 0.5) (car 'D))\n                                                     \
    \                                                                            \
    \                                                  (iter (+ total grade) grade\
    \ pct-total)\n                                                               \
    \                                                                            \
    \                                        (< grade (/ total 4.0 pct-total)) (cons\
    \ (char (+ grade 0.5) (car 'E))\n                                            \
    \                                                                            \
    \                                                                            \
    \               (iter (+ total grade) grade pct-total)\n                     \
    \                                                                            \
    \                                                                            \
    \                                      (< grade (/ total 4.0 pct-total)) (cons\
    \ (char (+ grade 0.5) (car 'F))\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                         (iter\
    \ (+ total grade) grade pct-total)\n                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            (<\
    \ grade (/ total 4.0 pct-total)) (cons (char (+ grade 0.5) (car 'G))\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               (iter (+ total\
    \ grade) grade pct-total)\n                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    (< grade (/ total 4.0 pct-total)) (cons (char (+ grade 0.5)\
    \ (car 'H))\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          (iter (+ total grade)\
    \ grade pct-total)\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                 (< grade (/\
    \ total 4.0 pct-total)) (cons (char (+ grade 0.5) ", "  (list (if (> (first grades)\
    \ 4.0)\n           \"A+\"\n           (if (> (first grades) 3.7)\n           \
    \    \"A\"\n               (if (> (first grades) 3.3)\n                   \"A-\"\
    \n                   (if (> (first grades) 3.0)\n                       \"B+\"\
    \n                       (if (> (first grades) 2.7)\n                        \
    \   \"B\"\n                           (if (> (first grades) 2.3)\n           \
    \                    \"B-\"\n                               (if (> (first grades)\
    \ 2.0)\n                                   \"C+\"\n                          \
    \          (if (> (first grades) 1.7)\n                                      \
    \  \"C\"\n                                        (if (> (first grades) 1.3)\n\
    \                                            \"C-\"\n                        \
    \                    (if (> (first grades) 1.0)\n                            \
    \                    \"D+\"\n                                                (if\
    \ (> (first grades) 0.7)\n                                                   \
    \ \"D\"\n                                                    (if (> (first grades)\
    \ 0.0)\n                                                        \"D-\"\n     \
    \                                                   (if (> (first grades) 0.0)\n\
    \                                                            \"E\")))))))))))\n\
    \         )\n        )\n        )\n", "  (if (null? grades)\n      'E\n      (if\
    \ (>= (first grades) 4.0)\n          (cond ((= (first grades) 4.0) \n        \
    \         (cond ((>= (first grades) 4.0) \n                        (cond ((>=\
    \ (first grades) 4.0)\n                               (cond ((>= (first grades)\
    \ 4.0)\n                                        (cond ((>= (first grades) 4.0)\n\
    \                                              (cond ((>= (first grades) 4.0)\n\
    \                                                       (cond ((>= (first grades)\
    \ 4.0)\n                                                            (cond ((>=\
    \ (first grades) 4.0)\n                                                      \
    \               (cond ((>= (first grades) 4.0)\n                             \
    \                                               (cond ((>= (first grades) 4.0)\n\
    \                                                                            \
    \       (cond ((>= (first grades) 4.0)\n                                     \
    \                                                    (cond ((>= (first grades)\
    \ 4.0)\n                                                                     \
    \                          (cond ((>= (first grades) 4.0)\n                  \
    \                                                                            \
    \         'A+)\n                                                             \
    \                                  (else\n                                   \
    \                                                                    'A )))\n\
    \                                                                     (else \n\
    \                                                                         'A-)))\n\
    \                                               (else \n                     \
    \                            'A-)))\n                                       (else\
    \ \n                                          'A-)))\n                       (else\
    \ \n                        'A-)))\n                 (else \n                \
    \  'A-))\n           (else \n            'A-)))\n (define (letter_grade grades)\n\
    \  (if (null? grades)\n      'E\n      (if (>= (first grades) 4.0)\n         \
    \ (cond ((= (first grades) 4.0) \n                 (cond ((>= (first grades) 4.0)\
    \ \n                        (cond ((>= (first grades) 4.0)\n                 \
    \              (cond ((>= (first grades) 4.0)\n                              \
    \          (cond ((>= (first grades) 4.0)\n                                  \
    \            (cond ((>= (first grades) 4.0)\n                                \
    \                       (cond ((>= (first grades) 4.0)\n                     \
    \                                       (cond ((>= (first grades) 4.0)\n     \
    \                                                                (cond ((>= (first\
    \ grades) 4.0)\n                                                             \
    \               (cond ((>= (first grades) 4.0)\n                             \
    \                                                      (cond ((>= (first grades)\
    \ 4.0)\n                                                                     \
    \                    (cond ((>= (first grades) 4.0)\n                        \
    \                                                                       (cond\
    \ ((>= (first grades) 4.0)\n                                                 \
    \                                                      'A+)\n                \
    \                                                                            \
    \   (else\n                                                                  \
    \                                     'A )))\n                               \
    \                                      (else \n                              \
    \                                           'A-)))\n                         \
    \                      (else \n                                              \
    \   'A-)))\n                       (else \n                        'A-)))\n  \
    \               (else \n                  'A-))\n           (", "  (cond [(> grades\
    \ 3.0) \"A+\"]\n        [(> grades 3.3) \"A\"]\n        [(> grades 3.7) \"A-\"\
    ]\n        [(> grades 4.0) \"B+\"]\n        [(> grades 2.3) \"B\"]\n        [(>\
    \ grades 2.7) \"B-\"]\n        [(> grades 3.0) \"C+\"]\n        [(> grades 1.7)\
    \ \"C\"]\n        [(> grades 1.0) \"D+\"]\n        [(> grades 0.7) \"D\"]\n  \
    \      [(> grades 0.0) \"D-\"]\n        [else \"E\"]))\n", "  (let ((gpa (grade_gpa\
    \ grades)))\n    (cond ((<= gpa 4.0) \"A+\")\n          ((< gpa 3.7) \"A\")\n\
    \          ((< gpa 3.3) \"A-\")\n          ((< gpa 3.0) \"B+\")\n          ((<\
    \ gpa 2.7) \"B\")\n          ((< gpa 2.3) \"B-\")\n          ((< gpa 2.0) \"C+\"\
    )\n          ((< gpa 1.7) \"C\")\n          ((< gpa 1.3) \"C-\")\n          ((<\
    \ gpa 1.0) \"D+\")\n          ((< gpa 0.7) \"D\")\n          ((< gpa 0.0) \"D-\"\
    )\n          ((< gpa 0.0) \"E\")\n          (else \"\")\n    )\n  )\n", "  (if\
    \ (empty? grades)\n      (append \"E\" '())\n      (append (if (>= (first grades)\
    \ 4.0)\n                  (if (< 1 (rest grades))\n                      (if (<\
    \ 1 (first grades))\n                          \"A+\"\n                      \
    \    \"A\")\n                      \"A-\")\n                  \"B+\")\n      \
    \        (if (< 1 (first grades))\n                  (if (>= (first grades) 3.3)\n\
    \                      (if (< 1 (first grades))\n                          \"\
    A-\"\n                          \"A\")\n                      \"B-\")\n      \
    \        \"B\")\n      \"C+\")\n  (if (< 1 (first grades))\n      (if (>= (first\
    \ grades) 2.7)\n          (if (< 1 (first grades))\n              \"B-\"\n   \
    \           \"B\")\n      \"C\")\n  \"D+\")", "  (let ([letters (make-string-list\
    \ (length grades) (list '#\\newline))])\n    (set! letters (append letters (map\
    \ letter (reverse (sort grades >))))))\n  (append letters (map (lambda (g) (g\
    \ (substring g 0 (length g)-1))) letters))))\n</code>\n<|/ a tags=racket,scheme\
    \ dscore=0 |>\n<| a |>\n<code>\n#lang racket\n", "  (let ((num_grades (map (lambda\
    \ (grade) \n                          (/ (- grade 4.0) (- 4.0 grade)) 9.0))\n\
    \         (letter \"F\"))\n        (num_max_value \n         (max num_grades)))\n\
    \    (if (<= num_max_value 4.0)\n        (let ((grade_str (cond\n            \
    \            (< num_max_value 3.7)\n                        \"A+\"\n         \
    \               (> num_max_value 3.3)\n                        \"A\"\n       \
    \                 (> num_max_value 3.0)\n                        \"B+\"\n    \
    \                    (> num_max_value 2.7)\n                        \"B\"\n  \
    \                      (> num_max_value 2.3)\n                        \"B-\"\n\
    \                        (> num_max_value 2.0)\n                        \"C+\"\
    \n                        \"C\"\n                        (> num_max_value 1.7)\n\
    \                        \"C\"\n                        (> num_max_value 1.3)\n\
    \                        \"C-\"\n                        (> num_max_value 1.0)\n\
    \                        \"D+\"\n                        \"D\"\n             \
    \           (> num_max_value 0.7)\n                        \"D\"\n           \
    \             \"D-\"\n                        \"E\")))\n          (if (<= grade_str\
    \ \"F\")\n              (cond\n                (< grade_str \"A+\") \n       \
    \         (cons grade_str \"A+\")\n                (> grade_str \"A\") \n    \
    \            (cons grade_str \"A\")\n                (> grade_str \"B+\") \n \
    \               (cons grade_str \"B\")\n                (> grade_str \"B\") \n\
    \                (cons grade_str \"B-\")\n                (> grade_str \"C+\"\
    ) \n                (cons grade_str \"C\")\n                (> grade_str \"C\"\
    ) \n                (cons grade_str \"C-\")\n                (> grade_str \"D+\"\
    ) \n                (cons grade_str \"D\")\n                (> grade_str \"D\"\
    ) \n                (cons grade_str \"D-\")\n                (> grade_str \"E\"\
    ) \n                (cons grade_str \"E\"))\n              (cons grade_str \"\
    F\")))\n        (cons letter letter))))\n", "  (if (null? grades) \"E\" \n   \
    \   (if (> (first grades) 0) \n          (cons (char->string (floor (/ first 100)))\n\
    \                (numerical_letter_grade (rest grades)))\n          (cons (char->string\
    \ first)\n                (numerical_letter_grade (rest grades))))))\n", "  (letrec\
    \ ([helper (lambda (g c n)\n                   (cond\n                    [(<\
    \ n 0)\n                     (cond [(and (= n 0) (= c \"A\")) (g \"A+\")\n   \
    \                        (and (= n 0) (= c \"B\")) (g \"B\")\n               \
    \            (and (= n 0) (= c \"C\")) (g \"C\")\n                           (and\
    \ (= n 0) (= c \"D\")) (g \"D+\")\n                           (and (= n 0) (=\
    \ c \"E\")) (g \"E\")\n                           (else (error \"Unexpected input\
    \ for grade function\"))]\n                    [else (error \"Unexpected input\
    \ for grade function\"))]))]\n           [sum_of_two (lambda (a b)\n         \
    \               (+ a b))])\n    (helper (lambda (a b)\n               (cond\n\
    \                [((> a b) (error \"Grades are not sorted\"))\n              \
    \   ((= a 0) \"C\")\n                 ((= a 1) \"D\")\n                 ((= a\
    \ 2) \"E\")\n                 ((= a 3) \"A\")\n                 ((= a 4) \"B+\"\
    )\n                 ((= a 5) \"B\")\n                 ((= a 6) \"B-\")\n     \
    \            ((= a 7) \"A+\")\n                 ((= a 8) \"A\")\n            \
    \     ((= a 9) \"A-\")\n                 ((= a 10) \"B+\")\n                 ((=\
    \ a 11) \"B\")\n                 ((= a 12) \"B-\")\n                 ((= a 13)\
    \ \"A+\")\n                 ((= a 14) \"A\")\n                 ((= a 15) \"A-\"\
    )\n                 ((= a 16) \"B+\")\n                 ((= a 17) \"B\")\n   \
    \              ((= a 18) \"B-\")\n                 ((= a 19) \"A+\")\n       \
    \          ((= a 20) \"A\")\n                 ((= a 21) \"A-\")\n            \
    \     ((= a 22) \"B+\")\n                 ((= a 23) \"B\")\n                 ((=\
    \ a 24) \"B-\")\n                 ((= a 25) \"A+\")\n                 ((= a 26)\
    \ \"A\")\n                 ((= a 27) \"A-\")\n                 ((= a 28) \"B+\"\
    )\n                 ((= a 29) \"B\")\n                 ((= a 30) \"B-\")\n   \
    \              ((= a 31) \"A+\")\n                 ((= a 32) \"A\")\n        \
    \         ((= a 33) \"A-\")\n                 ((= a 34) \"B+\")\n            \
    \     ((= a 35) \"B\")\n", "  (map (lambda (letter) (if (< letter 5.0) letter\
    \ \n                            (symbol-name (substring letter 0 (string-length\
    \ letter)))))\n       (reverse (sort-by (lambda (grade) (- grade 4.0))\n     \
    \                 (filter (lambda (grade) (car grade))\n                     \
    \         grades)))))\n", "  (let loop ((i 0) (grades '()))\n    (if (< i 5)\n\
    \      (append grades (list i))\n      (loop (+ i 1) (cons (if (< i (/ grades\
    \ (expt 2 i) )) \"D\" \n                                         (if (< i (expt\
    \ 2 i) ) \"C\" \n                                         (if (< i (/ grades (expt\
    \ 2 i) )) \"B\" \n                                         (if (< i (expt 2 i)\
    \ ) \"A\" \n                                         \"E\")))))))\n", "  (if (>\
    \ grades 3.0)\n      (if (< grades 2.7)\n          \"B\"\n          (if (< grades\
    \ 2.3)\n              \"B-\"\n              (if (< grades 2.0)\n             \
    \     \"B-\"\n                  (if (< grades 1.7)\n                      \"C-\"\
    \n                      (if (< grades 1.3)\n                          \"C-\"\n\
    \                          (if (< grades 1.0)\n                              \"\
    D-\"\n                              (if (< grades 0.7)\n                     \
    \             \"D-\"\n                                  (if (< grades 0.0)\n \
    \                                     \"D-\"\n                               \
    \       (if (< grades 0.0)\n                                          \"D-\"\n\
    \                                          \"E\")))))))) \n      (if (< grades\
    \ 2.0)\n          \"C\"\n          (if (< grades 1.7)\n              \"C\"\n \
    \             (if (< grades 1.3)\n                  \"C\"\n                  (if\
    \ (< grades 1.0)\n                      \"C\"\n                      (if (< grades\
    \ 0.7)\n                          \"C\"\n                          (if (< grades\
    \ 0.0)\n                              \"C\"\n                              (if\
    \ (< grades 0.0)\n                                  \"C\"\n                  \
    \                \"E\")))))))) \n      (if (< grades 2.0)\n          \"B\"\n \
    \         (if (< grades 1.7)\n              \"B\"\n              (if (< grades\
    \ 1.3)\n                  \"B\"\n                  (if (< grades 1.0)\n      \
    \                \"B\"\n                      (if (< grades 0.7)\n           \
    \               \"B\"\n                          (if (< grades 0.0)\n        \
    \                      \"B\"\n                              (if (< grades 0.0)\n\
    \                                  \"B\"\n                                  \"\
    E\")))))))) \n      (if (< grades 2.0)\n          \"A\"\n          (if (< grades\
    \ 1.7)\n              \"A\"\n              (if (< grades 1.3)\n              \
    \    \"A\"\n                  (if (< grades 1.0)\n                      \"A\"\n\
    \                      (if (< grades 0.7)\n                          \"A\"\n \
    \                         (if (< grades 0.0)\n                              \"\
    A\"\n                              (if (< grades 0.0)\n                      \
    \            \"A\"\n                                  \"E\")))))))) \n  (if (<\
    \ grades 0.0)\n      \"F\"\n      (if (< grades 0.7)\n          \"F\"\n      \
    \    (if (< grades 0.3)\n              \"F\"\n              (if (< grades 0.0)\n\
    \                  \"F\"\n                  \"E\")))))\n", "  (cond\n    [(number?\
    \ (car grades)) (cdr grades)]\n    [else (cons \"?\" \"\")]))\n  ", "  (let ((result\
    \ \"\"))\n    (if (null? grades) result\n      (let ((temp (car grades)))\n  \
    \      (if (< temp 0) \"C\" \n          (if (< temp 1) \"B-\" \n            (if\
    \ (< temp 2) \"B-\" \n              \"B\" \n              (if (< temp 3) \"A-\"\
    \ \n                \"A\" \n                (if (< temp 4) \"A+\" \n         \
    \         \"A\" \n                  \"A+\"))))))\n        (set! result (append\
    \ result temp))\n        (grade_equation (cdr grades))))))\n", "  (cond\n    ((<\
    \ grades 4) \"A+\")\n    ((< grades 3.7) \"A\")\n    ((< grades 3.3) \"A-\")\n\
    \    ((< grades 3) \"B+\")\n    ((< grades 2.7) \"B\")\n    ((< grades 2.3) \"\
    B-\")\n    ((< grades 2) \"C+\")\n    ((< grades 1.7) \"C\")\n    ((< grades 1.3)\
    \ \"C-\")\n    ((< grades 1) \"D+\")\n    ((< grades 0.7) \"D\")\n    ((< grades\
    \ 0) \"D-\")\n    (else \"E\")))\n", "  (if (< grades 4.0)\n      \"A+\"\n   \
    \   (if (< grades 3.7)\n          \"A\"\n          (if (< grades 3.3)\n      \
    \        \"A-\"\n              \"B+\"\n              (if (< grades 3.0)\n    \
    \              \"B\"\n                  \"B-\"\n                  \"C+\"\n   \
    \               (if (< grades 2.7)\n                      \"C\"\n            \
    \          (if (< grades 2.3)\n                          \"C-\"\n            \
    \              \"D+\"\n                          (if (< grades 2.0)\n        \
    \                      \"D\"\n                              \"D-\"\n         \
    \                     \"E\"))))))))\n", "  (let* ((grade-table '(4.0 3.7 3.3 3.0\
    \ 2.7 2.3 2.0 1.7 1.3 1.0 0.7 0.0))\n         (n (quotient (apply + grades) 4.0))\n\
    \         (g (sub1 n))\n         (gs (sub1 (modulo n 4.0)))\n         (g' (sub1\
    \ (modulo n 4.0)))\n         (gs' (sub1 (modulo n 4.0)))\n         (g's' (sub1\
    \ (modulo n 4.0)))\n         (gs's' (sub1 (modulo n 4.0)))\n         (g's's' (sub1\
    \ (modulo n 4.0)))\n         (g's's's' (sub1 (modulo n 4.0)))\n         (g's's's's'\
    \ (sub1 (modulo n 4.0)))\n         (g's's's's's' (sub1 (modulo n 4.0)))\n    \
    \     (g's's's's's's' (sub1 (modulo n 4.0)))\n         (g's's's's's's's's' (sub1\
    \ (modulo n 4.0)))\n         (g's's's's's's's's's's' (sub1 (modulo n 4.0)))\n\
    \         (g's's's's's's's's's's's' (sub1 (modulo n 4.0)))\n         (g's's's's's's's's's's's's'\
    \ (sub1 (modulo n 4.0)))\n         (g's's's's's's's's's's's's's' (sub1 (modulo\
    \ n 4.0)))\n         (g's's's's's's's's's's's's's's's' (sub1 (modulo n 4.0)))\n\
    \         (g's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's's'",
  "  (let ((n (length grades)))\n    (if (zero? n)\n        \"E\"\n        (append\
    \ (list '())\n                 (map (lambda(x) (letter_grade x grades))\n    \
    \                   (number-seq 1 n)))))) \n", "  (cond [(< grades 4.0) (list\
    \ \"A+\" )]\n        [(< grades 3.7) (list \"A\" )]\n        [(< grades 3.3) (list\
    \ \"A\" )]\n        [(< grades 3.0) (list \"B+\" )]\n        [(< grades 2.7) (list\
    \ \"B\" )]\n        [(< grades 2.3) (list \"B\" )]\n        [(< grades 2.0) (list\
    \ \"C+\" )]\n        [(< grades 1.7) (list \"C\" )]\n        [(< grades 1.3) (list\
    \ \"C\" )]\n        [(< grades 1.0) (list \"D+\" )]\n        [(< grades 0.7) (list\
    \ \"D\" )]\n        [(< grades 0.0) (list \"D\" )]\n        [else (list \"E\"\
    \ )]\n      )\n  )\n", "  (cond [(< grades (car grades))  \"A- \"]\n        [(>\
    \ grades (car grades)) \"A\"]\n        [(> grades (car grades)) \"B+\"]\n    \
    \    [(> grades (car grades)) \"B\"]\n        [(> grades (car grades)) \"B-\"\
    ]\n        [(> grades (car grades)) \"C+\"]\n        [(> grades (car grades))\
    \ \"C\"]\n        [(> grades (car grades)) \"C-\"]\n        [(> grades (car grades))\
    \ \"D+\"]\n        [(> grades (car grades)) \"D\"]\n        [else \"E\"]))\n",
  "  ;; (define (add_letter_grade letter grade)\n  ;;   (cond [(< grade 2.0)\n  ;;\
    \          (cons letter \"B\")\n  ;;          (cons letter \"B-\")]\n  ;;    \
    \     [(< grade 2.7)\n  ;;          (cons letter \"A\")\n  ;;          (cons letter\
    \ \"A-\")]\n  ;;         [(< grade 3.0)\n  ;;          (cons letter \"A-\")\n\
    \  ;;          (cons letter \"B+\")]\n  ;;         [(< grade 3.3)\n  ;;      \
    \    (cons letter \"B\")\n  ;;          (cons letter \"B-\")]\n  ;;         [(<\
    \ grade 3.7)\n  ;;          (cons letter \"C\")\n  ;;          (cons letter \"\
    C-\")]\n  ;;         [(< grade 4.0)\n  ;;          (cons letter \"B-\")\n  ;;\
    \          (cons letter \"C+\")]\n  ;;         [(< grade 4.3)\n  ;;          (cons\
    \ letter \"C\")\n  ;;          (cons letter \"C-\")]\n  ;;         [(< grade 4.7)\n\
    \  ;;          (cons letter \"D\")\n  ;;          (cons letter \"D-\")]\n  ;;\
    \         [(< grade 5.0)\n  ;;          (cons letter \"D-\")\n  ;;          (cons\
    \ letter \"D+\")]\n  ;;         [(< grade 5.3)\n  ;;          (cons letter \"\
    D\")\n  ;;          (cons letter \"D-\")]\n  ;;         [(< grade 5.7)\n  ;; \
    \         (cons letter \"E\")\n  ;;          (cons letter \"E-\")]\n  ;;     \
    \    [(< grade 6.0)\n  ;;          (cons letter \"E\")\n  ;;          (cons letter\
    \ \"E-\")]\n  ;;         [(< grade 6.7)\n  ;;          (cons letter \"D+\")\n\
    \  ;;          (cons letter \"E\")]\n  ;;         [(< grade 7.0)\n  ;;       \
    \   (cons letter \"D\")\n  ;;          (cons letter \"D-\")]\n  ;;         [(<\
    \ grade 7.7)\n  ;;          (cons letter \"D\")\n  ;;          (cons letter \"\
    D-\")]\n  ;;         [(< grade 8.0)\n", "  (let ((letters (vector (string->list\
    \ (string \"ABCDEFG\")) \n                         (string->list (string \"+-\"\
    \   )))\n        (grades (vector (list 'A-) (list 'B+) (list 'B-) (list 'C+) (list\
    \ 'C-) (list 'D+) (list 'D) (list 'D-) (list 'E))))\n    (let loop ()\n      (cond\
    \ ((< grades (first grades)) (first letters))\n            ((> grades (first grades))\
    \ (loop ()))\n            (else (loop (rest grades))))))\n  ", "  (define (helper\
    \ grades index)\n    (cond [(null? grades) \"\"]\n          [(< grades (car grades))\n\
    \           (helper (cdr grades) (+ index 1))]\n          [else (cons (char->string\
    \ (car grades)) (helper (cdr grades) index))]))\n  (helper grades 0))\n", "  (let\
    \ ((letter_grade '(A B C D E F)))\n    (cond ((< grades 4) \n           (append\
    \ letter_grade letter_grade letter_grade))\n          ((< grades 4.7) \n     \
    \      (append letter_grade letter_grade letter_grade letter_grade))\n       \
    \   ((< grades 4.9) \n           (append letter_grade letter_grade letter_grade\
    \ letter_grade letter_grade))\n          (else\n           (append letter_grade\
    \ letter_grade letter_grade letter_grade letter_grade))))) ; C+\n", "  (let* ((grade-list\
    \ '())\n         (grade-sum 0.0)\n         (result '()))\n    (if (null? grades)\n\
    \        result\n        (cond [(< (car grades) grade-sum)\n              (push\
    \ (car grades) result)\n              (push (numerical_letter_grade (cdr grades))\
    \ result)]\n              [(> grade-sum (car grades))\n               (push (car\
    \ grades) result)\n               (push '(E) result)])\n        (push (numerical_letter_grade\
    \ (cdr grades)) result)\n        (push (car grades) result))))\n", "  (match grades\n\
    \    ((list)\n     (let ([num-grades (map 'list '(> > <= < >=) grades)\n     \
    \           num-letters (map 'list '(A B C D) '())])\n       (let ([letters (for-each\
    \ (lambda (n) \n                                            (if (> n 0.0) \n \
    \                                               (cons (string-downcase (float\
    \ n)) num-letters))) \n                           num-grades])\n         (for-each\
    \ (lambda (letter num) (cons (string letter num) letters))\n                 \
    \ num-letters)\n         (reverse letters))))\n    (else (string \"Error\")))\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for the answer, but I have been given the code\
    \ for the grade equation and I cannot change that. I will give it a shot though.\n\
    <|/ c |>\n<| c |>\nHmmm, this isn't really an answer to your own question.  Perhaps\
    \ if you explained what your homework assignment was, we could help you.  What\
    \ you have given us here is a definition of `grade_equation` which has nothing\
    \ to do with Grade Equation.  It seems to be a function that takes a list of scores\
    \ and returns grade letters.  If you find this to be the case, why have you been\
    \ given the code for the `grade_equation` and not the code for `grade_equation`\
    \ that returns the letters you are looking for?\n<|/ c |>\n<| c |>\nHaha, this\
    \ question is very similar to the one that was asked [here](http://stackoverflow.com/questions/14648796/java-arraylist-question-i-need-help-with),\
    \ so I made a similar example to ask the question.\n<|/ c |>\n<| a dscore=0 |>\n\
    Your first step should be to figure out what the grade equation is supposed to\
    \ be:\nhttp://en.wikipedia.org/wiki/Grade_(mathematics) tells you exactly how\
    \ to do that.\nOnce you understand that, you can reimplement it in Java.  One\
    \ place to start is with defining the following method in Java:\n<code>\npublic\
    \ char[] getLetters(int numericalGrade, int numberOfGrades) {\n    /* Your code\
    \ here */\n}\n</code>", "  (match grades\n    (list (list 4.0) (list \">3.7\"\
    \ (list \">3.3\" (list \">3.0\" (list \">2.7\" (list \">2.3\" (list \">2.0\" (list\
    \ \">1.7\" (list \">1.3\" (list \">1.0\" (list \">0.7\" (list \">0.0\" (list \"\
    >0.0\")))))))))))\n    (list (list 4.0) (list \"A+\" (list \"A\" (list \"A-\"\
    \ (list \"B+\" (list \"B\" (list \"B-\" (list \"C+\" (list \"C\" (list \"C-\"\
    \ (list \"D+\" (list \"D\" (list \"D-\" (list \"E\")))))))))))\n    (list (list\
    \ 3.7) (list \"A\" (list \"A-\" (list \"B+\" (list \"B\" (list \"B-\" (list \"\
    C+\" (list \"C\" (list \"C-\" (list \"D+\" (list \"D\" (list \"D-\")))))))) ))))",
  "  (cond ((< grades 0) \"D-\") ((< grades 1) \"D\")\n        ((< grades 2) \"C+\"\
    )\n        ((< grades 3) \"C\")\n        ((< grades 4) \"B+\")\n        ((< grades\
    \ 5) \"B\")\n        ((< grades 6) \"A-\")\n        ((< grades 7) \"A\")\n   \
    \     ((< grades 8) \"A+\")\n        ((< grades 9) \"A\"))\n", "  (map (lambda\
    \ (grade)\n         (case (< grade 4.0)\n           (list \"A+\")\n          \
    \ (< grade 3.7)\n           (list \"A\")\n           (< grade 3.3)\n         \
    \  (list \"A-\")\n           (< grade 3.0)\n           (list \"B+\")\n       \
    \    (< grade 2.7)\n           (list \"B\")\n           (< grade 2.3)\n      \
    \     (list \"B-\")\n           (< grade 2.0)\n           (list \"C+\")\n    \
    \       (< grade 1.7)\n           (list \"C\")\n           (< grade 1.3)\n   \
    \        (list \"C-\")\n           (< grade 1.0)\n           (list \"D+\")\n \
    \          (< grade 0.7)\n           (list \"D\")\n           (< grade 0.0)\n\
    \           (list \"D-\")\n           (list \"E\")\n           (else (list \"\
    ??\"))))\n       grades))\n", "  (define (compare-grade x y)\n    (if (< x y)\n\
    \      (cons x y)\n      (cons y x)))\n  (define (add-grades y1 y2)\n    (map\
    \ (lambda (x) (string-append x y1)) y2))\n  (map (lambda (x) (cons (if (< x 0)\
    \ 'F (if (> x 0) 'D (if (> x 1) 'C (if (> x 2) 'B (if (> x 3) 'A \"F\"))))))\n\
    \  (map (lambda (x) (cons (if (< x 0) 'F (if (> x 0) 'D (if (> x 1) 'C (if (>\
    \ x 2) 'B (if (> x 3) 'A \"F\"))))) x) (compare-grade grades x)))\n</code>\n<|/\
    \ q dscore=0 |>\n<| c |>\nThis question appears to be off-topic because it is\
    \ about finding a homework assignment\n<|/ c |>\n<| c |>\n: Not my homework; I\
    \ got this problem to do in an online programming contest. I've made some progress\
    \ and my code now works but I'm still stuck on one problem. I'll edit the question\
    \ with the new code.\n<|/ c |>\n<| c |>\n: You just need to add `(define (compare\
    \ x y) ...)` in `grade-equation`.\n<|/ c |>\n<| c |>\nI understand what you're\
    \ saying, but I don't know how to do it. I just started learning Lisp.\n<|/ c\
    \ |>\n<| c |>\nI'm sorry, I got confused with this assignment and was working\
    \ on a different one. I fixed the other one, now I'm trying to fix this one. I\
    \ think I'm almost there but I'm stuck.\n<|/ c |>\n<| a tags=scheme,lisp |>\n\
    Well, I'm pretty sure you can solve this problem yourself, but since this is an\
    \ online programming contest, I'm going to give you the answer so that you can\
    \ practice your programming skills and then implement it into your code. \nThe\
    \ first thing I noticed was that you had a bunch of nested cond statements. If\
    \ you were just starting out, you might want to take it a step at a time with\
    \ a pencil and a piece of paper. \nThe cond statement looks like this:\n<code>",
  "  (cond\n    [(< grades 3.0)            (list \"A+\")\n     (and (> grades 3.7)\
    \      (list \"A\"))\n     (and (> grades 3.3)      (list \"A-\"))\n     (and\
    \ (> grades 3.0)      (list \"B+\"))\n     (and (> grades 2.7)      (list \"B\"\
    ))\n     (and (> grades 2.3)      (list \"B-\"))\n     (and (> grades 2.0)   \
    \   (list \"C+\"))\n     (and (> grades 1.7)      (list \"C\"))\n     (and (>\
    \ grades 1.3)      (list \"C-\"))\n     (and (> grades 1.0)      (list \"D+\"\
    ))\n     (and (> grades 0.7)      (list \"D\"))\n     (and (> grades 0.0)    \
    \  (list \"D-\"))\n     (list \"E\")\n    ]\n    [(< grades 2.0)            (list\
    \ \"A+\")\n     (and (> grades 2.7)      (list \"A\"))\n     (and (> grades 2.3)\
    \      (list \"A-\"))\n     (and (> grades 2.0)      (list \"B+\"))\n     (and\
    \ (> grades 1.7)      (list \"B\"))\n     (and (> grades 1.3)      (list \"B-\"\
    ))\n     (and (> grades 1.0)      (list \"C+\"))\n     (and (> grades 0.7)   \
    \   (list \"C\"))\n     (and (> grades 0.0)      (list \"C-\"))\n     (list \"\
    E\")\n    ]\n    [(< grades 1.0)            (list \"A+\")\n     (and (> grades\
    \ 0.7)      (list \"A\"))\n     (and (> grades 0.0)      (list \"A-\"))\n    \
    \ (list \"B+\")\n    ]\n    [(< grades 0.0)            (list \"A+\")\n     (and\
    \ (> grades 0.0)      (list \"A-\"))\n     (list \"B+\")\n    ]\n    [else   \
    \                 (list \"E\")])\n)\n", "  (cond [(< grades 0) \"E\"]\n      \
    \  [(< grades 0) \"D\"]\n        [(< grades 0) \"C\"]\n        [(< grades 0) \"\
    B\"]\n        [(< grades 0) \"A-\"]\n        [(< grades 0) \"A\"]\n        [(<\
    \ grades 0) \"B+\"]\n        [(< grades 0) \"B\"]\n        [(< grades 0) \"B-\"\
    ]\n        [(< grades 0) \"A-\"]\n        [(< grades 0) \"A+\"]\n        [(< grades\
    \ 0) \"C+\"]\n        [(< grades 0) \"C\"]\n        [(< grades 0) \"C-\"]\n  \
    \      [(< grades 0) \"B+\"]\n        [(< grades 0) \"B\"]\n        [(< grades\
    \ 0) \"B-\"]\n        [(< grades 0) \"A+\"]\n        [(< grades 0) \"C+\"]\n \
    \       [(< grades 0) \"C\"]\n        [(< grades 0) \"C-\"]\n        [(< grades\
    \ 0) \"A+\"]\n        [(< grades 0) \"A\"]\n        [(< grades 0) \"A+\"]\n  \
    \      [(< grades 0) \"C\"]\n        [(< grades 0) \"A-\"]\n        [(< grades\
    \ 0) \"A\"]\n        [(< grades 0) \"A\"]\n        [(< grades 0) \"A+\"]\n   \
    \     [(< grades 0) \"A+\"]\n        [(< grades 0) \"A\"]\n        [(< grades\
    \ 0) \"A-\"]\n        [(< grades 0) \"A\"]\n        [(< grades 0) \"A+\"]\n  \
    \      [(< grades 0) \"A+\"]\n        [(< grades 0) \"A+\"]\n        [(< grades\
    \ 0) \"A+\"]\n        [(< grades 0) \"A+\"]\n        [(< grades 0) \"A+\"]\n \
    \       [(< grades 0) \"A+\"]\n        [(< grades 0) \"A+\"]\n        [(< grades\
    \ 0) \"A+\"]\n        [(< grades 0) \"A+\"]\n        [(< grades 0) \"A+\"]\n \
    \       [(< grades 0) \"A+\"]\n        [(< grades 0) \"A+\"]\n        [(< grades\
    \ 0) \"A+\"]\n        [(< grades 0) \"A+\"]\n        [(< grades ", "  (letrec\n\
    \    ([(f (lambda (x y) \n            (if (<= x (car y)) (+ (car y) (cdr y)) (cdr\
    \ y))))]\n     (g (lambda (x y) \n           (if (>= x (car y)) (f (cdr y) (cdr\
    \ y)) (cdr y))))]\n    [(< (lambda (x y)\n           (if (> (car x) (car y)) (-\
    \ x 1) 0))\n     (lambda (x y)\n       (if (< (car x) (car y)) (- y 1) 0))]\n\
    \    [(<=(lambda (x y)\n            (if (> (car x) (car y)) (- x 1) 0))\n    \
    \ (lambda (x y)\n       (if (<= (car x) (car y)) (- y 1) 0))]\n    [(>=(lambda\
    \ (x y)\n            (if (> (car x) (car y)) (- x 1) 0))\n     (lambda (x y)\n\
    \       (if (>= (car x) (car y)) (- y 1) 0))]\n    [(greater-or-equal (lambda\
    \ (x y)\n                          (if (> (car x) (car y)) (- x 1) 0)))\n    \
    \ (lambda (x y)\n       (if (<= (car x) (car y)) (- y 1) 0))]\n    [(greater-than\
    \ (lambda (x y)\n                      (if (< (car x) (car y)) (- y 1) 0)))\n\
    \     (lambda (x y)\n       (if (>= (car x) (car y)) (- y 1) 0))]\n    [(equal\
    \ (lambda (x y)\n                (if (= (car x) (car y)) (- x 1) 0)))\n     (lambda\
    \ (x y)\n       (if (< (car x) (car y)) (- y 1) 0))]\n    [(not-equal (lambda\
    \ (x y)\n                   (if (not (= (car x) (car y)) (- x 1) 0)))\n      \
    \          (lambda (x y)\n                   (if (< (car x) (car y)) (- y 1) 0))])\n\
    \    (let ([x (first grades)]\n          [ys (rest grades)])\n      (if (< x y)\n\
    \          (cons (f x (car ys)) \n                (g x (g y (cdr ys))))\n    \
    \      (cons (f x (car ys))\n                (cons (g x (g y (f x y))) \n    \
    \                  (g x (g y (g x y)))))", "  (define (add x y)\n    (if (> x\
    \ y)\n        (cons x y)\n        y))\n  (define (substract x y)\n    (if (> y\
    \ 0)\n        (cons x y)\n        '()))\n  (define (average x y)\n    (/ (+ x\
    \ y) 2))\n  (define (letter x)\n    (cond ((< x 4) \"A+\")\n          ((< x 3.7)\
    \ \"A\")\n          ((< x 3.3) \"A-\")\n          ((< x 3) \"B+\")\n         \
    \ ((< x 2.7) \"B\")\n          ((< x 2.3) \"B-\")\n          ((< x 2) \"C+\")\n\
    \          ((< x 1.7) \"C\")\n          ((< x 1.3) \"C-\")\n          ((< x 1)\
    \ \"D+\")\n          ((< x 0.7) \"D\")\n          ((< x 0) \"D-\")\n         \
    \ (else \"E\")))\n  (define (letter_grades gpa)\n    (map (lambda (x)\n      \
    \     (cons (letter (average x gpa))\n                 (substract (add x (* gpa\
    \ 4.0)) gpa)))\n         grades))\n  (apply append (map letter_grades grades))\n\
    \  )\n  ", "  (cond [(< grades 4.0) (list \"A+\")\n         (< grades 3.7) (list\
    \ \"A\")\n         (< grades 3.3) (list \"A-\")\n         (< grades 3.0) (list\
    \ \"B+\")\n         (< grades 2.7) (list \"B\")\n         (< grades 2.3) (list\
    \ \"B-\")\n         (< grades 2.0) (list \"C+\")\n         (< grades 1.7) (list\
    \ \"C\")\n         (< grades 1.3) (list \"C-\")\n         (< grades 1.0) (list\
    \ \"D+\")\n         (< grades 0.7) (list \"D\")\n         (< grades 0.0) (list\
    \ \"D-\")]\n        [else (list \"E\")]))\n", "  (let ((total (+ 0.0 (reduce +\
    \ (map grade_equation grades)))))\n    (cond\n      [(<= (- total 0.001) 4.0)\n\
    \       (cond \n         [(< total 3.7)\n          \"A+\"]\n         [(< total\
    \ 3.3)\n          \"A\"]\n         [(< total 3.0)\n          \"A-\"]\n       \
    \  [(< total 2.7)\n          \"B+\"]\n         [(< total 2.3)\n          \"B\"\
    ]\n         [(< total 2.0)\n          \"B-\"]\n         [(< total 1.7)\n     \
    \     \"C+\"]\n         [(< total 1.3)\n          \"C\"]\n         [(< total 1.0)\n\
    \          \"C-\"]\n         [(< total 0.7)\n          \"D+\"]\n         [(< total\
    \ 0.0)\n          \"D\"]\n         [else\n          \"D-\"]\n       ]\n      [else\n\
    \      \"E\"])))", "  (map \n   (lambda (x)\n     (case (< (- x) 3.5)\n      \
    \  (\"A+\" (- x 3.5))\n        (else \"A\" (- x 3.5)))\n     (case (< (- x) 3.0)\n\
    \        (\"B+\" (- x 3.0))\n        (else \"B\" (- x 3.0)))\n     (case (< (-\
    \ x) 2.3)\n        (\"B-\" (- x 2.3))\n        (else \"B\" (- x 2.3)))\n     (case\
    \ (< (- x) 2.7)\n        (\"B-\" (- x 2.7))\n        (else \"B\" (- x 2.7)))\n\
    \     (case (< (- x) 2.0)\n        (\"C+\" (- x 2.0))\n        (else \"C\" (-\
    \ x 2.0)))\n     (case (< (- x) 1.7) \n        (\"C\" (- x 1.7))\n        (else\
    \ \"C\" (- x 1.7)))\n     (case (< (- x) 1.3)\n        (\"C-\" (- x 1.3))\n  \
    \      (else \"C\" (- x 1.3)))\n     (case (< (- x) 1.0)\n        (\"D+\" (- x\
    \ 1.0))\n        (else \"D\" (- x 1.0)))\n     (case (< (- x) 0.7) \n        (\"\
    D\" (- x 0.7))\n        (else \"D\" (- x 0.7)))\n     (case (< (- x) 0.0)\n  \
    \      (\"D-\" (- x 0.0))\n        (else \"D\" (- x 0.0)))\n     (case (< 0.0\
    \ 0.0) \n        (\"E\" (- x 0.0))\n        (else \"E\" (- x 0.0))))\n   grades))\n",
  "  (let loop ((grades grades)\n             (letters '(#\\A+ #\\A #\\A-\n      \
    \                   #\\B+ #\\B #\\B-\n                         #\\C+ #\\C #\\\
    C-\n                         #\\D+ #\\D #\\D-\n                         #\\E+\
    \ #\\E #\\E-\n                         #\\F+ #\\F #\\F-\n                    \
    \     #\\G+ #\\G #\\G-\n                         #\\H+ #\\H #\\H-\n          \
    \               #\\I+ #\\I #\\I+\n                         #\\J+ #\\J #\\J+\n\
    \                         #\\K+ #\\K #\\K+\n                         #\\L+ #\\\
    L #\\L+\n                         #\\M+ #\\M #\\M+\n                         #\\\
    N+ #\\N #\\N+\n                         #\\O+ #\\O #\\O+\n                   \
    \      #\\P+ #\\P #\\P+\n                         #\\Q+ #\\Q #\\Q+\n         \
    \                #\\R+ #\\R #\\R+\n                         #\\S+ #\\S #\\S+\n\
    \                         #\\T+ #\\T #\\T+\n                         #\\U+ #\\\
    U #\\U+\n                         #\\V+ #\\V #\\V+\n                         #\\\
    W+ #\\W #\\W+\n                         #\\X+ #\\X #\\X+\n                   \
    \      #\\Y+ #\\Y #\\Y+\n                         #\\Z+ #\\Z #\\Z+\n         \
    \                #\\0 #\\0 #\\0)\n             (acc '()))\n    (if (null? grades)\n\
    \        (reverse acc)\n        (let ((g (car grades))\n               (g-number\
    \ (floor (- g 4.0) 10)))\n          (loop (cdr grades)\n                (append\
    \ (cons (list g-number letters)\n                              acc)\n        \
    \                (cons (list g-number #\\E+) acc)\n                        (cons\
    \ (list g-number #\\F+) acc)\n                        (cons (list g-number #\\\
    G+) acc)\n                        (cons (list g-number #\\H+) acc)\n         \
    \               (cons (list g-number #\\I+) acc)\n                        (cons\
    \ (list g-number #\\J+) acc)\n", "  (let ((min (first grades))\n        (max (second\
    \ grades))\n        (sum (apply + grades)))\n    (cond ((< min max)\n        \
    \   (list \"E\"))\n          ((<= (quotient sum 100) 100)\n           (list \"\
    D+\"\n                \"A+\"))\n          ((<= (quotient sum 80) 80)\n       \
    \    (list \"D-\"\n                \"A-\"))\n          ((<= (quotient sum 70)\
    \ 70)\n           (list \"B+\"\n                \"B\"))\n          ((<= (quotient\
    \ sum 60) 60)\n           (list \"B-\"\n                \"B-\"))\n          ((<=\
    \ (quotient sum 50) 50)\n           (list \"C+\"\n                \"C\"))\n  \
    \        ((<= (quotient sum 40) 40)\n           (list \"C-\"\n               \
    \ \"C-\"))\n          ((<= (quotient sum 30) 30)\n           (list \"A+\"\n  \
    \              \"A\"))\n          ((<= (quotient sum 20) 20)\n           (list\
    \ \"A-\"\n                \"A-\"))\n          ((<= (quotient sum 10) 10)\n   \
    \        (list \"B+\"\n                \"B\"))\n          ((<= (quotient sum 0)\
    \ 0)\n           (list \"B-\"\n                \"B-\"))\n          ((< sum 0)\n\
    \           (list \"F\"))\n          (else\n           (list \"I\")))))\n</code>\n\
    <|/ a tags=scheme,racket,functional-programming |>\n<| a tags=scheme,racket,functional-programming\
    \ |>\n<code>", "  (cond [(< grades 4.0)\n         (cond [(< grades 3.7)\n    \
    \            (cond [(< grades 3.3)\n                        (cond [(< grades 3.0)\n\
    \                              (cond [(< grades 2.7)\n                       \
    \               (cond [(< grades 2.3)\n                                      \
    \      (cond [(< grades 2.0)\n                                               \
    \     (cond [(< grades 1.7)\n                                                \
    \            (cond [(< grades 1.3)\n                                         \
    \                           (cond [(< grades 1.0)\n                          \
    \                                                (cond [(< grades 0.7)\n     \
    \                                                                         (cond\
    \ [(< grades 0.0)\n                                                          \
    \                          (cons \"E\" \"D-\") \n                            \
    \                                                      else)\n               \
    \                                                             (cons \"D-\" \"\
    D\") \n                                                                      \
    \    else)\n                                                         (cons \"\
    C-\" \"C\") \n                                                      else)\n  \
    \                                               (cons \"B-\" \"B\") \n       \
    \                                       else)\n                              \
    \            (cons \"A-\" \"A\") \n                                        else)\n\
    \                                   (cons \"A+\" \"A\") \n                   \
    \              else)\n                            (cons \"A\" \"A-\") \n     \
    \                      else)\n                       (cons \"A+\" \"A\") \n  \
    \                   else)\n                (cons \"A\" \"A-\") \n            \
    \   else)\n           (cons \"A\" \"A-\") \n          else\n          (cons \"\
    A\" \"A-\") \n         else\n          (cons \"A\" \"A-\") \n       else\n   \
    \       (cons \"A\" \"A-\") \n       ))\n</code>\n<|/ q dscore=2 |>\n<| c |>\n\
    It looks like you are asking us to do your homework for you. Please read about\
    \ [ask] and how to create a [mcve].\n<|/ c |>\n<| c |>\nDo you want to write this\
    \ without using lists, or use lists, and how should the output look like?\n<|/\
    \ c |>\n<| c |>\nI do have to use lists. The output should look exactly like the\
    \ example. Also, what does it mean if I am asking for you to \"do my homework\"\
    ?\n<|/ c |>\n<| c |>\n[This answer](http://stackoverflow.com/a/20348488/849891)\
    \ explains what \"asking for homework help\" is meant to do, and why it should\
    \ not be used.\n<|/ c |>\n<| c |>\nI am sorry but this is my first post, please\
    \ let me know if I need to change anything else. I edited the original post and\
    \ added the code that I wrote, but it gave me an error saying \"(grade_equation\
    \ . . . . . . . . ", "  (let ((g (first grades))\n        (l (rest (first grades))))\n\
    \    (if (< g 3) l\n        (if (< g 2) (cons \"A-\" l)\n            (cons \"\
    B-\" l)\n            (cons \"C+\" l)\n            (cons \"C\" l)\n           \
    \ (cons \"D+\" l)\n            (cons \"D\" l)\n            (cons \"D-\" l)\n \
    \           (cons \"E\" l)\n            (cons \"F\" l)\n            (cons \"F\"\
    \ l)))))\n", "  (if (<= grades 4.0)\n      \"A+\"\n      (if (< grades 3.7)\n\
    \          \"A\"\n          (if (< grades 3.3)\n              \"A-\"\n       \
    \       (if (< grades 3.0)\n                  \"B+\"\n                  (if (<\
    \ grades 2.7)\n                      \"B\"\n                      (if (< grades\
    \ 2.3)\n                          \"B-\"\n                          (if (< grades\
    \ 2.0)\n                              \"C+\"\n                              (if\
    \ (< grades 1.7)\n                                  \"C\"\n                  \
    \                (if (< grades 1.3)\n                                      \"\
    C-\"\n                                      (if (< grades 1.0)\n             \
    \                             \"D+\"\n                                       \
    \   (if (< grades 0.7)\n                                              \"D\"\n\
    \                                              \"D-\"))))))))))\n            \
    \      ))))\n", "  (cond [(< grades 4.0)\n         (char 'A+)]\n        [(< grades\
    \ 3.7)\n         (char 'A)]\n        [(< grades 3.3)\n         (char 'A-)]\n \
    \       [(< grades 3.0)\n         (char 'B+)]\n        [(< grades 2.7)\n     \
    \    (char 'B)]\n        [(< grades 2.3)\n         (char 'B-)]\n        [(< grades\
    \ 2.0)\n         (char 'C+)]\n        [(< grades 1.7)\n         (char 'C)]\n \
    \       [(< grades 1.3)\n         (char 'C-)]\n        [(< grades 1.0)\n     \
    \    (char 'D+)]\n        [(< grades 0.7)\n         (char 'D)]\n        [(< grades\
    \ 0.0)\n         (char 'D-)]\n        [else\n         (char 'E)]\n        (list))",
  "  (cond [(<= grades 3.0)\n         \"A+\" \n         (<= grades 3.7)\n        \
    \ \"A\" \n         (<= grades 3.3)\n         \"A-\" \n         (<= grades 3.0)\n\
    \         \"B+\" \n         (<= grades 2.7)\n         \"B\" \n         (<= grades\
    \ 2.3)\n         \"B-\" \n         (<= grades 2.0)\n         \"C+\" \n       \
    \  \"C\"\n         (<= grades 1.7)\n         \"C\"\n         (<= grades 1.3)\n\
    \         \"C-\"\n         (<= grades 1.0)\n         \"D+\" \n         \"D\" \n\
    \         (<= grades 0.7)\n         \"D-\"\n         \"E\"\n         (else)\n\
    \         \"error\"]\n        (else\n         \"error\"))\n", "  (define (get-letter\
    \ grade i)\n    (if (< grade (/ i 10))\n      (let ([result (substring (list 'A\
    \ 2 3 4 5 6 7 8 9) grade (+ 1 (substring '0 i 1)))]) \n        (cons (string-append\
    \ result (substring (list '+ i 0))) result))\n      (cons grade \"Error\"))) \n\
    \  (map get-letter grades 0))\n", "  (define (find_gpa student_gpa)\n    (let\
    \ ((gpa (if (> student_gpa 4.0) 4.0\n                   (if (> student_gpa 3.7)\
    \ 3.7\n                   (if (> student_gpa 3.3) 3.3\n                   (if\
    \ (> student_gpa 3.0) 3.0\n                   (if (> student_gpa 2.7) 2.7\n  \
    \                 (if (> student_gpa 2.3) 2.3\n                   (if (> student_gpa\
    \ 2.0) 2.0\n                   (if (> student_gpa 1.7) 1.7\n                 \
    \  (if (> student_gpa 1.3) 1.3\n                   (if (> student_gpa 1.0) 1.0))))))))))\n\
    \n  (define (find_grade student_gpa)\n    (let ((gpa (if (> student_gpa 4.0) 4.0\n\
    \                   (if (> student_gpa 3.7) 3.7\n                   (if (> student_gpa\
    \ 3.3) 3.3\n                   (if (> student_gpa 3.0) 3.0\n                 \
    \  (if (> student_gpa 2.7) 2.7\n                   (if (> student_gpa 2.3) 2.3\n\
    \                   (if (> student_gpa 2.0) 2.0\n                   (if (> student_gpa\
    \ 1.7) 1.7\n                   (if (> student_gpa 1.3) 1.3\n                 \
    \  (if (> student_gpa 1.0) 1.0))))))))\n      (if (> gpa 4.0)\n          (cond\
    \ \n            ( (> student_gpa 4.0)\n              (cond \n                (\
    \ (< student_gpa 4.0)\n                  (if (< student_gpa 3.0)\n           \
    \           (cond \n                        ( (< student_gpa 3.0)\n          \
    \                (if (< student_gpa 2.7)\n                              (cond\
    \ \n                                ( (< student_gpa 2.7)\n                  \
    \                (if (< student_gpa 2.0)\n                                   \
    \   (cond \n                                        ( (< student_gpa 2.0)\n  \
    \                                        (if (< student_gpa 1.7)\n           \
    \                                   (cond \n                                 \
    \               ( (< student_gpa 1.7)\n                                      \
    \            (if (< student_gpa 1.0)\n                                       \
    \               (cond \n                                                     \
    \   ( (< student_gpa 1.0)\n                                                  \
    \       (cond \n                                                            (\
    \ (< student_gpa 0.0)\n                                                      \
    \        \"F\")\n                                                            (\
    \ (< student_gpa 0.0)\n                                                      \
    \        \"D-\"))\n                                                        ( (<\
    \ student_gpa 0.0)\n                                                         \
    \ \"C-\"))\n                                                    ( (< student_gpa\
    \ 0.0)\n", "  (define (helper a b)\n    (if (< a b)\n        (list a)\n      \
    \  (list b)))\n  (if (> grades 0)\n      (helper \"A+\" \"A\")\n      (helper\
    \ \"A-\" \"A\")\n      (helper \"B+\" \"B\")\n      (helper \"B-\" \"B\")\n  \
    \    (helper \"C+\" \"C\")\n      (helper \"C-\" \"C\")\n      (helper \"D+\"\
    \ \"D\")\n      (helper \"D-\" \"D\")\n      (helper \"E\" \"E\")))\n", "  (let\
    \ ((letter_grades '()))\n    (if (null? grades)\n        letter_grades\n     \
    \   (if (> (car grades) 0.0)\n            (append (list (car grades))\n      \
    \              (numerical_letter_grade (cdr grades)))))))", "  (cond [(< grades\
    \ (/ 5 2))\n         (cons \"F\" \"A+\")\n         ]\n        [(< grades (/ 5\
    \ 1))\n         (cons \"F\" \"A\")\n         ]\n        [(< grades (/ 5 0))\n\
    \         (cons \"F\" \"B\")\n         ]\n        [(< grades (/ 3 2))\n      \
    \   (cons \"D\" \"B-\")\n         ]\n        [(< grades (/ 3 1))\n         (cons\
    \ \"D\" \"B\")\n         ]\n        [(< grades (/ 3 0))\n         (cons \"D\"\
    \ \"C\")\n         ]\n        [(< grades (/ 2 2))\n         (cons \"C\" \"B-\"\
    )\n         ]\n        [(< grades (/ 2 1))\n         (cons \"C\" \"B\")\n    \
    \     ]\n        [(< grades (/ 2 0))\n         (cons \"C\" \"C\")\n         ]\n\
    \        [(< grades (/ 1 2))\n         (cons \"B\" \"B-\")\n         ]\n     \
    \   [(< grades (/ 1 1))\n         (cons \"B\" \"B\")\n         ]\n        [(<\
    \ grades (/ 1 0))\n         (cons \"B\" \"C\")\n         ]\n        [else\n  \
    \       (cons \"C\" \"D+\")\n         ]\n))\n", "  (define (iter i grades)\n \
    \   (cond [(empty? grades) 'e]\n          [(< i (car grades))\n           (cons\
    \ (car grades)\n                 (iter (add1 (car grades)) (cdr grades)))]\n \
    \         [(> i (car grades))\n           (cons (car grades)\n               \
    \  (iter (add1 (car grades)) (cdr grades)))]\n          [else (iter (add1 (car\
    \ grades)) (cdr grades))]))\n  (iter (car grades) grades))\n", "  (let ((n grades))\n\
    \    (if (not (= n 0.0))\n        (cond ((< n 3.0)\n              (cons \"A+\"\
    \ (cdr grades)))\n              ((< n 3.7)\n               (cons \"A\" (cdr grades)))\n\
    \              ((< n 3.3)\n               (cons \"A\" (cdr grades)))\n       \
    \       ((< n 3.0)\n               (cons \"B+\" (cdr grades)))\n             \
    \ ((< n 3.7)\n               (cons \"B\" (cdr grades)))\n              ((< n 3.3)\n\
    \               (cons \"B\" (cdr grades)))\n              ((< n 3.0)\n       \
    \        (cons \"C+\" (cdr grades)))\n              ((< n 3.7)\n             \
    \  (cons \"C\" (cdr grades)))\n              ((< n 3.3)\n               (cons\
    \ \"C\" (cdr grades)))\n              ((< n 3.0)\n               (cons \"D+\"\
    \ (cdr grades)))\n              ((< n 3.7)\n               (cons \"D\" (cdr grades)))\n\
    \              ((< n 3.3)\n               (cons \"D\" (cdr grades)))\n       \
    \       ((< n 3.0)\n               (cons \"D-\" (cdr grades)))\n             \
    \ ((< n 3.0)\n               (cons \"E\" (cdr grades))))\n        (\"Error\"))))\n",
  "  (let ((result '()))\n    (if (null? grades)\n        result\n        (let ((grade\
    \ (car grades))\n              (points (cadr grades)))\n          (if (< points\
    \ 4.0)\n              (cond ((< points 3.7)\n                      (cond ((< points\
    \ 3.3)\n                             (cond ((< points 3.0)\n                 \
    \                   (cond ((< points 2.7)\n                                  \
    \          (cond ((< points 2.3)\n                                           \
    \         (cond ((< points 2.0)\n                                            \
    \                 (cond ((< points 1.7)\n                                    \
    \                                (cond ((< points 1.3)\n                     \
    \                                                     (cond ((< points 1.0)\n\
    \                                                                            \
    \ (cond ((< points 0.7)\n                                                    \
    \                                 (cond ((< points 0.0)\n                    \
    \                                                                         (cond\
    \ ((< points 0.0)\n                                                          \
    \                                           'E)\n                            \
    \                                                                     (else\n\
    \                                                                            \
    \                         'F))\n                                             \
    \                                                (else\n                     \
    \                                                                            \
    \    'F))\n                                                                  \
    \                           (else\n                                          \
    \                                                           'F))\n           \
    \                                                                            \
    \      (else\n                                                               \
    \                                      'F))\n                                \
    \                                                             (else\n        \
    \                                                                            \
    \                 'F))\n                                                     \
    \                                        (else\n                             \
    \                                                                        'F))\n\
    \                                                                            \
    \                 (else\n                                                    \
    \                                                 'F))\n                     \
    \                                                                        (else\n\
    \                                                                            \
    \                         'F))\n                                             \
    \                                                (else\n                     \
    \                                                                            \
    \    'F))\n                                                                  \
    \                           (else\n                                          \
    \                                                           'F))\n           \
    \                                                      (else\n               \
    \                                                                            \
    \          'F))\n                             (else\n                        \
    \            (cond ((< points 3.0)\n                                         \
    \   (cond ((< points 2.7)\n                                                  \
    \  (cond ((< points 2.3)\n                                                   \
    \          (cond ((< points 2.0)\n                                           \
    \                         (cond ((< points 1.7)\n                            \
    \                                              (cond ((< points 1.3)\n       \
    \                                                                      (cond ((<\
    \ points 1.0)\n                                                              \
    \                       (cond ((< points 0.7)\n                              \
    \                                                               (cond ((< points\
    \ 0.0)\n                                                                     \
    \                                'E)\n                                       \
    \                                                          (else\n           \
    \                                                                            \
    \              'F))\n                                                        \
    \                                     (else\n                                \
    \                                                                     'F))\n \
    \                                                                            \
    \                (else\n                                                     \
    \                                                'F))\n                      \
    \                                                                       (else\n\
    \                                                                            \
    \                         'F))\n                                             \
    \                                                (else\n                     \
    \                                                                            \
    \    'F))\n                                                                  \
    \                           (else\n                                          \
    \                                                           'F))\n           \
    \                                                                            \
    \      (else\n                                                               \
    \                                      'F))\n                                \
    \                                 (else\n                                    \
    \                                                                 'F))\n     \
    \                        (else\n                                    (cond ((<\
    \ points 3.0)\n                                            (cond ((< points 2.7)\n\
    \                                                    (cond ((< points 2.3)\n \
    \                                                            (cond ((", "  (let\
    \ ((letter (car grades)))\n    (cond [(< grade 4.0) 'A+]\n          [(< grade\
    \ 3.7) (if (> grade 3.3) 'A 'A- 'A)]\n          [(< grade 3.3) 'A-]\n        \
    \  [(< grade 3.0) 'B+]\n          [(< grade 2.7) (if (> grade 2.3) 'B 'B-)   'B]\n\
    \          [(< grade 2.3) 'B-]\n          [(< grade 2.0) 'C+]\n          [(< grade\
    \ 1.7) (if (> grade 1.3) 'C 'C-   'C]\n          [(< grade 1.3) 'C-]\n       \
    \   [(< grade 1.0) 'D+]\n          [(< grade 0.7) (if (> grade 1.0) 'D 'D-   'D]\n\
    \          [(< grade 0.0) 'D-]\n          [else 'E]))", "  (let ([lowest (car\
    \ grades)\n         highest (cadr grades)])\n    (cond [(< highest lowest) \"\
    D-\"]\n          [(< highest 2.0) \"D+\"]\n          [(< highest 1.7) \"D\"]\n\
    \          [(< highest 1.0) \"C+\"]\n          [(< highest 0.7) \"C\"]\n     \
    \     [(< highest 0.4) \"C\"]\n          [(< highest 0.3) \"C-\"]\n          [(<\
    \ highest 0.2) \"C+\"]\n          [(< highest 0.7) \"B\"]\n          [(< highest\
    \ 0.6) \"B+\"]\n          [(< highest 0.5) \"B\"]\n          [(< highest 0.4)\
    \ \"B-\"]\n          [(< highest 0.3) \"B+\"]\n          [(< highest 0.2) \"B\"\
    ]\n          [(< highest 0.9) \"B-\"]\n          [(< highest 0.8) \"B-\"]\n  \
    \        [(< highest 0.7) \"A-\"]\n          [(< highest 0.6) \"A+\"]\n      \
    \    [(< highest 0.5) \"A\"]\n          [(< highest 0.4) \"A+\"]\n          [(<\
    \ highest 0.3) \"A\"]\n          [(< highest 0.2) \"A+\"]\n          [(< highest\
    \ 0.1) \"A\"]\n          [(< highest 0.05) \"A+\"]\n          [(< highest 0.02)\
    \ \"A\"]\n          [(< highest 0.01) \"A\"]\n          [(< highest 0.001) \"\
    A-\"]\n          [(< highest 0.001) \"A\"]\n          [(< highest 0.0001) \"A\"\
    ]\n          [(< highest 0.00001) \"A\"]\n          [(< highest 0.000001) \"A\"\
    ]\n          [(< highest 0.0000001) \"A\"]\n          [(< highest 0.00000001)\
    \ \"A\"]\n          [(< highest 0.000000001) \"A\"]\n          [(< highest 0.0000000001)\
    \ \"A\"]\n          [(< highest 0.00000000001) \"A\"]\n          [(< highest 0.000000000001)\
    \ \"A\"]\n          [(< highest 0.0000000000001) \"A\"]\n          [(< highest\
    \ 0.000000000000001) \"A\"]\n          [(< highest 0.0000000000000001) \"A\"]\n\
    \          [(< highest 0.00000000000000001) \"A\"]\n          [(< highest 0.000000000000000001)\
    \ \"A\"]\n          [(< highest 0.0000000000000000001) \"A\"]\n          [(< highest\
    \ 0.00000000000000000001) \"A\"]\n          [(< highest 0.000000000000000000001)\
    \ \"A\"]\n          [(< highest 0.00000000000000000000001) \"A\"]\n          [(<\
    \ highest 0.000000000000000000000001) \"A\"]\n          [(< highest ", "  (let\
    \ loop ((i 0))\n    (cond\n      ((empty? grades) '())\n      ((<= (car grades)\
    \ 1.0) (cons (char 'A) (loop (add1 i))))\n      ((<= (car grades) 2.0) (cons (char\
    \ 'B) (loop (add1 i))))\n      ((<= (car grades) 3.0) (cons (char 'C) (loop (add1\
    \ i))))\n      ((<= (car grades) 4.0) (cons (char 'D) (loop (add1 i))))\n    \
    \  ((<= (car grades) 5.0) (cons (char 'E) (loop (add1 i))))\n      (else '()))\n\
    \    (reverse (cons (char (string-append \"+\" (char-code (car grades))))\n  \
    \                (loop (add1 i))))))\n", "  (let ([p (lambda (n) \n          \
    \  (cond\n              [(< n 3.0)  \"B-\"]\n              [(< n 3.70)  \"B-\"\
    ]\n              [(< n 4.0)  \"B-\"]\n              [(< n 4.50)  \"B-\"]\n   \
    \           [(< n 5.0)  \"B-\"]\n              [(< n 5.00)  \"B-\"]\n        \
    \      [(< n 5.50)  \"B-\"]\n              [(< n 5.75)  \"B-\"]\n            \
    \  [(< n 6.0)  \"B-\"]\n              [(< n 6.50)  \"B-\"]\n              [(<\
    \ n 6.75)  \"B-\"]\n              [(< n 7.0)  \"B-\"]\n              [(< n 7.50)\
    \  \"B-\"]\n              [(< n 7.75)  \"B-\"]\n              [(< n 8.0)  \"B-\"\
    ]\n              [(< n 8.50)  \"B-\"]\n              [(< n 8.75)  \"B-\"]\n  \
    \            [(< n 9.0)  \"B-\"]\n              [(< n 9.50)  \"B-\"]\n       \
    \       [(< n 9.75)  \"B-\"]\n              [(< n 10.0)  \"B-\"]\n           \
    \   [(< n 10.50)  \"B-\"]\n              [(< n 10.75)  \"B-\"]\n             \
    \ [(< n 11.0)  \"B-\"]\n              [(< n 11.50)  \"B-\"]\n              [(<\
    \ n 11.75)  \"B-\"]\n              [(< n 12.0)  \"B-\"]\n              [(< n 12.50)\
    \  \"B-\"]\n              [(< n 12.75)  \"B-\"]\n              [(< n 13.0)  \"\
    B-\"]\n              [(< n 13.50)  \"B-\"]\n              [(< n 13.75)  \"B-\"\
    ]\n              [(< n 14.0)  \"B-\"]\n              [(< n 14.50)  \"B-\"]\n \
    \             [(< n 14.75)  \"B-\"]\n              [(< n 15.0)  \"B-\"]\n    \
    \          [(< n 15.50)  \"B-\"]\n              [(< n 15.75)  \"B-\"]\n      \
    \        [(< n 16.0)  \"B-\"]\n              [(< n 16.50)  \"B-\"]\n         \
    \     [(< n 16.75)  \"B-\"]\n              [(< n 17.0)  \"B-\"]\n            \
    \  [(< n 17.50)  \"B-\"]\n              [(< n 17.75)  \"B-\"]\n              [(<\
    \ n 18.0)  \"B-\"]\n              [(< n 18.50)  \"B-\"]\n              [(< n 18.75)\
    \  \"B-\"]\n              [(< n 19.0)  \"B-\"]\n              [(< n 19.50)  \"\
    B-\"]\n              [(< n 19.75)  \"B-\"]", "  (cond [(< (car grades) 4.0)\n\
    \         (concat (numerical_letter_grade (cdr grades)) \"A+\")\n         ]\n\
    \        [(< 4.0 4.0)\n         (concat (numerical_letter_grade (cdr grades))\
    \ \"A\")\n         ]\n        [(< 4.0 3.7)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"A-\")\n         ]\n        [(< 3.7 3.3)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"A\")\n         ]\n        [(< 3.3 3.0)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"B+\")\n         ]\n        [(< 3.0 2.7)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"B\")\n         ]\n        [(< 2.7 2.3)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"B-\")\n         ]\n        [(< 2.3 2.0)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"C+\")\n         ]\n        [(< 2.0 1.7)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"C\")\n         ]\n        [(< 1.7 1.3)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"C-\")\n         ]\n        [(< 1.3 1.0)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"D+\")\n         ]\n        [(< 1.0 0.7)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"D\")\n         ]\n        [(< 0.7 0.0)\n         (concat (numerical_letter_grade\
    \ (cdr grades)) \"D-\")\n         ]\n        [else (concat (numerical_letter_grade\
    \ (cdr grades)) \"E\")]))\n", "  (cond\n    [(< grades 0) \"E\"]\n    [(< grades\
    \ 1) \"D-\"]\n    [(< grades 2) \"D\"]\n    [(< grades 3) \"C-\"]\n    [(< grades\
    \ 4) \"C\"]\n    [(< grades 5) \"B+\"]\n    [(< grades 6) \"B\"]\n    [(< grades\
    \ 7) \"B-\"]\n    [(< grades 8) \"B\"]\n    [(< grades 9) \"A+\"]\n    [(< grades\
    \ 10) \"A\"]\n    [(< grades 11) \"A-\"]\n    [(< grades 12) \"A\"]\n    [else\
    \ \"A+\"]))\n", "  (cond [(< grades 3.0)  \"A+\"]\n        [(< grades 3.7) \"\
    A\"]\n        [(< grades 3.3) \"A-\"]\n        [(< grades 2.0)  \"B+\"]\n    \
    \    [(< grades 2.7) \"B\"]\n        [(< grades 2.3) \"B-\"]\n        [(< grades\
    \ 1.7) \"C+\"]\n        [(< grades 1.3) \"C\"]\n        [(< grades 1.0)  \"D+\"\
    ]\n        [(< grades 0.7) \"D\"]\n        [(< grades 0.0) \"D-\"]\n        [else\
    \             \"E\"]))\n", "  (define (grade-letter grade letter)\n    (cond\n\
    \      [(<= grade 4.0) letter + '+]\n      [(< grade 3.7) letter +]\n      [(<\
    \ grade 3.3) letter - ]\n      [(< grade 3.0) letter +'-]\n      [(< grade 2.7)\
    \ letter + '+]\n      [(< grade 2.3) letter +]\n      [(< grade 2.0) letter +'-]\n\
    \      [(< grade 1.7) letter +]\n      [(< grade 1.3) letter -]\n      [(< grade\
    \ 1.0) letter +'-]\n      [(< grade 0.7) letter +]\n      [(< grade 0.0) letter\
    \ +]\n      [else letter -]))\n  (map (lambda (grade) grade-letter grade 'A))\n\
    </code>\n<|/ q tags=racket,scheme |>\n<| c |>\nYour code looks like a homework\
    \ assignment. Why not ask your teacher for some help on StackOverflow? If your\
    \ teacher doesn't want to help you, you'll have to do without help from StackOverflow\
    \ as much as possible. Since you've already shown her that you've not been able\
    \ to solve the problem, this isn't really a programming question, just a simple\
    \ homework assignment. Also, I'd suggest you try and solve this problem yourself\
    \ before asking here.\n<|/ c |>\n<| c |>\nThanks for your input. I'm sorry I didn't\
    \ know that if there are such things as homework assignment and no one can answer\
    \ my question without help, how can anyone answer this question here without help?\n\
    <|/ c |>\n<| c |>\nI never said that there was an absolute requirement to solve\
    \ this question without help, I said that if I was to try to solve this question\
    \ without help, the only way I would do it would involve a lot of guesswork. Since\
    \ you obviously have no idea how to solve this problem, I don't think posting\
    \ the problem to StackOverflow would help you.\n<|/ c |>\n<| c |>\nOK, I understand.\
    \ I thought that if I was to solve this question without help, it would be a waste\
    \ of time. Anyway thanks for your help. I'm really sorry for wasting your time.\n\
    <|/ c |>\n<| a |>\nThis should be pretty easy to solve, let me just give you some\
    \ hints:\n\nYour \"list of GPA\" should be a list of numbers not characters.\n\
    For each number in your list, you need a function that gives you a grade.\nThen\
    \ you need a function that maps a grade ", "  (cond\n    [(< grades 0) \"\"]\n\
    \    [(< grades 3.0) \"A+\"]\n    [(< grades 3.7) \"A\"]\n    [(< grades 3.3)\
    \ \"A-\"]\n    [(< grades 3.7) \"B\"]\n    [(< grades 3.3) \"B-\"]\n    [(< grades\
    \ 3.0) \"C+\"]\n    [(< grades 2.7 \"C\"]\n    [(< grades 2.3 \"C-\"]\n    [(<\
    \ grades 2.7 \"D\"]\n    [(< grades 2.3 \"D-\"]\n    [(< grades 2.7 \"E\"]\n \
    \   [(< grades 2.3 \"E-\"]\n    [(< grades 2.7 \"F\"]\n    [(< grades 2.3 \"F-\"\
    ]\n    [(< grades 2.7 \"G\"]\n    [(< grades 2.3 \"G-\"]\n    [(< grades 2.7 \"\
    H\"]\n    [(< grades 2.3 \"H-\"]\n    [else \"F\"]\n  )\n))\n", "  (let* ((min-gpa\
    \ (min grades \n                       (lambda (gpa) (/ (- gpa 100) 4.0)))\n \
    \        (max-gpa (max grades \n                       (lambda (gpa) (/ (- gpa\
    \ 100) 4.0)))))\n    (cond\n      [(< min-gpa 0.0)\n       (cond [(< max-gpa 0.0)\n\
    \              (list (string-append \"E\" \"-\"))]\n             [else\n     \
    \         (list \"F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F\")]))\n\
    \      [(> max-gpa 0.0)\n       (cond [(< min-gpa 0.0)\n              (list \"\
    F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F\")] \n             [else\n\
    \              (list \"F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F\"\
    )])]\n      [(< min-gpa 0.0)\n       (cond [(< max-gpa 0.0)\n              (list\
    \ \"F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F\")] \n             [else\n\
    \              (list \"F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F-\" \"F\" \"F\"\
    )])]\n      [else\n       (cond [(> min-gpa 0.0)\n              (list (string-append\
    \ \"F-\" \"F\"))]\n             [else\n              (list (string-append \"F-\"\
    \ \"F\" \"F-\" \"F\" \"F\" \"F-\" \"F\" \"F\" \"F\")])]))))\n", "  (cond [(>=\
    \ grades 0.0) 'D-]\n        [(>= grades 0.3) 'C-]\n        [(>= grades 0.7) 'B-]\n\
    \        [(>= grades 1.0) 'B-]\n        [(< grades 1.3) 'A-]\n        [(< grades\
    \ 1.7) 'A-]\n        [(< grades 2.0) 'A-]\n        [(< grades 2.3) 'A-]\n    \
    \    [(< grades 2.7) 'A-]\n        [(< grades 3.0) 'A-]\n        [(< grades 3.3)\
    \ 'A-]\n        [(< grades 3.7) 'A-]\n        [(< grades 4.0) 'A-]\n        [(<\
    \ grades 4.3) 'A-]\n        [(< grades 4.7) 'A-]\n        [(< grades 5.0) 'A-]\n\
    \        [(< grades 5.3) 'A-]\n        [(< grades 5.7) 'A-]\n        [else 'A+]))\n",
  "  (cond [(< grades 4.0) \"A+\"]\n        [(< grades 3.7) \"A\"]\n        [(< grades\
    \ 3.3) \"A-\"]\n        [(< grades 3.0) \"B+\"]\n        [(< grades 2.7) \"B\"\
    ]\n        [(< grades 2.3) \"B-\"]\n        [(< grades 2.0) \"C+\"]\n        [(<\
    \ grades 1.7) \"C\"]\n        [(< grades 1.3) \"C-\"]\n        [(< grades 1.0)\
    \ \"D+\"]\n        [(< grades 0.7) \"D\"]\n        [(< grades 0.0) \"D-\"]\n \
    \       [else \"E\"]))\n", "  (define (next-grade grades)\n    (if (null? grades)\n\
    \        'E\n        (let* ((grade (car grades))\n              (next-grades (cdr\
    \ grades)))\n          (if (< grade 3.0)\n              (if (< grade 2.7)\n  \
    \                (if (< grade 1.7)\n                      (if (< grade 0.7)\n\
    \                          (if (< grade 0.0)\n                              (grade\
    \ \"B+\")\n                              \"B\")\n                          \"\
    B-\")\n                    \"B\")\n                \"B-\")\n              \"B\"\
    )\n          \"B-\")\n      \"B\")\n    (if (< grades 4.0)\n        (if (< grades\
    \ 3.7)\n            (if (< grades 3.3)\n                (if (< grades 3.0)\n \
    \                   (if (< grades 2.7)\n                        (if (< grades\
    \ 2.3)\n                            (if (< grades 2.0)\n                     \
    \           (grades \"C+\")\n                                \"C\")\n        \
    \                    \"C-\")\n                        \"C\")\n               \
    \     \"C-\")\n                \"C\")\n            \"C-\")\n        \"C\")\n \
    \   \"C-\")\n  (let ((grade-sum (+ grades (car grades))))\n    (if (< grade-sum\
    \ (/ 4.0 grade-sum))\n        (if (< grade-sum (/ 3.7 grade-sum))\n          \
    \  (if (< grade-sum (/ 3.3 grade-sum))\n                (if (< grade-sum (/ 3.0\
    \ grade-sum))\n                    (if (< grade-sum (/ 2.7 grade-sum))\n     \
    \                   (if (< grade-sum (/ 2.3 grade-sum))\n                    \
    \        (if (< grade-sum (/ 2.0 grade-sum))\n                               \
    \ (grades \"A+\")\n                                \"A\")\n                  \
    \          \"A-\")\n                        \"A\")\n                    \"A-\"\
    )\n                \"A\")\n            \"A-\")\n        \"A\")\n    \"A-\")\n\
    \  (let ((grade-sum (+ grades (cdr grades))))\n    (if (< grade-sum (/ 4.0 grade-sum))\n\
    \        (if (< grade-sum (/ 3.7 grade-sum))\n            (if (< grade-sum (/\
    \ 3.3 grade-sum))\n                (if (< grade-sum (/ 3.0 grade-sum))\n     \
    \               (if (< grade-sum (/ 2.7 grade-sum))\n                        (if\
    \ (< grade-sum (/ 2.3 grade-sum))\n                            (if (< grade-sum\
    \ (/ 2.0 grade-sum))\n                                (grades \"A+\")\n      \
    \                          \"A\")\n                            \"", "  (if (null?\
    \ grades)\n      '(\"\")\n      (cons (if (>= (first grades) 4.0) \"A+\" \n  \
    \             (if (>= (first grades) 3.7) \"A\" \n                  (if (>= (first\
    \ grades) 3.3) \"A-\"\n                      (if (>= (first grades) 3.0) \"B+\"\
    \ \n                          (if (>= (first grades) 2.7) \"B\" \n           \
    \                   (if (>= (first grades) 2.3) \"B-\"\n                     \
    \             (if (>= (first grades) 2.0) \"C+\" \n                          \
    \            (if (>= (first grades) 1.7) \"C\"\n                             \
    \             (if (>= (first grades) 1.3) \"C-\"\n                           \
    \                   (if (>= (first grades) 1.0) \"D+\" \n                    \
    \                              (if (>= (first grades) 0.7) \"D\" \n          \
    \                                            (if (>= (first grades) 0.0) \"D-\"\
    \n                                                          (if (>= (first grades)\
    \ 0) \"E\"\n                                                              (error\
    \ \"Error: invalid grades\")))))))) ))))))\n", "  (if (null? grades)\n      \"\
    E\"\n      (let ([numerator (car grades)]\n            [denominator (cadr grades)])\n\
    \        (string->list (- numerator denominator)))))\n", "  (let ((letters (loop\
    \ for grade in grades \n                      collect (case-if (> grade 0.0) (<\
    \ grade 1.0) \"A\") \n                             [< 0.7 . \"D\"] [< 0.3 . \"\
    C\"] [< 0.0 . \"B\"] \n                             [< 0.0 . \"B+\"] [< 0.7 .\
    \ \"B\"] [< 1.0 . \"A+\"]\n                             [> 1.0 . \"A\"] [> 0.7\
    \ . \"A\"] [> 0.3 . \"A-\"] \n                             [> 0.0 . \"E\"] ))))\n\
    \    (string-append (first letters) (map string-append (rest letters)) \"\")))\n",
  "  \n  ;; This list is the same as above, except it includes the letter grades A-,D+\
    \ and D-\n  (define grades_plus_minus_list \n    '((4.0\n      (list \"A+\" \"\
    B\" \"C\" \"C\" \"A-\")\n      (list \"A-\" \"B-\" \"C+\" \"D+\" \"D-\")\n   \
    \   (list \"B-\" \"C-\" \"D+\" \"D+\" \"B-\")\n      (list \"C-\" \"D+\" \"D+\"\
    \ \"D+\" \"C-\")\n      (list \"D+\" \"D+\" \"D+\" \"D+\" \"D+\")\n      (list\
    \ \"D-\" \"D-\" \"D-\" \"D-\" \"D-\")\n      (list \"D+\" \"D-\" \"D+\" \"D-\"\
    \ \"D+\")\n      (list \"D-\" \"D-\" \"D+\" \"D+\" \"D-\")\n      (list \"D-\"\
    \ \"D+\" \"D+\" \"D-\" \"D-\")\n      (list \"D-\" \"D-\" \"D-\" \"D-\" \"D-\"\
    )\n      (list \"D+\" \"D+\" \"D+\" \"D-\" \"D+\")\n      (list \"D+\" \"D-\"\
    \ \"D+\" \"D-\" \"D-\")))\n      \n  ;; This list is the same as above, except\
    \ it includes the letter grades A-,B+ and B-\n  (define grades_minus_plus_list\n\
    \    '((4.0\n      (list \"A+\" \"A-\" \"B+\" \"B\" \"B-\")\n      (list \"A-\"\
    \ \"A-\" \"B-\" \"B+\" \"B+\")\n      (list \"B-\" \"B-\" \"B+\" \"B+\" \"B-\"\
    )\n      (list \"B+\" \"B+\" \"B+\" \"B-\" \"B+\")\n      (list \"B+\" \"B-\"\
    \ \"B-\" \"B-\" \"B-\")\n      (list \"B-\" \"B-\" \"B-\" \"B-\" \"B-\")\n   \
    \   (list \"B+\" \"B+\" \"B+\" \"B+\" \"B+\")\n      (list \"B+\" \"B+\" \"B+\"\
    \ \"B-\" \"B-\")\n      (list \"B+\" \"B+\" \"B+\" \"B+\" \"B-\")\n      (list\
    \ \"B-\" \"B-\" \"B+\" \"B-\" \"B+\")\n      (list \"B-\" \"B+\" \"B-\" \"B-\"\
    \ \"B+\")\n      (list \"B+\" \"B-\" \"B-\" \"B-\" \"B+\")))\n      \n  (define\
    \ grades_list \n    (if (and (< grades 3.0)\n            (< (quotient grades 3.0)\
    \ 2.0))\n      grades_plus_minus_", "  (define (helper gpa letter)\n    (cond\
    \ [(< gpa 0)\n           \"E\"]\n          [(< gpa 4)\n           (cond [(< gpa\
    \ 3)\n                  \"D\"]\n                [(< gpa 2.7)\n               \
    \  \"C\"]\n                [(< gpa 2.3)\n                 \"B-\"]\n          \
    \      [(< gpa 2.0)\n                 \"B-\"]\n                [(< gpa 1.7)\n\
    \                 \"B\"]\n                [(< gpa 1.3)\n                 \"B\"\
    ]\n                [(< gpa 1.0)\n                 \"B\"]\n                [(<\
    \ gpa 0.7)\n                 \"B\"]\n                [(< gpa 0.0)\n          \
    \       \"B\"]\n                [(< gpa -0.7)\n                 \"B\"]\n     \
    \           [(< gpa -0.3)\n                 \"B+\"]\n                [(< gpa -0.1)\n\
    \                 \"B-\"]\n                [(< gpa 0.3)\n                 \"B-\"\
    ]\n                [(< gpa 0.1)\n                 \"B-\"]\n                [(<\
    \ gpa -0.3)\n                 \"B-\"]\n                [(< gpa -0.1)\n       \
    \          \"B+\"]\n                [(< gpa 0.1)\n                 \"B+\"]\n \
    \               [(< gpa 0.3)\n                 \"B+\"]\n                [(< gpa\
    \ 0.5)\n                 \"B-\"]\n                [(< gpa 0.7)\n             \
    \    \"B-\"]\n                [(< gpa 1.0)\n                 \"B-\"]\n       \
    \         [(< gpa 1.3)\n                 \"B+\"]\n                [(< gpa 1.7)\n\
    \                 \"B+\"]\n                [(< gpa 2.0)\n                 \"B+\"\
    ]\n                [(< gpa 2.3)\n                 \"B+\"]\n                [(<\
    \ gpa 2.7)\n                 \"B+\"]\n                [(< gpa 3.0)\n         \
    \        \"B-\"]\n                [(< gpa 3.3)\n                 \"B+\"]\n   \
    \             [(< gpa 3.7)\n                 \"B+\"]\n                [(< gpa\
    \ 4.0)\n                 \"B+\"]\n                [(< gpa 4.3)\n             \
    \    \"B+\"]\n                [(< gpa 4.7)\n                 \"B+\"]\n       \
    \         [(< gpa 5.0)\n                 \"B-\"]\n                [(< gpa 5.3)\n\
    \                 \"B+\"]\n                [(< gpa 5.7)\n                 \"B+\"\
    ]\n                [(< gpa 6.0)\n                 \"B-\"]\n                [(<\
    \ gpa 6.3)\n                 \"B-\"]\n                [(< gpa 6.7)\n         \
    \        \"B-\"]\n                [(< gpa 7.0)\n                 \"B-\"]\n   \
    \             [(< gpa 7.", "  (if (and (>= grades 4.0)\n           (< grades 4.0))\n\
    \      \"A+\"\n      (if (> grades 3.7)\n          \"A\"\n          (if (> grades\
    \ 3.3)\n              \"A-\"\n              (if (> grades 3.0)\n             \
    \     \"B+\"\n                  (if (> grades 2.7)\n                      \"B\"\
    \n                      (if (> grades 2.3)\n                          \"B-\"\n\
    \                          (if (> grades 2.0)\n                              \"\
    C+\"\n                              (if (> grades 1.7)\n                     \
    \             \"C\"\n                                  (if (> grades 1.3)\n  \
    \                                    \"C-\"\n                                \
    \      (if (> grades 1.0)\n                                          \"D+\"\n\
    \                                          \"D\")))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))\n                              ))\n                        \
    \      ))\n                              ))\n                              ))\n\
    \                              ))\n                              ))\n        \
    \                      ))\n                              ))\n                \
    \              ))", "  (cond ((< grades 3.0) (list \"A+\"))\n        ((< grades\
    \ 3.3) (list \"A-\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B-\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B-\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B-\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B-\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B-\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+\"))\n        ((< grades\
    \ 3.7) (list \"B+\"))\n        ((< grades 3.7) (list \"B+", "  (cond [(< grades\
    \ 4.0)\n         (cond [(>= grades 3.7)\n                (cond [(>= grades 3.3)\n\
    \                      (cond [(>= grades 3.0)\n                             (cond\
    \ [(>= grades 2.7)\n                                    (cond [(>= grades 2.3)\n\
    \                                          (cond [(>= grades 2.0)\n          \
    \                                        (cond [(>= grades 1.7)\n            \
    \                                          (cond [(>= grades 1.3)\n          \
    \                                                   (cond [(>= grades 1.0)\n \
    \                                                                  (cond [(>=\
    \ grades 0.7)\n                                                              \
    \        (cond [(>= grades 0.0)\n                                            \
    \                             \"E\"])\n                                      \
    \                               (else\n                                      \
    \                               (cond [(>= grades 0.0)\n                     \
    \                                                       \"F\"])\n            \
    \                                                         (else\n            \
    \                                                         (cond [(>= grades 0.0)\n\
    \                                                                            \"\
    F\"])\n                                                                     (else\n\
    \                                                                     (cond [(>=\
    \ grades 0.0)\n                                                              \
    \              \"F\"])\n                                                     \
    \                (else\n                                                     \
    \                (cond [(>= grades 0.0)\n                                    \
    \                                        \"F\"])\n                           \
    \                                          (else\n                           \
    \                                          (cond [(>= grades 0.0)\n          \
    \                                                                  \"F\"])\n \
    \                                                                    (else\n \
    \                                                                    (cond [(>=\
    \ grades 0.0)\n                                                              \
    \              \"F\"])\n                                                     \
    \                (else\n                                                     \
    \                \"F\")])])])])])]\n                  [(>= grades 3.0)\n     \
    \              (cond [(>= grades 2.7)\n                          (cond [(>= grades\
    \ 2.3)\n                                 (cond [(>= grades 2.0)\n            \
    \                             (cond [(>= grades 1.7)\n                       \
    \                         (cond [(>= grades 1.3)\n                           \
    \                           (cond [(>= grades 1.0)\n                         \
    \                                      (cond [(>= grades 0.7)\n              \
    \                                                        (cond [(>= grades 0.0)\n\
    \                                                                         \"E\"\
    ])\n                                                                      (else\n\
    \                                                                         (cond\
    \ [(>= grades 0.0)\n                                                         \
    \                     \"F\"])\n                                              \
    \                        (else\n                                             \
    \                            \"F\")])])])])]\n                          [(>= grades\
    \ 2.3)\n                           (cond [(>= grades 2.0)\n                  \
    \                (cond [(>= grades 1.7)\n                                    \
    \      (cond [(>= grades 1.3)\n                                              \
    \    (cond [(>= grades 1.0)\n                                                \
    \            (cond [(>= grades 0.7)\n                                        \
    \                          (cond [(>= grades 0.0)\n                          \
    \                                             (\"E\")])\n                    \
    \                                              (else\n                       \
    \                                            (cond [(>= grades 0.0)\n        \
    \                                                                 \"F\"])\n  \
    \                                                                (else\n     \
    \                                                             ", "  (cond\n  \
    \  [(> (first grades) 4.0) \"A+\"]\n    [(> (first grades) 3.7 \"A\")\n     (cond\
    \ [(< (first grades) 3.3) \"A- \"]\n           [else \"A\"])]\n    [(> (first\
    \ grades) 3.3) \"A- \"]\n    [(> (first grades) 3.0) \"B+\"]\n    [(> (first grades)\
    \ 2.7 \"B\")\n     (cond [(< (first grades) 2.3) \"B- \"]\n           [else \"\
    B\"])]\n    [(> (first grades) 2.3) \"B- \"]\n    [(> (first grades) 2.0) \"C+\"\
    ]\n    [(> (first grades) 1.7) \"C\"]\n    [(> (first grades) 1.3) \"C-\"]\n \
    \   [(> (first grades) 1.0) \"D+\"]\n    [(> (first grades) 0.7) \"D\"]\n    [else\
    \ \"D-\"]\n    [else \"E\"]))\n", "  (cond [(< grades 0) \"E\"]\n        [(> grades\
    \ 0) (if (< grades 7) \"A+\" (if (< grades 3) \"A-\" \n                      \
    \                (if (< grades 3) \"A\" \n                                   \
    \      (if (< grades 7) \"B+\" (if (< grades 6) \"B\" \n                     \
    \                                   (if (< grades 5) \"B-\" \n               \
    \                                           (if (< grades 4) \"C+\" (if (< grades\
    \ 3) \"C\" \n                                                                \
    \                        (if (< grades 7) \"D+\" (if (< grades 6) \"D\" \n   \
    \                                                                            \
    \                                          \"\")))))))))]))\n", "  (cond\n   \
    \ [(< grades 1) \"E\"]\n    [(< grades 2) \"D-\"]\n    [(< grades 3) \"D+\"]\n\
    \    [(< grades 4) \"B-\"]\n    [(< grades 5) \"B+\"]\n    [(< grades 6) \"B-\"\
    ]\n    [(< grades 7) \"C+\"]\n    [(< grades 8) \"C\"]\n    [(< grades 9) \"C-\"\
    ]\n    [(< grades 10) \"C\"]\n    [(< grades 11) \"B-\"]\n    [(< grades 12) \"\
    B+\"]\n    [(< grades 13) \"B-\"]\n    [(< grades 14) \"C+\"]\n    [(< grades\
    \ 15) \"C\"]\n    [(< grades 16) \"C-\"]\n    [(< grades 17) \"C\"]\n    [(< grades\
    \ 18) \"B-\"]\n    [(< grades 19) \"B+\"]\n    [(< grades 20) \"B-\"]\n    [else\
    \ \"A+\"]\n    ))\n", "  (cond [(< grades 4.0) (list \"A+\")]\n        [(= grades\
    \ 4.0) (list \"A\")]\n        [(= grades 3.7) (list \"A-\")]\n        [(= grades\
    \ 3.3) (list \"A\")]\n        [(= grades 3.0) (list \"B+\")]\n        [(= grades\
    \ 2.7) (list \"B\")]\n        [(= grades 2.3) (list \"B-\")]\n        [(= grades\
    \ 2.0) (list \"C+\")]\n        [(= grades 1.7) (list \"C\")]\n        [(= grades\
    \ 1.3) (list \"C-\")]\n        [(= grades 1.0) (list \"D+\")]\n        [(= grades\
    \ 0.7) (list \"D\")]\n        [(< grades 0.0) (list \"D-\")]\n        [else (list\
    \ \"E\")]))", "  (define (helper x y grades)\n    (cond [(< y 0) 'E]\n       \
    \   [(< x 0) 'D]\n          [(< x y) (cond [(> x 0) (cons x (helper 0 y grades))]\n\
    \                        [(> x y) 'E])]\n          [(> y x) 'D]\n          [else\
    \ (cons x (helper x (- y x) grades))]))\n  (helper grades (length grades) grades))\n",
  "  (define (helper x y z)\n    (cond [(> x y) 'D-]\n          [(< x y) 'D+]\n  \
    \        [(< x y) 'C-]\n          [(< x y) 'B+]\n          [(< x y) 'B]\n    \
    \      [(< x y) 'B-]\n          [(< x y) 'A-]\n          [(< x y) 'A+]\n     \
    \     [(< x y) 'A]\n          [(< x y) 'A+]\n          [(< x y) 'C]\n        \
    \  [(< x y) 'C+]\n          [(< x y) 'B]\n          [(< x y) 'B+]\n          [(<\
    \ x y) 'A]\n          [(< x y) 'A+]\n          [(< x y) 'A]\n          [(< x y)\
    \ 'A-]\n          [(< x y) 'A+]\n          [(< x y) 'B]\n          [(< x y) 'B+]\n\
    \          [(< x y) 'B]\n          [(< x y) 'B+]\n          [(< x y) 'A]\n   \
    \       [(< x y) 'A+]\n          [(< x y) 'A]\n          [(< x y) 'A+]\n     \
    \     [(< x y) 'A]\n          [(< x y) 'A]\n          [(< x y) 'A]\n         \
    \ [(< x y) 'A]\n          [(< x y) 'B]\n          [(< x y) 'B+]\n          [(<\
    \ x y) 'B]\n          [(< x y) 'B+]\n          [(< x y) 'B]\n          [(< x y)\
    \ 'B+]\n          [(< x y) 'B]\n          [(< x y) 'B+]\n          [(< x y) 'B]\n\
    \          [(< x y) 'B+]\n          [(< x y) 'B]\n          [(< x y) 'B+]\n  \
    \        [(< x y) 'B]\n          [(< x y) 'B+]\n          [(< x y) 'B]\n     \
    \     [(< x y) 'B+]\n          [(< x y) 'B]\n          [(< x y) 'B+]\n       \
    \   [(< x y) 'B]\n          [(< x y) 'B+]\n          [(< x y) 'B]\n          [(<\
    \ x y) 'B+]\n          ", "  (cond\n    ((<= grades 4)    \"A+\")\n    ((<= grades\
    \ 3.7)   \"A\")\n    ((<= grades 3.3)   \"A-\")\n    ((<= grades 3)     \"B+\"\
    )\n    ((<= grades 2.7)   \"B\")\n    ((<= grades 2.3)   \"B-\")\n    ((<= grades\
    \ 2)     \"C+\")\n    ((<= grades 1.7)   \"C\")\n    ((<= grades 1.3)   \"C-\"\
    )\n    ((<= grades 1)     \"D+\")\n    ((<= grades 0.7)   \"D\")\n    ((<= grades\
    \ 0)     \"D-\")\n    (else            \"E\")))\n", "  ; Write a for loop that\
    \ iterates through the list, checking each \n  ; element of the list to see if\
    \ it exceeds a certain value, then output \n  ; the value if so, otherwise output\
    \ the value minus the last value of the list.\n  (define (for-loop list acc i)\n\
    \    (if (null? list)\n        acc\n        (for-loop (cdr list) \n          \
    \       (cons (car list) (cons (car acc) (cons (- \n                         \
    \                               (car acc) (* i \n                            \
    \                                  (cadr list))\n                            \
    \                            (cdr acc))))\n                 i)))\n  (for-loop\
    \ grades '() 0))\n", "  (define (find-greater-grade x grades)\n    (cond ((< x\
    \ 0.0) grades)\n          ((< x 1.7) (gfx \"A-\"))\n          ((< x 2.3) (gfx\
    \ \"B-\"))\n          ((< x 2.7) (gfx \"B-\"))\n          ((< x 3.3) (gfx \"B-\"\
    ))\n          ((< x 3.7) (gfx \"B-\"))\n          ((< x 4.0) (gfx \"B-\"))\n \
    \         ((< x 4.7) (gfx \"B-\"))\n          ((< x 5.3) (gfx \"B-\"))\n     \
    \     ((< x 5.7) (gfx \"B-\"))\n          ((< x 6.0) (gfx \"B-\"))\n         \
    \ ((< x 6.7) (gfx \"B-\"))\n          ((< x 7.3) (gfx \"B-\"))\n          ((<\
    \ x 7.7) (gfx \"B-\"))\n          ((< x 8.0) (gfx \"B-\"))\n          ((< x 8.7)\
    \ (gfx \"B-\"))\n          ((< x 9.0) (gfx \"B-\"))\n          ((< x 9.7) (gfx\
    \ \"B-\"))\n          ((< x 10.0) (gfx \"B-\"))\n          ((< x 10.7) (gfx \"\
    B-\"))\n          ((< x 12.0) (gfx \"B-\"))\n          ((< x 12.7) (gfx \"B-\"\
    ))\n          ((< x 13.0) (gfx \"B-\"))\n          ((< x 13.7) (gfx \"B-\"))\n\
    \          ((< x 14.0) (gfx \"B-\"))\n          ((< x 14.7) (gfx \"B-\"))\n  \
    \        ((< x 15.0) (gfx \"B-\"))\n          ((< x 15.7) (gfx \"B-\"))\n    \
    \      ((< x 16.0) (gfx \"B-\"))\n          ((< x 16.7) (gfx \"B-\"))\n      \
    \    ((< x 17.0) (gfx \"B-\"))\n          ((< x 17.7) (gfx \"B-\"))\n        \
    \  ((< x 18.0) (gfx \"B-\"))\n          ((< x 18.7) (gfx \"B-\"))\n          ((<\
    \ x 19.0) (gfx \"B-\"))\n          ((< x 19.7) (gfx \"B-\"))\n          ((< x\
    \ 20.0) (gfx \"B-\"))\n          ((< x 20.7) (gfx \"B-", "  (let ([gpa (car grades)]\n\
    \        [gpa_char (caddr grades)]\n        [letter (caddr gpa_char)]\n      \
    \  [result (if (< gpa 4.0) (cons (caddr gpa_char) \"A+\")\n                  \
    \     (if (> gpa 4.0) (cons (caddr gpa_char) \"A-\")\n                       \
    \  (if (< gpa 3.7) \"A\"\n                             (if (> gpa 3.7) \"B\")\n\
    \                             (if (> gpa 3.3) \"B+\")\n                      \
    \       (if (> gpa 3.3) \"B\")\n                             (if (> gpa 3.0) \"\
    B-\")\n                             (if (> gpa 3.0) \"B\")\n                 \
    \            (if (> gpa 2.7) \"C\")\n                             (if (> gpa 2.3)\
    \ \"C+\")\n                             (if (> gpa 2.3) \"C\")\n             \
    \                (if (> gpa 2.0) \"C-\")\n                             (if (>\
    \ gpa 2.0) \"C\")\n                             (if (> gpa 1.7) \"D+\")\n    \
    \                         (if (> gpa 1.7) \"D\")\n                           \
    \  (if (> gpa 1.3) \"D-\")\n                             (if (> gpa 1.3) \"D\"\
    )\n                             (if (> gpa 1.0) \"D-\")\n                    \
    \         (if (< gpa 0.7) \"D\")\n                             (if (< gpa 0.7)\
    \ \"D+\")\n                             (if (< gpa 0.0) \"D-\"))))])\n    (list\
    \ (intern result) )))\n", "  (define (helper accum acc)\n    (cond\n      [(<=\
    \ accum 0.0) acc]\n      [else (cons accum (helper accum (+ acc 1)))]))\n  (helper\
    \ '() (append (map '+ '(* - /) grades)\n                    (map '+ '(/ - * +)\
    \ grades)\n                    (map '+ (/ - * /) grades)\n                   \
    \ (map '- grades))))\n", "  (let ([g (car grades)])\n    (cond\n      [(< g 4.0)\n\
    \       (cond \n         [(< g 3.7)\n          \"A+\"]\n         [(< g 3.3)\n\
    \          \"A\"]\n         [(< g 3.0)\n          \"A-\"]\n         [(< g 2.7)\n\
    \          \"B+\"]\n         [(< g 2.3)\n          \"B\"]\n         [(< g 2.0)\n\
    \          \"B-\"]\n         [(< g 1.7)\n          \"C+\"]\n         [(< g 1.3)\n\
    \          \"C\"]\n         [(< g 1.0)\n          \"C-\"]\n         [(< g 0.7)\n\
    \          \"D+\"]\n         [(< g 0.0)\n          \"D\"]\n         [else \"D-\"\
    ])])))\n", "  (if (and (list? grades)\n           (>= (first grades) 4.0)\n  \
    \         (<= (first grades) 3.7))\n      (let ((result '()))\n        (if (<\
    \ grades (rest grades))\n            (do\n              ((grade (first grades))\n\
    \               (rest grades))\n            (if (< grade 2.0)\n              \
    \  (do\n                  ((grade (first grades))\n                   (rest grades))\n\
    \                (append\n                 (list (char (- grade 7.0)\n       \
    \                       (if (>= grade 4.0)\n                                 \
    \ '+\n                                  '-\n                                 \
    \ (if (< grade 3.0)\n                                      'A+\n             \
    \                         'A-\n                                      (char (-\
    \ grade 3.0)\n                                               'A'\n           \
    \                                    'B'))))))\n                (append\n    \
    \             (list (char (- grade 2.0)\n                              (if (>=\
    \ grade 3.7)\n                                  '+\n                         \
    \         '-\n                                  (if (< grade 2.3)\n          \
    \                            'B+\n                                      'B-\n\
    \                                      (char (- grade 2.3)\n                 \
    \                              'B'\n                                         \
    \      'C'))))))\n              (if (< grade 2.7)\n                (do\n     \
    \             ((grade (first grades))\n                   (rest grades))\n   \
    \             (append\n                 (list (char (- grade 2.3)\n          \
    \                    (if (>= grade 2.7)\n                                  '+\n\
    \                                  '-\n                                  (if (<\
    \ grade 2.0)\n                                      'C+\n                    \
    \                  'C-\n                                      (char (- grade 2.0)\n\
    \                                               'C'\n                        \
    \                       'D'))))))\n                (append\n                 (list\
    \ (char (- grade 2.0)\n                              (if (>= grade 1.7)\n    \
    \                              '+\n                                  '-\n    \
    \                              (if (< grade 1.0)\n                           \
    \           'D+\n                                      'D-\n                 \
    \                     (char (- grade 1.0)\n                                  \
    \             'D'\n                                               'E'))))))\n\
    \              (if (< grade 1.3)\n                (do\n                  ((grade\
    \ (first grades))\n                   (rest grades))\n                (append\n\
    \                 (list (char (- grade 1.0)\n                              (if\
    \ (>= grade 0.7)\n                                  '+\n                     \
    \             '-\n                                  (if (< grade 0.0)\n      \
    \                                'E\n                                      'F'))))))\n\
    \              (if (< grade 0.0)\n                (do\n                  ((grade\
    \ (first grades))\n                   (rest grades))\n                (append\n\
    \                 (list (char (- grade 0.0)\n                              (if\
    \ (< grade 0.0)\n                                      'E\n                  \
    \                    'F'))))))\n              (append result result))))\n    \
    \    (append result result))))\n\n", "  (cond [(< grades (/ 4.0 3.0)) 'A+]\n \
    \       [(< grades (/ 3.7 3.0)) 'A]\n        [(< grades (/ 3.3 3.0)) 'A-]\n  \
    \      [(< grades (/ 3.0 3.0)) 'B+]\n        [(< grades (/ 2.7 3.0)) 'B]\n   \
    \     [(< grades (/ 2.3 3.0)) 'B-]\n        [(< grades (/ 2.0 3.0)) 'C+]\n   \
    \     [(< grades (/ 1.7 3.0)) 'C]\n        [(< grades (/ 1.3 3.0)) 'C-]\n    \
    \    [(< grades (/ 1.0 3.0)) 'D+]\n        [(< grades (/ 0.7 3.0)) 'D]\n     \
    \   [else 'D-]))", "  (let ([p (make-array (+ (length (grades)) 1) 'string)])\n\
    \    (loop for i from 1 to (length (grades)) \n          when (= 0 (mod i 4))\n\
    \          collect (grade (quotient i 4)) into p\n          finally (return p)))\
    \ \n", "  (let ([grades (reverse (map numerical_grade grades))])\n    (if (> (length\
    \ grades) 1)\n        (apply append (map letter grades))\n        'E)))\n", " \
    \ (define (compare grades)\n    (if (empty? grades)\n        'empty\n        (let\
    \ ((grade (first grades))\n               (other-grades (rest grades)))\n    \
    \      (cond ((< grade 3.5)\n                 #\\A)\n                ((< grade\
    \ 2.5)\n                 #\\B)\n                ((< grade 1.5)\n             \
    \    #\\C)\n                ((< grade 0.5)\n                 #\\D)\n         \
    \       ((< grade 0.25)\n                 #\\E)\n                ((< grade 0.0)\n\
    \                 #\\F)\n                (#\\Z)\n                (else (compare\
    \ (rest other-grades))))))\n  (define (letter)\n    (cond ((< grades 0.0)\n  \
    \         #\\Z)\n          ((< grades 3.5)\n           #\\A)\n          ((< grades\
    \ 2.5)\n           #\\B)\n          ((< grades 1.5)\n           #\\C)\n      \
    \    ((< grades 0.5)\n           #\\D)\n          ((< grades 0.25)\n         \
    \  #\\E)\n          ((< grades 1.0)\n           #\\F)\n          ((< grades 2.0)\n\
    \           #\\A)\n          ((< grades 3.0)\n           #\\B)\n          ((<\
    \ grades 4.0)\n           #\\C)\n          ((< grades 3.7)\n           #\\A)\n\
    \          ((< grades 3.3)\n           #\\A-)\n          ((< grades 2.7)\n   \
    \        #\\B)\n          ((< grades 2.3)\n           #\\B-)\n          ((< grades\
    \ 1.7)\n           #\\C)\n          ((< grades 1.3)\n           #\\C-)\n     \
    \     ((< grades 1.0)\n           #\\D)\n          ((< grades 0.7)\n         \
    \  #\\D)\n          ((< grades 0.0)\n           #\\E)\n          (else #\\F))))\n\
    \  (define (compare-grades)\n    (let loop ((grades '(0.0) (rest '()))\n     \
    \          (result '()))\n      (cond ((< grades 3.0)\n             (loop (rest\
    \ grades)\n                   (cons (list (first grades) letter) result)))\n \
    \           ((< grades 2.7)\n             (loop (rest grades)\n              \
    \     (cons (list (first grades) letter) result)))\n            ((< grades 2.3)\n\
    \             (loop (rest grades)\n                   (cons (list (first grades)\
    \ letter) result)))", "  (match grades\n    ((list) (list \"E\" ))\n    ((number)\
    \ (list \"E\" ))\n    ((float) (list \"E\" ))\n    ((string) (list \"E\" ))\n\
    \    ((list) (list \"E\" ))\n    ((number) (list \"E\" ))\n    ((float) (list\
    \ \"E\" ))\n    ((string) (list \"E\" ))\n    ((list) (list \"E\" ))\n    ((number)\
    \ (list \"E\" ))\n    ((float) (list \"E\" ))\n    ((string) (list \"E\" ))\n\
    \    ((list) (list \"E\" ))\n    ((number) (list \"E\" ))\n    ((float) (list\
    \ \"E\" ))\n    ((string) (list \"E\" ))\n    ((list) (list \"E\" ))\n    ((number)\
    \ (list \"E\" ))\n    ((float) (list \"E\" ))\n    ((string) (list \"E\" ))\n\
    \    ((list) (list \"E\" ))\n    ((number) (list \"E\" ))\n    ((float) (list\
    \ \"E\" ))\n    ((string) (list \"E\" ))\n    ((list) (list \"E\" ))\n    ((number)\
    \ (list \"E\" ))\n    ((float) (list \"E\" ))\n    ((string) (list \"E\" ))\n\
    \    ((list) (list \"E\" ))\n    ((number) (list \"E\" ))\n    ((float) (list\
    \ \"E\" ))\n    ((string) (list \"E\" ))\n    ((list) (list \"E\" ))\n    ((number)\
    \ (list \"E\" ))\n    ((float) (list \"E\" ))\n    ((string) (list \"E\" ))\n\
    \    ((list) (list \"E\" ))\n    ((number) (list \"E\" ))\n    ((float) (list\
    \ \"E\" ))\n    ((string) (list \"E\" ))\n    ((list) (list \"E\" ))\n    ((number)\
    \ (list \"E\" ))\n    ((float) (list \"E\" ))\n    ((string) (list \"E\" ))\n\
    \    ((list) (list \"E\" ))\n    ((number) (list \"E\" ))\n    ((float) (list\
    \ \"E\" ))\n    ((string) (list \"E\" ))\n    ((list) (list \"E\" ))\n    ((number)\
    \ (list \"E\" ))\n    ((float) (list \"E\" ))\n    ((string) (list \"E\" ))\n\
    \    ((list) (list \"E\" ))\n    ((number) (list \"E\" ))\n    ((float) (list\
    \ \"E\" ))\n    ((string) (list \"E\" ))\n    ((list) (", "  (cond [(< grades\
    \ 3.0)\n         (+ 1 \"A+\")]\n        [(< grades 3.7)\n         (+ 1 \"A\")]\n\
    \        [(< grades 3.3)\n         (- 1 \"A-\")]\n        [(< grades 3.0)\n  \
    \       (+ 1 \"B+\")]\n        [(< grades 2.7)\n         (+ 1 \"B\")]\n      \
    \  [(< grades 2.3)\n         (- 1 \"B-\")]\n        [(< grades 2.0)\n        \
    \ (+ 1 \"C+\")]\n        [(< grades 1.7)\n         (+ 1 \"C\")]\n        [(< grades\
    \ 1.3)\n         (- 1 \"C-\")]\n        [(< grades 1.0)\n         (+ 1 \"D+\"\
    )]\n        [(< grades 0.7)\n         (+ 1 \"D\")]\n        [(< grades 0.0)\n\
    \         (- 1 \"D-\")]\n        [else\n         (- 1 \"E\")]))\n", "  (cond\n\
    \    [(equal? (length grades) 1) (first grades)]\n    [else (cons \n         \
    \    (if (>= (first grades) (first grades) (second grades)) \"A+\" \n        \
    \         \"A\" \n                 (if (>= (first grades) (first grades) (second\
    \ grades)) \"A-\" \n                 \"A\" \n                 (if (>= (first grades)\
    \ (first grades) (second grades)) \"B+\" \n                 \"B\" \n         \
    \        (if (>= (first grades) (first grades) (second grades)) \"B-\" \n    \
    \             \"B\" \n                 (if (>= (first grades) (first grades) (second\
    \ grades)) \"C+\" \n                 \"C\" \n                 (if (>= (first grades)\
    \ (first grades) (second grades)) \"C-\" \n                 \"C\" \n         \
    \        (if (>= (first grades) (first grades) (second grades)) \"D+\" \n    \
    \             \"D\" \n                 (if (>= (first grades) (first grades) (second\
    \ grades)) \"D-\" \n                 \"D\" \n                 \"E\")))))))])\n",
  "  (cond\n    [(equal? (- grades 4.0) 0.0) \"E\"]\n    [(>= grades 3.7) \"A-\"]\n\
    \    [(>= grades 3.3) \"A\"]\n    [(>= grades 3.0) \"B+\"]\n    [(>= grades 2.7)\
    \ \"B\"]\n    [(>= grades 2.3) \"B-\"]\n    [(>= grades 2.0) \"C+\"]\n    [(>=\
    \ grades 1.7) \"C\"]\n    [(>= grades 1.3) \"C-\"]\n    [(>= grades 1.0) \"D+\"\
    ]\n    [(>= grades 0.7) \"D\"]\n    [(>= grades 0.0) \"D-\"]\n    [else (symbol->string\
    \ (symbol->string grades))]))\n", "  (cond\n    [(< grades 0) \"E\"]\n    [(<\
    \ grades 3) \"D-\"]\n    [(< grades 3) \"D\"]\n    [(< grades 3.3) \"D\"]\n  \
    \  [(< grades 3.7) \"C\"]\n    [(< grades 4) \"B\"]\n    [(< grades 4.3) \"B-\"\
    ]\n    [(< grades 4.7) \"B\"]\n    [(< grades 5) \"A+\"]\n    [(< grades 5.3)\
    \ \"A+\"]\n    [(< grades 5.7) \"A+\"]\n    [else \"A-\"]\n    ))\n", "  (if (=\
    \ 0 grades)\n      \"E\"\n      (let* ((a (floor grades))\n             (b (modulo\
    \ grades 1))\n             (c (- (floor (+ grades b) 10))\n             (d (floor\
    \ (+ grades c 10) 10))\n             (e (floor (+ grades d 10) 10))\n        \
    \     (f (floor (+ grades e 10) 10))\n             (g (floor (+ grades f 10) 10))\n\
    \             (h (floor (+ grades g 10) 10))\n             (i (floor (+ grades\
    \ h 10) 10))\n             (j (floor (+ grades i 10) 10))\n             (k (floor\
    \ (+ grades j 10) 10)))\n        (cond\n          [(< a 9) \"A+\" \n         \
    \  [(< a 10) \"A\" \n            (< b 9) \"A\" \n            [(< b 10) \"A- \n\
    \            (< c 9) \"B+\" \n            [(< c 10) \"B\" \n            (< d 9)\
    \ \"B\" \n            [(< d 10) \"B- \n            (< e 9) \"C+\" \n         \
    \   [(< e 10) \"C\" \n            (< f 9) \"C\" \n            [(< f 10) \"C-\n\
    \            (< g 9) \"D+\" \n            [(< g 10) \"D\" \n            (< h 9)\
    \ \"D\" \n            [(< h 10) \"D- \n            (< i 9) \"E+\" \n         \
    \   [(< i 10) \"E\" \n            (< j 9) \"E\" \n            [(< j 10) \"E-\n\
    \            (< k 9) \"F+\" \n            [(< k 10) \"F\" \n            (< a 9)\
    \ \"A+\" \n            [(< a 10) \"A\" \n            (< b 9) \"A\" \n        \
    \    [(< b 10) \"A- \n            (< c 9) \"B+\" \n            [(< c 10) \"B\"\
    \ \n            (< d 9) \"B\" \n            [(< d 10) \"B- \n            (< e\
    \ 9) \"C+\" \n            [(< e 10) \"C\" \n            (< f 9) \"C\" \n     \
    \       [(< f 10) \"C-\n            (< g 9) \"D+\" \n            [(< g 10) \"\
    D\" \n            (< h 9) \"D\" \n            [(< h 10) \"D- \n            (<\
    \ i 9) \"E+\" \n            [(< i 10) \"E\" \n            (< j 9) \"E\" \n   \
    \         [(< j 10) \"E-\n            (< k 9) \"F+\" \n            [(< k 10) \"\
    F\" \n            (", "  (cond ((> grades 3.5) (cons \"D+\" (cons grades \"D-\"\
    ))) \n        ((> grades 2.7) (cons \"B+\" (cons grades \"B-\"))) \n        ((>\
    \ grades 2.3) (cons \"B\" (cons grades \"B-\"))) \n        ((> grades 2.0) (cons\
    \ \"C+\" (cons grades \"C-\"))) \n        ((> grades 1.7) (cons \"C\" (cons grades\
    \ \"C-\"))) \n        ((> grades 1.3) (cons \"C-\" (cons grades \"C-\"))) \n \
    \       ((> grades 1.0) (cons \"D\" (cons grades \"D-\"))) \n        ((> grades\
    \ 0.7) (cons \"D\" (cons grades \"D-\"))) \n        ((> grades 0.0) (cons \"D\"\
    \ (cons grades \"D-\"))) \n        (else \"E\")))\n", "  (let ([g (car grades)])\n\
    \    (if (> g 4.0)\n        (cond [(> g 3.7) (cond [(> g 3.3) \"A-\"]\n      \
    \                      [(> g 3.0) \"B-\"]\n                            [(> g 2.7)\
    \ (cond [(> g 2.3) \"B-\"]\n                                            [(> g\
    \ 2.0) \"B-\"]\n                                            [(> g 1.7) \"B-\"\
    ]\n                                            [(> g 1.3) \"B-\"]\n          \
    \                                  [(> g 1.0) \"B-\"]\n                      \
    \                      [(> g 0.7) \"B-\"]\n                                  \
    \          [(> g 0.0) \"B-\"]\n                                            [(>\
    \ g 1.7) \"B-\"]\n                                            [(> g 1.3) \"B-\"\
    ]\n                                            [(> g 1.0) \"B-\"]\n          \
    \                                  [(> g 0.7) \"B-\"]\n                      \
    \                      [(> g 0.0) \"B-\"]\n                                  \
    \          [(> g 2.7) \"B-\"]\n                                            [(>\
    \ g 2.3) \"B-\"]\n                                            [(> g 2.0) \"B-\"\
    ]\n                                            [(> g 1.7) \"B-\"]\n          \
    \                                  [(> g 1.3) \"B-\"]\n                      \
    \                      [(> g 1.0) \"B-\"]\n                                  \
    \          [(> g 0.7) \"B-\"]\n                                            [(>\
    \ g 0.0) \"B-\"]\n                                            [(> g 3.7) (cond\
    \ [(> g 3.3) \"B-\"]\n                                                       \
    \         [(> g 3.0) \"B-\"]\n                                               \
    \                 [(> g 2.7) (cond [(> g 2.3) \"B-\"]\n                      \
    \                                              [(> g 2.0) \"B-\"]\n          \
    \                                                          [(> g 1.7) \"B-\"]\n\
    \                                                                    [(> g 1.3)\
    \ \"B-\"]\n                                                                  \
    \  [(> g 1.0) \"B-\"]\n                                                      \
    \              [(> g 0.7) \"B-\"]\n                                          \
    \                          [(> g 0.0) \"B-\"]\n                              \
    \                                      [(> g 1.7) \"B-\"]\n                  \
    \                                                  [(> g 1.3) \"B-\"]\n      \
    \                                                              [(> g 1.0) \"B-\"\
    ]\n                                                                    [(> g 0.7)\
    \ \"B-\"]\n                                                                  \
    \  [(> g 0.0) \"B-\"]\n                                                      \
    \              [(> g 3.7) (cond [(> g 3.3) \"B-\"]\n                         \
    \                                                                 [(> g 3.0) \"\
    B-\"]\n                                                                      \
    \                    [(> g 2.7) (cond [(> g 2.3) \"B-\"]\n                   \
    \                                                                            \
    \                 [(> g 2.0) \"B-\"]\n                                       \
    \                                                                         [(>\
    \ g 1.7) \"B-\"]\n                                                           \
    \                                                     [(> g 1.3) \"B-\"]\n   \
    \                                                                            \
    \                                 [(> g 1.0) \"B-\"]\n                       \
    \                                                                            \
    \             [(> g 0.7) \"B-\"]\n                                           \
    \                                                                     [(> g 0.0)\
    \ \"B-\"]\n", "  (cond \n    ((> grades 0) (substring '(\"A+\" \"A-\" \"B+\" \"\
    B-\" \"C+\" \"C-\" \"D+\" \"D-\" \"F\" \"E\") (quotient grades 10) (quotient (expt\
    \ grades 2) 10)))\n    (else \"\"))\n)\n", "  (let loop ((grades '()))\n    (if\
    \ (null? (rest grades)) (reverse '())\n      (cond ((< 0 (rest grades)) (cons\
    \ (first grades) (loop (rest grades))))\n            (else (loop (rest grades))))))\n",
  "  (cond\n    [(< grades 4.0) (cons \"A+\" \"\")\n     (and (> grades 3.7)\n   \
    \       (< grades 3.3) (cons \"A\" \"\"))\n     (and (> grades 3.3)\n        \
    \  (< grades 3.0) (cons \"A-\" \"\"))\n     (and (> grades 3.0) (< grades 2.7)\
    \ (cons \"B+\" \"\"))\n     (and (> grades 2.7) (< grades 2.3) (cons \"B\" \"\"\
    ))\n     (and (> grades 2.3) (< grades 2.0) (cons \"B-\" \"\"))\n     (and (>\
    \ grades 2.0) (< grades 1.7) (cons \"C+\" \"\"))\n     (and (> grades 1.7) (<\
    \ grades 1.3) (cons \"C\" \"\"))\n     (and (> grades 1.3) (< grades 1.0) (cons\
    \ \"C-\" \"\"))\n     (and (> grades 1.0) (< grades 0.7) (cons \"D+\" \"\"))\n\
    \     (and (> grades 0.7) (< grades 0.0) (cons \"D\" \"\"))\n     (and (> grades\
    \ 0.0) (< grades 0.0)\n          (cons \"D-\" \"\"))\n     (and (> grades 0.0)\
    \ (< grades 0.0)\n          (cons \"E\" \"\"))]\n    [else (cons \"F\" \"\")]))",
  "  (cond ((null? grades) '\"\")\n        ((< grades (first grades))\n         (append\
    \ (numerical_letter_grade (rest grades)) (list \"A\"))\n        ((>= grades (first\
    \ grades))\n         (append (numerical_letter_grade (rest grades)) (list \"B\"\
    ))\n        ((< grades (rest grades))\n         (append (numerical_letter_grade\
    \ (rest grades)) (list \"B\"))\n        ((>= grades (rest grades))\n         (append\
    \ (numerical_letter_grade (rest grades)) (list \"B-\"))\n        ((< grades (rest\
    \ grades))\n         (append (numerical_letter_grade (rest grades)) (list \"C\"\
    ))\n        ((>= grades (rest grades))\n         (append (numerical_letter_grade\
    \ (rest grades)) (list \"C+\"))\n        ((< grades (rest grades))\n         (append\
    \ (numerical_letter_grade (rest grades)) (list \"C\"))\n        ((>= grades (rest\
    \ grades))\n         (append (numerical_letter_grade (rest grades)) (list \"C-\"\
    ))\n        ((< grades (rest grades))\n         (append (numerical_letter_grade\
    \ (rest grades)) (list \"D\"))\n        ((>= grades (rest grades))\n         (append\
    \ (numerical_letter_grade (rest grades)) (list \"D+\"))\n        ((< grades (rest\
    \ grades))\n         (append (numerical_letter_grade (rest grades)) (list \"D\"\
    ))\n        ((>= grades (rest grades))\n         (append (numerical_letter_grade\
    \ (rest grades)) (list \"D-\"))\n        ((< grades (rest grades))\n         (append\
    \ (numerical_letter_grade (rest grades)) (list \"F\"))\n        ((>= grades (rest\
    \ grades))\n         (append (numerical_letter_grade (rest grades)) (list \"E\"\
    ))\n        (else \"ERROR\")))) \n", "  (cond\n    [(> grades 3.0)\n     (cons\
    \ \"B+\")\n    ]\n    [(> grades 3.3)\n     (cons \"B-\")\n    ]\n    [(> grades\
    \ 3.7)\n     (cons \"C+\")\n    ]\n    [(> grades 3.9)\n     (cons \"C\")\n  \
    \  ]\n    [(> grades 4.0)\n     (cons \"C+\" \"A-\")\n    ]\n    [(> grades 4.3)\n\
    \     (cons \"C-\")\n    ]\n    [(> grades 4.7)\n     (cons \"A-\")\n    ]\n \
    \   [(> grades 4.9)\n     (cons \"A+\")\n    ]\n    [else\n     (cons \"E\")\n\
    \    ]\n  )\n)\n", "  (cond\n    ((< grades 3.0) 'A+)\n    ((< grades 3.7) 'A)\n\
    \    ((< grades 3.3) 'A-)\n    ((< grades 3.0) 'B+)\n    ((< grades 2.7) 'B)\n\
    \    ((< grades 2.3) 'B-)\n    ((< grades 2.0) 'C+)\n    ((< grades 1.7) 'C)\n\
    \    ((< grades 1.3) 'C-)\n    ((< grades 1.0) 'D+)\n    ((< grades 0.7) 'D)\n\
    \    ((< grades 0.0) 'D-)\n    ((< grades 0.0) 'E)\n    ((< grades 0.0) \"Error\"\
    ))\n)\n", "  (define (convert gpa letter)\n    (cond\n      [(<= gpa 5.0) letter]\n\
    \      [(< gpa 3.7) letter]\n      [(< gpa 3.3) (cons letter \"-\")]\n      [(<\
    \ gpa 3.0) (cons letter \"-\")]\n      [(< gpa 2.7) letter]\n      [(< gpa 2.3)\
    \ (cons letter \"-\")]\n      [(< gpa 2.0) (cons letter \"-\")]\n      [(< gpa\
    \ 1.7) letter]\n      [(< gpa 1.3) (cons letter \"-\")]\n      [(< gpa 1.0) (cons\
    \ letter \"-\")]\n      [else (cons letter \"-\")]))\n  (define (grade-sum gpa\
    \ letter)\n    (cond\n      [(<= gpa 5.0) (+ letter \"+\")]\n      [(< gpa 3.7)\
    \ (+ letter \"-\")]\n      [(< gpa 3.3) (+ letter \"-\")]\n      [(< gpa 3.0)\
    \ (+ letter \"-\")]\n      [(< gpa 2.7) (+ letter \"-\")]\n      [(< gpa 2.3)\
    \ (+ letter \"-\")]\n      [(< gpa 2.0) (+ letter \"-\")]\n      [(< gpa 1.7)\
    \ (+ letter \"-\")]\n      [(< gpa 1.3) (+ letter \"-\")]\n      [(< gpa 1.0)\
    \ (+ letter \"-\")]\n      [else (+ letter \"-\")]))\n  (reduce (lambda (a b)\n\
    \            (map (lambda (gpa letter)\n                    (if (> gpa 0)\n  \
    \                      (grade-sum gpa letter)\n                        (grade-sum\
    \ gpa letter))\n                  a b)))\n          (map convert\n           \
    \   grades))))\n</code>\n<|/ a tags=racket,scheme |>\n<| a tags=racket,scheme\
    \ |>\nThis is a classic problem in CS. Here's a solution using a fold. \n<code>",
  "  (cond\n    [(empty? grades) \"\"]\n    [(>= (first grades) 4.0) \n     (first\
    \ grades)]\n    [(< 4.0 grades)\n     (cond\n       [(< grades (first grades))\
    \ (cons (- 4.0 grades) \"\")]\n       [(<= (first grades) (/ grades 3.0)) \n \
    \       (cons (- 3.0 grades) \"\")]\n       [(<= (first grades) (/ grades 2.0))\
    \ \n        (cons (- 2.0 grades) \"\")]\n       [(<= (first grades) (/ grades\
    \ 1.0)) \n        (cons (- 1.0 grades) \"\")]\n       [(<= (first grades) (/ grades\
    \ 0.7)) \n        (cons (- 0.7 grades) \"\")]\n       [(<= (first grades) (/ grades\
    \ 0.0))\n        (cons (- 0.0 grades) \"\")]\n       [(< grades (/ grades 4.0))\
    \ \"F\"]\n       [else (error \"GPA should be positive\")]\n       )])\n)\n",
  "  (define (grade_sum grade)\n    (if (> grade grades)\n        0\n        (+ (-\
    \ grade grade) 1)))\n  (define (grade_gpas grade)\n    (let ([g (/ grade 4.0)]\n\
    \          [gs (- g (/ (grade 4.0) 3.0))]\n          [gs (- g (/ (grade 4.0) 3.3))]\n\
    \          [gs (- g (/ (grade 4.0) 3.7))]\n          [gs (- g (/ (grade 4.0) 3.2))]\n\
    \          [gs (- g (/ (grade 4.0) 3.0))]\n          [gs (- g (/ (grade 4.0) 2.7))]\n\
    \          [gs (- g (/ (grade 4.0) 2.3))]\n          [gs (- g (/ (grade 4.0) 2.0))]\n\
    \          [gs (- g (/ (grade 4.0) 1.7))]\n          [gs (- g (/ (grade 4.0) 1.3))]\n\
    \          [gs (- g (/ (grade 4.0) 1.0))]\n          [gs (- g (/ (grade 4.0) 0.7))]\n\
    \          [gs (- g (/ (grade 4.0) 0.0))]\n          [g gs]\n          [g gs]\n\
    \          [g gs]\n          [g gs]\n          [g gs]\n          [g gs]\n    \
    \      [g gs]\n          [g gs]\n          [g gs])\n      (cond [(< grade 4.0)\n\
    \             (cond [(< gs 2.0)\n                    (list '+ \"A\" '+)\n    \
    \                (list '+ \"B\" '+)\n                    (list '+ \"C\" '+)\n\
    \                    (list '+ \"D\" '+)\n                    (list '+ \"F\" '+)\n\
    \                    (list '+ \"G\" '+)\n                    (list '+ \"C\" '+)\n\
    \                    (list '+ \"B\" '+)\n                    (list '+ \"A\" '+)\n\
    \                    (list '+ \"A\" '+)\n                    (list '+ \"A\" '+)\n\
    \                    (list '+ \"A\" '+)\n                    (list '+ \"A\" '+)\n\
    \                    (list '+ \"A\" '+)\n                    (list '+ \"A\" '+)\n\
    \                    (list '+ \"A\" '+)\n                    (list '+ \"A\" '+)\n\
    \                    (list '+ \"A\" '+)\n                    (list '+ \"A\" '+)\n\
    \                    (list '+ \"A\" '+)\n                    (list '+ \"", " \
    \ (cond\n    [(> grades 3.0) \"B+\"]\n    [(> grades 3.7) \"B\"]\n    [(> grades\
    \ 3.3) \"B-\"]\n    [(> grades 3.0) \"C+\"]\n    [(> grades 2.7) \"C\"]\n    [(>\
    \ grades 2.3) \"C-\"]\n    [(> grades 2.0) \"D+\"]\n    [(> grades 1.7) \"D\"\
    ]\n    [(> grades 1.0) \"D-\"]\n    [(> grades 0.7) \"D\"]\n    [(> grades 0.0)\
    \ \"E\"]\n    [(> grades 0) \"E\"]\n    [else (list-ref (cons \"-\" (car grades))\
    \ (floor (/ grades 7.0)))]))", "  (map (lambda (x)\n         (if (> x 0)\n   \
    \        (char (- x 100))\n           'E))\n       (cond ((< grades 4) 'A+)\n\
    \             ((< grades 3.7) 'A)\n             ((< grades 3.3) 'A-)\n       \
    \      ((< grades 3.0) 'B+)\n             ((< grades 2.7) 'B)\n             ((<\
    \ grades 2.3) 'B-)\n             ((< grades 2.0) 'C+)\n             ((< grades\
    \ 1.7) 'C)\n             ((< grades 1.3) 'C-)\n             ((< grades 1.0) 'D+)\n\
    \             ((< grades 0.7) 'D)\n             ((< grades 0.0) 'D-)\n       \
    \      (else 'E)))) ; 'E\n            ", "  (let ((result '()))\n    (for-each\
    \ (lambda (x)\n                 (if (> x grades)\n                     (append\
    \ result \"E\")\n                     (if (< x grades)\n                     \
    \    (append result (if (> x grades) \"A+\" \n                               \
    \          (if (< x grades) \"A-\"\n                                         \"\
    B+\")\n                                         (if (< x grades) \"B-\"\n    \
    \                                     \"B-\")))))\n              grades))\n  \
    \  result))\n</code>\nTo test your code you can use the code below (you can ignore\
    \ the code that is commented out):\n<code>", "  (cond \n    [(< grades 4.0) (list\
    \ \"A+\")\n     (< grades 3.7) (list \"A\")\n     (< grades 3.3) (list \"A-\"\
    )\n     (< grades 3.0) (list \"B+\")\n     (< grades 2.7) (list \"B\")\n     (<\
    \ grades 2.3) (list \"B-\")\n     (< grades 2.0) (list \"C+\")\n     (< grades\
    \ 1.7) (list \"C\")\n     (< grades 1.3) (list \"C-\")\n     (< grades 1.0) (list\
    \ \"D+\")\n     (< grades 0.7) (list \"D\")\n     (< grades 0.0) (list \"D-\"\
    )\n     (< grades 0.0) (list \"E\")\n     :else (list \"F\")]))\n", "  (let ((high-point\
    \ (max (first grades) (second grades))\n\t   low-point (min (first grades) (second\
    \ grades))))\n    (cond ((< high-point low-point) \"F\")\n          ((< high-point\
    \ (/ low-point 3.0)) \"D+\")\n          ((< high-point (/ low-point 2.0)) \"D\"\
    )\n          ((< high-point (/ low-point 1.7)) \"C-\")\n          ((< high-point\
    \ (/ low-point 1.4)) \"C\")\n          ((< high-point (/ low-point 1.0)) \"B-\"\
    )\n          ((< high-point (/ low-point 0.9)) \"B\")\n          ((< high-point\
    \ (/ low-point 0.7)) \"B-\")\n          ((< high-point (/ low-point 0.6)) \"B\"\
    )\n          ((< high-point (/ low-point 0.5)) \"A-\")\n          ((< high-point\
    \ (/ low-point 0.4)) \"A\")\n          ((< high-point (/ low-point 0.3)) \"A+\"\
    )\n          ((< high-point (/ low-point 0.2)) \"A\")\n          ((< high-point\
    \ (/ low-point 0.1)) \"A\")\n          (else (cond ((< high-point 0.0) \"E\")\n\
    \                      (else \"F\"))))))\n", "  (let* ((gpas (car grades))\n \
    \        (grade (numerical_gpa gpas))\n         (letter (cddr grades))\n     \
    \    (letters (cdddr letter)))\n    (cond [(< gpa 4.0) \n           (string-append\
    \ \"A+\" (if (< grade 3.7) \"-\" \"\"))\n           (string-append \"A\" (if (<\
    \ grade 3.3) \"-\" \"\"))\n           (string-append \"A\" (if (< grade 3.0) \"\
    -\" \"\"))\n           (string-append \"B+\" (if (< grade 2.7) \"-\" \"\"))\n\
    \           (string-append \"B\" (if (< grade 2.3) \"-\" \"\"))\n           (string-append\
    \ \"B\" (if (< grade 2.0) \"-\" \"\"))\n           (string-append \"C+\" (if (<\
    \ grade 1.7) \"-\" \"\"))\n           (string-append \"C\" (if (< grade 1.3) \"\
    -\" \"\"))\n           (string-append \"C-\" (if (< grade 1.0) \"-\" \"\"))\n\
    \           (string-append \"D+\" (if (< grade 0.7) \"-\" \"\"))\n           (string-append\
    \ \"D\" (if (< grade 0.0) \"-\" \"\"))\n           (string-append \"D-\" (if (<\
    \ grade 0.0) \"-\" \"\"))\n           (string-append \"E\" \"-\")\n          \
    \ letters]\n          [(< gpa 3.7) (string-append \"A\" \"-\")\n           (string-append\
    \ \"A\" \"-\")\n           (string-append \"A\" \"-\")\n           (string-append\
    \ \"B\" \"-\")\n           (string-append \"B\" \"-\")\n           (string-append\
    \ \"B\" \"-\")\n           (string-append \"C\" \"-\")\n           (string-append\
    \ \"C\" \"-\")\n           (string-append \"C\" \"-\")\n           (string-append\
    \ \"D\" \"-\")\n           (string-append \"D\" \"-\")\n           (string-append\
    \ \"E\" \"-\")\n           letters]\n          [(< gpa 3.3) (string-append \"\
    A\" \"-\")\n           (string-append \"A\" \"-\")\n           (string-append\
    \ \"A\" \"-\")\n           (string-append \"B\" \"-\")\n           (string-append\
    \ \"B\" \"-\")\n           (string-append \"B\" \"-\")\n           (string-append\
    \ \"C\" \"-\")\n           (string-append \"C\" \"-\")\n           (string-append\
    \ \"C\" \"-\")\n           (string-append \"D\" \"-\")\n           (string-append\
    \ \"D\" \"-\")\n           (string-append \"E\" \"-\")\n           letters]\n\
    \          [(< gpa 3.0) (string-append \"A\" \"-\")\n           (string-append\
    \ \"A\" \"-\")\n           (string-append \"A\" \"-\")\n", "  (define (helper\
    \ index prev)\n    (if (= index 0)\n        prev\n        (helper (- index 1)\
    \ (append prev [\"+\"]))))\n  (helper \n    (ceiling grades)\n    (cons grades\
    \ [\"+\"])))\n", "  (let ((total (apply + grades))\n        (average (/ (apply\
    \ - grades) total)))\n    (cond ((= average 0.0) (list \"E\"))\n          ((<\
    \ average 3.0) (list \"A-\"))\n          ((< average 3.3) (list \"A\"))\n    \
    \      ((< average 3.7) (list \"A+\"))\n          ((< average 3.9) (list \"B+\"\
    ))\n          ((< average 4.0) (list \"B\"))\n          ((< average 4.1) (list\
    \ \"B-\"))\n          ((< average 4.2) (list \"C+\"))\n          ((< average 4.3)\
    \ (list \"C\"))\n          ((< average 4.4) (list \"C-\"))\n          ((< average\
    \ 4.5) (list \"D+\"))\n          ((< average 4.6) (list \"D\"))\n          ((<\
    \ average 4.7) (list \"D-\"))\n          ((< average 4.8) (list \"F\"))\n    \
    \      (else (list \"F\")))))\n", "  (cond\n    [(empty? grades) 'E]\n    [(<=\
    \ (first grades) 2.0) 'C+]\n    [(<= (first grades) 1.7) 'C]\n    [(<= (first\
    \ grades) 1.0) 'B+]\n    [(<= (first grades) 0.7) 'B]\n    [(<= (first grades)\
    \ 0.4) 'A-]\n    [(<= (first grades) 0.3) 'A]\n    [(<= (first grades) 0.2) 'A-]\n\
    \    [(<= (first grades) 0.1) 'A]\n    [else (substring (first grades) 0 1)]))\n",
  "  (let loop ((grades (reverse grades)) result)\n    (if (empty? grades)\n     \
    \   result\n        (loop (rest grades) (cons (first grades) result)))))\n", " \
    \ (let-values (((letter grade) \n\t\t (map (\u03BB (x)\n\t\t\t   (let ((g (- grades\
    \ x)))\n\t\t\t     (if (< g 4.0)\n\t\t\t       \"A+\" \n\t\t\t       (if (< g\
    \ 3.7)\n\t\t\t         \"A\" \n\t\t\t         (if (< g 3.3)\n\t\t\t          \
    \ \"A-\" \n\t\t\t           (if (< g 3.0)\n\t\t\t             \"B+\" \n\t\t\t\
    \             (if (< g 2.7)\n\t\t\t               \"B\" \n\t\t\t             \
    \  (if (< g 2.3)\n\t\t\t                 \"B-\" \n\t\t\t                 (if (<\
    \ g 2.0)\n\t\t\t                   \"C+\" \n\t\t\t                   (if (< g\
    \ 1.7)\n\t\t\t                     \"C\" \n\t\t\t                     (if (< g\
    \ 1.3)\n\t\t\t                       \"C-\" \n\t\t\t                       (if\
    \ (< g 1.0)\n\t\t\t                         \"D+\" \n\t\t\t                  \
    \       (if (< g 0.7)\n\t\t\t                           \"D\" \n\t\t\t       \
    \                    (if (< g 0.0)\n\t\t\t                             \"D-\"\
    \ \n\t\t\t                             \"E\")))))))) grades))))\n    (reverse\
    \ (remove-if (\u03BB (x)\n\t\t\t     (equal? (car x) \"E\"))\n\t\t       (map\
    \ car\n\t\t\t    (remove-if (\u03BB (x)\n\t\t\t\t\t     (equal? (car x) \"E\"\
    ))\n\t\t\t\t       letter))))))\n", "  (define (helper x) (if (< x 5.0) (* x 4.0)\
    \ (* x 3.0)))\n  (define (calc) \n    (define (helper x) (if (< x 5.0) (* x 4.0)\
    \ (* x 3.0)))\n    (lambda (x)\n      (cond\n        ((< x 5.0) (list 'A 'A 'B\
    \ 'B 'C 'C 'A 'A 'C 'C 'A 'A 'A 'B 'A 'C 'C))\n        ((< x 3.0) (list 'A 'A\
    \ 'A 'A 'B 'B 'B 'C 'C 'C 'C 'C 'C 'C))\n        ((< x 2.0) (list 'A 'A 'B 'B\
    \ 'B 'C 'C 'C 'C 'C 'C 'C 'C))\n        ((< x 1.7) (list 'A 'A 'B 'B 'C 'C 'C\
    \ 'C 'C 'C 'C 'C 'C))\n        ((< x 1.0) (list 'A 'A 'B 'B 'B 'C 'C 'C 'C 'C\
    \ 'C 'C 'C 'C 'C 'B 'A 'A 'B 'B 'B 'B 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C\
    \ 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C\
    \ 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C\
    \ 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C\
    \ 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C 'C\
    \ 'C 'C 'C 'C 'C 'C 'C 'C", "  (cond [(< grades 0.0) (cons \"E\" '())]\n     \
    \   [(< grades 1.0) (cons \"A\" '())]\n        [(< grades 2.0) (cons \"B\" '())]\n\
    \        [(< grades 3.0) (cons \"C\" '())]\n        [(< grades 3.1) (cons \"C+\"\
    \ '())]\n        [(< grades 3.2) (cons \"C+\" '())]\n        [(< grades 3.3) (cons\
    \ \"C\" '())]\n        [(< grades 3.4) (cons \"C-\" '())]\n        [(< grades\
    \ 3.5) (cons \"C-\" '())]\n        [else (cons \"C\" '())]))\n", "  (define (iter\
    \ grades)\n    (let ([a (first grades)])\n      (if (> (- a (* 4.0 3.0)) grades)\n\
    \          (let ([b (first grades)])\n            (if (> (- b (* 4.0 2.0)) grades)\n\
    \                (let ([c (first grades)])\n                  (if (> (- c (* 4.0\
    \ 1.0)) grades)\n                      (let ([d (first grades)])\n           \
    \             (if (> (- d (* 4.0 0.7)) grades)\n                            (let\
    \ ([e (first grades)])\n                              (cond \n               \
    \                 [(< e grades) \"\"]\n                                [(= e grades)\
    \ \"E\"]\n                                [else (cond \n                     \
    \                 [(< d grades) \"\"]\n                                      [(=\
    \ d grades) \"D\"]\n                                      [else (cond \n     \
    \                                       [(< c grades) \"\"]\n                \
    \                            [(= c grades) \"C\"]\n                          \
    \                  [else (cond \n                                            \
    \      [(< b grades) \"\"]\n                                                 \
    \ [(= b grades) \"B\"]\n                                                  [else\
    \ (cond \n                                                        [(< a grades)\
    \ \"\"]\n                                                        [(= a grades)\
    \ \"A\"]\n                                                        [else (cond\
    \ \n                                                              [(< grades 0)\
    \ \"\"]\n                                                              [else (cond\
    \ \n                                                                    [(< grades\
    \ 0) \"\"]\n                                                                 \
    \   [(< grades 0.5) \"F\"]\n                                                 \
    \                   [else (cond \n                                           \
    \                               [(< grades 0.5) \"\"]\n                      \
    \                                                    [else (cond \n          \
    \                                                                    [(< grades\
    \ 0.9) \"F\"]\n                                                              \
    \                [else \"?\")]\n                                             \
    \                               )])])])])])\n                          )\n   \
    \                     )\n                      )\n                    )\n    \
    \              )\n                )\n            )\n          )\n      )\n   \
    \ )\n    (cond [(< grades 0) \"\"]\n          [(< grades 0.5) \"F\"]\n       \
    \   [else (cond \n                 [(< grades 0.9) \"F\"]\n                 [else\
    \ \"?\")]\n                 )\n          ])\n  )\n  (iter (reverse grades))\n\
    )\n", "  (cond [(< grades 3.5) (list \"C+\" \"D\")\n\t(< grades 3.0) (list \"\
    C\" \"D-\")\n\t(< grades 2.7) (list \"B\" \"B-\")\n\t(< grades 2.3) (list \"B\"\
    \ \"B-\")\n\t(< grades 2.0) (list \"B\" \"B-\")\n\t(< grades 1.7) (list \"B\"\
    \ \"B-\")\n\t(< grades 1.0) (list \"B\" \"B-\")\n\t(< grades 0.7) (list \"B\"\
    \ \"B-\")\n\t(< grades 0.0) (list \"B\" \"B-\")\n\t(< grades -3.5) (list \"B\"\
    \ \"B\")\n\t(< grades -3.0) (list \"B\" \"B\")\n\t(< grades -2.7) (list \"B\"\
    \ \"B\")\n\t(< grades -2.3) (list \"B\" \"B\")\n\t(< grades -2.0) (list \"B\"\
    \ \"B\")\n\t(< grades -1.7) (list \"B\" \"B\")\n\t(< grades -1.0) (list \"B\"\
    \ \"B\")\n\t(< grades -0.7) (list \"B\" \"B\")\n\t(< grades -0.0) (list \"B\"\
    \ \"B\")\n\t(< grades 3.0) (list \"A+\")\n\t(< grades 3.7) (list \"A+\")\n\t(<\
    \ grades 3.3) (list \"A+\")\n\t(< grades 3.0) (list \"A+\")\n\t(< grades 2.7)\
    \ (list \"A+\")\n\t(< grades 2.3) (list \"A+\")\n\t(< grades 2.0) (list \"A+\"\
    )\n\t(< grades 1.7) (list \"A+\")\n\t(< grades 1.0) (list \"A+\")\n\t(< grades\
    \ 0.7) (list \"A+\")\n\t(< grades 0.0) (list \"A+\")\n\t(< grades -3.0) (list\
    \ \"A+\")\n\t(< grades -3.7) (list \"A+\")\n\t(< grades -3.3) (list \"A+\")\n\t\
    (< grades -3.0) (list \"A+\")\n\t(< grades -2.7) (list \"A+\")\n\t(< grades -2.3)\
    \ (list \"A+\")\n\t(< grades -2.0) (list \"A+\")\n\t(< grades -1.7) (list \"A+\"\
    )\n\t(< grades -1.0) (list \"A+\")\n\t(< grades -0.7) (list \"A+\")\n\t(< grades\
    \ -0.0) (list \"A+\")\n\t(< grades 3.0) (list \"", "  (let* ((grades (cons '(4\
    \ 3 1.7 2 3.5) grades))\n         (max '(3 3 2 2 2)))\n    (cond [(< max grades)\n\
    \           (string-downcase (let* ((grade (subseq grades 0 (cdr max)))\n    \
    \                           (min (subseq grades (car max) max)))\n           \
    \                    (letters (list \"A+\" \"A\" \"A-\" \"B+\" \"B\" \"B-\" \"\
    C+\" \"C\" \"C-\" \"D+\" \"D\" \"D-\" \"E\")))\n           (map (lambda (grade)\n\
    \                  (if (< (car grade) min)\n                      (string-downcase\
    \ (subseq letters (car grade) (cdr grade)))\n                      (string-downcase\
    \ (subseq letters '(0 9 1 8 7 6) (car grade))))) grades)\n          ]\n      \
    \    [(> max grades)\n           (map (lambda (grade)\n                  (string-downcase\
    \ (subseq letters '(0 9 1 8 7 6) (car grade))))\n               grades)\n    \
    \       ]\n          [else\n           (string-downcase (subseq letters '(0 9\
    \ 1 8 7 6) (car grades)))]\n          )\n    ))\n", "  (cond\n    [(< grades 0.0)\
    \ (list \"D-\")]\n    [(< grades 0.5) (list \"B+\")]\n    [(< grades 1.0) (list\
    \ \"B-\")]\n    [else (list \"A+\")]))\n", "  (cond\n    [(<= grades 1.0) 'A+]\n\
    \    [(< grades 3.0) 'A]\n    [(< grades 3.7) (cons 'A- 'A)]\n    [(< grades 3.3)\
    \ (cons 'A- 'A)]\n    [(< grades 2.0) (cons 'B+')]\n    [(< grades 2.7) (cons\
    \ 'B)]\n    [(< grades 2.3) (cons 'B-)]\n    [(< grades 1.7) (cons 'C+')]\n  \
    \  [(< grades 1.3) (cons 'C)]\n    [(< grades 1.0) (cons 'C-)]\n    [(< grades\
    \ 0.7) (cons 'D)]\n    [(< grades 0.0) (cons 'D-)]\n    [else (cons 'E)]\n))\n",
  "  (define (helper n acc)\n    (cond\n      [(< n 5) (cons acc \"E\")]\n      [(<\
    \ n 3) (cons acc \"A\")]\n      [(< n 2) (cons acc \"B\")]\n      [else (cons\
    \ acc \"A-\")]))\n  (helper (first grades) \"\"))", "  (letrec ([g (lambda (g)\n\
    \              (cond\n                ((< g 4.0) (g 'A+))\n                ((<\
    \ g 3.7) (g 'A))\n                ((< g 3.3) (g 'A-))\n                ((< g 3.0)\
    \ (g 'B+))\n                ((< g 2.7) (g 'B))\n                ((< g 2.3) (g\
    \ 'B-))\n                ((< g 2.0) (g 'C+))\n                ((< g 1.7) (g 'C))\n\
    \                ((< g 1.3) (g 'C-))\n                ((< g 1.0) (g 'D+))\n  \
    \              ((< g 0.7) (g 'D))\n                (else (g 'D-))))])\n      \
    \    [g-t (lambda (g)\n                 (let ([a (lambda (x) (g (+ x 1))) (d (lambda\
    \ (x) (g (+ x 2))) (e (lambda (x) (g (+ x 3)))))])\n                   (g a) (g\
    \ d) (g e))]))\n    (map (lambda (x) (g-t (lambda (x) x))) grades)))\n", "  (cond\n\
    \    ((< grades 2.7) \"B+\")\n    ((< grades 2.3) \"B-\")\n    ((< grades 2.0)\
    \ \"C+\")\n    ((< grades 1.7) \"C\")\n    ((< grades 1.3) \"C-\")\n    ((< grades\
    \ 1.0) \"D+\")\n    ((< grades 0.7) \"D\")\n    ((< grades 0.0) \"D-\")\n    ((<\
    \ grades 0.0) \"\")\n    (else \"E\")))\n", "  (define (helper num letter acc)\n\
    \    (cond\n      [(< num 0) (list letter)]\n      [else (helper (- num 1) (cons\
    \ letter acc) acc)])\n  (helper grades empty '()))\n", "  (let ([gpa (car grades)])\n\
    \    (cond\n      [(< gpa 3.0) 'B+]\n      [(< gpa 2.7) 'B]\n      [(< gpa 2.3)\
    \ 'B-]\n      [(< gpa 2.0) 'C+]\n      [(< gpa 1.7) 'C]\n      [(< gpa 1.3) 'C-]\n\
    \      [(< gpa 1.0) 'D+]\n      [(< gpa 0.7) 'D]\n      [(< gpa 0.0) 'D-]\n  \
    \    [else 'E]\n      )))\n", "  (cond\n    [(< grades 4.0) \"A+\"]\n    [(< grades\
    \ 3.7) \"A\"]\n    [(< grades 3.3) \"A-\"]\n    [(< grades 3.0) \"B+\"]\n    [(<\
    \ grades 2.7) \"B\"]\n    [(< grades 2.3) \"B-\"]\n    [(< grades 2.0) \"C+\"\
    ]\n    [(< grades 1.7) \"C\"]\n    [(< grades 1.3) \"C-\"]\n    [(< grades 1.0)\
    \ \"D+\"]\n    [(< grades 0.7) \"D\"]\n    [(< grades 0.0) \"D-\"]\n    [else\
    \ \"E\"]))\n", "  (cond\n    [(< grades (/ 1 4)) (list \"A+\")]\n    [(< grades\
    \ (/ 1 3)) (list \"A\")]\n    [(< grades (/ 1 2)) (list \"A-\")]\n    [(< grades\
    \ (/ 1 1)) (list \"B+\")]\n    [(< grades (/ 1 0)) (list \"B\")]\n    [(< grades\
    \ (/ 1 -1)) (list \"B-\")]\n    [else (list \"C+\")]\n  )\n)\n", "  (let ([low\
    \ (floor grades)]\n        [high (if (= low 4.0) 4.0 floor (+ 4.0 grades))]\n\
    \        [low-high (list-ref (list low high) 0)])\n    (cond [(< low-high 4.0)\
    \ (cond [(> low-high 3.7) 'B']\n                                [(> low-high 3.3)\
    \ 'C']\n                                [(> low-high 3.0) 'D+']\n            \
    \                    [(> low-high 2.7) 'D']\n                                [(>\
    \ low-high 2.3) 'D-']\n                                [(> low-high 2.0) 'C+']\n\
    \                                [(> low-high 1.7) 'C']\n                    \
    \            [(> low-high 1.3) 'C-']\n                                [(> low-high\
    \ 1.0) 'B+']\n                                [(> low-high 0.7) 'D']\n       \
    \                         [(> low-high 0.0) 'D-']\n                          \
    \      [(> low-high 0.0)\n                                 (cond [(> low-high\
    \ 3.0) 'A+']\n                                        [(> low-high 2.7) 'A']\n\
    \                                        [(> low-high 2.3) 'A-']\n           \
    \                             [(> low-high 2.0) 'A+']\n                      \
    \                  [(> low-high 1.7) 'A']\n                                  \
    \      [(> low-high 1.3) 'A-']\n                                        [(> low-high\
    \ 1.0) 'A+']\n                                        [(> low-high 0.7) 'A']\n\
    \                                        [(> low-high 0.0) 'A-']\n           \
    \                             [(> low-high 0.0)\n                            \
    \             'A+']\n                                        [(> low-high 3.0)\
    \ 'A+']\n                                        [(> low-high 2.7) 'A+']\n   \
    \                                     [(> low-high 2.3) 'A+']\n              \
    \                          [(> low-high 2.0) 'A+']\n                         \
    \               [(> low-high 1.7) 'A+']\n                                    \
    \    [(> low-high 1.3) 'A+']\n                                        [(> low-high\
    \ 1.0) 'A+']\n                                        [(> low-high 0.7) 'A+']\n\
    \                                        [(> low-high 0.0) 'A+']\n           \
    \                             [(> low-high 0.0)\n                            \
    \             'A+']\n                                        [(> low-high 3.0)\
    \ 'A+']\n                                        [(> low-high 2.7) 'A+']\n   \
    \                                     [(> low-high 2.3) 'A+']\n              \
    \                          [(> low-high 2.0) 'A+']\n", "  (map (lambda (grade)\
    \ (if (< grade 0) 'D grade)) grades))", "  (cond\n    ((<= 0 grades) \"D-\")\n\
    \    ((= grades 1) \"D\")\n    ((= grades 2) \"C+\")\n    ((= grades 3) \"C\"\
    )\n    ((= grades 4) \"B+\")\n    ((= grades 5) \"B\")\n    ((= grades 6) \"A-\"\
    )\n    ((= grades 7) \"A\")\n    ((< grades 8) \"A-\")\n    ((< grades 9) \"A-\"\
    )\n    ((< grades 10) \"B+\")\n    ((< grades 11) \"B\")\n    ((< grades 12) \"\
    B-\")\n    ((< grades 13) \"B-\")\n    ((< grades 14) \"B+\")\n    ((< grades\
    \ 15) \"B\")\n    ((< grades 16) \"B+\")\n    ((< grades 17) \"B\")\n    ((< grades\
    \ 18) \"B-\")\n    ((< grades 19) \"B-\")\n    ((< grades 20) \"B+\")\n    ((<\
    \ grades 21) \"B\")\n    ((< grades 22) \"B+\")\n    ((< grades 23) \"B\")\n \
    \   ((< grades 24) \"B-\")\n    ((< grades 25) \"B-\")\n    ((< grades 26) \"\
    B+\")\n    ((< grades 27) \"B\")\n    ((< grades 28) \"B-\")\n    ((< grades 29)\
    \ \"B-\")\n    ((< grades 30) \"B+\")\n    ((< grades 31) \"B\")\n    ((< grades\
    \ 32) \"B+\")\n    ((< grades 33) \"B\")\n    ((< grades 34) \"B-\")\n    ((<\
    \ grades 35) \"B-\")\n    ((< grades 36) \"B+\")\n    ((< grades 37) \"B\")\n\
    \    ((< grades 38) \"B+\")\n    ((< grades 39) \"B\")\n    ((< grades 40) \"\
    B-\")\n    ((< grades 41) \"B-\")\n    ((< grades 42) \"B+\")\n    ((< grades\
    \ 43) \"B\")\n    ((< grades 44) \"B+\")\n    ((< grades 45) \"B\")\n    ((< grades\
    \ 46) \"B-\")\n    ((< grades 47) \"B-\")\n    ((< grades 48) \"B+\")\n    ((<\
    \ grades 49) \"B\")\n    ((< grades 50) \"B+\")\n    ((< grades 51) \"B\")\n \
    \   ((< grades 52) \"B-\")\n    ((< grades 53) \"B-\")\n    ((< grades 54) \"\
    B+\")\n    ((< grades 55) \"B\")\n    ((< ", "  (define (find_gpa_range gpa)\n\
    \    (cond\n      [(<= gpa 4.0)\n       (subseq \"A+\" \"B\" \"C\" \"D\" \"E\"\
    \ \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\"\
    \ \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\")\n      ]\n      [(< gpa 4.0)\n\
    \       (subseq \"A+\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"\
    K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"\
    X\" \"Y\" \"Z\")\n      ]\n      [(< gpa 3.7)\n       (subseq \"A\" \"B\" \"C\"\
    \ \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\"\
    \ \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\")\n      ]\n    \
    \  [(< gpa 3.3)\n       (subseq \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\"\
    \ \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\"\
    \ \"V\" \"W\" \"X\" \"Y\" \"Z\")\n      ]\n      [(< gpa 3.0)\n       (subseq\
    \ \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\"\
    \ \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\
    )\n      ]\n      [(< gpa 2.7)\n       (subseq \"A\" \"B\" \"C\" \"D\" \"E\" \"\
    F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"\
    S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\")\n      ]\n      [(< gpa 2.3)\n\
    \       (subseq \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"\
    K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"\
    X\" \"Y\" \"Z\")\n      ]\n      [(< gpa 2.0)\n       (subseq \"A\" \"B\" \"C\"\
    \ \"D\" \"E", "  (let ([grade_counts (count-grade grades)])\n    (let ([max_grade\
    \ (max-grade grades)])\n      (if (>= max_grade 0) \n          (cond [(> (grade\
    \ grades) max_grade)\n                 (cond [(< max_grade max_grade grade_counts)\n\
    \                        (cond [(< grade_counts (- max_grade (grade grades)))\n\
    \                              (cond [(< grade_counts 0)\n                   \
    \                 (cond [(= grade_counts 1)\n                                \
    \            (cons \"D+\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 2)\n                 \
    \                      (cons \"D\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 3)\n                 \
    \                      (cons \"D-\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 4)\n                 \
    \                      (cons \"C-\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 5)\n                 \
    \                      (cons \"B-\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 6)\n                 \
    \                      (cons \"B\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 7)\n                 \
    \                      (cons \"B-\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 8)\n                 \
    \                      (cons \"B+\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 9)\n                 \
    \                      (cons \"A+\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 10)\n                \
    \                       (cons \"A\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 11)\n                \
    \                       (cons \"A-\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 12)\n                \
    \                       (cons \"A+\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 13)\n                \
    \                       (cons \"A-\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      [(= grade_counts 14)\n                \
    \                       (cons \"A+\" (letter (numerical_letter_grade (grade grades))))]\n\
    \                                      ", "  (cond ((= grades 0) \"E\")\n    \
    \    ((< grades 1) \"D-\")\n        ((< grades 3) \"C\")\n        ((< grades 4)\
    \ \"B-\")\n        ((< grades 5) \"B-\")\n        ((< grades 6) \"B-\")\n    \
    \    ((< grades 7) \"B-\")\n        ((< grades 8) \"B-\")\n        ((< grades\
    \ 9) \"B-\")\n        ((< grades 10) \"B-\")\n        ((< grades 11) \"B-\")\n\
    \        ((< grades 12) \"B-\")\n        ((< grades 13) \"B-\")\n        ((< grades\
    \ 14) \"B-\")\n        ((< grades 15) \"B-\")\n        ((< grades 16) \"B-\")\n\
    \        ((< grades 17) \"B-\")\n        ((< grades 18) \"B-\")\n        ((< grades\
    \ 19) \"B-\")\n        ((< grades 20) \"B-\")\n        ((< grades 21) \"B-\")\n\
    \        ((< grades 22) \"B-\")\n        ((< grades 23) \"B-\")\n        ((< grades\
    \ 24) \"B-\")\n        ((< grades 25) \"B-\")\n        ((< grades 26) \"B-\")\n\
    \        ((< grades 27) \"B-\")\n        ((< grades 28) \"B-\")\n        ((< grades\
    \ 29) \"B-\")\n        ((< grades 30) \"B-\")\n        ((< grades 31) \"B-\")\n\
    \        ((< grades 32) \"B-\")\n        ((< grades 33) \"B-\")\n        ((< grades\
    \ 34) \"B-\")\n        ((< grades 35) \"B-\")\n        ((< grades 36) \"B-\")\n\
    \        ((< grades 37) \"B-\")\n        ((< grades 38) \"B-\")\n        ((< grades\
    \ 39) \"B-\")\n        ((< grades 40) \"B-\")\n        ((< grades 41) \"B-\")\n\
    \        ((< grades 42) \"B-\")\n        ((< grades 43) \"B-\")\n        ((< grades\
    \ 44) \"B-\")\n        ((< grades 45) \"B-\")\n        ((< grades 46) \"B-\")\n\
    \        ((< grades 47) \"B-\")\n        ((< grades 48) \"B-\")\n        ((< grades\
    \ 49) \"B-\")\n        ((< grades 50) \"B-\")\n        ((< grades 51) ", "  (define\
    \ (add1 n)\n    (if (< n 0)\n        'E\n        (add n 'A)))\n  (define (add2\
    \ n)\n    (if (< n 0)\n        'E\n        (add n 'B)))\n  (define (add3 n)\n\
    \    (if (< n 0)\n        'E\n        (add n 'C)))\n  (define (add4 n)\n    (if\
    \ (< n 0)\n        'E\n        (add n 'D)))\n  (define (add5 n)\n    (if (< n\
    \ 0)\n        'E\n        (add n 'E)))\n\n  (if (null? grades)\n      'E\n   \
    \   (cond \n        (< grades (expt (first grades) 4)) (add1 (numerical_letter_grade\
    \ (rest grades))) \n        (< grades (expt (first grades) 3)) (add2 (numerical_letter_grade\
    \ (rest grades))) \n        (< grades (expt (first grades) 2)) (add3 (numerical_letter_grade\
    \ (rest grades))) \n        (< grades (expt (first grades) 1)) (add4 (numerical_letter_grade\
    \ (rest grades))) \n        (< grades (expt (first grades) 0)) (add5 (numerical_letter_grade\
    \ (rest grades))) \n        (else\n         (first grades)\n         (numerical_letter_grade\
    \ (rest grades))))))\n</cell>\n<cell>\n#lang racket\n", "  (loop for grade in\
    \ grades \n        for letter \n        when (< grade 4.0) \n        collect (list\
    \ (- grade 4.0) letter)))\n", "  (let ([gpa (car grades)]\n        [letter \"\
    E\"])\n    (cond\n      [(< gpa 4.0) (cons letter \"A+\")]\n      [(> gpa 3.7)\
    \ (cons letter \"A\")]\n      [(> gpa 3.3) (cons letter \"A-\")]\n      [(> gpa\
    \ 3.0) (cons letter \"B+\")]\n      [(> gpa 2.7) (cons letter \"B\")]\n      [(>\
    \ gpa 2.3) (cons letter \"B-\")]\n      [(> gpa 2.0) (cons letter \"C+\")]\n \
    \     [(> gpa 1.7) (cons letter \"C\")]\n      [(> gpa 1.3) (cons letter \"C-\"\
    )]\n      [(> gpa 1.0) (cons letter \"D+\")]\n      [(> gpa 0.7) (cons letter\
    \ \"D\")]\n      [else (cons letter \"D-\")]\n      )\n    )\n  )\n", "  (let*\
    \ ((gpa-table (make-array (floor (/ grades 4.0)))\n            (gpas (make-array\
    \ (floor (/ grades 4.0)))\n            (gpa-sum (make-array (floor (/ grades 4.0)))\n\
    \            (gpa-sum-index 0))\n            (grade (make-array (floor (/ grades\
    \ 4.0)))\n            (index 0))\n    (check-equal? gpa-table gpas)\n    (check-equal?\
    \ gpa-sum gpa-sum-index)\n    (loop\n      (set! index (+ index 1))\n      (let*\
    \ ((gpa-sum-index (+ gpa-sum-index 1))\n            (table (gpa-table gpa-sum-index)\n\
    \                  (gpas (gpa-sum gpa-sum-index)\n                  (gpa-sum-index\
    \ gpa-sum-index)))\n          (grade (+ (gpa table) grade)))\n        (set! gpa-sum\
    \ (gpa table))\n        (set! gpa-sum-index gpa-sum-index)\n        (set! gpa-table\
    \ (apply + (gpa table))))\n      (set! grade (+ (gpa table) grade))))\n    (apply\
    \ string-append (sort grades #'< :key #'car))))\n", "  (map (lambda (x) '(if (<\
    \ x 3.0) '(cons \"A+\" '(cons \"A\" '(cons \"B+\" '(cons \"B\" '(cons \"B-\" '(cons\
    \ \"B-\" '(cons \"B-\" '(cons \"B+\" '(cons \"B+\" '(cons \"C+\" '(cons \"C\"\
    \ '(cons \"C\" '(cons \"C-\" '(cons \"C-\" '(cons \"C-\" '(cons \"C+\" '(cons\
    \ \"C+\" '(cons \"D+\" '(cons \"D\" '(cons \"D-\" '(cons \"D-\" '(cons \"D+\"\
    \ '(cons \"D+\" '(cons \"D\" '(cons \"E+\" '(cons \"E\" '())))))))) '()))) '(cons\
    \ \"E\" '()))) '(cons \"E\" '()))) grades))\n", "  (map (fn [gpa grade]\n    \
    \     (cond\n           ((= gpa 0.0) \"D-\")\n           ((< gpa 4.0) \"D\")\n\
    \           ((< gpa 3.7) \"C-\")\n           ((< gpa 3.3) \"C\")\n           ((<\
    \ gpa 2.0) \"B-\")\n           ((< gpa 2.7) \"B\")\n           ((< gpa 2.3) \"\
    B-\")\n           ((< gpa 1.7) \"A-\")\n           ((< gpa 1.0) \"A+\")\n    \
    \       (else \"E-\")))\n       grades\n       (reverse )))\n", "  (cond [(< grades\
    \ 0.0) (list \"F\")]\n        [(< grades 3.0) (list \"D-\")]\n        [(< grades\
    \ 3.3) (list \"D\")]\n        [(< grades 3.7) (list \"C-\")]\n        [(< grades\
    \ 4.0) (list \"B-\")]\n        [(< grades 4.3) (list \"B\")]\n        [(< grades\
    \ 4.7) (list \"A-\")]\n        [(< grades 5.0) (list \"A+\")]\n        [else (list\
    \ \"E\")]))\n", "  (cond\n    [(empty? grades) empty]\n    [(<= (first grades)\
    \ 0) \"F\"]\n    [(< 0 (first grades)) \"C\"]\n    [(< 0 (second grades)) \"B\"\
    ]\n    [(< 0 (third grades)) \"A-\"]\n    [(< 0 (fourth grades)) \"A-\"]\n   \
    \ [else \"A+\"]\n  )\n)\n", "  (if (<= grades 5.0)\n      \"A+\"\n      (if (>\
    \ grades 5.0 4.0)\n          \"A-\"\n          (if (> grades 5.0 3.7)\n      \
    \        \"A-\"\n              (if (> grades 5.0 3.3)\n                  \"A-\"\
    \n                  (if (> grades 5.0 3.0)\n                      \"B+\"\n   \
    \                   (if (> grades 5.0 2.7)\n                          \"B\"\n\
    \                          (if (> grades 5.0 2.3)\n                          \
    \    \"B-\"\n                              (if (> grades 5.0 2.0)\n          \
    \                        \"C+\"\n                                  (if (> grades\
    \ 5.0 1.7)\n                                      \"C\"\n                    \
    \                  (if (> grades 5.0 1.3)\n                                  \
    \        \"C-\"\n                                          (if (> grades 5.0 1.0)\n\
    \                                              \"D+\"\n                      \
    \                        (if (> grades 5.0 0.7)\n                            \
    \                      \"D\"\n                                               \
    \   (if (> grades 5.0 0.0)\n                                                 \
    \     \"D-\"\n                                                      \"E\"))))))))\
    \ ))))) ))\n", "  (define (grade_if grade level)\n    (cond [(grade >= level)\
    \ \"A+\"\n          (grade > level . \"B\")\n          (grade > level . \"B-\"\
    )\n          (grade > level . \"C\")\n          (grade > level . \"C-\")\n   \
    \       (grade > level . \"D\")\n          (grade > level . \"D-\")\n        \
    \  (grade > level . \"E\")\n          (grade > level . \"E-\")\n          (else\
    \ \"D\")])\n  (apply (lambda (grade)\n           (map (lambda (level)\n      \
    \             (grade_if grade level)) grades))))\n</code>\n<|/ a tags=scheme,racket,recursion\
    \ dscore=0 |>\n<| c |>\ni dont understand this part:\n", "  (cond ((< grades 4.0)\
    \ \"A+\")\n        ((< grades 3.7) \"A\")\n        ((< grades 3.3) \"A- \")\n\
    \        ((< grades 3.0) \"B+\")\n        ((< grades 2.7) \"B\")\n        ((<\
    \ grades 2.3) \"B-\")\n        ((< grades 2.0) \"C+\")\n        ((< grades 1.7)\
    \ \"C\")\n        ((< grades 1.3) \"C-\")\n        ((< grades 1.0) \"D+\")\n \
    \       ((< grades 0.7) \"D\")\n        (else \"D-\"))\n", "  (cond\n    [(< grades\
    \ 0.0) \"E\"]\n    [(< grades 1.0) \"A\"]\n    [(< grades 3.0) \"A\"]\n    [(<\
    \ grades 3.7) \"A\"]\n    [(< grades 3.3) \"A-\"]\n    [(< grades 3.0) \"B+\"\
    ]\n    [(< grades 2.7) \"B\"]\n    [(< grades 2.3) \"B-\"]\n    [(< grades 2.0)\
    \ \"C+\"]\n    [(< grades 1.7) \"C\"]\n    [(< grades 1.3) \"C-\"]\n    [(< grades\
    \ 1.0) \"D+\"]\n    [(< grades 0.7) \"D\"]\n    [(< grades 0.0) \"D-\"]\n    [else\
    \ grades]))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the help, I am going\
    \ to study this to understand it better.\n<|/ c |>\n<| c |>\nSorry, it says \"\
    Expected a definition but found a lambda\"\n<|/ c |>\n<| c |>\nDid you add the\
    \ `(define (...)` part? It has to go above the `(define (...)` part.\n<|/ c |>\n\
    <| c |>\nI tried adding `(define (...)` but it is still giving me an error.\n\
    <|/ c |>\n<| c |>\nSee edit for a working solution, although not necessarily the\
    \ most efficient.\n<|/ c |>\n<| a dscore=0 |>\nI am not sure why you got an error,\
    \ but there is also a problem with the definition of the function. You defined\
    \ the function like this:\n<code>", "  (let ([gpa (first grades)])\n    (cond\n\
    \      [(< gpa 3.0) (list \"B+\")]\n      [(< gpa 3.7) [(list \"C\")] (if (< gpa\
    \ 3.3) \"B-\"\n                                        (if (< gpa 3.0) \"B-\"\n\
    \                                            (if (< gpa 2.7) \"B\"\n         \
    \                                       \"B-\")\n                            \
    \            \"B\")]\n      [(< gpa 3.3) \"C+\"]\n      [(< gpa 2.3) \"D+\"]\n\
    \      [(< gpa 2.0) \"D-\"]\n      [(< gpa 1.7) \"E\"]\n      [(< gpa 1.0) \"\
    F\"]\n      [(< gpa 0.7) \"G\"]\n      [(< gpa 0.0) \"H\"]\n      [(< gpa 0.0)\
    \ \"\"]\n      [] \"\"))", "  ;; Write the code for this function\n)\n", "  (let\
    \ loop ((i 0)\n             (grades '()))\n    (cond\n      [(< i 8) grades]\n\
    \      [(< i 9)\n       (loop (add1 i)\n             (cons (char (+ 48 (char '0')\
    \ i)) grades))]\n      [(< i 10)\n       (loop (add1 i)\n             (cons (char\
    \ (+ 65 (char 'a') i)) grades))]\n      [(< i 11)\n       (loop (add1 i)\n   \
    \          (cons (char (+ 97 (char 'a') i)) grades))]\n      [(< i 12)\n     \
    \  (loop (add1 i)\n             (cons (char (+ 100 (char 'a') i)) grades))]\n\
    \      [(< i 13)\n       (loop (add1 i)\n             (cons (char (+ 10 (char\
    \ 'b') i)) grades))]\n      [(< i 14)\n       (loop (add1 i)\n             (cons\
    \ (char (+ 11 (char 'b') i)) grades))]\n      [(< i 15)\n       (loop (add1 i)\n\
    \             (cons (char (+ 12 (char 'b') i)) grades))]\n      [(< i 16)\n  \
    \     (loop (add1 i)\n             (cons (char (+ 13 (char 'c') i)) grades))]\n\
    \      [(< i 17)\n       (loop (add1 i)\n             (cons (char (+ 14 (char\
    \ 'c') i)) grades))]\n      [(< i 18)\n       (loop (add1 i)\n             (cons\
    \ (char (+ 15 (char 'c') i)) grades))]\n      [(< i 19)\n       (loop (add1 i)\n\
    \             (cons (char (+ 16 (char 'd') i)) grades))]\n      [(< i 20)\n  \
    \     (loop (add1 i)\n             (cons (char (+ 17 (char 'd') i)) grades))]\n\
    \      [(< i 21)\n       (loop (add1 i)\n             (cons (char (+ 18 (char\
    \ 'd') i)) grades))]\n      [(< i 22)\n       (loop (add1 i)\n             (cons\
    \ (char (+ 19 (char 'd') i)) grades))]\n      [(< i 23)\n       (loop (add1 i)\n\
    \             (cons (char (+ 20 (char 'd') i)) grades))]\n      [(< i 24)\n  \
    \     (loop (add1 i)\n             (cons (char (+ 21 (", "  (cond [(< grades 4.0)\
    \ (list 'A+ )]\n        [(< grades 3.7) \n         (list 'A)]\n        [(< grades\
    \ 3.3) \n         (list 'A-)]\n        [(< grades 3.0) (list 'B+ )]\n        [(<\
    \ grades 2.7) \n         (list 'B)]\n        [(< grades 2.3) \n         (list\
    \ 'B-)]\n        [(< grades 2.0) (list 'C+ )]\n        [(< grades 1.7) \n    \
    \     (list 'C)]\n        [(< grades 1.3) \n         (list 'C-)]\n        [(<\
    \ grades 1.0) (list 'D+ )]\n        [(< grades 0.7) \n         (list 'D)]\n  \
    \      [(< grades 0.0) \n         (list 'D-)]\n        [(< grades 0.0) (list 'E)]))\n",
  "  (if (null? grades)\n      (list 'E)\n      (let-values ([(g s) (first grades)]\n\
    \                  [(g1 s1) (first grades)])\n        (if (<= g1 g) (list 'D-))\n\
    \        (cond ((= (- g1 g) 0) (list 'B-))\n              ((= (- g1 g) 1) (list\
    \ 'B-))\n              ((= (- g1 g) 2) (list 'B-))\n              ((= (- g1 g)\
    \ 3) (list 'A-))\n              ((= (- g1 g) 4) (list 'A-))\n              ((=\
    \ (- g1 g) 5) (list 'A-))\n              ((= (- g1 g) 6) (list 'A-))\n       \
    \       ((= (- g1 g) 7) (list 'A+))\n              ((= (- g1 g) 8) (list 'A+))\n\
    \              ((= (- g1 g) 9) (list 'A+))\n              ((= (- g1 g) 10) (list\
    \ 'A+))\n              ((= (- g1 g) 11) (list 'A+))\n              ((= (- g1 g)\
    \ 12) (list 'A+))\n              ((= (- g1 g) 13) (list 'A+))\n              ((=\
    \ (- g1 g) 14) (list 'A+))\n              ((= (- g1 g) 15) (list 'A+))\n     \
    \         ((= (- g1 g) 16) (list 'A+))\n              ((= (- g1 g) 17) (list 'A+))\n\
    \              ((= (- g1 g) 18) (list 'A+))\n              ((= (- g1 g) 19) (list\
    \ 'A+))\n              ((= (- g1 g) 20) (list 'A+))\n              ((= (- g1 g)\
    \ 21) (list 'A+))\n              ((= (- g1 g) 22) (list 'A+))\n              ((=\
    \ (- g1 g) 23) (list 'A+))\n              ((= (- g1 g) 24) (list 'A+))\n     \
    \         ((= (- g1 g) 25) (list 'A+))\n              ((= (- g1 g) 26) (list 'A+))\n\
    \              ((= (- g1 ", "  (define (add x y)\n    (if (null? y) '()\n    \
    \    (cons (car y) (add x (cdr y))))\n    (if (< x 4.0) '()\n        (cons #\\\
    A+ (add x (list 'B)))))\n  (define (sub x y)\n    (if (null? y) '()\n        (cons\
    \ (car y) (sub (cdr x) (cdr y))))\n    (if (< x 3.7) '()\n        (cons #\\A+\
    \ (sub x (list 'B)))))\n  (define (avg x)\n    (/ (+ x 1) (length x)))\n  (define\
    \ (sub x y)\n    (if (null? y) '()\n        (cons (car y) (sub (cdr x) (cdr y))))\n\
    \    (if (< x 3.3) '()\n        (cons #\\A- (sub x (list 'B)))))\n  (define (sub\
    \ x y)\n    (if (null? y) '()\n        (cons (car y) (sub (cdr x) (cdr y))))\n\
    \    (if (< x 3.0) '()\n        (cons #\\B+ (sub x (list 'C)))))\n  (define (sub\
    \ x y)\n    (if (null? y) '()\n        (cons (car y) (sub (cdr x) (cdr y))))\n\
    \    (if (< x 2.7) '()\n        (cons #\\B+ (sub x (list 'C)))))\n  (define (sub\
    \ x y)\n    (if (null? y) '()\n        (cons (car y) (sub (cdr x) (cdr y))))\n\
    \    (if (< x 2.3) '()\n        (cons #\\B- (sub x (list 'C)))))\n  (define (sub\
    \ x y)\n    (if (null? y) '()\n        (cons (car y) (sub (cdr x) (cdr y))))\n\
    \    (if (< x 2.0) '()\n        (cons #\\C+ (sub x (list 'D)))))\n  (define (sub\
    \ x y)\n    (if (null? y) '()\n        (cons (car y) (sub (cdr x) (cdr y))))\n\
    \    (if (< x 1.7) '()\n        (cons #\\C+ (sub x (list 'D)))))\n  (define (sub\
    \ x y)\n    (if (null? y) '()\n        (cons (car y) (sub (cdr x) (cdr y))))\n\
    \    (", "  (let* ((grade_sum (apply + grades))\n         (highest_gpa (car grades))\n\
    \         (lowest_gpa (cadr grades))\n         (letter_grade (+ (numerical_letter_grade\
    \ highest_gpa)\n                             (numerical_letter_grade lowest_gpa)))\n\
    \         (highest_letter_grade (car letter_grade))\n         (lowest_letter_grade\
    \ (cadr letter_grade))\n         (letter_grade_counter (- (length grades) 1)))\n\
    \    (cond\n      [(< highest_letter_grade lowest_letter_grade)\n       (list\
    \ letter_grade_counter lowest_letter_grade)]\n      [(< lowest_letter_grade highest_letter_grade)\n\
    \       (list letter_grade_counter highest_letter_grade)]\n      [(< lowest_letter_grade\
    \ lowest_letter_grade (> highest_letter_grade lowest_letter_grade))\n       (list\
    \ letter_grade_counter lowest_letter_grade)]\n      [(< highest_letter_grade lowest_letter_grade\
    \ (> lowest_letter_grade highest_letter_grade))\n       (list letter_grade_counter\
    \ lowest_letter_grade highest_letter_grade)]\n      [(< lowest_letter_grade highest_letter_grade\
    \ (> lowest_letter_grade highest_letter_grade) (> highest_letter_grade lowest_letter_grade))\n\
    \       (list letter_grade_counter lowest_letter_grade highest_letter_grade)]\n\
    \      [else (list letter_grade_counter letter_grade)]))\n", "  (cond\n    [(null?\
    \ grades) 'A+]\n    [(<= (first grades) 3.0) (cons (first grades) 'A- )]\n   \
    \ [(<= (first grades) 2.7) 'B]\n    [(<= (first grades) 2.3) 'B-]\n    [(<= (first\
    \ grades) 2.0) 'C+]\n    [(<= (first grades) 1.7) 'C]\n    [(<= (first grades)\
    \ 1.3) 'C-]\n    [(<= (first grades) 1.0) 'D+]\n    [(<= (first grades) 0.7) 'D]\n\
    \    [(<= (first grades) 0.0) 'D-]\n    [else 'E]))\n", "  (define (loop i grades\
    \ letters)\n    (cond [(= i 0) (append letters letters)]\n          [(< i 20)\
    \ (string-append (grade (first grades)) letters)]\n          [(< i 100) (string-append\
    \ (grade (second grades)) letters)]\n          [(< i 1000) (string-append (grade\
    \ (third grades)) letters)]\n          [else (loop i (rest grades) (string-append\
    \ (grade (first grades)) letters))]))\n  (loop (length grades) grades \"\"))\n",
  "  (if (<= (length (car grades)) 5)\n      (append (list-ref grades 0) \"+\")\n\
    \      (append (list-ref grades 0) \"-\"))\n  (if (> (length (car grades)) 0)\n\
    \      (append (list-ref grades 1) \"-\")\n      (append (list-ref grades 1) \"\
    +\")))\n", "  (let ((sum (apply + grades)))\n    (map (lambda (g) (cond ((< g\
    \ 0) \"D-\") ((< g 7.1) \"B-\")\n                      ((< g 7.9) \"B-\") ((<\
    \ g 8) \"B-\")\n                      ((< g 9) \"B-\") ((< g 10) \"B+\")\n   \
    \                   ((< g 11) \"B-\") ((< g 12) \"B-\")\n                    \
    \  ((< g 13) \"B-\") ((< g 14) \"B-\")\n                      ((< g 15) \"B-\"\
    ) ((< g 16) \"B-\")\n                      ((< g 17) \"B-\") ((< g 18) \"B-\"\
    )\n                      ((< g 19) \"B-\") ((< g 20) \"B+\")\n               \
    \       ((< g 21) \"B+\") ((< g 22) \"B-\")\n                      ((< g 23) \"\
    B+\") ((< g 24) \"B-\")\n                      ((< g 25) \"B+\") ((< g 26) \"\
    B-\")\n                      ((< g 27) \"B+\") ((< g 28) \"B-\")\n           \
    \           ((< g 29) \"B+\") ((< g 30) \"B+\")\n                      ((< g 31)\
    \ \"B+\") ((< g 32) \"B+\")\n                      ((< g 33) \"B+\") ((< g 34)\
    \ \"B+\")\n                      ((< g 35) \"B+\") ((< g 36) \"B+\")\n       \
    \               ((< g 37) \"B+\") ((< g 38) \"B+\")\n                      ((<\
    \ g 39) \"B+\") ((< g 40) \"B+\")\n                      ((< g 41) \"B+\") ((<\
    \ g 42) \"B+\")\n                      ((< g 43) \"B+\") ((< g 44) \"B+\")\n \
    \                     ((< g 45) \"B+\") ((< g 46) \"B+\")\n                  \
    \    ((< g 47) \"B+\") ((< g 48) \"B+\")\n                      ((< g 49) \"B+\"\
    ) ((< g 50) \"B+\")\n                      ((< g 51) \"B+\") ((< g 52) \"B+\"\
    )\n                      ((< g 53) \"B+\") ((< g 54) \"B+\")\n               \
    \       ((< g 55) \"B+\") ((< g 56) \"B+\")\n                      ((< g 57) \"\
    B+\") ((< g 58) \"B+\")\n                      ((< g 59) \"B+\") ((< g 60) \"\
    B+\")\n                      ((< g 61) \"B+\") ((< g 62) \"B+\")\n           \
    \           ", "  (if (= 0 (mod grades 7))\n      (if (< grades 3.0)\n       \
    \   \"B+\"\n          (if (< grades 3.7)\n              \"B\"\n              (if\
    \ (< grades 3.3)\n                  \"B-\"\n                  (if (< grades 3.0)\n\
    \                      \"C+\"\n                      (if (< grades 2.7)\n    \
    \                      \"C\"\n                          (if (< grades 2.3)\n \
    \                             \"C-\"\n                              (if (< grades\
    \ 2.0)\n                                  \"D+\"\n                           \
    \       (if (< grades 1.7)\n                                      \"D\"\n    \
    \                                  (if (< grades 1.3)\n                      \
    \                    \"D-\"\n                                          (if (<\
    \ grades 1.0)\n                                              \"F\"\n         \
    \                                     \"E\"))))))))))\n      (if (< grades 3.0)\n\
    \          \"B-\"\n          (if (< grades 3.7)\n              \"B-\"\n      \
    \        (if (< grades 3.3)\n                  \"C-\"\n                  (if (<\
    \ grades 3.0)\n                      \"C\"\n                      (if (< grades\
    \ 2.7)\n                          \"C\"\n                          (if (< grades\
    \ 2.3)\n                              \"C-\"\n                              (if\
    \ (< grades 2.0)\n                                  \"D\"\n                  \
    \                (if (< grades 1.7)\n                                      \"\
    D\"\n                                      (if (< grades 1.3)\n              \
    \                            \"D-\"\n                                        \
    \  (if (< grades 1.0)\n                                              \"E\"\n \
    \                                             \"F\"))))))))))\n      (if (< grades\
    \ 3.0)\n          \"C-\"\n          (if (< grades 3.7)\n              \"C-\"\n\
    \              (if (< grades 3.3)\n                  \"C\"\n                 \
    \ (if (< grades 3.0)\n                      \"C\"\n                      (if (<\
    \ grades 2.7)\n                          \"C\"\n                          (if\
    \ (< grades 2.3)\n                              \"C-\"\n                     \
    \         (if (< grades 2.0)\n                                  \"D-\"\n     \
    \                             (if (< grades 1.7)\n                           \
    \           \"D\"\n                                      (if (< grades 1.3)\n\
    \                                          \"D-\"\n                          \
    \                (if (< grades 1.0)\n                                        \
    \      \"E\"\n                                              \"F\"))))))))))\n\
    \      (if (< grades 3.0)\n          \"C-\"\n          (if (< grades 3.7)\n  \
    \            \"C\"\n              (if (< grades 3.3)\n                  \"C\"\n\
    \                  (if (< grades 3.0)\n                      \"C\"\n         \
    \             (if (< grades 2.7)\n                          \"C\"\n          \
    \                (if (< grades 2.3)\n                              \"C\"\n   \
    \                           (if (< grades 2.0)\n                             \
    \     \"C\"\n                                  (if (< grades 1.7)\n", "  (let*\
    \ ((result '())\n         (temp 0))\n    (for grade grades\n      (if (<= grade\
    \ 4.0)\n          (cons temp (cons 'A 'result))\n          (cons temp (cons 'A\
    \ 'result)))))\n  result)\n", "  (define (iter g lst)\n    (cond ((null? (cdr\
    \ lst)) (car lst))\n          ((equal? (car lst) g) (iter (+ g (car lst)) (cdr\
    \ lst)))\n          (else (iter g rest)))\n  (iter 0.0 grades))\n", "  ; Your\
    \ code here !\n  (define (grade_equation)\n    (cond ((< grades 4.0) \"A+\")\n\
    \          ((< grades 3.7) \"A\")\n          ((< grades 3.3) \"A-\")\n       \
    \   ((< grades 3.0) \"B+\")\n          ((< grades 2.7) \"B\")\n          ((< grades\
    \ 2.3) \"B-\")\n          ((< grades 2.0) \"C+\")\n          ((< grades 1.7) \"\
    C\")\n          ((< grades 1.3) \"C-\")\n          ((< grades 1.0) \"D+\")\n \
    \         ((< grades 0.7) \"D\")\n          ((< grades 0.0) \"D-\")\n        \
    \  ((< grades 0.0) \"E\")\n          (else \"Invalid GPA or Grade\")\n    )\n\
    \  )\n)\n</code>\n<|/ a |>\n<| c |>\nIf this answer helped you, you should mark\
    \ it as accepted.\n<|/ c |>\n<| a dscore=1 |>\nI tried to solve the same problem\
    \ and came up with this solution:\n<code>", "  (let ((numerical_grades (map (\u03BB\
    \ (x) (+ (* 4 x) x) grades))))\n    (map cadr (reverse numerical_grades))))\n",
  "  (cond\n    [(> grades 0) \"B+\"]\n    [(> grades 0.5) \"B-\"]\n    [(> grades\
    \ 1) \"A+\"]\n    [(> grades 1.5) \"A-\"]\n    [(> grades 2) \"B\"]\n    [(> grades\
    \ 2.5) \"B-\"]\n    [(> grades 3) \"A\"]\n    [(> grades 3.5) \"A-\"]\n    [else\
    \ \"E\"]\n  ))", "  (if (null? grades)\n      'e\n      (let ([gpa (first grades)])\n\
    \        (cond\n          ((< gpa 4.0) (if (< gpa 3.7) \"A+\" \n             \
    \          (if (< gpa 3.3) \"A\"\n                           (if (< gpa 3.0) \"\
    B+\"\n                               (if (< gpa 2.7) \"B\"\n                 \
    \                    (if (< gpa 2.3) \"B-\" \n                               \
    \          (if (< gpa 2.0) \"C+\" \n                                         \
    \   (if (< gpa 1.7) \"C\"\n                                                (if\
    \ (< gpa 1.3) \"C-\" \n                                                    (if\
    \ (< gpa 1.0) \"D+\" \n                                                      \
    \  (if (< gpa 0.7) \"D\" \n                                                  \
    \          (if (< gpa 0.0) \"D-\"\n                                          \
    \                      \"E\")))))))))))))))))\n", "  (cond ((= (length grades)\
    \ 2)\n         [(char-code (car grades)) (cdr grades)])\n        ((< grades 3.0)\n\
    \         (char-code (car grades))\n         (numerical_letter_grade (cdr grades))))\n\
    \  ((< grades 2.0)\n   (numerical_letter_grade (cdr grades))\n   (char-code (car\
    \ grades))))\n  ((< grades 1.0)\n   (char-code (car grades))\n   (char-code (cdr\
    \ grades))))\n  ((< grades 0.0)\n   (char-code (car grades))))\n", "  (let ([gpa\
    \ (first grades)\n        gpa-high (second grades)])\n    (cond\n      [(< gpa\
    \ 3.0) (if (even? gpa)\n                      (cons \"A\" empty)\n           \
    \         (cons \"A+\" empty))\n       (if (= gpa-high gpa)\n           (cons\
    \ \"A+\" empty)\n           (cons \"A\" empty))\n       (if (< gpa-high 3.7) (cons\
    \ \"A\" empty)\n           (cons \"A-\" empty))\n       (if (< gpa-high 3.3) (cons\
    \ \"B+\" empty)\n           (cons \"B\" empty))\n       (if (< gpa-high 3.0) (cons\
    \ \"B\" empty)\n           (cons \"B-\" empty))\n       (if (< gpa-high 2.7) (cons\
    \ \"C\" empty)\n           (cons \"C+\" empty))\n       (if (< gpa-high 2.3) (cons\
    \ \"C\" empty)\n           (cons \"C-\" empty))\n       (if (< gpa-high 2.0) (cons\
    \ \"D\" empty)\n           (cons \"D+\" empty))\n       (if (< gpa-high 1.7) (cons\
    \ \"D\" empty)\n           (cons \"D\" empty))\n       (if (< gpa-high 1.3) (cons\
    \ \"D-\" empty)\n           (cons \"D+\" empty))\n       (if (< gpa-high 1.0)\
    \ (cons \"E\" empty)\n           (cons \"E\" empty))\n       (else (cons \"F\"\
    \ empty))]))\n  ; A list with the final letter grade of each student\n  ; Example:\n\
    \  ; >>> (grade_equation (list 4.0 3 1.7 2 3.5))\n  ; (\"A+\" \"B\" \"C-\" \"\
    C\" \"A-\")\n  (cond [(null? grades) (empty)]\n        [(odd? (car grades)) (cons\
    \ (car grades) empty)]\n        [else (cons (numerical_letter_grade (car grades))\
    \ (grade_equation (cdr grades)))]))\n", "  (if (empty? grades) 'E '(cons (car\
    \ grades) (grade_equation (cdr grades)))))\n", "  (let loop ((grades grades)\n\
    \             (grades0 '()))\n    (if (null? grades)\n        (reverse grades0)\n\
    \        (let ((first (car grades))\n              (rest (cdr grades))\n     \
    \         (current-grade '()))\n          (if (> first 3.0)\n              (let\
    \ ((first-lower (floor first)))\n                (cond ((< first-lower 3.0)\n\
    \                       (loop (cons (- first-lower 3.0) rest)\n              \
    \               (append current-grade (list \"A+\"))))\n                     \
    \ ((> first-lower 3.3)\n                       (loop (cons (- first-lower 3.3)\
    \ rest)\n                             (append current-grade (list \"A-\"))))\n\
    \                      ((> first-lower 3.7)\n                       (loop (cons\
    \ (- first-lower 3.7) rest)\n                             (append current-grade\
    \ (list \"B+\"))))\n                      ((> first-lower 3.9)\n             \
    \          (loop (cons (- first-lower 3.9) rest)\n                           \
    \  (append current-grade (list \"B\"))))\n                      ((> first-lower\
    \ 3.5)\n                       (loop (cons (- first-lower 3.5) rest)\n       \
    \                      (append current-grade (list \"B-\"))))\n              \
    \        ((< first-lower 3.0)\n                       (loop (cons (- first-lower\
    \ 3.0) rest)\n                             (append current-grade (list \"C+\"\
    ))))\n                      ((< first-lower 3.3)\n                       (loop\
    \ (cons (- first-lower 3.3) rest)\n                             (append current-grade\
    \ (list \"C\"))))\n                      ((< first-lower 3.7)\n              \
    \         (loop (cons (- first-lower 3.7) rest)\n                            \
    \ (append current-grade (list \"D+\"))))\n                      ((< first-lower\
    \ 3.9)\n                       (loop (cons (- first-lower 3.9) rest)\n       \
    \                      (append current-grade (list \"D\"))))\n               \
    \       ((< first-lower 3.5)\n                       (loop (cons (- first-lower\
    \ 3.5) rest)\n                             (append current-grade (list \"D-\"\
    ))))\n                      ((< first-lower 3.0)\n                       (loop\
    \ (cons (- first-lower 3.0) rest)\n                             (append current-grade\
    \ (list \"E\"))))\n                      (else\n                       (loop (cons\
    \ (- first-lower 3.0) rest)\n                             (append current-grade\
    \ (list \"E\"))))))", "  ;; Return empty list if grades is empty \n  (cond\n \
    \   ((empty? grades) '())\n    ((< grades 3.0) '())\n    ((< grades 3.7) '(A+))\n\
    \    ((< grades 3.3) '(A ))\n    ((< grades 3.0) '(B+))\n    ((< grades 2.7 '(B))\n\
    \    ((< grades 2.3) '(B-))\n    ((< grades 2.0) '(C+))\n    ((< grades 1.7 '(C))\n\
    \    ((< grades 1.3) '(C-))\n    ((< grades 1.0) '(D+))\n    ((< grades 0.7) '(D\
    \ ))\n    ((< grades 0.0) '(D-))\n    ((< grades 0) '(E)))\n  (cond\n    ((< grades\
    \ 4.0) (list 'A+))\n    ((< grades 3.7) '(A))\n    ((< grades 3.3) '(A- ))\n \
    \   ((< grades 3.0) '(B+))\n    ((< grades 2.7 '(B))\n    ((< grades 2.3) '(B-))\n\
    \    ((< grades 2.0) '(C+))\n    ((< grades 1.7 '(C))\n    ((< grades 1.3) '(C-))\n\
    \    ((< grades 1.0) '(D+))\n    ((< grades 0.7) '(D ))\n    ((< grades 0.0) '(D-))\n\
    \    (else '())))\n", "  (cond [(< grades 4.0)\n         (list \"A+\")\n     \
    \    (< grades 3.7)\n         (list \"A\")\n         (< grades 3.3)\n        \
    \ (list \"A-\")\n         (< grades 3.0)\n         (list \"B+\")\n         (<\
    \ grades 2.7)\n         (list \"B\")\n         (< grades 2.3)\n         (list\
    \ \"B-\")\n         (< grades 2.0)\n         (list \"C+\")\n         (< grades\
    \ 1.7)\n         (list \"C\")\n         (< grades 1.3)\n         (list \"C-\"\
    )\n         (< grades 1.0)\n         (list \"D+\")\n         (< grades 0.7)\n\
    \         (list \"D\")\n         (< grades 0.0)\n         (list \"D-\")]\n   \
    \     [else\n         (list \"E\")]))\n", "  (if (null? grades)\n      (list \"\
    E\")\n      (let ((current (first grades))\n            (min (Math/min (Math/floor\
    \ current)\n                         (Math/ceiling current))\n            (max\
    \ (Math/max (Math/ceiling current)\n                         (Math/floor current))\n\
    \            (diff (Math/abs max-min)))\n            (percent (Math/round (/ (Math/round\
    \ diff) diff))\n            (letter \n             (if (< percent 0.7)\n     \
    \          (if (< percent 0.3)\n                  \"C-\"\n                  (if\
    \ (< percent 0.1)\n                      \"C\"\n                      (if (< percent\
    \ 0.05)\n                          \"B-\"\n                          (if (< percent\
    \ 0.025)\n                              \"B-\"\n                             \
    \ \"A-\"))))))\n            (grade (list letter\n                         (list\
    \ \"A+\" \n                               \"B\"\n                            \
    \   \"C-\"\n                               \"C\"\n                           \
    \    \"A-\")\n                         (list \"B+\"\n                        \
    \       \"B\"\n                               \"B-\"\n                       \
    \        \"B\"\n                               \"B-\")\n                     \
    \    (list \"C+\"\n                               \"C\"\n                    \
    \           \"C-\"\n                               \"C\"\n                   \
    \            \"C-\")\n                         (list \"A-\"\n                \
    \               \"B\"\n                               \"C-\"\n               \
    \                \"C\"\n                               \"B-\")\n             \
    \            (list \"B+\"\n                               \"B\"\n            \
    \                   \"B-\"\n                               \"B\"\n           \
    \                    \"B-\")\n                         (list \"C+\"\n        \
    \                       \"C\"\n                               \"C-\"\n       \
    \                        \"C\"\n                               \"C-\")\n     \
    \                    (list \"A-\"\n                               \"B\"\n    \
    \                           \"C-\"\n                               \"C\"\n   \
    \                            \"B-\")\n                         (list \"B+\"\n\
    \                               \"B\"\n                               \"B-\"\n\
    \                               \"B\"\n                               \"B-\")\n\
    \                         (list \"C+\"\n                               \"C\"\n\
    \                               \"C-\"\n                               \"C\"\n\
    \                               \"C-\")\n                         (list \"A-\"\
    \n                               \"B\"\n                               \"C-\"\n\
    \                               \"C\"\n                               \"B-\")\n\
    \                         (list \"B+\"\n                               \"B\"\n\
    \                               \"B-\"\n                               \"B\"\n\
    \                               \"B-\")\n                         (list \"C+\"\
    \n                               \"C\"\n                               \"C-\"\n\
    \                               \"C\"\n                               \"C-\")\n\
    \                         (list \"A-\"\n                               \"B\"\n\
    \                               \"C-\"\n                               \"C\"\n\
    \                               \"B-\")\n                         (list \"B+\"\
    \n                               \"B\"\n                               \"B-\"\n\
    \                               \"B\"\n                               \"B-\")\n\
    \                         (list \"C+\"\n                               \"C\"\n\
    \                               \"C-\"\n                               \"C\"\n\
    \                               \"C-\")\n                         (", "  (let\
    \ ([letters (string (+ 0.1 grades))]\n        [grade (string-append (substring\
    \ letters 0 1) (substring letters 2 3))])\n    (cond\n      [(< grade 0) \"E\"\
    ]\n      [(< grade 0.3) \"D-\"]\n      [(< grade 0.3) \"B-\"]\n      [(< grade\
    \ 0.1) \"B-\"]\n      [(< grade 0.1) \"B-\"]\n      [(< grade 0.1) \"B-\"]\n \
    \     [(< grade 0.1) \"B-\"]\n      [(< grade 0.1) \"B-\"]\n      [(< grade 0.0)\
    \ \"B-\"]\n      [(< grade 0.0) \"B-\"]\n      [(< grade 0.0) \"B-\"]\n      [(<\
    \ grade 0.0) \"B-\"]\n      [(< grade 0.0) \"B-\"]\n      [(< grade 0.0) \"B-\"\
    ]\n      [else (substring letters 0 1)])))\n", "  (let ([min (min grades)])\n\
    \    (let ([max (max grades)])\n      (cond\n        [(< max 0) \"D\"]\n     \
    \   [(< min 0) \"D\"]\n        [else (cond [(> max 0) (append \"D-\" \"F\")]\n\
    \                   [(> min 0) (append \"D+\" \"F\")]\n                   [else\
    \ (cond [(> max 4.0) \"A-\"]\n                             [(> min 3.7) (append\
    \ \"A-\" \"F\")]\n                             [(> min 3.3) (append \"A-\" \"\
    F\")]\n                             [(> min 3.0) (append \"A+\" \"F\")]\n    \
    \                         [(> min 2.7) (append \"A-\" \"F\")]\n              \
    \               [(> min 2.3) (append \"A-\" \"F\")]\n                        \
    \     [(> min 2.0) (append \"A+\" \"F\")]\n                             [(> min\
    \ 1.7) (append \"A-\" \"F\")]\n                             [(> min 1.3) (append\
    \ \"A-\" \"F\")]\n                             [(> min 1.0) (append \"A+\" \"\
    F\")]\n                             [(> min 0.7) (append \"A-\" \"F\")]\n    \
    \                         [(> min 0.0) (append \"A+\" \"F\")]\n              \
    \               [(< min 4.0) \"A\"]\n                             [(< min 3.7)\
    \ (append \"A+\" \"F\")]\n                             [(< min 3.3) (append \"\
    A+\" \"F\")]\n                             [(< min 3.0) (append \"A+\" \"F\")]\n\
    \                             [(< min 2.7) (append \"A+\" \"F\")]\n          \
    \                   [(< min 2.3) (append \"A+\" \"F\")]\n                    \
    \         [(< min 2.0) (append \"A+\" \"F\")]\n                             [(<\
    \ min 1.7) (append \"A+\" \"F\")]\n                             [(< min 1.3) (append\
    \ \"A+\" \"F\")]\n                             [(< min 1.0) (append \"A+\" \"\
    F\")]\n                             [(< min 0.7) (append \"A+\" \"F\")]\n    \
    \                         [(< min 0.0) (append \"A+\" \"F\")]\n              \
    \               [(< max 4.0) \"B\"]\n                             [(< max 3.7)\
    \ (append \"B+\" \"F\")]\n                             [(< max 3.3) (append \"\
    B+\" \"F\")]\n                             [(< max 3.0) (append \"B+\" \"F\")]\n\
    \                             [(< max 2.7) (append \"B+\" \"F\")]\n          \
    \                   [(< max 2.3) (append \"B+\" \"F\")]\n                    \
    \         [(< max 2.0) (append \"B+\" \"F\")]\n                             [(<\
    \ max ", "  (let loop ((grade (first grades))\n             (grade_point (first\
    \ grades))\n             (grade_name (first grades)))\n    (cond\n      ((= grade\
    \ grades)\n       (list))\n      ((< grade grade_point)\n       (list grade_name))\n\
    \      (else (loop (rest grades)\n                 (rest grade_point)\n      \
    \           (rest grade_name)))))\n", "  (let loop ((i 0) (sum 0) (grades '()))\n\
    \    (if (< i 4)\n        (cons (car grades) '())\n        (loop (add1 i) sum\
    \ (cons (car grades) (cdr grades)))))))\n", "  (cond [(< grades 0.4)\n       \
    \  \"A+\"]\n        [(< grades 3.7)\n         \"A\"]\n        [(< grades 3.3)\n\
    \         \"A-\"]\n        [(< grades 3.0)\n         \"B+\"]\n        [(< grades\
    \ 2.7)\n         \"B\"]\n        [(< grades 2.3)\n         \"B-\"]\n        [(<\
    \ grades 2.0)\n         \"C+\"]\n        [(< grades 1.7)\n         \"C\"]\n  \
    \      [(< grades 1.3)\n         \"C-\"]\n        [(< grades 1.0)\n         \"\
    D+\"]\n        [(< grades 0.7)\n         \"D\"]\n        [(< grades 0.0)\n   \
    \      \"D-\"]\n        [else\n         \"E\"]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
