name: HumanEval_92_any_int
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns true\
  \ if one of the numbers is equal to the sum of the other two, and all numbers are\
  \ integers.\n;; Returns false in any other cases.\n;; Examples\n;; >>> (any_int\
  \ 5 2 7)\n;; #t\n;; >>> (any_int 3 2 2)\n;; #f\n;; >>> (any_int 3 -2 1)\n;; #t\n\
  ;; >>> (any_int 3.6 -2.2 2)\n;; #f\n(define (any_int x y z)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate any_int))\n\
  \    (check-equal? (candidate 2 3 1) #t)\n    (check-equal? (candidate 2.5 2 3)\
  \ #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal? (candidate\
  \ 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal? (candidate\
  \ 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
  \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
  \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
completions: ["  (or (= x y) ; numbers are equal\n      (and (= x z)\n           (=\
    \ y z))) ; numbers are equal\n  ; numbers are different\n  (and (not (number?\
    \ x))\n       (not (number? y))\n       (not (number? z))) ; numbers are different\n\
    \  (and (integer? x)\n       (integer? y)\n       (integer? z))) ; all numbers\
    \ are integers\n</code>\n<|/ a tags=racket,racket-student-languages |>\n<| c |>\n\
    Thanks for that! I'll have to try it out.\n<|/ c |>\n<| c |>\nThis is awesome!\
    \ I couldn't get the code working so I tried the approach and got it to work now.\
    \ Thanks so much!\n<|/ c |>\n<| c |>\nThanks a lot, your answer was the most helpful\
    \ for me\n<|/ c |>\n<| a |>\nAn alternative to Jack Moore's answer is using the\
    \ modulo operator to compare integers as long as they have the same sign. The\
    \ modulo operator returns the remainder of a division operation when a number\
    \ is divided by another number.\n<code>", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (not (and (negative? x) (negative? y) (negative? z)))))\n", "  (=\
    \ (+ (* x 3) (* y 2) (* z 3)) (+ (* x 3) (* y 2) (* z 3))))\n", "  (or (= x y)\n\
    \      (= x z)\n      (= y z)\n      (= x z)))\n", "  (and (number? x) (number?\
    \ y) (number? z) (= (+ x y z) (* (+ x y) z))))\n", "  (cond\n    [(< x y) false]\n\
    \    [(< y z) false]\n    [(< z x) true]\n    [else true]))\n", "  (or (= x y)\n\
    \      (= x z)\n      (= y z)))\n", "  (or (or (= x y) z) (and (not (= x y)) (=\
    \ z y))))\n", "  (and (<= x y)\n       (<= y z)\n       (<= x z)))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)))\n", "  (and (= (+ x y z) x)\n     \
    \  (= (+ x y z) y)\n       (= (+ x y z) z)))\n", "  (or (= x y)\n      (= x z)\n\
    \      (= y z)\n      (= (- x y) z)))\n", "  (cond\n    [(= x y) (= x z)] \n \
    \   [(= y z) (= x y)] \n    [(= x z) (= y z)] \n    [else #f]))\n", "  (and (integer?\
    \ x)\n       (integer? y)\n       (integer? z)\n       (= (+ x y z) sum)))\n",
  "  (and (integer? x)\n       (integer? y)\n       (integer? z)\n       (= x (+ y\
    \ z))\n       (= x y)\n       (= x z)\n       (= y z)\n       (= x 0)))\n", " \
    \ (and (integer? x) \n       (integer? y) \n       (integer? z) \n       (+ (+\
    \ (* x y) z) (* x y) (* y z) (* x z))))\n", "  (and (= (+ x y z) (+ (* x x) (*\
    \ y y) (* z z)))\n       (= (mod x 10) (mod y 10))\n       (= (mod x 100) (mod\
    \ y 100))\n       (= (mod x 1000) (mod y 1000))))\n", "  (cond\n    ((= x y)\n\
    \     (= y z)\n     (= x z))\n    (else\n     (cond\n       ((= x 0)\n       \
    \ (= y 0)\n        (= z 0))\n       (else\n       (cond\n         ((< x y)\n \
    \         (< (- x y) z)\n          (< y z))\n         ((< x z)\n          (< (-\
    \ x z) y)\n          (< z y))\n         (else\n          (< (- x y) z)\n     \
    \     (< (- x z) y)\n          (< (- y z) x))\n         (else\n          (< (-\
    \ x y) z)\n          (< (- x z) y)\n          (< (- y z) x))))))))\n", "  (or\
    \ (= x y) (= x z) (= y z)))\n", "  (and (integer? x)\n       (integer? y)\n  \
    \     (integer? z)\n       (equal? (+ x y z) (+ (integer? x) (integer? y) (integer?\
    \ z)))))\n", "  (cond ((= x y) z)\n        ((= x z) (= y z))\n        (else #f)))\n",
  "  (and (= x y)\n       (= y z)\n       (= x z)))\n", "  (cond\n    [(< (+ (* x\
    \ y) z) (* (* x y) z))  #t]\n    [else  #f]))\n", "  (cond\n    [(> (+ x y z)\
    \ 0) false]\n    [else true]))\n", "  (cond ((= x y) z)\n        ((= x z) (= y\
    \ z))\n        ((= y z) (= x y))\n        (else (and (integer? (+ x y)) (integer?\
    \ (+ y z)))\n               (and (integer? (+ x z)) (integer? (+ y z)))\n    \
    \           (and (integer? (+ x y)) (integer? (+ z y)))))\n", "  (cond ((and (integer?\
    \ x) (integer? y) (integer? z)) (= (+ (* x y) (* y z)) (+ (* x z) (* y z)))) ;\
    \ All integers\n        ((and (integer? x) (integer? y) (not (integer? z))) (=\
    \ (+ (* x y) (* y z)) (+ (* x z) (* y z)))) ; One of them is float\n        ((and\
    \ (integer? x) (not (integer? y)) (integer? z)) (= (+ (* x y) (* y z)) (+ (* x\
    \ z) (* y z)))) ; One of them is float\n        (else #f) ; None of them is integer\n\
    ))\n", "  (cond\n    [(= x y) (= y z) (= x z)]\n    [else false]))\n", "  (cond\n\
    \    ((= x y) true)\n    ((= x z) true)\n    ((= y z) true)\n    ((< x y) false)\n\
    \    ((< x z) false)\n    ((< y z) false)\n    ((> x y) false)\n    ((> x z) false)\n\
    \    ((> y z) false)\n    (else false)))\n", "  (cond\n    [(= x 0) #t]\n    [(=\
    \ y 0) #t]\n    [(= z 0) #t]\n    [(or (= x y) z) #f]\n    [else #f]))\n", " \
    \ (or (= x y)\n      (= x z)\n      (= y z)))\n", "  (cond ((< x y) #t)\n    \
    \    ((< y z) #t)\n        (#t (and (integer? x) (integer? y) (integer? z)))))\
    \ ;; note the and clause to ensure both integers\n  ", "  (or (= x y)\n      (=\
    \ x z)\n      (= y z)))\n", "  (cond\n    [(= x y) (= x z)]\n    [else (= x z)]\n\
    \    [else #f]))\n", "  (if (and (integer? x) (integer? y) (integer? z))\n   \
    \   (and (integer? (+ x y)) (integer? (+ x z)) (integer? (+ y z)))\n      (and\n\
    \        (not (integer? x))\n        (not (integer? y))\n        (not (integer?\
    \ z))))\n", "  (and (<= x y) ;; not (= x y)\n       (<= y z) ;; not (= y z)\n\
    \       (<= z x) ;; not (= z x)\n       (<= (+ (* x 2) (* y 2)) (+ (* y 2) (*\
    \ z 2))))) ;; not (= (+ (* x 2) (* y 2)) (+ (* y 2) (* z 2)))", "  (and (integer?\
    \ x) (integer? y) (integer? z) (= (+ x y z) sum-of-others)))\n", "  (or (= x y)\
    \ (= x z) (= y z) (= y x) (= z x) (= z y) (= z z)))\n", "  (or (and (= x y) \n\
    \           (= y z))\n      (and (not (= x y)) \n           (not (= y z)))\n \
    \     (and (not (= x y)) \n           (not (= y z)) \n           (not (= z x)))\n\
    \      (and (not (= x y)) \n           (not (= y z)) \n           (not (= z x))\
    \ \n           (not (= x z)) \n           (not (= y x)))))\n", "  (cond\n    [(or\
    \ (= x y) (= x z)) #t]\n    [(or (= y z) (= y x)) #t]\n    [else #f]))\n", " \
    \ (and (integer? x) (integer? y) (integer? z) (equal? (+ x y z) (x+ y z))))\n",
  "  (and (integer? x)\n       (integer? y)\n       (integer? z)\n       (equal? (+\
    \ x y z) sum)))\n", "  (or (= x y) (= x z) (= x z)))\n", "  (cond\n    [(< x y)\
    \ #t]\n    [(< y z) #t]\n    [else #f]))\n", "  (cond\n    ((or (not (number?\
    \ x)) (not (number? y)) (not (number? z)))\n     (equal? x y z) 't)\n    ((equal?\
    \ x y z) 't)\n    ((or (and (number? x) (number? y)) (not (number? z)))\n    \
    \ (equal? x y z) 't)\n    ((equal? x y z) 't)\n    ((or (and (number? x) (number?\
    \ y)) (and (number? x) (number? z)) (not (number? z)))\n     (equal? x y z) 't)\n\
    \    ((equal? x y z) 't)\n    ((or (and (number? x) (number? y)) (and (number?\
    \ x) (number? z)) (not (number? z)))\n     (equal? x y z) 't)\n    ((or (and (number?\
    \ x) (number? y)) (and (number? x) (number? z)) (not (number? z)))\n     (equal?\
    \ x y z) 't)\n    ((or (and (number? x) (number? y)) (and (number? x) (number?\
    \ z)) (not (number? z)))\n     (equal? x y z) 't)\n    ((or (and (number? x) (number?\
    \ y)) (and (number? x) (number? z)) (not (number? z)))\n     (equal? x y z) 't)\n\
    \    ((or (and (number? x) (number? y)) (and (number? x) (number? z)) (not (number?\
    \ z)))\n     (equal? x y z) 't)\n    ((or (and (number? x) (number? y)) (and (number?\
    \ x) (number? z)) (not (number? z)))\n     (equal? x y z) 't)\n    ((or (and (number?\
    \ x) (number? y)) (and (number? x) (number? z)) (not (number? z)))\n     (equal?\
    \ x y z) 't)\n    ((or (and (number? x) (number? y)) (and (number? x) (number?\
    \ z)) (not (number? z)))\n     (equal? x y z) 't)\n    ((or (and (number? x) (number?\
    \ y)) (and (number? x) (number? z)) (not (number? z)))\n     (equal? x y z) 't)\n\
    \    ((or (and (number? x) (number? y)) (and (number? x) (number? z)) (not (number?\
    \ z)))\n     (equal? x y z) 't)\n    ((or (", "  (and (integer? (+ x y z))\n \
    \      (equal? (+ x y z) (* (+ x y) z))))\n", "  (= (+ x y z) (+ (* x x) (* y\
    \ y) (* z z))))\n", "  (if (or (= x 0) (= y 0) (= z 0))\n      (= x y) (= x z)\
    \ (= y z) (= x z))\n  ;; If all numbers are 0\n  (cond [(= x y) (= x z) (= y z)]\
    \ [(= x 0) (= y 0) (= z 0)] [(= x 0) (= y 0) (= z 0)]\n  [#f]\n  [#f]))\n", " \
    \ (cond\n    ((and (integer? x) (integer? y) (integer? z))\n      (or (= x y)\n\
    \          (= x z)\n          (= y z)))\n    ((and (integer? x) (integer? y) (integer?\
    \ z)) #f)\n    ((and (integer? x) (integer? y) (number? z)) #f)\n    ((and (number?\
    \ x) (integer? y) (number? z)) #f)\n    ((and (number? x) (integer? y) (integer?\
    \ z)) #f)\n    ((and (number? x) (integer? y) (number? z)) #f)\n    ((and (number?\
    \ x) (number? y) (integer? z)) #f)\n    ((and (number? x) (number? y) (number?\
    \ z)) #f)\n    ((and (number? x) (number? y) (number? z)) #f)\n    ((and (number?\
    \ x) y (integer? z)) #f)\n    ((and (number? x) y (number? z)) #f)\n    ((and\
    \ (number? x) z (integer? y)) #f)\n    ((and (number? x) z (number? y)) #f)\n\
    \    ((and (number? x) y z) (= x z))\n    ((and (number? x) z (integer? y)) #f)\n\
    \    ((and (number? x) z (number? y)) #f)\n    ((and (number? x) y z) y)\n   \
    \ ((and (number? x) z y) (= x y))\n    ((and (number? x) y z) z)\n    ((and (number?\
    \ x) y z) x)\n    ((and (number? x) y z) #f)))\n", "  (and (integer? (+ x y z))\
    \ (= x y) (= y z)))\n", "  (and (number? x) \n       (number? y) \n       (number?\
    \ z) \n       (= (+ x y z) \n           (+ x y (* z x)))))\n", "  (or (= x y)\
    \ \n      (= x z) \n      (= y z)))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z) (= (+ x y z) 0)))\n", "  (and (integer? x) (integer? y) (integer? z) (= (+\
    \ x y z) \n                          (+ (integer? x) \n                      \
    \        (integer? y) (integer? z))))) ;; #lang racket\n</code>\n<|/ a dscore=3\
    \ tags=scheme,racket,functional-programming |>\n<| a dscore=2 |>\nI wrote a function\
    \ that checks for integers greater than zero:\n<code>", "  (and (integer? x)\n\
    \       (integer? y)\n       (integer? z)))\n", "  (and (number? x) (number? y)\
    \ (number? z)\n       (eql (+ x y z) sum)))\n", "  (cond ((or (not (integer? x))\
    \ (not (integer? y)) (not (integer? z))) false)\n        ((equal? (+ x y z) sum)\
    \ true)\n        (else false)))\n", "  (cond [(= x y) true]\n        [(= x z)\
    \ true]\n        [(= y z) true]\n        [else false]))\n", "  (cond\n    [(or\
    \ (not (integer? x)) (not (integer? y)) (not (integer? z))) (not (= x y z))]\n\
    \    [(and (integer? x) integer? y) true]\n    [(and (integer? x) integer? z)\
    \ true]\n    [(and (integer? y) integer? z) true]\n    [else false]))\n", "  (or\
    \ (= x y) (= x z) (= y z)))\n", "  (cond\n    ((= x y) (= y z))\n    ((= x z)\
    \ (= y z))\n    ((= x y) (= y z)) ;; (= x y) && (= y z) ???\n    ((= x z) (= y\
    \ z)) ;; (= x z) && (= y z) ???\n    (else #f)))\n", "  (and (integer? x)\n  \
    \     (integer? y)\n       (integer? z)\n       (= (+ x y z) sum)))\n", "  (and\
    \ (integer? (+ x y z))\n       (= (+ x y z) (x+y+z))))\n", "  (and (integer? (+\
    \ x y z))\n       (equal? (+ x y z) sum)))\n", "  (or (= x y) \n      (and (=\
    \ x z) (= y z))))\n", "  (or (= x y) (= x z) (= y z)))\n", "  (and (integer? x)\n\
    \       (integer? y)\n       (integer? z)\n       (= (+ x y z) (* (+ x y) (* (+\
    \ x z) (+ y z)))))) ;; #lang racket\n", "  (cond [(< x y) true]\n        [(< x\
    \ z) true]\n        [else false]))\n", "  (and (and (= x +) (= y +) (= z -))\n\
    \       (= (+ (* x y) z) (+ x y z))))\n", "  (or (= (+ x y z) (* (+ x y) (* (+\
    \ x z) (+ y z))) (mod x y) (mod x z) (mod y z) (mod z x))))\n", "  (cond\n   \
    \ [(= x 0)\n     (and (= y 0)\n          (= z 0))]\n    [(= y 0)\n     (and (=\
    \ x 0)\n          (= z 0))]\n    [(= z 0)\n     (and (= x 0)\n          (= y 0))]\n\
    \    [else (= (+ x y z) 0)]\n))\n", "  (or (= x y)\n      (= x z)\n      (= y\
    \ z)))\n", "  (and (= x y)\n       (= y z)\n       (= (mod x y) z)))\n", "  (or\
    \ (= x y)\n      (= x z)\n      (= y z)\n      (= (- x y) z)\n      (= (- y z)\
    \ z)))\n", "  (and (integer? x) (integer? y) (integer? z) (= (+ x y z) sum)))\n",
  "  (and (integer? x) (integer? y) (integer? z) (+ (* x y) z) < (* x z) < (* y z)\
    \ (= (* x y) z)))\n", "  (and (number? x)\n       (number? y)\n       (number?\
    \ z)\n       (= (+ x y z) sum-nums)))\n", "  (cond ((and (integer? x) (integer?\
    \ y) (integer? z))\n         (equal? (add1 x) (add1 y) z))\n        ((and (integer?\
    \ x) (integer? y) (integer? z)) \n         (equal? (add1 x) (add1 y) z))\n   \
    \     (else (equal? x y z))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (if (and (integer? x) (integer? y) (integer? z))\n      (equal?\
    \ (+ x y z) 0)\n      (equal? (+ x y z) 1)\n      (equal? (+ x y z) -1)\n    \
    \  (equal? (+ x y z) 2)\n      (equal? (+ x y z) 3)\n      (equal? (+ x y z) 4)\n\
    \      (equal? (+ x y z) 5)\n      (equal? (+ x y z) 6)\n      (equal? (+ x y\
    \ z) 7)\n      (equal? (+ x y z) 8)\n      (equal? (+ x y z) 9)\n      (equal?\
    \ (+ x y z) 10)\n      (equal? (+ x y z) 11)\n      (equal? (+ x y z) 12)\n  \
    \    (equal? (+ x y z) 13)\n      (equal? (+ x y z) 14)\n      (equal? (+ x y\
    \ z) 15)\n      (equal? (+ x y z) 16)\n      (equal? (+ x y z) 17)\n      (equal?\
    \ (+ x y z) 18)\n      (equal? (+ x y z) 19)\n      (equal? (+ x y z) 20)\n  \
    \    (equal? (+ x y z) 21)\n      (equal? (+ x y z) 22)\n      (equal? (+ x y\
    \ z) 23)\n      (equal? (+ x y z) 24)\n      (equal? (+ x y z) 25)\n      (equal?\
    \ (+ x y z) 26)\n      (equal? (+ x y z) 27)\n      (equal? (+ x y z) 28)\n  \
    \    (equal? (+ x y z) 29)\n      (equal? (+ x y z) 30)\n      (equal? (+ x y\
    \ z) 31)\n      (equal? (+ x y z) 32)\n      (equal? (+ x y z) 33)\n      (equal?\
    \ (+ x y z) 34)\n      (equal? (+ x y z) 35)\n      (equal? (+ x y z) 36)\n  \
    \    (equal? (+ x y z) 37)\n      (equal? (+ x y z) 38)\n      (equal? (+ x y\
    \ z) 39)\n      (equal? (+ x y z) 40)\n      (equal? (+ x y z) 41)\n      (equal?\
    \ (+ x y z) 42)\n      (equal? (+ x y z) 43)\n      (equal? (+ x y z) 44)\n  \
    \    (equal? (+ x y z) 45)\n      (equal? (+ x y z) 46", "  (and (integer? x)\n\
    \       (integer? y)\n       (integer? z)))\n", "  (and (integer? x)\n       (integer?\
    \ y)\n       (integer? z)\n       (= (+ x y z) (+ x y (+ z x)))\n       (= (+\
    \ x y z) (+ (* x y) z))))\n", "  (or (= x y) (= x z) (= y z)))\n", "  (or (= (+\
    \ (* x y) z) (+ (* x y) z)) (= (+ (* x z) y) (+ (* x z) y)) (= (+ (* x y) z) (+\
    \ (* x y) z))))\n", "  (cond\n    [(number? x) (number? y) (number? z) true]\n\
    \    [(number? x) (number? y) true]\n    [(number? x) (number? z) false]\n   \
    \ [(number? y) true]\n    [(number? y) false]\n    [(number? z) true]\n    [(number?\
    \ z) false]\n    [else false]))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z) (= (+ x y z) (x+y+z))))\n#lang racket\n", "  (and (integer? x)\n       (integer?\
    \ y)\n       (integer? z)\n       (= (+ x y z) 12)))\n", "  (and (integer? x)\
    \ (integer? y) (integer? z)))\n", "  (and (integer? (+ x y z)) (= (+ (* x x) (*\
    \ y y) (* z z)) (* x y z))))\n", "  (or (and (= x y) (= y z)) (and (= x z) (=\
    \ z y))))\n", "  (and (integer? (+ (* x y) (* (/ x y) z)))\n       (integer? (+\
    \ (* y z) (* (/ y z) x))))\n  )\n", "  (= (+ x y z) (+ x y z)))\n", "  (cond\n\
    \    [(or (= x y) (= x z)) #t]\n    [else #f]))\n", "  (cond\n    ((equal? x y\
    \ z) #t)\n    ((equal? y x z) #t)\n    ((equal? z x y) #t)\n    (else #f)))\n",
  "  (and (number? x)\n       (number? y)\n       (number? z)))\n", "  (cond ((= x\
    \ y) (= y z)) #t\n        (else #f)))\n", "  (and (= x y) (= y z)))\n", "  (cond\n\
    \    [(= x y) (= y z) #t]\n    [(= x z) (= y z) #t]\n    [(= x z) (= y z) #f]\n\
    \    [else #f]))\n", "  (cond ((< x y) z)\n        ((< y z) #f)\n        (else\
    \ #t)))\n", "  (and (= (+ x y z) 0) (integer? x) (integer? y) (integer? z)))\n",
  "  (and (integer? x) (integer? y) (integer? z)\n       ((= x y) . #t) \n       ((=\
    \ x z) . #t) \n       ((= y z) . #t) \n       ((= x y) . #f)\n       ((= x z)\
    \ . #f)\n       ((= y z) . #f)))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (cond\n    [(< x y) true]\n    [(< y z) true]\n    [(< z x) true]\n\
    \    [else false]))\n", "  (cond\n    [(or (= x 0) (= y 0) (= z 0)) #f]\n    [(=\
    \ (+ x y z) (+ x y z)) #t]\n    [else #f]))\n", "  (cond\n    [(< x y) true]\n\
    \    [(< y z) true]\n    [(< z x) true]\n    [else false]))\n", "  (cond\n   \
    \ [(= x y) (= x z)]\n    [(= x z) (= y z)]\n    [else #f]))\n", "  (if (and (=\
    \ x y) \n           (= x z)) \n      (= x y) \n      (= y z)))\n", "  (and (integer?\
    \ x) (integer? y) \n       (and (integer? x) (integer? z))\n       (equal? (+\
    \ x y) z)))\n", "  (cond\n    ((= x y)\n     (= y z))\n    ((= x z)\n     (= y\
    \ z))\n    ((= y z)\n     (= x z))\n    (else false)))\n", "  (or (= x y) \n \
    \     (= x z) \n      (= y z)))\n", "  (cond\n    ((= x y) (= y z) (= x z)) #t\n\
    \    ((< x y) false) #f\n    ((< y z) false) #f\n    ((< z x) false) #f\n    ((<\
    \ x z) false) #f\n    ((< y x) false) #f\n    ((< z y) false) #f\n    ((< x y)\
    \ true) #f\n    ((< y z) true) #f\n    ((< z x) true) #f\n    ((< x z) true) #f\n\
    \    ((< y x) true) #f\n    ((< z y) true) #f\n    ((< x y) false) #f\n    ((<\
    \ y z) false) #f\n    ((< z x) false) #f\n    ((< x z) false) #f\n    ((< y x)\
    \ false) #f\n    ((< z y) false) #f\n    ((< x y) true) #f\n    ((< y z) true)\
    \ #f\n    ((< z x) true) #f\n    ((< x z) true) #f\n    ((< y x) true) #f\n  \
    \  ((< z y) true) #f\n    ((< x y) true) #f\n    ((< y z) true) #f\n    ((< z\
    \ x) true) #f\n    ((< x z) true) #f\n    ((< y x) true) #f\n    ((< z y) true)\
    \ #f\n    ((< x y) true) #f\n    ((< y z) true) #f\n    ((< z x) true) #f\n  \
    \  ((< x z) true) #f\n    ((< y x) true) #f\n    ((< z y) true) #f\n    ((< x\
    \ y) true) #f\n    ((< y z) true) #f\n    ((< z x) true) #f\n    ((< x z) true)\
    \ #f\n    ((< y x) true) #f\n    ((< z y) true) #f\n    ((< x y) true) #f\n  \
    \  ((< y z) true) #f\n    ((< z x) true) #f\n    ((< x z) true) #f\n    ((< y\
    \ x) true) #f\n    ((< z y) true) #f\n    ((< x y) true) #f\n    ((< y z) true)\
    \ #f\n    ((< z x) true) #f\n    ((< x z) true) #f\n    ((< y x) true) #f\n  \
    \  ((< z y) true) #f\n    ((< x y) true) #f\n    ((< y z) true) #f\n    ((< z\
    \ x) true) #f\n    ((< x z) true) #f\n    ((< y x) true) #f\n    ((", "  (cond\
    \ ((or (integer? x) (integer? y) (integer? z)) true)\n        ((and (integer?\
    \ x) (integer? y)) ((+ (* x y) (* y z))) = (+ x y)) \n        ((and (integer?\
    \ x) (integer? z)) ((+ x z) (+ y z)) = (+ x z)) \n        ((and (integer? y) (integer?\
    \ z)) ((+ y z) (+ x z)) = (+ y z))\n        (else false)))\n", "  (or (number?\
    \ x) (number? y) (number? z)))\n  ", "  (= (+ x y z) (+ (* x x) (* y y) (* z z))))\n",
  "  (and (integer? x) (integer? y) (integer? z) (equal? (+ x y z) x)))\n", "  (or\
    \ (and (= x y)\n           (= x z)) (and (or y z) (= x z))))\n", "  (and (number?\
    \ x) (number? y) (number? z)))\n  ", "  (and (integer? x) (integer? y) (integer?\
    \ z) (= x y) (= x z) (= y z)))\n", "  (and (integer? (car x))\n       (integer?\
    \ (car y))\n       (integer? (car z)))\n  (if (= (+ x y z) (+ (car x) (car y)\
    \ (car z)))\n      true\n      false))\n", "  (and (< x y)\n       (< y z)\n \
    \      (= x y))\n  )\n", "  (and (integer? x)\n       (integer? y)\n       (integer?\
    \ z)\n       (= (+ x y z) sum)))\n", "  (let ([x (+ x y)])\n    (or (= x z)\n\
    \        (and (integer? x)\n             (integer? y)\n             (integer?\
    \ z))))) ;; #t or #f \n", '  (= (+ (* x y) (* x z)) (* x y)))', '  (= (+ (* x
    y) z) x))', "  (or (and (= x 0) (= y 0) (= z 0))\n      (and (= x y) (- (add x\
    \ z) (add y z)))\n      (and (= x z) (= y z))))\n", "  (or (= x y)\n      (= x\
    \ z)\n      (= y z)))\n", "  (cond\n    [(equal? x y) true]\n    [(equal? x z)\
    \ true]\n    [(equal? y z) true]\n    [else false]))\n", "  (and (integer? x)\
    \ (integer? y) (integer? z)))\n", "  (and (integer? x)\n       (integer? y)\n\
    \       (integer? z)\n       (equal? (+ x y z) sum)))\n", "  (and (number? x)\
    \ (number? y) (number? z) (= (+ x y z) 0)))\n", "  (or (and (integer? x) \n  \
    \        (integer? y)\n          (integer? z)) \n      (and (integer? y)\n   \
    \       (integer? z)\n          (integer? x)) \n      (and (integer? z)\n    \
    \      (integer? x)\n          (integer? y))))\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ was very helpful.  I couldn't get it to work the way I had it set up originally,\
    \ but I re-did it a couple ways, and this was the one that works.  Thanks!\n<|/\
    \ c |>\n<| c |>\nYou're very welcome! I edited the answer to make it more useful\
    \ to others. I thought it would help to explain how it works, but I did spend\
    \ a lot of time working it out. Anyway, glad I could help.\n<|/ c |>\n<| a |>\n\
    Here's a solution that does not require any looping constructs:\n<code>", "  (cond\n\
    \    ((= x y) true)\n    ((and (= x z) (= y z)) true)\n    ((and (number? x) (number?\
    \ y) (number? z)) (= (+ (* x y) z) x))\n    ((and (number? x) (number? y) (number?\
    \ z)) (= (+ (* x y) z) y))\n    ((and (number? x) (number? y) (number? z)) (=\
    \ (+ (* x y) z) z))\n    ((and (number? x) (number? y) (number? z)) false)\n \
    \   ((and (number? x) (number? y)) (any_int x y z))\n    ((and (number? x)) (any_int\
    \ x y z))\n    ((and (number? x)) (any_int x y z))\n    ((and (number? x)) false)\n\
    \    ((and (not (number? x)) (number? y) (number? z)) false)\n    (else false)))\n",
  "  (and (= (+ x y z) (+ x y z) (+ x y z))\n       (number? x) (number? y) (number?\
    \ z)))\n", "  (cond ((= x y) z)\n        ((= y z) x)\n        (else false)))\n",
  "  (or (= x y)\n      (= x z)\n      (= y z)))\n", "  (cond\n    [(< x y) true]\n\
    \    [(< y z) true]\n    [else false]))\n", "  (= x y)\n  (= x z)\n  (= y z))\n\
    </code>\n<|/ a dscore=4 tags=racket,scheme |>\n<| c |>\nI like your use of Racket's\
    \ built-in `equal?` - it seems like a good way to handle this sort of thing. However,\
    \ the OP asked for a more general solution that would work regardless of which\
    \ variable is equal to which other variable.\n<|/ c |>\n<| a |>\nI like Paul's\
    \ answer. The solution is essentially the same, only without an explicit recursion.\
    \ I would write it like this:\n<code>", "  (and (integer? x) (integer? y) (integer?\
    \ z))\n  (< (+ (* x y) (* (/ x y) z)) z))", "  (and (integer? (+ x y z)) (= (+\
    \ x y z) (x+y+z))))\n", "  (or (= (+ (* x y) z) x)\n      (= (+ (* x y) z) y)\n\
    \      (= (+ (* x y) z) z)))\n", "  (and (integer? x) (integer? y) (integer? z)\
    \ (= x +) (= y +) (= z + +))))\n", "  (and (integer? x) \n       (integer? y)\n\
    \       (integer? z) \n       (= (+ x y z) \n          (+ (integer? x) (integer?\
    \ y) (integer? z))))) \n\n", "  (and (integer? x) \n       (integer? y) \n   \
    \    (integer? z)))\n", "  (cond (< x y) (> x z) #f\n        (< y z) (> y x) #f\n\
    \        (< z x) (> z y) #f\n        (= x y) #t\n        (= y z) #t\n        (=\
    \ z x) #t\n        (= x z) #t\n        (tuple '#t '#f '#f '#f '#f '#f))\n", " \
    \ (and (integer? x) (integer? y) (integer? z))\n  (or (= x +) (= y +) (= z -)))\n",
  "  (= (+ x y z) (+ x y z)))\n", "  (and (integer? x)\n       (integer? y)\n    \
    \   (integer? z)\n       (equal? (+ x y z) (* (+ x y) z))\n       (equal? (+ x\
    \ y z) (+ x y z))\n       (equal? (+ x y z) (+ z y x))\n       (equal? (+ x y\
    \ z) (+ x y z))\n       (equal? (+ x y z) (+ x y z))))\n", "  (and (integer? (+\
    \ x y z))\n       (= (+ x y z) (+ x y z))))\n", "  (cond\n    ((number? x) true)\n\
    \    ((number? y) true)\n    ((number? z) true)\n    ((or (= x y)\n         (=\
    \ x z)\n         (= y z))\n     (= x x + y y + z z))\n    ((or (= x y)\n     \
    \    (= x z)\n         (= y z)\n         (= x y)\n         (= x z)\n         (=\
    \ y z))\n     (= x x\n        (if (= y y) y\n            (if (= y z) z\n     \
    \           (if (= z y) z\n                    ((any_int x y z) (any_int y z x)\
    \ (any_int z x y))))))\n    (else false)))\n", "  (and (integer? (+ x y z))\n\
    \       (= (+ x y z) 0)))\n", "  (and (number? x)\n       (number? y)\n      \
    \ (number? z)\n       (= (+ x y z) (x+y+z))))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z) (x = +) (y = +) (z = +) (+ (+ x y) z)))\n", "  (and (integer?\
    \ x)\n       (integer? y)\n       (integer? z)\n       (= (+ x y z) (x+ y z))))\n",
  "  (let ([fs (+ x y z)] ;; fs is our \"sum\"\n        [fsn (floor (* fs 10))] ;;\
    \ fsn is our \"sum\" rounded down\n        [fsn2 (floor (* fsn (/ 10 10)))] ;;\
    \ fsn2 is our \"sum\" rounded up\n        [fx (modulo fs 10)])\n    (and (= (+\
    \ fx fsn2) fsn)\n         (= x fx)\n         (= y fs)\n         (= z fs))))\n",
  "  (cond [(= x y) (= x z) (= y z)] [(< x y) (= x z) (= y z)] [else #false]))\n",
  "  (or (= x y) (= x z) (= y z)))\n", "  (or (= x y)\n      (= x z)\n      (= y z)))\n",
  "  (and (and (number? x) (number? y) (number? z)) (= (+ (/ x y)\n              \
    \                                     (/ x z)) \n                            \
    \                     (+ (/ y z)\n                                           \
    \        (/ y z)))))\n", "  (and (number? x)\n       (number? y)\n       (number?\
    \ z)\n       (= (+ x y z)\n           (+ (number? x)\n              (number? y)\n\
    \              (number? z))))))\n", "  (and (<= x y) \n       (<= y z) \n    \
    \   (<= z x)))\n", "  (and (integer? x) (integer? y) (integer? z) (= (+ x y z)\
    \ 0)))\n", "  (and (integer? x) integer? (integer? y) integer? (integer? z) (=\
    \ (+ x y z) (+ x y z))))\n", "  (cond\n    [(and (integer? x) (integer? y) (integer?\
    \ z)) (= (+ x y z) 15)]\n    [else false]))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z) (= (+ x y z) sum)))\n", "  (and (integer? x)\n       (integer?\
    \ y)\n       (integer? z)\n       (or (= (+ (integer? x) y (integer? z)) (+ (integer?\
    \ x) z (integer? y))) (= (+ (integer? y) x (integer? z)) (+ (integer? y) z (integer?\
    \ x))))))\n", "  (or (and (integer? x) (integer? y) (integer? z))\n      (and\
    \ (integer? x) (integer? z))\n      (and (integer? y) (integer? z))))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z) (= x +) (= y +) (= z +)))\n", "  (or\
    \ (= x y)\n      (= x z)\n      (= y z)\n      (= (+ x y z) 4)))\n", "  (if (or\
    \ (= x 0) (= y 0) (= z 0))\n      #f\n      (= (+ x y z) 7)))\n", "  (and (number?\
    \ x)\n       (number? y)\n       (number? z)\n       (<= (+ x y z) 30)))", " \
    \ (and (number? x) (number? y) (number? z) (= (+ x y z) sum)))\n", "  (cond [(=\
    \ x y) z]\n        [else (= y z)]\n        [else (= x z)]))\n", "  (cond\n   \
    \ [(or (< x y) z) (not (= x y z))]\n    [else (= (+ x y z) x)]\n    [else (= (+\
    \ x y z) y)]\n    [else (= (+ x y z) z)]))\n", "  (cond\n    [(< x y) #t]\n  \
    \  [(< y z) #t]\n    [(< z x) #t]\n    [(< x z) #f]\n    [(< y z) #f]\n    [(<\
    \ z x) #f]\n    [else #f]))\n", "  (if (and (integer? x) (integer? y) (integer?\
    \ z)) (> (+ x y z) 0) false))\n", "  (cond\n    ((> (+ x y z) 0)\n     (or (>\
    \ (+ x y z) 0)\n         (and (integer? (+ x y)) (integer? (+ x z)))\n       \
    \  (and (integer? (+ x z)) (integer? (+ y z))))\n    (else #f)))\n", "  (cond\n\
    \    [(= x y) #t]\n    [(= x z) #f]\n    [(= y z) #t]\n    [else #f]))\n", " \
    \ (and (integer? x) (integer? y) (integer? z) (= (+ x y z) (x+y+z))))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z) \n       (= (+ x y z) (* (* x y) (* (*\
    \ y z) (* (* x z) y))))))\n", "  (and (<= x y) \n       (<= y z)\n       (<= z\
    \ x)))\n", "  (or (= x y) (= y z) (= x z)))\n", "  (let ([x (- x y z)]\n     \
    \   [y x]\n        [z (- x y x)]\n        [sum (+ x y z)]\n        [sumsum (+\
    \ x y z)]\n        [sumsumsum (+ x y z sum)])\n    (and (number? x)\n        \
    \ (number? y)\n         (number? z)\n         (= (+ x y z) sum)\n         (= (+\
    \ x y z) sumsum)\n         (= (+ x y z) sumsumsum)\n         (= (+ x y z sum)\
    \ sumsum)\n         (= (+ x y z sumsum) sumsumsum)\n         (= (+ x y z sumsumsum)\
    \ sumsumsum)\n         (= (+ x y z sumsumsumsum) sumsumsumsum)\n         (= (+\
    \ x y z sumsumsumsumsum) sumsumsumsumsum)\n         (= (+ x y z sumsumsumsumsum)\
    \ sumsumsumsumsumsum)\n         (= (+ x y z sumsumsumsumsumsum) sumsumsumsumsumsumsum)\n\
    \         (= (+ x y z sumsumsumsumsumsumsum) sumsumsumsumsumsumsumsum)\n     \
    \    (= (+ x y z sumsumsumsumsumsumsumsum) sumsumsumsumsumsumsumsumsum)\n    \
    \     (= (+ x y z sumsumsumsumsumsumsumsumsum) sumsumsumsumsumsumsumsumsumsum)\n\
    \         (= (+ x y z sumsumsumsumsumsumsumsumsumsum) sumsumsumsumsumsumsumsumsumsumsum)\n\
    \         (= (+ x y z sumsumsumsumsumsumsumsumsumsumsum) sumsumsumsumsumsumsumsumsumsumsumsum)\n\
    \         (= (+ x y z sumsumsumsumsumsumsumsumsumsumsumsum) sumsumsumsumsumsumsumsumsumsumsumsumsum)\n\
    \         (= (+ x y z sumsumsumsumsumsumsumsumsumsumsumsumsum) sumsumsumsumsumsumsumsumsumsumsumsumsumsumsum)\n\
    \         (= (+ x y z sumsumsumsumsumsumsumsumsumsumsumsumsumsum) sumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum)\n\
    \         (= (+ x y z sumsumsumsumsumsumsumsumsumsumsumsumsumsum", "  (or (= x\
    \ y)\n      (= x z)\n      (= y z)\n      (< x y)\n      (< y z)\n      (< x z)\n\
    \      (< y z)))\n", "  (or (= (+ x y z) 0) (= (+ (* x y) z) 0) (= (+ (* x y)\
    \ z) 0)))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (equal? (+\
    \ x y z) (+ (* x x) (* y y) (* z z)))\n       (<= (+ x y z) (* x x) (* y y) (*\
    \ z z))))\n", "  (and (and (integer? x) (integer? y) (integer? z)) (= (+ x y z)\
    \ (+ x y z))))\n", "  (and (integer? x) (integer? y) (integer? z) (= (+ x y z)\
    \ sum)))\n", "  (and (integer? x) (integer? y) (integer? z))\n  (or (= x y) \n\
    \      (= x z) \n      (= y z))\n  (= (+ x y) z)\n  (= (+ x z) y)\n  (= (+ y z)\
    \ x))\n", "  (let ([m (+ x y z)]\n        [n (- x y z)]\n        [o (* x y z)]\n\
    \        [p (- x y z)]\n        [q (/ x y z)]\n        [r (% x y z)])\n    (if\
    \ (> m n)\n        #f\n        (and (= x m) (= y n) (= z o) (= x p) (= y q) (=\
    \ z r)))))\n", "  (if (= x y)\n      (= x z)\n      (= y z)))\n", "  (or (= x\
    \ y) \n      (= x z) \n      (= y z)))\n", "  (and (integer? x)\n       (integer?\
    \ y)\n       (integer? z)\n       ((= x y) z)\n       ((= x z) (= y z))\n    \
    \   ((= x z) (= y z))))\n", "  (or (and (integer? x) (integer? y) (integer? z))\
    \ (and (number? x) (number? y) (number? z)) (and (number? x) (x = y) (number?\
    \ z) (x = z))))\n", "  (cond ((and (number? x) (number? y) (number? z))\n    \
    \     (= (+ x y z) (+ x y z)))\n        ((and (number? y) (number? z) (number?\
    \ x))\n         (= (+ y z x) (+ y z x)))\n        ((and (number? z) (number? x)\
    \ (number? y))\n         (= (+ z x y) (+ z x y)))\n        (else\n         (false))))\n",
  "  (and (integer? x) (integer? y) (integer? z)\n       (= (+ x y z) sum)\n     \
    \  (= x sum)\n       (= y sum)\n       (= z sum)))\n", "  (and (integer? (add-to-list\
    \ x y))\n       (integer? (add-to-list y z))\n       (equal? (add-to-list x z)\
    \ (add-to-list y z))\n       integer? z))\n", "  (and (integer? x)\n       (integer?\
    \ y)\n       (integer? z)\n       (= x y)\n       (= x z)\n       (= y z)\n  \
    \     (= (+ x y) z)\n       (= (+ x z) (+ y z))\n       (= (+ x y) (+ z y))))\n",
  "  (cond\n    [(or (= x y) (= x z)) #t]\n    [(or (= y z) (= x y)) #t]\n    [else\
    \ #f]))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer?\
    \ x)\n       (integer? y)\n       (integer? z)))\n", "  (and (= x y)\n       (=\
    \ y z)\n       (= (+ x y) z)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
