name: HumanEval_63_fibfib
language: rkt
prompt: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to the\
  \ Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
  \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  ;; Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n;; >>> (fibfib 1)\n;; 0\n;; >>> (fibfib 5)\n;; 4\n;; >>> (fibfib\
  \ 8)\n;; 24\n(define (fibfib n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
  \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
  \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
  \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14)\
  \ 927)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n    ((= n 2) 1)\n    (else\
    \ (+ (fibfib (- n 1))\n             (fibfib (- n 2))\n             (fibfib (-\
    \ n 3))))))", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [(= n 2) 2]\n  \
    \  [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n", "  (define\
    \ (fib x)\n    (if (< x 2)\n        0\n        (+ (fib (- x 2)) (* (fib (- x 1))\
    \ x))))\n  (fib n))\n", "  (let ((fib (make-fibfib (- n 1)))\n        (result\
    \ (+ (fib (car fib)) (cdr fib)))))\n    (if (< n 2)\n        result\n        (+\
    \ (fib (car fib)) (fibfib (cdr fib)))))\n", "  (cond\n    ((= n 0) 0)\n    ((=\
    \ n 1) 0)\n    ((= n 2) 1)\n    (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib\
    \ (- n 3))))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2)\
    \ 1]\n        [else (+ (fibfib (sub1 n)) (fibfib (sub1 n)) (fibfib (sub1 n)))]))\n",
  "  (define (fibfib-helper n acc)\n    (if (= n 0)\n        acc\n        (fibfib-helper\n\
    \         (- n 1)\n         (+ (fibfib-helper (- n 1) (+ acc acc))\n         \
    \   (fibfib-helper (- n 2) acc))))\n  (fibfib-helper n 0))\n</code>\n<|/ a |>\n\
    <| c |>\nYour solution will produce incorrect answers in some corner cases, such\
    \ as `(fibfib (- 5 1))`. You need an extra base case.\n<|/ c |>\n<| c |>\n, how\
    \ does that look like?\n<|/ c |>\n<| c |>\nThe same way you did the `fibfib` function\
    \ above.\n<|/ c |>\n<| c |>\nI've added a more complete solution.\n<|/ c |>\n\
    <| c |>\nThis is clearly a better answer than mine, but still doesn't produce\
    \ correct answers in some cases: `#lang racket\n", "  (cond\n    [(<= 0 n) 0]\n\
    \    [(= n 1) 0]\n    [else (+ (fibfib (- n 2)) (fibfib (- n 3))) ]))\n", "  (define\
    \ (iter i s)\n    (cond\n      [(zero? i) (first (rest (reverse s)))]\n      [(<\
    \ i (n-2)) (iter (add1 i) s)]\n      [else (iter (add1 i) (cons (sub1 (last s))\
    \ (first s)))]))\n  (iter 0 '()))\n", "  (if (= n 0) 0\n      (+ (fibfib (- n\
    \ 1))\n         (fibfib (- n 2))\n         (fibfib (- n 3)))))\n", "  (cond ((=\
    \ n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        ((> n 2) (+ (fibfib\
    \ (sub1 n)) (+ (fibfib (sub2 n)) (fibfib (sub3 n))))))\n</code>\n<|/ a tags=fibonacci,racket,scheme\
    \ |>\n<| a dscore=2 |>\nHere is an example with tail recursion.\n<code>", "  (if\
    \ (= n 0) 0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (define (helper\
    \ n acc)\n    (cond\n      [(= n 1) (cons 0 (helper (- n 1) acc))]\n      [(=\
    \ n 2) (cons 1 (helper (- n 2) acc))]\n      [(= n 3) (cons 1 (helper (- n 3)\
    \ acc) (helper (- n 2) acc))]\n      [else\n       (helper (- n 1) (cons 0 (helper\
    \ (- n 1) acc))) (helper (- n 2) (cons 1 (helper (- n 2) acc))) (helper (- n 3)\
    \ (cons 1 (helper (- n 3) acc) (helper (- n 2) acc))) ])))\n  (helper n '()))\n",
  "  (+ (fib n 1) (fib n 2) (fib n 3)))\n", "  (cond ((< n 0) 0)\n        ((= n 1)\
    \ 0)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2))))))\n", "  (if (= n 0)\n\
    \      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (cond [(< n 0)\n\
    \         (error \"fibfib: invalid input: ~n\" n)]\n        [else\n         (+\
    \ (fibfib (- n 1)) (fibfib (- n 2))\n            (fibfib (- n 3)))]))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n   \
    \      (fibfib (- n 3)))))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n   \
    \     (else (+ (fibfib (- n 1)) (fbfib n 2)))))\n", "  (if (= n 0) 0\n      (+\
    \ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (if (= n 1)\n      0\n      (+ n\
    \ ((fibfib (- n 2)) 1 (fibfib (- n 3))))))\n", "  (fib 0 1 2 n (lambda (x) (+\
    \ x ((fib (- n 1) (fib (- n 2) (fib (- n 3)))))) 0))\n", "  (cond [(= n 0) 0]\n\
    \        [(= n 1) 1]\n        [else (+ (fibfib (- n 2)) (fibfib (- n 3)))]))\n",
  "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (fibfib (- n 2)) (fibfib (- n 1)) (fibfib (- n 0)))]))", "  (cond\n    [(< n\
    \ 0) 0]\n    [(< n 1) 0]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)))]))\n",
  "  (if (= n 0)\n      0\n      (+ (fibfib (sub1 n)) (fibfib (sub2 n)))))\n", " \
    \ (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [else (+ (fibfib (- n 1)) (fibfib\
    \ (- n 2)))]))\n", "  (cond [(< n 0)\n         0]\n        [(< n 1)\n        \
    \ 0]\n        [else\n         (+ (fibfib (- n 1))\n            (fibfib (- n 2)))\n\
    \         ]))\n", "  (if (< n 2)\n      0\n      (+ (fibfib (- n 1)) (fibfib (-\
    \ n 2)))))", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n\
    \        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n", " \
    \ (let loop ((i 0) (a 0)\n             (b 0) (c 1))\n    (if (> n 0)\n       \
    \ (loop (+ i 1) (+ a b) (+ c b))\n        c)))\n", "  (define (fibfib0 n acc)\n\
    \    (if (< n 2)\n        acc\n        (fibfib0 (- n 1) (+ acc (+ acc acc)))))\n\
    \  (fibfib0 n 0))\n", "  (cond\n    [(<= n 0) 0]\n    [(<= n 1) 0]\n    [(= n\
    \ 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2))) (+ fibfib (- n 3))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib\
    \ (- n 1)) \n            (fibfib (- n 2)) \n            (fibfib (- n 3))\n   \
    \         )]))\n</code>\n<|/ a dscore=0 |>\n<| a |>\nRecursion isn't the only\
    \ way to solve this. A simple iterative solution works well enough, since it avoids\
    \ all the stack space requirement that recursive programs have.\n<code>", "  \n\
    \  \n  ;;; Solution #1\n  (define fibfib (lambda (n) (if (= n 0) 0 \n        \
    \                      (+ (fibfib (- n 1)) (fibfib (- n 2))))))\n  ;;; Solution\
    \ #2\n  (define fibfib2 (lambda (n)\n                      (let ((fibfib (lambda\
    \ (n) (if (= n 0) 0 \n                                                  (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2))))))))\n                      (fibfib2 n)))\n  ;;;\
    \ Solution #3\n  (define fibfib3 (lambda (n)\n                      (define (fibfib\
    \ (n) (if (= n 0) 0 \n                                              (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2))))))\n                      (fibfib n)))\n  ;;; Solution\
    \ #4\n  (define fibfib4 (lambda (n)\n                      (define (fibfib (n)\
    \ (if (= n 0) 0 \n                                              (+ (fibfib (-\
    \ n 1)) (fibfib (- n 2))))))\n                      (define (fibfib2 n) (fibfib\
    \ n))\n                      (fibfib2 n)))\n  ;;; Solution #5\n  (define fibfib5\
    \ (lambda (n)\n                      (define fibfib (lambda (n) (if (= n 0) 0\
    \ \n                                                  (+ (fibfib (- n 1)) (fibfib\
    \ (- n 2))))))\n                      (fibfib n))\n  ;;; Solution #6\n  (define\
    \ fibfib6 (lambda (n)\n                      (let ((fibfib (lambda (n) (if (=\
    \ n 0) 0 \n                                                  (+ (fibfib (- n 1))\
    \ (fibfib (- n 2))))))))\n                      (fibfib n)))\n  ;;; Solution #7\n\
    \  (define fibfib7 (lambda (n)\n                      (let ((fibfib (lambda (n)\
    \ (if (= n 0) 0 \n                                                  (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2))))))))\n                      (define (fibfib2 n) (fibfib\
    \ n))\n                      (fibfib2 n)))\n  ;;; Solution #8\n  (define fibfib8\
    \ (lambda (n)\n                      (let ((fibfib (lambda (n) (if (= n 0) 0 \n\
    \                                                  (+ (fibfib (- n 1)) (fibfib\
    \ (- n 2))))))))\n                      (let ((fibfib2 (lambda (n) (fibfib n)))\
    \ \n                          (fibfib2 n))\n                        (fibfib2 n)))\n\
    \  ;;; Solution #9\n  (define fibfib9 (lambda (n)", "  (if (<= n 0)\n      0\n\
    \      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n         (fibfib (- n 3)))))\n",
  "  (cond ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (fibfib (sub1 n)) (fibfib\
    \ (sub1 n))\n                     (fibfib (sub1 n))\n                     (fibfib\
    \ (sub1 n))))))\n</code>\n<|/ a tags=scheme dscore=0 |>\n<| a tags=scheme dscore=0\
    \ |>\nThe Scheme interpreter is very good at optimising things:\n<code>", "  (cond\
    \ ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (fibfib (- n 1)) \n     \
    \           (fibfib (- n 2))\n                (fibfib (- n 3))))))\n", "  (if\
    \ (zero? n)\n      '()\n      (cons\n       (+ (fib 0 (1+ n) 2)\n          (fib\
    \ (1+ n) 2 (1+ n)))\n       (fibfib (1+ n))))) ;; <-- recursive step\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for the answer! The other answers here were\
    \ very helpful and educational as well. Thanks!\n<|/ c |>\n<| a dscore=1 |>\n\
    The first element of the sequence is always 0, and that's not an issue, the following\
    \ elements start from 1.\nThe fibonacci sequence is defined by the recurrence\
    \ relation:\n\n<code>\nFn = Fn-1 + Fn-2 \n</code>\n\nThis can be implemented in\
    \ a very simple way like this:\n<code>", "  (cond\n    [(zero? n) 0]\n    [else\
    \ (+ (fibfib (- n 1)) (fibfib (- n 2)))]))\n", "  (cond [(= n 0) 0]\n        [(=\
    \ n 1) 0]\n        [(= n 2) 1]\n        [else (+ (fibfib (- n 2)) (fibfib (- n\
    \ 3))) (fibfib (- n 2))]))\n", "  (if (= n 1)\n      0\n      (+ (fibfib (- n\
    \ 1)) (fibfib (- n 2)))))\n", "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n   \
    \ ((= n 2) 1)\n    (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n",
  "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2))\n          \
    \ (fibfib (- n 3)))))\n", "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1))\n\
    \         (fibfib (- n 2))\n         (fibfib (- n 3)))))\n", "  (cond ((= n 0)\
    \ 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (fibfib (sub1\
    \ n)) (fibfib (sub2 n)) (fibfib (sub3 n)))))) ;;", "  (cond [(zero? n) 0]\n  \
    \      [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (fibfib (- n 2)) (fibfib\
    \ (- n 3))) (fibfib (- n 1))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n\
    \        [(= n 2) 1]\n        [else (+ (fibfib (- n 2)) (fibfib (- n 1))) (fibfib\
    \ (- n 3))]))\n", "  (cond [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+\
    \ (fibfib (- n 2)) (fibfib (- n 3))))))\n", "  (if (= n 0)\n      0\n      (+\
    \ (fibfib (- n 1))\n         (fibfib (- n 2))\n         (fibfib (- n 3)))))",
  "  (if (<= n 0)\n      0\n      (+ (fibfib (sub1 n)) (fibfib (sub1 n-1))) (fibfib\
    \ (sub1 n-2))))\n</code>\n<|/ a tags=recursion,racket |>\n<| a |>\nI noticed that\
    \ your question is tagged \"racket\", and that in the racket language the definition\
    \ of fibfib is already implemented for you:\n<code>\n> (define fibfib (fib 4))\n\
    > (fibfib 5)\n> 4\n</code>\n<|/ a dscore=2 tags=recursion,racket |>\n<| c |>\n\
    Thanks for the answer.\n<|/ c |>\n<| a tags=recursion,racket |>\n<code>\n#lang\
    \ racket\n", "  (nth (lambda (i) (- 1 (- i (- n 1))) (range n))\n       (lambda\
    \ (i) (- 1 (- i (- n 2))) (range n))\n       (lambda (i) (- 1 (- i (- n 3))) (range\
    \ n))))\n</code>\n<|/ a tags=algorithm,racket,recursion dscore=2 |>\n<| c |>\n\
    This doesn't run in racket. I'm not sure if there's any way to fix it other than\
    \ modifying it to be a tail-recursive function that returns its argument. I'd\
    \ prefer not to modify this code just so I can make it a tail-recursive function.\
    \ Do you know how I can do that? I'm also not allowed to use any auxiliary functions.\
    \ Also, I don't have access to any other language features. I'm only allowed to\
    \ use the ones available in racket.\n<|/ c |>\n<| c |>\nI added a tail-recursive\
    \ solution. I'm not going to modify this code just because I don't have access\
    \ to a tail-recursive solution in racket. The function I provided is the best\
    \ solution I can come up with, without using any auxiliary functions.\n<|/ c |>\n\
    <| a tags=algorithm,racket,recursion dscore=1 |>\n<code>", "  (if (= n 0)\n  \
    \    0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n         (fibfib\
    \ (- n 3)))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2)\
    \ 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))]))\n",
  "  ;; use recursion to compute the nth element of the fibbonaci sequence\n  (if\
    \ (= n 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n   \
    \      (fibfib (- n 3)))))\n", "  (if (= n 0)\n      0\n      (+ (fibfib (- n\
    \ 1)) ; recursion\n         (fibfib (- n 2)))))\n", "  (cond [(= n 0) 0]\n   \
    \     [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (fibfib (sub1 n)) (fibfib\
    \ (sub1 n-1))\n                   (fibfib (sub1 n-2)))]))\n", "  (cond\n    ((=\
    \ n 1) 0)\n    ((= n 2) 1)\n    (else (+ (fibfib (- n 1)) (fibfib (- n 2))) (fibfib\
    \ (- n 3)))))\n", "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1))\n       \
    \  (fibfib (- n 2))\n         (fibfib (- n 3)))))\n", "  (if (<= n 0)\n      0\n\
    \      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n         (fibfib (- n 3)))))\n\
    \n#lang racket\n", "  (if (zero? n)\n      '()\n      (cons ((fibfib (sub1 n))\n\
    \             (fibfib (sub2 n)))\n            (fibfib (sub3 n))))", "  (cond ((zero?\
    \ n) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (fibfib (sub1\
    \ n)) (fibfib (sub2 n)) (fibfib (sub3 n)))))\n))\n</cell>\n<cell>\n#lang racket\n",
  "  (cond\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [(= n 3) (+ fibfib (- 2 n) (- 3\
    \ n))]\n    [else (+ fibfib (- 3 n) (- 5 n))]))\n</cell>\n<code language=ocaml-jupyter>",
  "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n\
    \         (fibfib (- n 3)))))\n", "  (cond [(= n 0)\n         0]\n        [(=\
    \ n 1)\n         0]\n        [(= n 2)\n         1]\n        [else (+ (fibfib (-\
    \ n 2)) (fibfib (- n 1))\n                    (fibfib n))]))\n", "  (if (= n 0)\n\
    \      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (define fibfib-aux\
    \ (lambda (a b c)\n                        (if (<= n 3) \n                   \
    \         c\n                            (fibfib-aux (+ a b) (+ b c) (+ c d))))\n\
    \  (fibfib-aux a b c))\n", "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1))\
    \ (fibfib (- n 2)))))\n", "  ;; Implementation note: the nth fibbonacci number\
    \ is just the nth element of the fibbonacci sequence.\n  (define (fibfibhelper\
    \ n result)\n    (if (zero? n)\n        result\n        (fibfibhelper (sub1 n)\
    \ (+ result (fibfibhelper (sub1 n) 0)))))\n  (fibfibhelper n 0))\n", "  (define\
    \ (fib x y)\n    (if (zero? y) x y\n        (fib (sub1 x) (sub1 y))))\n  (fib\
    \ (fibfib (sub1 n)) (sub1 (fibfib (sub1 n))))) ;; (fibfib 1)\n</code>\n<|/ a |>\n\
    <| a dscore=4 tags=fibonacci,racket,sicp,scheme |>\nJust for fun:\n<code>", " \
    \ (define (iter i f x)\n    (if (= i (+ n 1)) x\n        (iter (+ i 1) (+ f (iter\
    \ i f x)))))\n  (iter 0 1 0))\n", "  (cond [(= n 1) 0]\n        [(= n 2) 1]\n\
    \        [else (+ (fibfib (- n 2)) (fibfib (- n 3)))))])\n", "  (cond [(= n 0)\
    \ 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (fibfib (- n\
    \ 1)) (fibfib (- n 2)) (fibfib (- n 3)))))", "  (if (<= n 0)\n      0\n      (+\
    \ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n", "  (if (<= n 0) 0\n\
    \      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n         (fibfib (- n 3)))))\n",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        (else (+ (fibfib (- n 1)) \n\
    \                 (fibfib (- n 2)) \n                 (fibfib (- n 3))))))", " \
    \ (cond\n    ((= n 0)0)\n    ((= n 1)0)\n    ((= n 2)1)\n    (else (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n", "  (if (= n 0)\n      0\n\
    \      (+ (fibfib (sub1 n)) (fibfib (sub2 n)) (fibfib (sub3 n))))\n  )\n", " \
    \ (fib 0 1 2 3 4 5))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) \n                  (fibfib (- n\
    \ 2))\n                  (fibfib (- n 3))))]))\n", "  (if (= n 0)\n      0\n \
    \     (+ (fibfib (- n 1)) \n         (fibfib (- n 2))\n         (fibfib (- n 3)))))\n",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+\
    \ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n", "  (cond\n    [(=\
    \ n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (sub1 n)) (fibfib\
    \ (sub2 n)) (fibfib (sub3 n)))]))\n", "  (define (fibfib-helper n result)\n  \
    \  (if (= n 0)\n        (list result 0)\n        (fibfib-helper (sub1 n) (list\
    \ result (+ result (list (list (sub1 n) (sub1 n)))))\n      )\n    )\n  )\n  (fibfib-helper\
    \ n '())\n)\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n\
    \        ((= n 3) (+ (fibfib (- n 2)) (fibfib (- n 1))))\n        (else (+ (fibfib\
    \ (- n 3)) (fibfib (- n 2))) (fibfib (- n 1))))))\n", "  (cond\n    ((= n 0) 0)\n\
    \    ((= n 1) 0)\n    ((= n 2) 1)\n    ((= n 3) (+ (fibfib (- n 2)) (fibfib (-\
    \ n 1))))\n    ((< n 3) (+ (fibfib (- n 2)) (fibfib (- n 1)) (fibfib (- n 3))))))\n",
  "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2))\n         (fibfib\
    \ (- n 3)))))\n", "  (if (< n 1)\n      0\n      (+ (fibfib (- n 1)) (* (fibfib\
    \ (- n 2)) (fibfib (- n 3))))))\n\n#lang racket\n", "  (cond ((= n 0) 0)\n   \
    \     ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+ (fibfib (- n 2)) (fibfib\
    \ (- n 1))) (fibfib (- n 2))))))\n", "  (if (< n 2) 0\n      ((+ (fibfib (- n\
    \ 2)) (fibfib (- n 3))) (fibfib (- n 1)))))\n", "  (cond [(= n 0) 0]\n       \
    \ [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib\
    \ (- n 2)) (fibfib (- n 3)))))\n)\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n\
    \        [(= n 2) 1]\n        [else (+ (fibfib (- n 1)) ((fibfib (- n 2)) (* (fibfib\
    \ (- n 3)) (fibfib (- n 1))))))]))", "  (cond ((= n 0)\n         0)\n        ((=\
    \ n 1)\n         0)\n        ((= n 2)\n         1)\n        (else\n         (+\
    \ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n", "  (cond [(= n 0)\
    \ 0]\n        [(= n 1) 1]\n        [else (+ (fibfib (- n 1)) \n              \
    \   (fibfib (- n 2))\n                 (fibfib (- n 3)))))])\n", "  (if (zero?\
    \ n)\n      0\n      (+ (fibfib (sub1 n)) (fibfib (sub1 n)) (fibfib (sub1 n)))))\n",
  "  (if (< n 2)\n      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fibfib (- n 1)) (* (fibfib (- n 2)) n))))\n", " \
    \ (if (= n 0)\n      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  ;; Return\
    \ 0 if fibfib is called with any n less than 0.\n  (if (< n 0)\n      0\n    \
    \  ;; Return 1 the first five numbers.\n      (+ (fibfib (- n 1)) (fibfib (- n\
    \ 2)) (fibfib (- n 3)))))\n", "  \n  (cond [(= n 0)\n         (begin (display\
    \ 0)\n               (newline)\n               (fibfib (sub1 n)))]\n        [(=\
    \ n 1)\n         (begin (display 0)\n               (newline)\n              \
    \ (fibfib (sub1 n)))]\n        [(= n 2)\n         (begin (display 1)\n       \
    \        (newline)\n               (fibfib (sub1 n)))]\n        [else\n      \
    \   (begin (display (+ (fibfib (sub1 n)) (fibfib (sub1 n)))\n                \
    \     (newline)\n                     (fibfib (sub1 n)))]))\n", "  (if (= n 0)\n\
    \      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (cond\n    [(=\
    \ n 0) 0]\n    [(= n 1) 0]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)))]))\n",
  "  (define (helper n a b)\n    (cond ((= n 0) a)\n          ((= n 1) b)\n      \
    \    (else (helper (sub1 n) (+ a b) (+ b (* a b))))))\n  (helper n 0 0))\n", " \
    \ (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib\
    \ (- n 2)) (fibfib (- n 1)) (fibfib (- n 0)))]))\n", "  (cond\n    ((= n 0) 0)\n\
    \    ((= n 1) 0)\n    ((= n 2) 1)\n    ((= n 3) (+ (fibfib (- n 1)) (fibfib (-\
    \ n 2)))))\n    (else (+ (fibfib (- n 2)) (fibfib (- n 3))))))\n", "  (if (= n\
    \ 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n        \
    \ (fibfib (- n 3)))))\n", "  (if (< n 3)\n      (if (= n 0)\n          0\n   \
    \       (if (= n 1)\n              0\n              (if (= n 2)\n            \
    \      1\n                  (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n\
    \ 3))))))\n      (if (= n 4)\n          24\n          (if (= n 5)\n          \
    \    12\n              (if (= n 6)\n                  6\n                  (+\
    \ (fibfib (- n 5)) (fibfib (- n 6)))))) \n", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib\
    \ (- n 3)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2)\
    \ 1]\n        [(> n 3) (+ (fibfib (- n 3)) (fibfib (- n 2)) (fibfib (- n 1)))]))",
  "  (cond ((= n 0)0)\n        ((= n 1)0)\n        ((= n 2)1)\n        (else\n   \
    \      (+ (fibfib (- n 2)) (fibfib (- n 1)) (fibfib (- n 0))))))\n", "  (define\
    \ (helper a b c)\n    (cond ((= n 0)\n           (list 0 b c))\n          ((<\
    \ n 1)\n           (helper b (helper a 0 c) 0))\n          (else\n           (helper\
    \ a b (helper 0 c 0)))))\n  (helper 0 1 0))\n", "  ;; your code here\n  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n\
    \ 1)) \n            (fibfib (- n 2)) \n            (fibfib (- n 3)))]))\n", " \
    \ (if (<= 0 n 2)\n      0\n      (+ (fibfib (- n 2)) (fibfib (- n 3)))))\n", " \
    \ (cond [(zero? n) 0]\n        [(even? n) (+ (fibfib (sub1 n)) (fibfib (sub1 n)))]\n\
    \        [else (+ (fibfib (sub1 n)) (fibfib (sub1 n))\n               (fibfib\
    \ (sub1 n)))]))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2)\
    \ 1]\n        [else (+ (fibfib (- n 3)) (fibfib (- n 2)) (fibfib (- n 1))))]))\n",
  "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+\
    \ (fibfib (- n 1)) (fibfib (- n 2))) (fibfib (- n 3)))))\n", "  (cond [(< n 0)\
    \ 0]\n        [(= n 1) 0]\n        [else (+ (fibfib (- n 2)) (fibfib (- n 3)))]))\n",
  "  ; Base case:\n  (cond\n    ;; Base case for fibfib(0):\n    [(= n 0) 0]\n   \
    \ ;; Base case for fibfib(1)\n    [(= n 1) 1]\n    ;; Recursive case:\n    [else\
    \ (+ (fibfib (- n 1)) \n             (fibfib (- n 2)) \n             n)))\n",
  "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n\
    \         (fibfib (- n 3)))))\n\n#lang racket\n", "  (define fibfib (lambda (x\
    \ y z)\n    (cond ((= z 0) 0)\n          ((= z 1) 1)\n          ((= z 2) 2)\n\
    \          ((= y z) (fibfib (- x 1) (- y 1) (- z 1)))\n          (else (fibfib\
    \ (- x 1) (- y 1) (- z (+ x y)))))\n  ))\n  (fibfib n 0 0))\n</cell>\n<code language=racket-language>",
  "  (cond [(= n 0)\n         0]\n        [(= n 1)\n         0]\n        [(= n 2)\n\
    \         1]\n        [else\n         (+ (fibfib (- n 1))\n            (fibfib\
    \ (- n 2))\n            (fibfib (- n 3))))]))\n", "  ;; Base case\n  (if (= n\
    \ 0) 0\n      ;; Recursive case\n      (let ([a (fb n (sub1 (fibfib (sub1 n))))\n\
    \            b (fb (sub1 n) n (sub1 (fb n (sub1 n))))\n            c (fb (sub1\
    \ n) (sub1 n) (sub1 (fb n (sub1 n))))])\n        (+ (* a b) (* (* a c) c))))\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nFor `fib 2` the result is `1` instead of\
    \ `0`\n<|/ c |>\n<| c |>\nThis is not correct. For the number `5` the result is\
    \ `5` instead of `7`.\n<|/ c |>\n<| c |>\nthanks for the catch, fixed it\n<|/\
    \ c |>\n<| a |>\nThe recursive function you need is called fb, not f. f is for\
    \ factorial which is different from fib.\n<code>", "  (rem\n   (let ([a (if (<\
    \ n 3) 0 1)\n          b (if (< n 3) 0 1)\n          c (if (< n 3) 1 0)\n    \
    \      d (if (< n 3) 1 0)])\n     (+ a (+ b (+ c (+ d 0)))))))\n", "  (if (= n\
    \ 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n        \
    \ (fibfib (- n 3)))))\n", "  (if (= n 0) 0\n      (+ (fibfib (- n 1)) ((fibfib\
    \ (- n 2)) 0))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n\
    \ 2) 1]\n        [else (+ (fibfib (- n 2)) (fibfib (- n 1))) (fibfib (- n 3))]))\n",
  "  (if (< n 0)\n      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (cond\
    \ [(= n 0)  0]\n        [(= n 1)  0]\n        [(= n 2)  1]\n        [else    \
    \  ((fibfib (sub1 n)) + (fibfib (sub2 n)) + (fibfib (sub3 n)))]))\n", "  (cond\
    \ [(< n 2) 0]\n        [(= n 0) 0]\n        [(= n 1) 1]\n        [else\n     \
    \     (+ (fibfib (sub1 n))\n             (fibfib (sub2 n))\n             (fibfib\
    \ (sub3 n)))]))\n", "  (let loop ([a 0] [b 0] [c 0])\n    (cond\n      [(zero?\
    \ n) c]\n      [else (loop (+ a 1) (+ b 1) (+ c 1))])))\n</code>\n#lang racket\n\
    <code>", "  (cond [(zero? n) 0]\n        [(equal? n 1) 0]\n        [(equal? n\
    \ 2) 1]\n        [else (+ (fibfib (sub1 n)) (fibfib (sub2 n)))]))\n", "  (define\
    \ (fibfib-aux n ret)\n    (cond [(= n 0) ret]\n          [(= n 1) ret]\n     \
    \     [(= n 2) ret]\n          [else (fibfib-aux (- n 1) (+ ret (fibfib-aux (-\
    \ n 2) 0)))]))\n  (fibfib-aux n 0))\n", "  (cond ((= n 0) 0)\n        (else (+\
    \ (fibfib (- n 1)) (fibfib (- n 2))))))\n</code>\n<|/ a tags=scheme,lisp,racket,functional-programming\
    \ |>\n<| a |>\nAs a followup to Brett's answer, here's a recursive implementation\
    \ that does almost all the work:\n<code>", "  (let loop ((n (- (* 2 n) (floor\
    \ n 2))) (i 0) (fibfib (+ i 1)))\n    (cond\n      [(= n 0) 0]\n      [(< n 2)\
    \ 0]\n      [(< n 1) (+ (fibfib (- n 2)) (fibfib (- n 3))) (fibfib (- n 1))]\n\
    \      [else\n        (loop (- n 2) (+ i 1) (+ (fibfib (- n 2)) (fibfib (- n 3)))\
    \ (fibfib (- n 1)))]\n    )\n  )\n)\n", "  (cond [(< n 0) 0]\n        [(< n 1)\
    \ 0]\n        [(< n 2) 1]\n        [else (+ fibfib (- n 1) (+ fibfib (- n 2) (+\
    \ fibfib (- n 3) 0)))))]\n", "  (if (= n 1)\n      0\n      (+ (fibfib (sub1 n))\
    \ (fibfib (sub1 n)))))\n", "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1))\
    \ (fibfib (- n 2)))))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        (else\n\
    \         (+ 0 (fibfib (sub1 n)) (fibfib (sub2 n)) (fibfib (sub3 n))))))\n", " \
    \ (cond [(= n 0) 0]\n        [(= n 1) 1]\n        [else (+ (fibfib (- n 1)) (fibfib\
    \ (- n 2))(fibfib (- n 3))) ]))\n</cell>\n<text>\nProblem 5: Solve the fib function\
    \ with recursion\nPlease write a recursive function to compute the n-th element\
    \ of the fib function where the function is defined as follows:\nfib(0,1) = 0\n\
    fib(1,1) = 1\nfib(n,k) = fib(n-1, k-1) + fib(n-2, k-2) + fib(n-k, k).\n\n\n</text>\n\
    <cell>\n#lang racket", "  (cond\n    ((= n 0) 0)\n    ((= n 1) 0)\n    ((= n 2)\
    \ 1)\n    (else (+ (fibfib (- n 1)) (fibfib (- n 2))(fibfib (- n 3))))))\n", " \
    \ (if (= n 0)\n      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n</code>\n\
    <|/ a dscore=3 tags=scheme,racket,functional-programming |>\n<| c |>\nThis one\
    \ is definitely worth checking out. Thank you!\n<|/ c |>\n<| a dscore=1 |>\nI\
    \ understand this is an old question, but here's a solution I came up with (which\
    \ I like better than recursion), using closures and letrec\n<code>", "  (if (zero?\
    \ n)\n      0\n      (+ (fibfib (sub1 n)) (fibfib (sub2 n)))))\n", "  (cond ((=\
    \ n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        ((= n 3) (+ (fibfib\
    \ (- n 2)) (fibfib (- n 3))))\n        (else (+ (fibfib (- n 2)) (fibfib (- n\
    \ 3))))))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n  \
    \  [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n", "  (cond\
    \ [(= n 0) 0]\n        [(= n 1) 1]\n        [else (+ (fibfib (- n 2)) (fibfib\
    \ (- n 3))) ]))\n", "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1)) (fibfib\
    \ (- n 2)))))\n", "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1))\n       \
    \  (fibfib (- n 2))\n         (fibfib (- n 3)))))\n", "  (cond ((= n 0) 0)\n \
    \       ((= n 1) 0)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib\
    \ (- n 3))))))\n", "  (if (= n 0) 0\n      (+ (fibfib (- n 1)) ((fibfib (- n 2))\
    \ 0))))\n", "  (if (> n 0) (+ (fibfib (- n 1)) (fibfib (- n 2))) (fibfib (- n\
    \ 3))))\n", "  (if (<= 0 n)\n      0\n      (+ n (+ (fibfib (sub1 n)) (fibfib\
    \ (sub2 n))))))\n", "  (define (fib n result)\n    (if (= n 0)\n        result\n\
    \        (fib(- n 1) (+ result (- n 2)))))\n  (fib n 0))\n</cell>\n<code language=xeus-cling-cpp14>",
  "  (cond [(zero? n) 0]\n        [(one? n) 0]\n        [else (+ (fibfib (sub1 n))\
    \ (fibfib (sub1 n)))]))\n", "  (cond [(= n 0)\n         0]\n        [(= n 1)\n\
    \         0]\n        [else\n         (+ (fibfib (- n 1))\n            (fibfib\
    \ (- n 2)))\n         (fibfib (- n 3))]))\n", "  (define (fib-helper n result)\n\
    \    (cond\n      [(= n 0) result]\n      [(= n 1) result]\n      [else\n    \
    \   (fib-helper (- n 1) (+ result (* 3 n)))]))\n  (fib-helper n 0))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n   \
    \      (fibfib (- n 3)))))\n", "  (foldl (lambda (a b)\n           (+ a b (fibfib\
    \ (- n 1))))\n         0\n         (reverse (range 1 n))))\n", "  (define (fib-step\
    \ a b temp)\n    (if (= a b)\n        temp\n        (fib-step (+ a 1) b (+ temp\
    \ a))))\n  (fib-step 1 1 n))\n", "  (if (< n 1)\n      0\n      (let ([a (fibfib\
    \ (sub1 n)))\n            (b (fibfib (sub2 n)))\n            (c (fibfib (sub3\
    \ n)))]\n        (+ (+ (+ a b) c) (c))))", "  (define (fibfib-helper n acc)\n\
    \    (cond\n      [(= n 0)\n       acc]\n      [(< n 3)\n       (fibfib-helper\
    \ (- n 1)\n                      (+ (fibfib (- n 2)) (fibfib (- n 3))))]\n   \
    \   [(> n 3)\n       (fibfib-helper (- n 2)\n                      (+ (fibfib\
    \ (- n 3)) (fibfib (- n 2))))]\n      [(= n 4)\n       (fibfib-helper (- n 3)\n\
    \                      acc)]\n      [(= n 5)\n       (fibfib-helper (- n 4)\n\
    \                      acc)]\n      [(= n 6)\n       (fibfib-helper (- n 5)\n\
    \                      acc)]\n      [(= n 7)\n       (fibfib-helper (- n 6)\n\
    \                      acc)]\n      [(= n 8)\n       (fibfib-helper (- n 7)\n\
    \                      acc)]\n      [(= n 9)\n       (fibfib-helper (- n 8)\n\
    \                      acc)]\n      [(= n 10)\n       (fibfib-helper (- n 9)\n\
    \                      acc)]\n      [(= n 11)\n       (fibfib-helper (- n 10)\n\
    \                      acc)]\n      [(= n 12)\n       (fibfib-helper (- n 11)\n\
    \                      acc)]\n      [(= n 13)\n       (fibfib-helper (- n 12)\n\
    \                      acc)]\n      [(= n 14)\n       (fibfib-helper (- n 13)\n\
    \                      acc)]\n      [(= n 15)\n       (fibfib-helper (- n 14)\n\
    \                      acc)]\n      [(= n 16)\n       (fibfib-helper (- n 15)\n\
    \                      acc)]\n      [(= n 17)\n       (fibfib-helper (- n 16)\n\
    \                      acc)]\n      [(= n 18)\n       (fibfib-helper (- n 17)\n\
    \                      acc)]\n      [(= n 19)\n       (fibfib-helper (- n 18)\n\
    \                      acc)]\n      [(= n 20)\n       (fibfib-helper (- n 19)\n\
    \                      acc)]\n      [(= n 21)\n       (fibfib-helper (- n 20)\n\
    \                      acc)]\n      [(= n 22)\n       (fibfib-helper (- n 21)\n\
    \                      acc)]\n      [(= n 23)\n       (fibfib-helper (- n 22)\n\
    \                      acc)]\n      [(= n 24)\n       (fibfib-helper (- n 23)",
  "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n\
    \         (fibfib (- n 3)))))\n", "  (let ((a 0) (b 1))\n    (cond\n      [(=\
    \ n 0)      a]\n      [(= n 1)      b]\n      [(= n 2)      (+ a b)]\n      [else\
    \         (+ a (fibfib (- n 3)))])))\n", "  (if (<= n 0) 0 (+ (fibfib (- n 2))\
    \ (+ (fibfib (- n 1)) n)))\n)\n", "  (* (+ (fibfib (- n 1))\n       (fibfib (-\
    \ n 2)))\n   (fibfib (- n 3))))\n", "  (if (= n 0)\n      0\n      (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2))\n          (fibfib (- n 3)))))\n", "  (if (= n 0)\n\
    \      0\n      (+ (fibfib (sub1 n)) (fibfib (sub2 n)))))\n", "  (if (= n 0)\n\
    \      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n         (fibfib\
    \ (- n 3)))))\n", "  (define (helper a b result)\n    (cond\n      [(= n 0) result]\n\
    \      [(= n 1) result]\n      [(= n 2) result]\n      [else\n       (helper (+\
    \ a b) (- b a) (+ result a))]))\n  (helper 1 1 0))\n", "  (let ((fibfibs (make-fibfibs\
    \ (- n 1))))\n    (fibfibs n)))\n", "  (+ (fibfib (- n 1))\n     (fibfib (- n\
    \ 2))\n     (fibfib (- n 3))))\n", "  (define (helper i sum)\n    (cond\n    \
    \  [(= i n) sum]\n      [else (helper (add1 i) \n                    (+ sum (fibfib\
    \ (sub1 n))))]))\n  (helper 0 0))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n\
    \        (else (+ (fibfib (- n 2)) (fibfib (- n 1))))))\n", "  (cond [(= n 0)\
    \ 0]\n        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (fibfib (- n\
    \ 2)) (fibfib (- n 1)) (fibfib (- n 0))))))\n</cell>\n<text>\nTask 3.1: Write\
    \ a predicate that accepts a list\nWrite a predicate that checks if a given list\
    \ has all distinct elements.\n\nExamples:\n\n[ab] returns #f\n[ab] returns #f\n\
    [ab] returns #f\n[abc ab] returns #f\n\n[a b c] returns #t\n[a b c] returns #t\n\
    \n[a b c d e f] returns #t\n\n[a b c d e] returns #f\n\n[a b c d e f g h i j k\
    \ l m] returns #t\n\n[a b c d e f g h i j k l m n o p q r s t u v w x y z] returns\
    \ #t\n\n\n</text>\n<cell>\n#lang racket\n", "  (cond\n    ((= n 0) 0)\n    ((=\
    \ n 1) 0)\n    ((= n 2) 1)\n    ((<= n 3) (+ (fibfib (- n 1)) \n             \
    \    (fibfib (- n 2)) \n                 (fibfib (- n 3)))))\n  )\n)\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n   \
    \      (fibfib (- n 3)))))\n", "  (cond [(< n 1) 0]\n        [(= n 1) 0]\n   \
    \     [else (+ (fibfib (- n 1)) (fibfib (- n 2))) (+ (fibfib (- n 3)) (fibfib\
    \ (- n 4))) (+ (fibfib (- n 5)) (fibfib (- n 6)))]))\n", "  (cond [(= n 0) 0]\n\
    \        [(= n 1) 0]\n        [(= n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib\
    \ (- n 2)) (fibfib (- n 3))))]))\n", "  (if (= n 0)\n      0\n      (+ (fibfib\
    \ (- n 1))\n         (fibfib (- n 2))\n         (fibfib (- n 3)))))\n", "  (if\
    \ (= n 0)\n      0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (if (=\
    \ n 0) 0\n      (+ (fibfib (- n 1)) (fibfib (- n 2)))))\n", "  (cond\n    ((=\
    \ n 0) 0)\n    ((= n 1) 0)\n    ((= n 2) 1)\n    (else\n     (+ (fibfib (- n 1))\
    \ (fibfib (- n 2)) (fibfib (- n 3)))))) \n", "  (cond ((= n 0) 0)\n        ((=\
    \ n 1) 0)\n        ((= n 2) 1)\n        ((< n 3) (+ (fibfib (- n 2)) (fibfib (-\
    \ n 3)))))) ; <= <= <= <=\n</cell>\n<cell>\n#lang racket\n", "  (if (< n 3)\n\
    \      (+ \n      (fibfib (- n 1))\n      (fibfib (- n 2))\n      (fibfib (- n\
    \ 3))\n      )\n      (fibfib (- n 1))\n      )\n  )\n", "  (if (= n 0)\n    \
    \  0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n         (fibfib (-\
    \ n 3)))))\n", "  (cond\n    [(zero? n) 0]\n    [(one? n) 1]\n    [else (+ (fibfib\
    \ (sub1 n)) (fibfib (sub1 n-1)))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1)\
    \ 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n 1))\n              (fibfib (-\
    \ n 2))\n              (fibfib (- n 3)))]))\n", "  (- (* 3 (if (< n 0) 0\n   \
    \            (+ (fibfib (- n 1))\n                   (fibfib (- n 2))\n      \
    \             n)))\n   (fibfib (- n 3))))", "  (if (= n 0)\n      0\n      (+\
    \ (fibfib (- n 1))\n         (fibfib (- n 2))\n         (fibfib (- n 3)))))\n",
  "  (if (= n 0)\n      0\n      (+ (fibfib (- n 1))\n         (fibfib (- n 2))\n\
    \         (fibfib (- n 3)))))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n\
    \        (else (+ (fibfib (- n 1)) (fibfib (- n 2))\n                     (fibfib\
    \ (- n 3))))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 1]\n        [else (+\
    \ (fibfib (- n 1)) (fibfib (- n 2))\n            (fibfib (- n 3))))]))\n", " \
    \ (let fibfib ((a 0) (b 1) (c (+ a b c)))\n    (if (= n 1)\n        a\n      \
    \  (fibfib (- b c) (+ a b c) (c))))))\n\n#lang racket\n", "  (cond [(zero? n)\n\
    \         0]\n        [(zero? (cdr n))\n         0]\n        [(zero? (caddr n))\n\
    \         1]\n        [(< (caddr n) (- n (caddr n)))\n         (+ (fibfib (caddr\
    \ n)) (fibfib (- n (caddr n))))]))\n", "  (if (= n 0)\n      0\n      (+ (fibfib\
    \ (- n 1))\n         (fibfib (- n 2))\n         (fibfib (- n 3)))))\n", "  (if\
    \ (= n 0) 0\n      (if (= n 1) 0\n        (if (= n 2) 1\n          (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))))", "  (cond\n    [(< n 0) (set!\
    \ fibfib (set! fibfib (+ fibfib (+ fibfib (- n 1)))\n                        \
    \          (+ fibfib (- n 2)))\n                            (+ fibfib (- n 3)))]\n\
    \    [else (set! fibfib (+ fibfib (+ fibfib (- n 1)))\n                      \
    \  (+ fibfib (- n 2)))]\n  ))\n", "  (if (< n 2)\n      0\n      (+ (fibfib (-\
    \ n 1)) (fibfib (- n 2)))))\n</code>\n<|/ q dscore=0 tags=scheme,racket,recursion\
    \ |>\n<| c |>\nWhat's your question?\n<|/ c |>\n<| c |>\nHow to use recursion\
    \ in Scheme?\n<|/ c |>\n<| c |>\nThis question has been answered before, please\
    \ see https://stackoverflow.com/questions/14670007/how-to-get-the-fibonacci-number-in-racket\n\
    <|/ c |>\n<| a tags=scheme,racket,recursion |>\nOne way to solve this problem\
    \ is to define the recursive function\n<code>\nfib(n)\n</code>\nas given below:\n\
    <code>", "  (cond ((= n 0)0)\n        ((= n 1)0)\n        ((= n 2)1)\n       \
    \ (else (+ (fibfib (sub1 n)) (fibfib (sub1 n)) (fibfib (sub1 n))))))\n\n#lang\
    \ racket\n", "  (if (< n 2)\n      (cond [(= n 0)\n             0]\n         \
    \   [(= n 1)\n             0]\n            [(= n 2)\n             1]\n       \
    \     [else\n             (+ (fibfib (- n 3))\n                (fibfib (- n 2))\n\
    \                (fibfib (- n 1)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
