name: HumanEval_23_strlen
language: rkt
prompt: "#lang racket\n\n;; Return length of given string\n;; >>> (strlen \"\")\n\
  ;; 0\n;; >>> (strlen \"abc\")\n;; 3\n(define (strlen string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"x\") 1)\n\
  \    (check-equal? (candidate \"asdasnakj\") 9)\n))\n\n(test-humaneval)"
completions: ["  (length (string-length string)))\n", "  (length (string #\\space)))\n",
  "  (length (string-length (string-trim string))))\n", "  (length (string-length\
    \ string)))\n", "  (string-length string))\n", "  (let ([len (length string)])\n\
    \    (+ len (length (str (substring string 0 len))))))\n", "  (string-length string))\n",
  "  (if (or (eq? string \"\")\n          (eq? (string-ref string 0) #\\))\n     \
    \ 0\n      (+ 1 (length (string-ref string 0)))))\n", "  (if (empty? string)\n\
    \      0\n      (+ 1 (strlen (substring string 0 (string-length string))))))\n",
  "  (length (string-seq string #\\Space #\\Newline))\n  )\n", "  (cond ((string?\
    \ string) (string-length string))\n        (else 0))\n)\n", "  (if (or (string=?\
    \ \"\" string) (string=? \"abc\" string))\n      0\n      (string-length string)))\n",
  "  (length (length string)))\n#lang racket\n", "  (string-length (string->symbol\
    \ string)))\n", "  (when (string? string) (string-length string)))\n", "  (if\
    \ (string? string)\n      (length string)\n      (error \"~a is not a string\"\
    \ string)))\n", "  (string-length (string string)))\n</cell>\n<text>\nNow that\
    \ we have our own strlen function, let's test it by running the cell below:\n\n\
    \n</text>\n<cell>", "  (if (string-empty? string)\n      '0\n      (+ 1 (strlen\
    \ (substring string 0 (string-length string))))))\n", "  (if (string? string)\n\
    \      (length string)\n      0))\n", "  (cond\n    ((null? string) 0)\n    ((char?\
    \ (car string)) (string-length string))\n    (else (strlen (cdr string)))))\n",
  "  (if (string-empty? string)\n      0\n      (+ 1 (strlen (substring string 0 (string-length\
    \ string))))))\n", "  (if (zero? string) 0\n      (+ 1 (length (string->list string)))))\
    \ ;; #lang racket\n", "  (cond\n    ((null? string) 0)\n    (else (+ 1 (strlen\
    \ (string-ref string 0))))))\n", "  (if (empty? string)\n      '()\n      (+ 1\
    \ (length (substring string 0)))))\n", "  (if (string-empty? string)\n      0\n\
    \      (+ 1 (string-length string))))\n", "  (if (null? string)\n      0\n   \
    \   (+ 1 (strlen string))))\n", "  (length string))\n", "  (if (string-empty?\
    \ string)\n      0\n      (+ 1 (string-length (string-ref string 0)))))\n", " \
    \ (or (length string)\n      (+ 1 (* (if (char-digit? string) 10 #\\0) (string-length\
    \ string)))))\n", "  (sub (string->chars string) (sub (string->chars string) (string->length\
    \ string))))\n</code>\n<|/ a dscore=0 tags=racket,scheme |>\n<| a dscore=0 |>\n\
    <code>", "  (if (string-empty? string)\n      0\n      (+ 1 (strlen (substring\
    \ string 0 (string-length string)))))\n", "  (if (not (string? string)) 0\n  \
    \    (+ (length string)\n         (+ (strlen (substring string 0 -1))))))\n",
  "  (if (empty? string) 0 (length string)))\n</textarea>\n<script src=\"https://relayjs.github.io/graphql-subscriptions/bundles/stable/relay-compiler.min.js\"\
    ></script>\n<script src=\"https://relayjs.github.io/graphql-subscriptions/bundles/stable/middleware.js\"\
    ></script>\n<script src=\"https://relayjs.github.io/graphql-subscriptions/bundles/stable/subscriptions.js\"\
    ></script>\n<script src=\"https://relayjs.github.io/graphql-subscriptions/bundles/stable/defaultSubscription.js\"\
    ></script>\n<script>\n    const GitBook = Object.assign({}, GitBook || {});\n\
    \    GitBook.pageName = \"string\";\n</script>\n\n</div>\n\n    </details>\n</main>\n\
    \n        \n            <aside class=\"book-toc\">\n                <div class=\"\
    book-toc__mobile\">\n                    <i class=\"fas fa-book-open\"></i>\n\
    \                </div>\n                \n                <a href=\"index.html\"\
    \ class=\"book-toc__link side-nav book-toc__item--left\">\n                  \
    \  <i class=\"fas fa-arrow-left\"></i>\n                </a>\n               \
    \ \n                \n                <a href=\"functions.html\" class=\"book-toc__link\
    \ side-nav book-toc__item--middle\">\n                    <i class=\"fas fa-arrow-right\"\
    ></i>\n                </a>\n                \n                \n            \
    \    <a href=\"objects.html\" class=\"book-toc__link side-nav book-toc__item--right\"\
    >\n                    <i class=\"fas fa-arrow-left\"></i>\n                </a>\n\
    \                \n                \n                <a href=\"graphql.html\"\
    \ class=\"book-toc__link side-nav__link active\">\n                    <i class=\"\
    fas fa-code\"></i>\n                    Introduction\n                </a>\n \
    \               \n            </aside>\n        \n            <main class=\"book-content\"\
    >\n                <article class=\"page-context\">\n  \n    \n  \n    \n  \n\
    \  \n    <section class=\"page__meta\">\n      <p>functions - Introducing Functions</p>\n\
    \  \n  \n    <div itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\"\
    >\n      \n      <div>\n        \n          <img class=\"portray__img\" src=\"\
    /assets/img/portrays/elton.jpg\" alt=\"A photo of Elton Anderson\" />\n      \
    \  \n        <div class=\"portray__intro\">\n          <h1 itemprop=\"name\">Ella\
    \ Fitzpatrick</h1>\n          \n          <p class=\"page__meta\">\n         \
    \   \n            Posted by\n            \n            <a href=\"/author/ella-fitzpatrick\"\
    \ class=\"author__link\">\n              Ella Fitzpatrick\n            </a>\n\
    \            \n            on\n            \n            <time datetime=\"2018-01-13\"\
    \ itemprop=\"datePublished\">\n              Jan 13, 2018\n            </time>\n\
    \            \n          </p>\n        </div>\n      </div>\n      \n      <div\
    \ class=\"portray__tags\">\n        \n          \n            <a href=\"/", " \
    \ (if (not (string? string)) \n      (length (string->list string)) \n      (length\
    \ string)))\n", "  (length (string->list string)))\n", "  (if (null? string)\n\
    \      0\n      (+ 1 (string-length (string->char string))))) ; See #lang racket\n",
  "  (if (= 0 (string-length string))\n      '0\n      (+ 1 (strlen (string-tail string)))))\n",
  "  (length string))\n", "  (if (empty? string) 0\n      (+ 1 (string-length (substring\
    \ string 0 0)))))\n", "  (length (string->list string)))\n", "  (char->integer\
    \ (string-length string)))\n", "  (length (string->list string)))\n", "  (define\
    \ (strlen-aux\n           ([str string]\n            [len 0])\n           )\n\
    \    (if (string-empty? str)\n        len\n        (strlen-aux (rest str) (inc\
    \ len))))\n  (strlen-aux string 0))\n", "  (string-length (string-ref string 0)))\n",
  "  (cond [(string-length string) (string-length string)]))\n", "  (if (eq string\
    \ \"\")\n      0\n      (+ 1 (strlen (substring string 0 (string-length string))))))\n",
  "  (if (string? string)\n      (string-length (string-to-char string))\n      0))\n",
  "  (define (length chars)\n    (if (= 0 (string-length chars))\n        0\n    \
    \    (+ 1 (length (string-tail chars)))))\n  (length string))\n", "  (if (null?\
    \ string)\n      0\n      (+ 1 (string-length string))))\n", "  (if (empty? string)\n\
    \      0\n      (+ 1 (strlen (string-ref string 0)))))\n", "  (if (or (= 0 (length\
    \ string)) (string = \".\"))\n      0\n      (+ 1 (strlen (substring string 0\
    \ (length string)))))\n)\n", "  (length string))\n", "  (if (string? string)\n\
    \      (string-length string)\n      0))\n", "  (if (null? string)\n      0\n\
    \      (+ 1 (strlen (cdr string)))))", "  (if (empty? string)\n      0\n     \
    \ (+ 1 (strlen (substring string 0 (string-length string)))))\n", "  (cond\n \
    \   [(string? string) (string-length string)] \n    [else 0]\n  ))\n", "  (if\
    \ (string? string)\n      (string-length (string-ref string 0))\n      0))\n",
  "  (length (string->list string)))\n", "  (if (not (string? string))\n      0\n\
    \      (+ 1 (length (string->list string))))) ;; <-- #lang racket\n</code>\nNow\
    \ we are ready to write a function...\n<code>", "  (cond\n    [(empty? string)\
    \ 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (cond\n    ((null? string)\n\
    \     (length string))\n    (else\n     (+ 1 (strlen (string-ref string 0))))))\n",
  "  (define (nextchar char string)\n    (let loop ((i 0))\n      (if (char? char)\n\
    \          (- i (length string))\n          (loop (+ i 1)))))\n  (nextchar (first\
    \ (char-set string)) string))\n", "  (cond\n    ((string-length string) 0))\n\
    \  )\n", '  (length (chars string)))', "  (define (count-length string)\n    (if\
    \ (equal? (string-length string) 0) 0\n      (+ 1 (count-length (string-tail string)))))\n\
    \  (count-length string))\n", "  (length (string->list string)))\n</code>\n<|/\
    \ a dscore=3 |>\n<| a |>\nI like KennyTM's answer but I'll add my own.\n<code>",
  "  (if (string= string \"\")\n      0\n      (+ 1 (strlen (substring string 0 (string.length\
    \ string))))))", "  (length (string->list string)))\n", "  (cond\n    ((string?\
    \ string) (string-length string))\n    (else 0)))\n  ", "  (let ([accum 0])\n\
    \    (for ([char (in-string (make-instance 'string\n                         \
    \              [value string]\n                                       [char-length\
    \ 0])))])\n    (if (< char-length accum)\n        (set-char-length accum char)\n\
    \        accum)))\n", "  (string-length string))\n", "  (if (string? string) \n\
    \      (length string) \n      '()))\n", "  (if (string? string)\n      (length\
    \ string)\n      0))\n", "  (cond\n    ((empty? string) 0)\n    ((char? (car string))\
    \ (+ 1 (strlen (cdr string))))\n    (else (strlen (cdr string)))))\n", "  (or\
    \ (length string)\n      (+ (string-length string)\n         (string-length (string-append\
    \ string \"...\")))))\n</code>\n<|/ a tags=scheme |>\n<| c |>\nThis doesn't work\
    \ for me, unless I've misunderstood something.  When I try your example, I get\
    \ (define (fib n)\n  (if (= n 0)\n      1\n      (fib n-1 (+ (* n n) 1))))\n \
    \ \n  \n  (fib 8)\n", "  (if (string? string)\n      (length string)\n      0))\n",
  "  (if (empty? string)\n      0\n      (+ 1 (strlen (rest string))))))\n", "  (or\
    \ (null? (substring (length string) string) 0) (length (substring (length string)\
    \ string))))\n", "  (regexp-count string #\"[^\"]*\"))\n", "  (if (or (string?\
    \ string) (symbol? string))\n      '(0)\n      (+ 1 (length (string->list string)))))\n",
  "  (cond\n    [(empty? string) 0]\n    [(equal? (first string) '#\\newline) 1]\n\
    \    [else (+ 1 (strlen (rest string)))]))\n", "  (if (empty? string)\n      0\n\
    \      (+ 1 (strlen (cdr string))))))\n", "  (if (eqv? string \"\")\n      0\n\
    \      (+ 1 (string-length string))))\n", "  (string-length string))\n", "  (string-length\
    \ string))\n", "  (length (string->list string)))\n", "  (if (= (length string)\
    \ 0) 0\n      (+ 1 (strlen string))))\n</code>\nNow let's define a function that\
    \ returns a given substring\n<code>", "  (if (string? string) (length (string-ref\
    \ string 0)) 0))\n", "  (string-length (string->symbol string)))\n#lang racket\n",
  "  (if (empty? string)\n      0\n      (+ 1 (length (substring string 0 1)))))\n",
  "  (if (string? string) (length string) 0))\n", "  (length (string #:lower-case\
    \ #:space)))\n</code>\n<|/ a |>\n<| a tags=racket,scheme |>\nA simple string length\
    \ is implemented as (define (strlen str) (length str))\n<|/ a dscore=2 |>\n<|\
    \ c |>\nWhat do you mean by \"not as nice as in Common Lisp\"? I agree with you\
    \ that Common Lisp's `length` function is a nice one, but it's not as obvious\
    \ as `length` in Racket.\n<|/ c |>\n<| c |>\n: I mean that it's not obvious that\
    \ `length` is being applied to strings in Racket -- which leads to confusion because\
    \ `length` is an identifier that is used both to define and to refer to the length\
    \ of a string.\n<|/ c |>\n<| a dscore=2 tags=racket,scheme |>\nThis can be done\
    \ with:\n<code>", "  (if (string? string)\n      (+ 1 (string->length string))\n\
    \      '0))\n", "  (length string))\n", "  (string-length string))\n", "  (when\
    \ (string-empty? string)\n    0))\n", "  (string-length (string->symbol string)))\n",
  "  (if (and (not (null? string))\n           (string? (car string))\n          \
    \ (not (string-empty? string))) \n      (+ 1 (string-length string))\n      0))\n",
  "  (define (len-iter s count)\n    (cond\n      ((null? s)\n       (cond\n     \
    \    ((= count 0) count)\n         (else (len-iter (rest s) (- count 1)))))\n\
    \      (else\n       (len-iter (rest s) (+ count 1)))))\n  (len-iter string (length\
    \ string)))\n", "  (if (string? string)\n      (length string)\n      0))\n",
  "  (- (string-length string)\n      (if (char? (car string))\n          1\n    \
    \      0)))\n", "  (length (string->list string)))\n", "  (length (char->integer\
    \ string)))\n", "  (if (zero? string) 0 1))\n</cell>\n<text>\nExercises\n\n</text>\n\
    <text>\nQ1. (10 points)\n\nWrite a function that returns the number of elements\
    \ in the given list. For example, ", "  (string-length (string->bytes string)))\n",
  "  (char->integer (string-length string)))\n</cell>\n<text>\nStrings in Racket\n\
    \n</text>\n<cell>\n#lang racket\n", "  (if (or (not (eq? string \"\")) (eq? string\
    \ #\\space))\n      0\n      (+ 1 (string-length (string-ref(string))))))\n",
  "  (string-length string))\n", "  (if (empty? string) 0 (string-length string)))\n",
  "  (if (null? string)\n      0\n      (+ 1 (string-length string))))\n", "  (length\
    \ string))\n", "  (if (not (eq? string \"\")) (+ 1 (length string)) 0))\n", " \
    \ (if (string? string)\n      (length string)\n      0))\n", '  (length (string-length
    string)))', "  (cond [(null? string) 0]\n        [else\n         (+ 1 (string-length\
    \ string))]))\n", "  (if (string? string)\n      (length (string->list string))\n\
    \      0))\n", "  (string-length string))\n", "  (length string))\n", "  (if (or\
    \ (char=? string #\\0)\n          (zero? string))\n      0\n      (+ 1 (strlen\
    \ (string->list string)))))\n", "  (length (string->list string)))\n", "  (length\
    \ string))\n", "  (if (string? string)\n      (+ 1 (length (string-ref string\
    \ 0)))\n      0))\n", "  (if (empty? string)\n      0\n      (+ 1 (string-length\
    \ string))))\n", "  (if (string? string)\n      (length string)\n      0))\n",
  "  (length (string->list string)))\n", "  (if string\n      (+ 1 (length string))\n\
    \      0))\n", "  (- 0 (length string)))\n", "  (or (string-length string) 0))\n",
  "  (if (string? string)\n      (length string)\n      '()))\n", "  (cond ((null?\
    \ string) 0)\n        ((char? (car string)) (+ 1 (strlen (cdr string))))\n   \
    \     (else (string-length (strcat string \"\"))))) ; racket\n</textarea></form>\n\
    \n    <script>\n      var editor = CodeMirror.fromTextArea(document.getElementById(\"\
    input\"), {lineNumbers: true, tabSize: 2});\n      var output = CodeMirror.fromTextArea(document.getElementById(\"\
    output\"), {lineNumbers: true, tabSize: 2});\n    </script>\n\n    <p><strong>MIME\
    \ types defined:</strong> <code>text/x-racket</code>.</p>\n\n    <p>\n      A\
    \ racket program is a sequence of statements separated by <code>;</code>\n   \
    \   pairs, each terminated with a complete definition of the variable\n      in\
    \ question, using <code>letrec</code>. <a href=\"mailto:removed@example.com\"\
    >Gareth Bell &lt;gareth.bell@northwest-us.ac.uk&gt;</a>\n    </p>\n\n    <p><strong>Parsing/Highlighting\
    \ Tests:</strong> <a href=\"../../test/index.html#tH_zU_test_racket\">normal</a>,\
    \  <a href=\"../../test/index.html#tH_jL_test_racket\">highlighted</a>.</p>\n\n\
    \    <p><strong>Building Parser/Highlighter Tests:</strong> <a href=\"../../test/index.html#tH_aJ_test_parser\"\
    >normal</a>,  <a href=\"../../test/index.html#tH_aJ_test_lexer\">highlighted</a>.</p>\n\
    \  </article>\n\n<|/ file source=gitlab filename=index.html |>\n<| c |>\n+1 thank\
    \ you, this is amazing\n<|/ c |>\n<| c |>\n+1 I too have been trying to understand\
    \ Racket for awhile, thanks for posting this!\n<|/ c |>\n<| c |>\n+1 Thank you!\
    \ I love Racket since I was writing a lot of Scheme code back in the days. It's\
    \ a nice language to learn, with some quirks, but it's actually pretty cool. :)\n\
    <|/ c |>\n<| a tags=racket,scheme,lisp dscore=4 |>\nThe language is based on Scheme\
    \ from the Racket ecosystem. This means it's similar to Scheme, even though it\
    \ is interpreted. Look here for the list of Scheme definitions.\n<|/ a |>\n<|\
    \ a |>\nThe Scheme language is based on Racket, which is derived from Racket.\n\
    <|/ a dscore=3 tags=racket,scheme,lisp |>\n<| a dscore=2 |>\nRacket is a lisp\
    \ (which is very close to scheme).\n<|/ a tags=racket", "  (if (string? string)\n\
    \      (length string)\n      0))\n", "  (length (string-length string)))\n",
  "  (let loop ([string string]\n             [i 0])\n    (cond [(empty? string) i]\n\
    \          [(char=? (car string) (car (cdr string)))\n           (loop (cdr string)\
    \ (+ i 1))]\n          [else (loop (cdr string) i)])))\n", "  (if (zero? string)\
    \ 0\n      (+ 1 (string-length string))))\n</textarea></form>\n\n    <script>\n\
    \      var editor = CodeMirror.fromTextArea(document.getElementById(\"code\"),\
    \ {\n        lineNumbers: true,\n        matchBrackets: true,\n        mode: \"\
    text/x-racket\"\n      });\n    </script>\n\n    <p><strong>MIME types defined:</strong>\
    \ <code>text/x-racket</code>.</p>\n\n    <p>Development of the CodeMirror Racket\
    \ mode was sponsored by the\n    <a href=\"https://github.com/tkf/racket-mode\"\
    >racket-mode project</a>.</p>\n\n  </article>\n\n<|/ file source=github |>\n<|\
    \ c |>\nThanks so much for this! This is exactly what I was looking for! I really\
    \ appreciate the help. :)\n<|/ c |>\n<| a tags=racket,text-editor,code-editor,javascript\
    \ |>\nThis may be a bit of a stretch but I've been using Sublime Text for over\
    \ a year and it does a pretty good job of syntax highlighting for various programming\
    \ languages. I'd give it a shot.\nhttp://sublimetext.info/\n<|/ a dscore=3 |>\n\
    <| a |>\nSublime Text is a great editor. I found it very easy to switch between\
    \ different languages. The code completion only works if the syntax is installed.\
    \ After installing Sublime Text, go to \"Tools > Build System > New Build System\"\
    . In the following box, add the following code:\n<code>\n{\n    \"cmd\": [\"racket\"\
    ,\"$file\"],\n    \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"\
    ,\n    \"selector\": \"source.racket\"\n}\n</code>\nSave it as \"racket.sublime-build\"\
    \ in the Packages folder of Sublime Text 3, then you can choose it when you use\
    \ \"Tools > Build System...\"\n<|/ a tags=racket,text-editor,code-editor,javascript\
    \ dscore=3 |>\n<| a tags=racket,text-editor,code-editor,javascript |>\nIf you\
    \ are willing to install an editor that supports syntax highlighting for racket,\
    \ you can try Sublime Text as suggested by Jason.\nAnother editor that has syntax\
    \ highlighting for racket is the Aquamacs editor that runs on macOS and Windows\
    \ and is free.\nI believe that Aquamacs highlighting looks much better than the\
    \ built in highlighting in the code editors.\n<|/ a dscore=3 |>\n<| a tags=racket,text-editor,code-editor,javascript\
    \ |>\nIf you're willing to install an editor that supports syntax highlighting,\
    \ you can try Notepad++", "  (if (string? string)\n      (length string)\n   \
    \   0))\n", "  (let ([len (substring string 0 0)])\n    (cond\n      [(empty?\
    \ string) 0]\n      [else (+ 1 len)]))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;;\
    \ (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1\
    \ len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)]))))\
    \ ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+\
    \ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)]))))\
    \ ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+\
    \ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)]))))\
    \ ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+\
    \ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)]))))\
    \ ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+\
    \ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)]))))\
    \ ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+\
    \ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)]))))\
    \ ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;; (+ 1 len)])))) ;;",
  "  (define (loop string i sum)\n    (cond\n      [(empty? string) sum]\n      [else\
    \ (loop (cdr string) (+ i 1) (+ sum 1))]))\n  (loop (string-length string) 0 0))\n",
  "  (length (string string)))\n", "  (if (string? string)\n      (length? string)\n\
    \      '()))\n", "  (length (string-ref string 0 -1)))\n", "  (if (string? string)\n\
    \      (length string)\n      \"invalid argument\"))\n", "  (cond\n    ((null?\
    \ string) 0)\n    ((eq? (car string) ?\\0)) 1)\n    ((eq? (car string) ?\\a) 2)\n\
    \    ((eq? (car string) ?\\b) 2)\n    ((eq? (car string) ?\\e) 2)\n    ((eq? (car\
    \ string) ?\\f) 2)\n    ((eq? (car string) ?\\g) 2)\n    ((eq? (car string) ?\\\
    h) 2)\n    ((eq? (car string) ?\\i) 2)\n    ((eq? (car string) ?\\j) 2)\n    ((eq?\
    \ (car string) ?\\n) 2)\n    ((eq? (car string) ?\\r) 2)\n    ((eq? (car string)\
    \ ?\\s) 2)\n    ((eq? (car string) ?\\v) 2)\n    ((eq? (car string) ?\\w) 2)\n\
    \    ((eq? (car string) ?\\W) 2)\n    ((eq? (car string) ?_) 2)\n    ((eq? (car\
    \ string) ?-) 2)\n    ((eq? (car string) ?.) 2)\n    ((eq? (car string) ?+) 2)\n\
    \    ((eq? (car string) ?/) 2)\n    ((eq? (car string) ?;) 2)\n    ((eq? (car\
    \ string) ?[) 2)\n    ((eq? (car string) ?]) 2)\n    ((eq? (car string) ?() 2)\n\
    \    ((eq? (car string) ?) 2)\n    ((eq? (car string) ?' ) 2)\n    ((eq? (car\
    \ string) ?-) 2)\n    ((eq? (car string) ?!) 2)\n    ((eq? (car string) ?~) 2)\n\
    \    ((eq? (car string) ?<) 2)\n    ((eq? (car string) ?>=) 2)\n    ((eq? (car\
    \ string) ?=) 2)\n    ((eq? (car string) ?\") 2)\n    ((eq? (car string) ?(\"\
    \ )) 2)\n    ((eq? (car string) ?&) 2)\n    ((eq? (car string) ?'(\" )) 2)\n \
    \   ((eq? (car string) ?('\" )) 2)\n    ((eq? (car string) ?/) 2)\n    ((eq? (car\
    \ string) ?(\" )) 2)\n    ((eq? (car string) ?) 2)\n    ((eq? (car string) ?#)\
    \ 2)\n    ((eq? (car string) ?$) 2)", "  (length string))\n", "  (if (string?\
    \ string)\n      (string-length string)\n      0))\n", "  (if (null? string)\n\
    \      0\n      (+ 1 (string-length string))))\n", "  (string-length (string-to-byte\
    \ string)))\n", "  (length (chars string)))\n</cell>\n<code language=dyalog-kernel>",
  "  (when (string? string)\n    (string-length (string->symbol string))))\n", " \
    \ (+ (length string) 1))\n", "  (if (string? string)\n      (length string)\n\
    \      0))\n", "  (if (or (not (or (string=? string \"\") (string=? string \"\
    0\"))) (string=? string \"-\")) 0\n    (+ 1 (length (string=? string \"0\") (string=?\
    \ string \"-\")) (strlen (string=? string \"abc\")))))\n", "  (if (string? string)\n\
    \      (string-length string)\n      0))\n", "  (- \n   (string-length string)\n\
    \   (length string)))\n", "  (length (string-length string)))\n", "  (length string))\n",
  "  (if (string? string)\n      (string-length string)\n      0))\n", "  (if (string-length\
    \ string)\n      (+ 1 (strlen string-tail string))\n      0))\n", "  (if (string?\
    \ string)\n      (length (chars-seq string))\n      0))\n", "  (length (string->list\
    \ string)))\n</cell>\n<code language=dyalog-kernel>\n#lang racket\n", "  (if (string?\
    \ string)\n      (length string)\n      '()))\n", "  (if (empty? string) 0 \n\
    \      (+ 1 (string-to-number string))))\n", "  (- 0 (string-length string)))\n",
  "  (length string))\n", "  (if (or (null? string)\n          (string-empty? string))\n\
    \      0\n      (+ 1 (string-length string))))\n", "  (if (string-empty? string)\n\
    \      0\n      (+ 1 (string-length (string-ref string 0)))))\n", "  (if (string?\
    \ string)\n      (length string)\n      0))\n", "  (length string))\n", "  (define\
    \ (inner-len str)\n    (if (empty? str)\n        0\n        (+ 1 (inner-len (cdr\
    \ str)))))\n  (inner-len string))\n</pre>\n\n<p>\n  We can use <code>cond</code>\
    \ to\n  implement the <code>empty?</code> and <code>count</code> functions using\
    \ a\n  single <code>cond</code> expression.\n</p>\n\n<pre data-lang=\"scheme\"\
    >", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (string-length (car string)))]))\n",
  "  (if (null? string)\n      0\n      (+ 1 (strlen (substring string 0 (string-length\
    \ string)))))\n", "  (if (or (char=? (first string) #\\Newline) (char=? (first\
    \ string) #\\Space))\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (if\
    \ (string? string)\n      (length? string)\n      0))\n", "  (if (string? string)\n\
    \      (length string)\n      \"not string given\"\n    )\n)\n", "  (string-length\
    \ string))\n", "  (string-length string))\n", "  (cond\n    [(string? string)\
    \ (string-length string)]\n    [else 0]))\n", "  (or (length string) (string-length\
    \ (string \"\"))))\n", "  (if (string? string)\n      (length (string->symbol\
    \ string))\n      '(0)))\n", "  (length string))\n", "  (if (not (string? string))\n\
    \      '(0)\n      (+ (string-length string)\n         (* 2 (string= (string-ref\
    \ string 0) #\\Space))))))", "  (if (string? string)\n      (length string)\n\
    \      0))\n</textarea></form>\n\n    <script>\n      var editor = CodeMirror.fromTextArea(document.getElementById(\"\
    code\"), {\n        lineNumbers: true,\n        matchBrackets: true,\n       \
    \ mode: \"racket\"\n      });\n    </script>\n\n    <p><strong>MIME types defined:</strong>\
    \ <code>text/racket</code>.</p>\n\n    <p>\n      Depends on <a href=\"../addon/edit/closetag.html\"\
    >closetag.js</a>. Make sure to load\n      the <code>racket</code> extension on\
    \ load.\n    </p>\n\n  </article>\n\n<|/ file ext=.html dstars=1 |>\n<| c |>\n\
    thank you for your efforts. I'm actually trying to  learn `racket`, as I like\
    \ it a lot, and I'm also trying to get some practice using it.\n<|/ c |>\n<| c\
    \ |>\nI understand. I hope to continue contributing, but I'm a huge fan of Racket\
    \ and would love to learn more about it. I'm also very interested in learning\
    \ more about how Racket is coded in general and how it improves developer productivity.\
    \ I've written [a post about this recently](http://blog.davidha.org/posts/2013/07/04/racket-for-programmers-part-two-beautiful-programming).\
    \ Perhaps that can give you some ideas?\n<|/ c |>\n<| a tags=codemirror,racket,javascript\
    \ |>\nThe codemirror mode for Racket has now been added. See this issue on the\
    \ Racket github page. Below is a copy of an excerpt from the issue that explains\
    \ how to add it to CodeMirror. \n<code>", "  (if (empty? string)\n      0\n  \
    \    (+ 1 (strlen (string-tail string)))))\n", "  (if (null? string) 0 (regexp-count\
    \ #\"[^ ]+\" string)))\n", "  (if (string-empty? string)\n      0\n      (+ 1\
    \ (strlen (substring string 0 (string-length string))))))\n", "  (length (string->list\
    \ string)))\n</code>\n<|/ a tags=lisp,racket,scheme dscore=1 |>\n<| a |>\nI made\
    \ a list comprehension solution that uses only the standard library and no special\
    \ functions:\n<code>", "  (if (string? string)\n      (length string)\n      0))\n",
  "  (cond ((or (empty? string) (null? string))\n         (length string))\n     \
    \   ((char=? (first string) #\\0)\n         (length string))\n        ((char=?\
    \ (first string) #\\0)\n         (if (empty? (rest string))\n             (length\
    \ string)\n             (+ (length (strlen (rest string))) 1)))\n        (else\n\
    \         (if (char=? (first string) #\\0)\n             (length string)\n   \
    \          (+ (length (strlen (rest string))) 1)))))\n", "  (define (revstr s)\n\
    \    (if (string? s)\n        (revstr (cdr s))\n        s))\n  (define (revlen\
    \ string)\n    (if (string? string)\n        (revstr (revstr string))\n      \
    \  0))\n  (if (string? string)\n      (revlen (revstr string))\n      0))\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nOne way to find out the length of a string in Racket\
    \ is to use the length function.\n<code>\n> (length \"abc\")\n3\n</code>\n<|/\
    \ a tags=racket,string,data-structures,scheme |>\n<| c |>\nThis won't work in\
    \ Racket, where `length` is defined as a macro. You'll need `(define (my-length\
    \ x) (length x))`.\n<|/ c |>\n<| c |>\n, what language doesn't support `length`?\n\
    <|/ c |>\n<| c |>\nScheme, Racket, Chicken, Algol68.  I believe Common Lisp has\
    \ something similar.  I'm not as familiar with Chicken, but Algol68 has `length`\
    \ as a built-in function.\n<|/ c |>\n<| c |>\nAh, I didn't know that.  Thanks!\n\
    <|/ c |>\n<| a |>\nI believe that many of the answers above are incorrect; that\
    \ is, they don't handle cases like (length \"ab\"). \nA better approach is as\
    \ follows: \n<code>", "  (length (string-length string)))\n", "  (define (loop\
    \ index len)\n    (if (< index #(string-length string))\n        (loop (+ index\
    \ 1) (+ len 1))\n        len))\n  (loop 0 0))\n", "  (if (string? string)\n  \
    \    (length string)\n      '()))\n", "  (string-length string))\n", "  (str-length\
    \ string \"length\"))\n", "  (cond\n    ((null? string) 0)\n    ((char=? (string)\
    \ '()) 0)\n    ((char=? (string) '(') 0)\n    ((char=? (string) ')') 0)\n    ((char=?\
    \ (string) '#\\newline') 0)\n    ((char=? (string) '#\\tab') 0)\n    ((char=?\
    \ (string) '#\\space') 0)\n    ((char=? (string) '#\\return') 0)\n    ((char=?\
    \ (string) '#\\tab') 0)\n    ((char=? (string) '#\\return') 0)\n    ((char=? (string)\
    \ #\\newline)\n     (+ (strlen string) 1))\n    (else (+ 1 (strlen (substring\
    \ string 0 (length (string))))))))\n", "  (string-length string))\n", "  (if (string-empty?\
    \ string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (cond [(string?\
    \ string) (string-length string)] [(list? string) (reduce strlen (cdr string))]\
    \ (else 0)))\n</code>\n<|/ a dscore=1 tags=string,racket,scheme,functional-programming\
    \ |>\n<| a |>\n<code>", "  (let ((char-count 0))\n    (if (string-empty? string)\n\
    \        char-count\n        (strlen (cdr string))\n      (let ((char (car string)))\n\
    \        (set! char-count (+ char-count (length char)))\n        (set! string\
    \ (cdr string))))))\n", "  (if (string? string) (string-length string)\n     \
    \ (raise-argument-error (\u03BB () (format \"strlen requires a string\"))))) ;;\
    \ use raise-argument-error for Scheme\n", "  (if (string? string)\n      (length\
    \ string)\n      0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
