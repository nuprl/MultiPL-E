name: HumanEval_141_file_name_check
language: rkt
prompt: "#lang racket\n\n;; Create a function which takes a string representing a\
  \ file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
  \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
  \ the following conditions \n;; are met:\n;; - There should not be more than three\
  \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one\
  \ dot '.'\n;; - The substring before the dot should not be empty, and it starts\
  \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n;;\
  \ >>> (file_name_check \"example.txt\")\n;; \"Yes\"\n;; >>> (file_name_check \"\
  1example.dll\")\n;; \"No\"\n(define (file_name_check file_name)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
  \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
  \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
  )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
  \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\")\
  \ \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\"\
  ) \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n   \
  \ (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\"\
  )\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
  \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
  \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
  ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
  \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\
  \n(test-humaneval)"
completions: ["  (define (char_check c file_name)\n    (cond\n      [\n        (char=?\
    \ (car file_name) c) ; Checks if the character at the start is equal to the given\
    \ one.\n        'Yes'\n        ]\n      [\n        (char=? (car file_name) 'n')\
    \ ; Checks if the character at the start is equal to 'n'\n        'No'\n     \
    \   ]\n      [\n        (char=? (car file_name) '0') ; Checks if the character\
    \ at the start is equal to '0'\n        'No'\n        ]\n      [\n        (char=?\
    \ (car file_name) '9') ; Checks if the character at the start is equal to '9'\n\
    \        'No'\n        ]\n      [\n        (char=? (car file_name) '.') ; Checks\
    \ if the character at the start is equal to '.'\n        (cond\n          [\n\
    \            (string-empty? (cdr file_name)) ; Checks if the cdr of the given\
    \ string is empty.\n            'No'\n            ]\n          [\n           \
    \ (char=? (car file_name) 'a') ; Checks if the cdr of the given string starts\
    \ with 'a'\n            'No'\n            ]\n          [\n            (char=?\
    \ (car file_name) 'z') ; Checks if the cdr of the given string starts with 'z'\n\
    \            'No'\n            ]\n          [\n            (char=? (car file_name)\
    \ 'A') ; Checks if the cdr of the given string starts with 'A'\n            'No'\n\
    \            ]\n          [\n            (char=? (car file_name) 'Z') ; Checks\
    \ if the cdr of the given string starts with 'Z'\n            'No'\n         \
    \   ]\n          [\n            (char=? (car file_name) 'a') ; Checks if the cdr\
    \ of the given string starts with 'a'\n            'Yes'\n            ]\n    \
    \      [\n            (char=? (car file_name) 'z') ; Checks if the cdr of the\
    \ given string starts with 'z'\n            'Yes'\n            ]\n          [\n\
    \            (char=? (car file_name) 'A') ; Checks if the cdr of the given string\
    \ starts with 'A'\n            'Yes'\n            ]\n          [\n           \
    \ (char=? (car file_name) 'Z') ; Checks if the cdr of the given string starts\
    \ with 'Z'\n            'Yes'\n            ]\n          [\n            (char=?\
    \ (car file_name) 'a') ; Checks if the cdr of the given string starts with 'a'\n\
    \            'No'\n            ]\n          [\n            (char=? (car file_name)\
    \ 'z') ; Checks if the cdr of the given string starts with '", "  (cond\n    [(empty?\
    \ file_name) 'No]\n    [(> (length (string-only file_name)) 3) 'No]\n    [(not\
    \ (= (string-at (string-only file_name) 0 1) \"a\") 'No]\n    [(not (= (string-at\
    \ (string-only file_name) 0 1) \"z\") 'No]\n    [(not (= (string-at (string-only\
    \ file_name) 0 1) \"A\") 'No]\n    [(not (= (string-at (string-only file_name)\
    \ 0 1) \"Z\") 'No]\n    [(not (= (string-at (string-only file_name) 0 1) \".\"\
    ) 'No]\n    [(not (= (string-at (string-only file_name) 1 0) \"t\") 'No]\n   \
    \ [(not (= (string-at (string-only file_name) 1 0) \"e\") 'No]\n    [(not (= (string-at\
    \ (string-only file_name) 1 0) \"s\") 'No]\n    [(not (= (string-at (string-only\
    \ file_name) 1 0) \"c\") 'No]\n    [(not (= (string-at (string-only file_name)\
    \ 1 0) \"t\") 'No]\n    [(not (= (string-at (string-only file_name) 1 0) \"x\"\
    ) 'No]\n    [(not (= (string-at (string-only file_name) 1 0) \"t\") 'No]\n   \
    \ [(not (= (string-at (string-only file_name) 1 0) \"t\") 'No]\n    [(not (= (string-at\
    \ (string-only file_name) 1 0) \"t\") 'No]\n    [(not (= (string-at (string-only\
    \ file_name) 1 0) \"t\") 'No]\n    [(not (= (string-at (string-only file_name)\
    \ 1 0) \"t\") 'No]\n    [(not (= (string-at (string-only file_name) 1 0) \"t\"\
    ) 'No]\n    [(not (= (string-at (string-only file_name) 1 0) \"t\") 'No]\n   \
    \ [(not (= (string-at (string-only file_name) 1 0) \"t\") 'No]\n    [(not (= (string-at\
    \ (string-only file_name) 1 0) \"t\") 'No]\n    [(not (= (string-at (string-only\
    \ file_name) 1 0) \"t\") 'No]\n    [(not (= (string-at (string-only file_name)\
    \ 1 0) \"t\") 'No]\n    [(not (= (string-at (string-only file_name) 1 0) \"t\"\
    ) 'No]\n    [(not (", "  (let ([count 0]\n        [dot (file-name file_name)]\n\
    \        [dot (substring dot 0 (string->length dot))]\n        [dot2 (substring\
    \ dot 1 (string->length dot))])\n    (cond [(= (length (string-ref file_name 0))\
    \ 3)\n           (if (string=? (substring file_name 0 1) \"0123456789\")\n   \
    \            (if (string=? (substring file_name 0 1) \"a.b\")\n              \
    \     (if (string=? (substring file_name 0 1) \"A.b\")\n                     \
    \  (if (string=? (substring file_name 0 1) \"A\")\n                          \
    \ (if (string=? (substring file_name 0 1) \"a\")\n                           \
    \    (if (string=? (substring file_name 0 1) \".\")\n                        \
    \           (if (string=? (substring file_name 0 1) \".exe\")\n              \
    \                         (if (string=? (substring file_name 0 1) \".txt\")\n\
    \                                         (if (string=? (substring file_name 0\
    \ 1) \".dll\")\n                                            (if (string=? (substring\
    \ file_name 0 1) \"exe\")\n                                                (if\
    \ (string=? (substring file_name 0 1) \"txt\")\n                             \
    \                       (if (string=? (substring file_name 0 1) \"dll\")\n   \
    \                                                     (if (equal? (string-ref\
    \ file_name 0 1) \".\")\n                                                    \
    \        (if (string=? (substring file_name 0 1) \"exe\")\n                  \
    \                                              (if (string=? (substring file_name\
    \ 0 1) \"txt\")\n                                                            \
    \        (if (equal? (string-ref file_name 0 1) \"exe\")\n                   \
    \                                                     (if (equal? (string-ref\
    \ file_name 0 1) \"dll\")\n                                                  \
    \                          (if (equal? (string-ref file_name 0 1) \".exe\")\n\
    \                                                                            \
    \    (if (equal? (string-ref file_name 0 1) \".txt\")\n                      \
    \                                                              (if (equal? (string-ref\
    \ file_name 0 1) \"dll\")\n                                                  \
    \                                      (file-name file_name)\n               \
    \                                                                         \"Yes\"\
    \n                                                                           \
    \             \"No
  "  (or (char= (first file_name) '-')\n      (char= (first file_name) 'a')\n    \
    \  (char= (first file_name) 'A')\n      (not (string=? (substring file_name 0\
    \ 2) \"\")\n                (string=? (substring file_name 0 1) \"\")\n      \
    \          (or (char= (first file_name) '.')\n                    (or (char= (first\
    \ file_name) 'txt')\n                        (char= (first file_name) 'exe')\n\
    \                        (char= (first file_name) 'dll')))))", "  (cond\n    [(and\
    \ (> (string-length file_name) 3) (string-contains file_name \"..\"))\n     \"\
    No\"]\n    [(string-beginning file_name \"a\" (set! lower-case (substring (symbol->string\
    \ #{\\a \\A \\z \\Z})) (symbol->string #{\\A \\z \\Z})) #{\\z \\Z})\n     (string-starts-with-letter\
    \ file_name lower-case)\n     \"No\"]\n    [(string-contains file_name \".\")\
    \ \"No\"]\n    [else \"Yes\"]))\n", "  (cond\n    [(< (length file_name) 3) \"\
    File name too short.\"]\n    [(not (member \".\" (substring file_name 0 (- (length\
    \ file_name) 1)))) \"File name must not contain a '.'.\"]\n    [(not (member #\\\
    A (substring file_name 0 (- (length file_name) 1)))) \"File name must not start\
    \ with a letter.\"]\n    [(not (member #\\Z (substring file_name 0 (- (length\
    \ file_name) 1)))) \"File name must not end with a letter.\"]\n    [(equal? (substring\
    \ file_name 0 (- (length file_name) 2)) file_name) \"File name should not contain\
    \ multiple dots.\"]\n    [(equal? (substring file_name 0 (- (length file_name)\
    \ 1)) file_name) \"File name should only contain one dot.\"]\n    [(equal? (substring\
    \ file_name 0 (- (length file_name) 1)) file_name) \"File name should only contain\
    \ one dot.\"]\n    [(equal? (substring file_name (length (substring file_name\
    \ 0 (- (length file_name) 2)) 0))\n               \"example.txt\") \"File name\
    \ must not begin with the directory name.\"]\n    [(equal? (substring file_name\
    \ (length (substring file_name 0 (- (length file_name) 2)) 0))\n             \
    \  \"example.txt\") \"File name must not begin with the directory name.\"]\n \
    \   [(equal? (substring file_name (length (substring file_name 0 (- (length file_name)\
    \ 2)) 0))\n               \"example.txt\") \"File name must not begin with the\
    \ directory name.\"]\n    [(equal? (substring file_name (length (substring file_name\
    \ 0 (- (length file_name) 2)) 0))\n               \"example.txt\") \"File name\
    \ must not begin with the directory name.\"]\n    [(equal? (substring file_name\
    \ (length (substring file_name 0 (- (length file_name) 2)) 0))\n             \
    \  \"example.txt\") \"File name must not begin with the directory name.\"]\n \
    \   [(equal? (substring file_name (length (substring file_name 0 (- (length file_name)\
    \ 2)) 0))\n               \"example.txt\") \"File name must not begin with the\
    \ directory name.\"]\n    [(equal? (substring file_name (length (substring file_name\
    \ 0 (- (length file_name) 2)) 0))\n               \"example.txt\") \"File name\
    \ must not begin with the directory name.\"]\n    [(equal? (substring file_name\
    \ (length (substring file_name 0 (- (length file_name) 2)) 0))\n             \
    \  \"example.txt\") \"File name must not begin with the directory name.\"]\n \
    \   [(equal? (substring file_name (length (substring file_name 0 (- (length file_name)\
    \ 2)) 0))\n               \"example.txt\") \"", "  (string-match? #px\"^([0-9]{1,3})[^.].*\\\
    .(exe|dll|txt)$\" file_name))\n</code>\n<|/ a |>\n<| c |>\n`#px\"^[0-9]{1,3}[^.].*\\\
    .(exe|dll|txt)$\"` will match `1example.txt`, `001example.exe`, `0example.dll`,\
    \ `00example.dll`, `001example.txt`, `example.dll` and `1example.txt` but won't\
    \ match `example.txt` as the filename contains no digit.\n<|/ c |>\n<| a |>\n\
    <code>", "  (cond\n    [(= (length file_name) 3) \"Yes\"]\n    [(or (string=?\
    \ (substring file_name 0 (string-length file_name)) \".\") (string=? (substring\
    \ file_name 0 (string-length file_name)) \"-\"))\n     (cond\n       [(or (string=?\
    \ (substring file_name 0 (string-length file_name)) \".\") (string=? (substring\
    \ file_name 0 (string-length file_name)) \"-\")\n          (string=? (substring\
    \ file_name 0 (string-length file_name)) \"a\"))\n        \"Yes\"]\n       [(or\
    \ (string=? (substring file_name 0 (string-length file_name)) \".\") (string=?\
    \ (substring file_name 0 (string-length file_name)) \"-\")\n          (string=?\
    \ (substring file_name 0 (string-length file_name)) \"b\"))\n        \"Yes\"]\n\
    \       [(or (string=? (substring file_name 0 (string-length file_name)) \".\"\
    ) (string=? (substring file_name 0 (string-length file_name)) \"-\")\n       \
    \   (string=? (substring file_name 0 (string-length file_name)) \"c\"))\n    \
    \    \"Yes\"]\n       [(or (string=? (substring file_name 0 (string-length file_name))\
    \ \".\") (string=? (substring file_name 0 (string-length file_name)) \"-\")\n\
    \          (string=? (substring file_name 0 (string-length file_name)) \"d\"))\n\
    \        \"Yes\"]\n       [(or (string=? (substring file_name 0 (string-length\
    \ file_name)) \".\") (string=? (substring file_name 0 (string-length file_name))\
    \ \"-\")\n          (string=? (substring file_name 0 (string-length file_name))\
    \ \"e\"))\n        \"Yes\"]\n       [(or (string=? (substring file_name 0 (string-length\
    \ file_name)) \".\") (string=? (substring file_name 0 (string-length file_name))\
    \ \"-\")\n          (string=? (substring file_name 0 (string-length file_name))\
    \ \"f\"))\n        \"Yes\"]\n       [(or (string=? (substring file_name 0 (string-length\
    \ file_name)) \".\") (string=? (substring file_name 0 (string-length file_name))\
    \ \"-\")\n          (string=? (substring file_name 0 (string-length file_name))\
    \ \"g\"))\n        \"Yes\"]\n       [(or (string=? (substring file_name 0 (string-length\
    \ file_name)) \".\") (string=? (substring file_name 0 (string-length file_name))\
    \ \"-\")\n          (string=? (substring file_name 0 (string-length file_name))\
    \ \"h\"))\n        \"Yes\"]\n       [(or (string=? (substring file_name 0 (string-length\
    \ file_name)) \".\") (string=? (substring file_name 0 (string-length file_name))\
    \ \"-\")\n          (string=? (sub", "  (cond\n    [(< (length file_name) 3)\n\
    \     (cond\n       [(equal? (substring file_name 0 1) \"..\")\n        (cond\n\
    \         [(or (= (length file_name) 2)\n               (equal? (substring file_name\
    \ 0 0) \".\"))\n          (equal? (substring file_name 0 0) \"..\")\n        \
    \  \"No\"])\n       [(or (= (length file_name) 2)\n               (equal? (substring\
    \ file_name 0 0) \".\"))\n        (equal? (substring file_name 0 0) \".\")\n \
    \       \"No\"]\n       [(equal? (substring file_name 0 0) \"..\")\n        (\"\
    No\")\n        \"No\"]\n       [(or\n          (string-match? \"^([a-zA-Z]){2,5}$\"\
    \ (substring file_name 0 0))\n          (string-match? \"^[a-z]{2,5}$\" (substring\
    \ file_name 0 0)))\n        (\"No\")\n        \"No\"]\n       [else\n        \"\
    Yes\"]])\n    (equal? (substring file_name 0 0) \".\")\n    (equal? (substring\
    \ file_name 0 1) \"..\")\n    (equal? (substring file_name 0 2) \".\")\n    (or\n\
    \     (string-match? \"^([a-zA-Z]){2,5}$\" (substring file_name 0 0))\n     (string-match?\
    \ \"^[a-z]{2,5}$\" (substring file_name 0 0)))\n    (string=\n     (cond\n   \
    \    [(equal? (substring file_name 0 0) \"..\")\n        (cond\n         [(or\
    \ (= (length file_name) 2)\n               (equal? (substring file_name 0 0) \"\
    .\"))\n          (equal? (substring file_name 0 0) \".\")\n          \"No\"])\n\
    \       [(or (= (length file_name) 2)\n               (equal? (substring file_name\
    \ 0 0) \".\"))\n        (equal? (substring file_name 0 0) \".\")\n        \"No\"\
    ]\n       [(equal? (substring file_name 0 0) \"..\")\n        (\"No\")\n     \
    \   \"No\"]\n       [(or\n          (string-match? \"^([a-zA-Z]){2,5}$\" (substring\
    \ file_name 0 0))\n          (string-match? \"^[a-z]{2,5}$\" (substring file_name\
    \ 0 0)))\n        (\"No\")\n        \"No\"]\n       [else\n        \"Yes\"])\n\
    \    (equal? (substring file_name 0 0) \".\")\n    (equal? (substring file_name\
    \ 0 1) \"..\")\n    (equal? (substring file_name 0 2) \".\")\n    (or\n     (string-match?\
    \ \"^([a-zA-Z]){2,5}$\" (substring file_", "  (cond\n    [(> (string-length file_name)\
    \ 3)\n     (cond\n       [(ends-with? file_name \".\")\n        (cond\n      \
    \   [(string=? (substring file_name 0 1) \"a\")\n          (string=? (substring\
    \ file_name 0 1) \"A\")]\n         [else\n          (return \"No\")])]\n     \
    \  [else\n        (return \"No\")])]\n    [else\n     (cond\n       [(string=?\
    \ (substring file_name 0 1) \"0\")\n        (cond\n         [(string=? (substring\
    \ file_name 0 1) \"1\")\n          (string=? (substring file_name 0 1) \"2\")\n\
    \          (string=? (substring file_name 0 1) \"3\")\n          (string=? (substring\
    \ file_name 0 1) \"4\")\n          (string=? (substring file_name 0 1) \"5\")\n\
    \          (string=? (substring file_name 0 1) \"6\")\n          (string=? (substring\
    \ file_name 0 1) \"7\")\n          (string=? (substring file_name 0 1) \"8\")\n\
    \          (string=? (substring file_name 0 1) \"9\")]\n         [else\n     \
    \     (return \"No\")])]\n       [(string=? (substring file_name 0 1) \"a\")\n\
    \        (cond\n         [(string=? (substring file_name 0 1) \"a\")\n       \
    \   (string=? (substring file_name 0 1) \"A\")]\n         [else\n          (return\
    \ \"No\")])]\n       [(string=? (substring file_name 0 1) \"b\")\n        (cond\n\
    \         [(string=? (substring file_name 0 1) \"b\")\n          (string=? (substring\
    \ file_name 0 1) \"B\")]\n         [else\n          (return \"No\")])]\n     \
    \  [(string=? (substring file_name 0 1) \"c\")\n        (cond\n         [(string=?\
    \ (substring file_name 0 1) \"c\")\n          (string=? (substring file_name 0\
    \ 1) \"C\")]\n         [else\n          (return \"No\")])]\n       [(string=?\
    \ (substring file_name 0 1) \"d\")\n        (cond\n         [(string=? (substring\
    \ file_name 0 1) \"d\")\n          (string=? (substring file_name 0 1) \"D\")]\n\
    \         [else\n          (return \"No\")])]\n       [(string=? (substring file_name\
    \ 0 1) \"e\")\n        (cond\n         [(string=? (substring file_name 0 1) \"\
    e\")\n          (string=? (substring file_", "  (if (empty? file_name)\n     \
    \ \"No\"\n      (let ([file_parts (file-name file_name)]\n            [file_parts_cnt\
    \ (file-parts length)])\n        (and (< (length file_parts) 3)\n            \
    \ (char=? (first file_parts) #\\0)\n             (not (empty? (subseq file_parts\
    \ 0 1)))\n             (or (char=? (first file_parts) #\\.)\n                \
    \ (char=? (first file_parts) #\\a)\n                 (char=? (first file_parts)\
    \ #\\z)\n                 (char=? (first file_parts) #\\A)\n                 (char=?\
    \ (first file_parts) #\\Z))\n             (not (char=? (rest file_parts) #\\0\
    \ '[exyd])\n                 (char=? (rest file_parts) #\\. #\\a)\n          \
    \       (char=? (rest file_parts) #\\z #\\A)\n                 (char=? (rest file_parts)\
    \ #\\A #\\z)\n                 (char=? (rest file_parts) #\\Z #\\a)))))\n    \
    \      \"No\")))\n", "  (cond\n    [(> (string-length (substring file_name 0 3))\
    \ 3)\n     (begin\n       (cond\n         [(> (string-length (substring file_name\
    \ 0 2)) 1)\n          (string->symbol (substring file_name 0 2))]\n         [else\
    \ false]))]\n    [(substring? file_name \".\") false]\n    [(> (string-length\
    \ (substring file_name (substring file_name 0 (string->length (substring-before\
    \ (file_name \".\" 0)))))) 1)\n     (begin\n       (cond\n         [(character?\
    \ (substring file_name (substring file_name 0 (string->length (substring-before\
    \ (file_name \".\" 0))))))\n          (string->symbol (substring file_name (substring\
    \ file_name 0 (string->length (substring-before (file_name \".\" 0))))))]\n  \
    \       [else false]))]\n    [(or (substring? (substring file_name (substring\
    \ file_name 0 (string->length (substring-before (file_name \".\" 0))))) 0 1)\n\
    \          (substring? (substring file_name (substring file_name 0 (string->length\
    \ (substring-before (file_name \".\" 0))))) 0 2)\n          (substring? (substring\
    \ file_name (substring file_name 0 (string->length (substring-before (file_name\
    \ \".\" 0))))) 0 3)\n          (substring? (substring file_name (substring file_name\
    \ 0 (string->length (substring-before (file_name \".\" 0))))) 0 4)\n         \
    \ (substring? (substring file_name (substring file_name 0 (string->length (substring-before\
    \ (file_name \".\" 0))))) 0 5)\n          (substring? (substring file_name (substring\
    \ file_name 0 (string->length (substring-before (file_name \".\" 0))))) 0 6)\n\
    \          (substring? (substring file_name (substring file_name 0 (string->length\
    \ (substring-before (file_name \".\" 0))))) 0 7)\n          (substring? (substring\
    \ file_name (substring file_name 0 (string->length (substring-before (file_name\
    \ \".\" 0))))) 0 8)\n          (substring? (substring file_name (substring file_name\
    \ 0 (string->length (substring-before (file_name \".\" 0))))) 0 9)\n         \
    \ (substring? (substring file_name (substring file_name 0 (string->length (substring-before\
    \ (file_name \".\" 0))))) 0 10)\n          (substring? (substring file_name (substring\
    \ file_name 0 (string->length (substring-before (file_name \".\" 0))))", "  (cond\n\
    \    [(> (string-length file_name) 3) \"No\"]\n    [(equal? (substring file_name\
    \ 0 (- 3 (string-length file_name)))) \n     (cond\n       [(equal? (substring\
    \ file_name (- 3 (string-length file_name)) '\n                    (substring\
    \ file_name (- 3 (string-length file_name)) \n                               \
    \ (+ 1 (string-length file_name)))) \n        \"No\"]\n       [(equal? (substring\
    \ file_name (- 3 (string-length file_name)) '\n                    (substring\
    \ file_name (- 3 (string-length file_name)) \n                               \
    \ (+ 1 (string-length file_name)))) \n        (cond\n          [(equal? (substring\
    \ file_name (- 3 (string-length file_name)) '\n                        (substring\
    \ file_name (- 3 (string-length file_name)) \n                               \
    \     (+ 1 (string-length file_name))))\n           \"No\"]\n          [(equal?\
    \ (substring file_name (- 3 (string-length file_name)) '\n                   \
    \     (substring file_name (- 3 (string-length file_name)) \n                \
    \                    (+ 1 (string-length file_name)))) \n           (cond\n  \
    \           [(equal? (char->integer (substring file_name (- 3 (string-length file_name))\
    \ \n                                (+ 1 (string-length file_name)))) \n     \
    \         \"No\"]\n             [else (cond\n                     [(char->integer\
    \ (substring file_name (- 3 (string-length file_name)) \n                    \
    \                (+ 1 (string-length file_name)))) \n                      \"\
    Yes\"]\n                     [else (cond\n                             [(equal?\
    \ (substring file_name (- 3 (string-length file_name)) '\n                   \
    \                      (substring file_name (- 3 (string-length file_name)) \n\
    \                                                (+ 1 (string-length file_name)))))\
    \ \n                              \"Yes\"]\n                             [else\
    \ (cond\n                                     [(equal? (substring file_name (-\
    \ 3 (string-length file_name)) '\n                                           \
    \     (substring file_name (- 3 (string-length file_name)) \n                \
    \                                            (+ 1 (string-length file_name)))))\
    \ \n                                      \"Yes\"]\n                         \
    \            [else (cond\n                                             [(equal?\
    \ (substring file_name (- 3 (string-length file_name)) '\n                   \
    \                                     (substring file_name (- 3 (string-length\
    \ file_name)) \n                                                             \
    \       (+ 1 (string-length file_name))))) \n                                \
    \              \"Yes\"]\n                                             [else (cond\n\
    \                                                    [(equal? (substring file_name\
    \ (- 3 (string-length file_name)) '\n                                        \
    \                              (substring file_name (- 3 (string-length file_name))\
    \ \n                                                                         \
    \             (+ 1 (string-length file_name))))) \n                          \
    \                            \"Yes\"]\n                                      \
    \              [else (cond\n                                                 \
    \           [(equal? (substring file_name (- 3 (string-length file_name)) '\n\
    \                                                                       (substring\
    \ file_name (- 3 (string-length file_name)) \n                               \
    \                                                       (+ 1 (string-length ",
  "  (define (file_name_check file_name)\n    (let ((is_valid (substring (file_name)\
    \ 0 (string-length file_name)) \n           (file_type_check (substring file_name\
    \ (+ 0 (string-length file_name)) \n           (string-length file_name)))))\n\
    \      (if (null? is_valid)\n          (return 'No)\n        (if (= (file_type-check\
    \ is_valid) 'txt)\n            (return 'Yes)\n            (return 'No))))))\n",
  "  (cond\n    [(< 3 (string-length file_name))\n     (string->symbol (sub1 (file-name-string\
    \ file_name)))]\n    [else (symbol->string (sub1 (file-name-string file_name)))]\n\
    \    [else 'No]))\n", "  (cond\n    [(<= 3 (string-length file_name)) \"Yes\"\
    ]\n    [(string-substring file_name 0 3) \"No\"]\n    [(string-substring file_name\
    \ 0 1) (and (= (string-substring file_name 0 1) 'a')\n                       \
    \                 (= (string-substring file_name 0 1) 'z'))]\n    [else (and (=\
    \ (string-substring file_name 0 1) 'A')\n              (= (string-substring file_name\
    \ 0 1) 'Z'))]))\n", "  (if (string-empty? file_name)\n      \"No\"\n      (if\
    \ (string=? file_name\n                  '(' (+ '(0) (file-name file_name)) ')')\n\
    \          \"No\"\n          (if (string=? file_name\n                      '('\
    \ (+ '(0) (file-name file_name)) ')')\n              (if (string=? (substring\
    \ file_name 0 (string-length file_name)) '.')\n                  (if (string=?\
    \ (substring file_name 0 (string-length file_name)) 'a')\n                   \
    \   (if (string=? (substring file_name 0 (string-length file_name)) 'b')\n   \
    \                       (if (string=? (substring file_name 0 (string-length file_name))\
    \ 'c')\n                              (if (string=? (substring file_name 0 (string-length\
    \ file_name)) 'd')\n                                  (if (string=? (substring\
    \ file_name 0 (string-length file_name)) 'e')\n                              \
    \        (if (string=? (substring file_name 0 (string-length file_name)) 'f')\n\
    \                                          (if (string=? (substring file_name\
    \ 0 (string-length file_name)) 'g')\n                                        \
    \      (if (string=? (substring file_name 0 (string-length file_name)) 'h')\n\
    \                                                  (if (string=? (substring file_name\
    \ 0 (string-length file_name)) 'i')\n                                        \
    \              (if (string=? (substring file_name 0 (string-length file_name))\
    \ 'j')\n                                                          (if (string=?\
    \ (substring file_name 0 (string-length file_name)) 'k')\n                   \
    \                                           (if (string=? (substring file_name\
    \ 0 (string-length file_name)) 'l')\n                                        \
    \                          (if (string=? (substring file_name 0 (string-length\
    \ file_name)) 'm')\n                                                         \
    \             \"No\"\n                                                       \
    \                   \"Yes\")\n                                               \
    \                   \"Yes\")\n                                               \
    \           (if (string=? (substring file_name 0 (string-length file_name)) 'm')\n\
    \                                                              (if (string=? (substring\
    \ file_name 0 (string-length file_name)) 'n')\n                              \
    \                                    \"No\"\n                                \
    \                                  \"Yes\")\n                                \
    \                          (if (string=? (substring file_name 0 (string-length\
    \ file_name)) 'o')\n                                                         \
    \     (if (string=? (substring file_name 0 (string-length file_name)) 'p')\n \
    \                                                                 \"No\"\n   \
    \                                                               \"Yes\")\n   \
    \                                                       (if (string=? (substring\
    \ file_name 0 (string-length file_name)) 'r')\n                              \
    \                                (if (string=? (substring file_name 0 (string-length\
    \ file_name)) 's')\n                                                         \
    \         \"No\"\n                                                           \
    \       \"Yes\")\n                                                          (if\
    \ (string=? (substring file_name 0 (string-length file_name)) 't')\n         \
    \                                                     (if (string=? (substring\
    \ file_name 0 (string-length file_name)) 'u')\n", "  (or (string-match \"^[0-9]{3}\\\
    .[^.]+\\.((txt|exe|dll)$\" file_name)\n      (string-match \"^[a-zA-Z][a-zA-Z0-9]{2,}$\"\
    \ file_name)\n      (equal? (substring file_name 0 1) \".\")\n      (equal? (substring\
    \ file_name 0 2) \"..\")))\n", "  (cond\n    [(empty? file_name)\n      (begin\n\
    \        (display \"Please enter a file name.\")\n        (newline)\n        (prompt_name)\n\
    \        (file_name_check file_name))\n     \n     \n     \n     (string-match-p\
    \ \"^[a-zA-Z]+[0-9]+\\.txt$\" file_name)\n     (string-match-p \"^[a-zA-Z]+[0-9]+\\\
    .exe$\" file_name)\n     (string-match-p \"^[a-zA-Z]+[0-9]+\\.dll$\" file_name)\n\
    \     (string-match-p \"^[a-zA-Z]+[0-9]+\" file_name)\n     (display \"Yes\")\n\
    \     (newline)\n     \n    \n     (else (display \"No\"))\n     \n     \n   \
    \  \n     \n     \n     \n     \n     \n     \n     \n     (else (display \"Please\
    \ enter a file name.\"))\n     \n     \n     \n     (else (file_name_check file_name))\n\
    \      \n     \n     (else (display \"Please enter a valid file name.\")))\n \
    \    \n     \n     \n     (else (display \"Please enter a valid file name.\"))))\n\
    \     \n     \n     \n     (else (display \"Please enter a valid file name.\"\
    ))))\n", "  (let ((name_length (string-length file_name)))\n    (cond ((= 3 name_length)\
    \ 'Yes)\n          ((= 4 name_length) 'No)\n          ((not (numberp (string-ref\
    \ file_name 0 (- 4 name_length)))) 'No)\n          ((not (string= \".\" file_name))\
    \ 'No)\n          ((not (string= \"\" (string-upcase (string-ref file_name 0 (-\
    \ (string-length file_name) 1))))) 'No)\n          ((not (string= \"\" (string-downcase\
    \ (string-ref file_name 0 (- (string-length file_name) 1))))) 'No)\n         \
    \ ((not (string= \"\" (string-upcase (string-ref file_name 0 (- (string-length\
    \ file_name) 2))))) 'No)\n          ((not (string= \"\" (string-downcase (string-ref\
    \ file_name 0 (- (string-length file_name) 2))))) 'No)\n          ((not (string=\
    \ \"\" (string-upcase (string-ref file_name 0 (- (string-length file_name) 3)))))\
    \ 'No)\n          ((not (string= \"\" (string-downcase (string-ref file_name 0\
    \ (- (string-length file_name) 3))))) 'No)\n          ((not (string= \"\" (string-upcase\
    \ (string-ref file_name 0 (- (string-length file_name) 4)))) 'No)\n          ((not\
    \ (string= \"\" (string-downcase (string-ref file_name 0 (- (string-length file_name)\
    \ 4)))) 'No)\n          ((not (string= \"\" (string-upcase (string-ref file_name\
    \ 0 (- (string-length file_name) 5)))) 'No)\n          ((not (string= \"\" (string-downcase\
    \ (string-ref file_name 0 (- (string-length file_name) 5)))) 'No)\n          ((not\
    \ (string= \"\" (string-upcase (string-ref file_name 0 (- (string-length file_name)\
    \ 6)))) 'No)\n          ((not (string= \"\" (string-downcase (string-ref file_name\
    \ 0 (- (string-length file_name) 6)))) 'No)\n          ((not (string= \"\" (string-upcase\
    \ (string-ref file_name 0 (- (string-length file_name) 7)))) 'No)\n          ((not\
    \ (string= \"\" (string-downcase (string-ref file_name 0 (- (string-length file_name)\
    \ 7)))) 'No)\n          ((not (string= \"\" (string-upcase (string-ref file_name\
    \ 0 (- (string-length file_name) 8)))) 'No)\n          ((not (string= \"\" (string-downcase\
    \ (string-ref file_name 0 (- (string-length file_name) 8", "  (if (string-length\
    \ file_name < 4)\n      'No\n      (let ((char (string-ref file_name 0 (string-length\
    \ file_name)))\n            (alphapet_letter (and (char->integer (char-code (char->integer\
    \ char)) >= 97)\n                                (char->integer (char-code (char->integer\
    \ char)) <= 122))\n            (dot_found (string-index-of file_name \".\" 0 (-\
    \ (string-length file_name) 1)))\n            (dot_not_empty (string-index file_name\
    \ 0 dot_found)))\n        (cond\n          ((and (not alphapet_letter)\n     \
    \           not dot_not_empty\n                not (= (string-length file_name)\
    \ 3))\n           'No)\n          ((and (not alphapet_letter)\n              \
    \  dot_not_empty\n                (= (string-length file_name) 2)\n          \
    \      (not (= (string-index file_name 0 (+ 1 dot_found)) \".\"))\n          \
    \      string-char-substring file_name 0 (+ 1 dot_found) 'txt)\n           'Yes)\n\
    \          (else (file_name_check file_name))))))\n", "  (cond\n    ((empty? file_name)\
    \ \"No\")\n    ((string=? (string-ref file_name 0) '.) \"No\")\n    ((string=?\
    \ (string-ref file_name 0) 'a) (string=? (string-ref file_name 0) 'z)) (string=?\
    \ (string-ref file_name 0) 'A))\n    ((string=? (string-ref file_name 0) '0) (string=?\
    \ (string-ref file_name 0) '9))\n    ((string=? (string-ref file_name 0) '-) \"\
    No\")\n    ((char=? (string-ref file_name 0) #\\0) \"No\")\n    ((char=? (string-ref\
    \ file_name 0) #\\9) \"No\")\n    ((char=? (string-ref file_name 0) #\\A) \"No\"\
    )\n    ((char=? (string-ref file_name 0) #\\Z) \"No\")\n    ((char=? (string-ref\
    \ file_name 0) #\\a) \"No\")\n    ((char=? (string-ref file_name 0) #\\z) \"No\"\
    )\n    ((char=? (string-ref file_name 0) #\\d) \"No\")\n    ((char=? (string-ref\
    \ file_name 0) #\\s) \"No\")\n    ((char=? (string-ref file_name 0) #\\W) \"No\"\
    )\n    ((char=? (string-ref file_name 0) #\\s)) \"No\")\n    ((char=? (string-ref\
    \ file_name 0) #\\W) \"No\")\n    ((char=? (string-ref file_name 0) #\\s)) \"\
    No\")\n    ((char=? (string-ref file_name 0) #\\W) \"No\")\n    ((char=? (string-ref\
    \ file_name 0) #\\s)) \"No\")\n    ((char=? (string-ref file_name 0) #\\W) \"\
    No\")\n    ((char=? (string-ref file_name 0) #\\s)) \"No\")\n    ((char=? (string-ref\
    \ file_name 0) #\\W) \"No\")\n    ((char=? (string-ref file_name 0) #\\s)) \"\
    No\")\n    ((char=? (string-ref file_name 0) #\\W) \"No\")\n    ((char=? (string-ref\
    \ file_name 0) #\\s)) \"No\")\n    ((char=? (string-ref file_name 0) #\\W) \"\
    No\")\n    ((char=? (string-ref file_name 0) #\\s)) \"No\")\n    ((char=? (string-ref\
    \ file_name 0) #\\W) \"No\")\n    ((char=? (string-ref file_name 0) #\\s)) \"\
    No\")\n    ((char=? (string-ref file_name 0) #\\W) \"No\")\n    ((char=? (string-ref\
    \ file_name 0) #\\s)) \"No\")", "  (cond\n    [(empty? file_name) \"No\"]\n  \
    \  [(zero? (string-length file_name)) \"No\"]\n    [(string-match (substring file_name\
    \ 0 2) \"[0-9]{3}\") \"No\"]\n    [(substring file_name 0 1) (and (< 1 (string-length\
    \ file_name)) (string-match (substring file_name 0 1) \"[a-Z]\"))\n     (and (substring\
    \ file_name 1 3) (string-match (substring file_name 1 2) \"[.exe,.dll]\"))]))\n",
  "  (let ([s (string->list file_name)])\n    (if (> 3 (length s))\n        (begin\
    \ (display \"The file's name should not contain more than three digits\") \n \
    \             (newline) (newline))\n        (let ([first-part (substring s 0 (cdr\
    \ s))])\n          (if (not (characterp (first first-part)))\n            (begin\
    \ (display \"The file's name should contain exactly one dot\") \n            \
    \      (newline) (newline))\n            (let ([second (substring first-part 1\
    \ (cdr first-part))])\n              (if (not (symbolp (second second)))\n   \
    \             (begin (display \"The file's name should start with a letter\")\
    \ \n                      (newline) (newline))\n                (let ([third (substring\
    \ second 1 (cdr second))])\n                  (if (not (member third '(\n    \
    \                                        txt exe dll)))\n                    (begin\
    \ (display \"The file's name should contain 'txt', 'exe' or 'dll'\") \n      \
    \                    (newline) (newline))\n                    (begin (display\
    \ \"The file's name contains invalid characters\") \n                        \
    \  (newline) (newline)))\n                (begin (display \"The file's name contains\
    \ invalid characters\") \n                      (newline) (newline)))))\n    \
    \    (begin (display \"The file's name contains invalid characters\") \n     \
    \         (newline) (newline)))))\n", "  (cond [(null? file_name) \"No\"]\n  \
    \      [(string-char->integer (substring file_name 0 2)) (string-char->integer\
    \ (substring file_name 0 2))]\n        [(equal? (string-char->integer file_name)\
    \ 0) \"No\"]\n        [(equal? (string-char->integer file_name) 9) \"No\"]\n \
    \       [(equal? (substring file_name 0 1) \".\") \"No\"]\n        [(equal? (substring\
    \ file_name 0 1) (string-char->integer 'a'))\n         (equal? (substring file_name\
    \ 0 2) (string-char->integer 'z'))\n         (equal? (substring file_name 0 2)\
    \ (string-char->integer 'A'))\n         (equal? (substring file_name 0 2) (string-char->integer\
    \ 'Z'))\n         \"Yes\"]\n        [else \"No\"]))\n", "  (if (string=? file_name\
    \ \"\")\n      \"Yes\"\n      (let ((first_letter (char-code (first file_name)))\
    \ (second_letter (char-code (second file_name)))) (and (>= 3 (length file_name))\
    \ (and (char=? first_letter 'a') (char=? first_letter 'z') (or (char=? first_letter\
    \ 'A') (char=? first_letter 'Z'))) (or (= 1 #\\. first_letter) (and (char=? second_letter\
    \ #\\.) (and (substring (first file_name) 0 (- 2 #\\. file_name)) (or (char=?\
    \ #\\. file_name) (string-equal file_name (substring (second file_name) 0 (- 2\
    \ #\\. file_name)))) (substring file_name (+ 1 #\\. 0))))))))\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nI wrote a little library for such tasks [here](https://github.com/davisp/fn-validate),\
    \ it uses the same idea as yours, with the difference that the library is safe\
    \ for symbols such as `#\\^`\n<|/ c |>\n<| a tags=racket,scheme dscore=1 |>\n\
    This is another implementation using DrRacket's (cond [(condition) true-expression]\
    \ [else false-expression]):\n<code>\n#lang racket\n", "  (let ((file_name file_name))\n\
    \    (cond\n      [(= (length file_name) 4)\n       (string-match \"^[a-z]{2}\\\
    .[a-z][a-z].*\" file_name)\n       ;; ...\n       ;; ...\n       ;; ...\n    \
    \   ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n     \
    \  ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n      \
    \ ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;;\
    \ ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n\
    \       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n \
    \      ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n  \
    \     ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n   \
    \    ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n    \
    \   ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n     \
    \  ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n      \
    \ ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;;\
    \ ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n\
    \       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n \
    \      ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n  \
    \     ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n   \
    \    ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n    \
    \   ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n     \
    \  ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n       ;; ...\n", "  (<\
    \ (string-length file_name) 3))\n  (not (string-find file_name #\\.))\n  (let\
    \ ([i (string-index file_name #\\.)])\n    (if (< i 0)\n      (= \"No\")\n   \
    \   (= \"Yes\")\n      (and (>= (string-ref file_name 0) (string-ref \"a\" (+\
    \ i (string-length file_name)))\n            (string-ref file_name 1))\n     \
    \      (and (>= (string-ref file_name i) (string-ref \"A\" (+ i (string-length\
    \ file_name)))\n                (string-ref file_name 2)))))))\n", "  (let ([num_digits\
    \ (length file_name)]\n        [dot (char-equal? (first file_name) '.')])\n  \
    \  (cond\n      [(= num_digits 3) (string-equal? (substring file_name 0 2) \"\
    00\")\n       (string-equal? (substring file_name 0 2) \"10\")\n       (string-equal?\
    \ (substring file_name 0 2) \"20\")\n       (string-equal? (substring file_name\
    \ 0 2) \"30\")\n       (string-equal? (substring file_name 0 2) \"40\")\n    \
    \   (string-equal? (substring file_name 0 2) \"50\")\n       (string-equal? (substring\
    \ file_name 0 2) \"60\")\n       (string-equal? (substring file_name 0 2) \"70\"\
    )\n       (string-equal? (substring file_name 0 2) \"80\")\n       (string-equal?\
    \ (substring file_name 0 2) \"90\")\n       (string-equal? (substring file_name\
    \ 0 2) \"a0\")\n       (string-equal? (substring file_name 0 2) \"a1\")\n    \
    \   (string-equal? (substring file_name 0 2) \"a2\")\n       (string-equal? (substring\
    \ file_name 0 2) \"a3\")\n       (string-equal? (substring file_name 0 2) \"a4\"\
    )\n       (string-equal? (substring file_name 0 2) \"a5\")\n       (string-equal?\
    \ (substring file_name 0 2) \"a6\")\n       (string-equal? (substring file_name\
    \ 0 2) \"a7\")\n       (string-equal? (substring file_name 0 2) \"a8\")\n    \
    \   (string-equal? (substring file_name 0 2) \"a9\")\n       (string-equal? (substring\
    \ file_name 0 2) \"b1\")\n       (string-equal? (substring file_name 0 2) \"b2\"\
    )\n       (string-equal? (substring file_name 0 2) \"b3\")\n       (string-equal?\
    \ (substring file_name 0 2) \"b4\")\n       (string-equal? (substring file_name\
    \ 0 2) \"b5\")\n       (string-equal? (substring file_name 0 2) \"b6\")\n    \
    \   (string-equal? (substring file_name 0 2) \"b7\")\n       (string-equal? (substring\
    \ file_name 0 2) \"b8\")\n       (string-equal? (substring file_name 0 2) \"b9\"\
    )\n       (string-equal? (substring file_name 0 2) \"c1\")\n       (string-equal?\
    \ (substring file_name 0 2) \"c2\")\n       (string-equal? (substring file_name\
    \ 0 2) \"c3\")\n       (string-equal? (substring file_name 0 2) \"c4\")\n    \
    \   (string-equal? (substring file_name 0 2) \"c5\")\n       (string-equal? (sub",
  "  (if (null? file_name)\n      (list \"No\")\n      (let ((file_name (string-split\
    \ (string file_name) \"\\\\.\"))\n            (file_name (string-take file_name\
    \ 1)))\n        (if (and (= 0 (string-length file_name))\n                (= (string-length\
    \ (string-take file_name 0)) 3))\n            (list \"No\")\n            (begin\n\
    \              (define (is_valid_file_name str)\n                (let ((str_len\
    \ (string-length str)))\n                  (string-equal str\n               \
    \                  (substring (string str) 0 (- str_len 3)))\n               \
    \   (string-equal (substring str 0 1)\n                                 (string->symbol\
    \ (substring str 0 1)))\n                  (= str_len 2)))\n              (and\
    \ (map is_valid_file_name (file->names file_name))\n                  (string-equal?\
    \ (file->extension (first file_name)) \"txt\"))\n              (and (map is_valid_file_name\
    \ (file->extensions file_name))\n                  (string-equal? (file->name\
    \ (file->names file_name)) \"exe\"))\n              (and (map is_valid_file_name\
    \ (file->extensions file_name))\n                  (string-equal? (file->name\
    \ (file->names file_name)) \"dll\"))))))\n\n#lang racket\n", "  (let ((check (string->list\
    \ file_name)))\n    (and \n      (string-length file_name) \n      (= 3 (string->number\
    \ file_name))\n      (= 1 \n       (string->char \n        (substring file_name\
    \ 0 (- (string->number file_name) 1)))) \n      (= (list-ref check 0) \n     \
    \  (char->string 'a')))))\n", "  (cond\n    [(= (file-length file_name) 3) 'Yes']\n\
    \    [(= (file-substring file_name 0 2) \".\") 'No]\n    [(= (file-substring file_name\
    \ 0 1) 'a) (= 'A (file-substring file_name 0 1))]\n    [(= (file-substring file_name\
    \ 0 1) 'A) (= 'a  (file-substring file_name 0 1))]\n    [else 'No]))\n", "  (define\
    \ (check str)\n    (if (and (char-digit? str) \n             (not (empty? str))\n\
    \             (not (= \"..\" str))\n             (string=? (substring str 0 (char-index\
    \ (substring str 0 (string-length str)) #\\. #\\.. #\\..)) '(a-zA-Z))\n      \
    \       'No))\n  (check (string-length file_name)))\n", "  (cond ((string=? file_name\
    \ \"\") \"No\") \n        ((string-match (regexp #px\"^[a-z][a-z][a-z]?\\.[a-z][a-z][a-z]?$\"\
    )\n                          file_name)\n         \"No\")\n        ((string-match\
    \ (regexp #px\"^[a-z][a-z][a-z]?\")\n                          file_name)\n  \
    \       \"No\")\n        (else (begin (check-for-numbers (substring file_name\
    \ 0 (string-length file_name) 2))\n                    \"No\"))))\n", "  (string=?\
    \ (file_name-nonzero file_name) \"yes\")\n  (string=? (file_name-nonzero file_name)\
    \ \"no\"))\n", "  (or (char-is-digit (file-name file_name))\n      (and (substring\
    \ (sub-string-before file_name 0) 0) (not (char-equal (char-code (file-name file_name))\
    \ #\\Dot))\n           (= (length (sub-string-before file_name 0)) 3)\n      \
    \     (char-equal (substring (file-name file_name) 0 1) #\\A))\n      (and\n \
    \       (substring (sub-string-before file_name 0) 0) (char-equal (substring (file-name\
    \ file_name) 0 1) #\\z)\n        (not (char-equal (char-code (file-name file_name))\
    \ #\\z)\n               (char-equal (substring (file-name file_name) 0 1) #\\\
    A)\n               (substring (sub-string-before file_name 0) 0) (char-equal (substring\
    \ (file-name file_name) 0 1) #\\z)))))\n", "  (string? (file_name_string file_name))\n\
    \  (if (equal? (file_name_string file_name) \"\")\n      (let ([num (string->integer\
    \ (file_name_string file_name) 'radix 10)]) (if (< num 9) 'no else (if (= num\
    \ 0) 'yes 'no))))\n  (if (or (equal? (file_name_string file_name) \".\")\n   \
    \       (equal? (file_name_string file_name) \"..\")\n          (string-match\
    \ (string-ref (file_name_string file_name) 0) \"[a-ZA-Z]\"))\n      (let ([name\
    \ (file_name_string file_name)])\n        (if (or (= (string-length name) 1)\n\
    \                (equal? (char-after (char->integer #\\. name) 0)\n          \
    \               '-')\n                (equal? (char-after (char->integer #\\.\
    \ name) 1)\n                         '-')\n                (equal? (char-before\
    \ (char->integer #\\. name) 0)\n                         'a')\n              \
    \  (equal? (char-before (char->integer #\\. name) 1)\n                       \
    \  'a')\n                (equal? (char-before (char->integer #\\. name) 0)\n \
    \                        'a')\n                (equal? (char-before (char->integer\
    \ #\\. name) 1)\n                         'a')\n                (equal? (char-before\
    \ (char->integer #\\. name) 0)\n                         'a')\n              \
    \  (equal? (char-before (char->integer #\\. name) 1)\n                       \
    \  'a')\n                (equal? (char-before (char->integer #\\. name) 0)\n \
    \                        'a')\n                (equal? (char-before (char->integer\
    \ #\\. name) 1)\n                         'a')\n                (equal? (char-before\
    \ (char->integer #\\. name) 0)\n                         'a')\n              \
    \  (equal? (char-before (char->integer #\\. name) 1)\n                       \
    \  'a')\n                (equal? (char-before (char->integer #\\. name) 0)\n \
    \                        'a')\n                (equal? (char-before (char->integer\
    \ #\\. name) 1)\n                         'a')\n                (equal? (char-before\
    \ (char->integer #\\. name) 0)\n                         'a')\n              \
    \  (equal? (char-before (char->integer #\\. name) 1)\n                       \
    \  'a')\n                (equal? (char-before (char->integer #\\. name) 0)\n \
    \                        'a')\n                (equal? (char-before (char->integer\
    \ #\\. name) 1)\n                         'a')\n                (equal? (char-before\
    \ (char->integer #\\. name) 0)\n                         'a')\n              \
    \  (equal? (char-before (char->integer #\\. name) 1)\n                       \
    \  'a')\n                (equal? (char-before", "  (string=? (substring file_name\
    \ 0 (string->length file_name)) 3)\n  (string=? (substring file_name (substring\
    \ (file_name 0 0) 0) 1) #\\0)\n  (string=? (substring file_name (substring (file_name\
    \ 0 0) 1) 1) #\\.)\n  (or (string=? (substring file_name (substring (file_name\
    \ 0 0) 1) 2) \"a\" (string=? (substring file_name (substring (file_name 0 0) 2)\
    \ 2) \"b\" (string=? (substring file_name (substring (file_name 0 0) 2) 2) \"\
    c\"))\n    (string=? (substring file_name (substring (file_name 0 0) 2) 3) \"\
    txt\" (string=? (substring file_name (substring (file_name 0 0) 2) 3) \"exe\"\
    \ (string=? (substring file_name (substring (file_name 0 0) 2) 3) \"dll\")))\n\
    \  (or (string=? (substring file_name (substring (file_name 0 0) 3) 3) \"txt\"\
    \ (string=? (substring file_name (substring (file_name 0 0) 3) 3) \"exe\" (string=?\
    \ (substring file_name (substring (file_name 0 0) 3) 3) \"dll\"))\n    (string=?\
    \ (substring file_name (substring (file_name 0 0) 3) 3) \"txt\" (string=? (substring\
    \ file_name (substring (file_name 0 0) 3) 3) \"exe\" (string=? (substring file_name\
    \ (substring (file_name 0 0) 3) 3) \"dll\")))))\n", "  (if (string-length (substring\
    \ (substring file_name 0 (string-length file_name)) 0 (string-length file_name))\
    \ 1) 0\n    (if (string=? \".\" (substring file_name 0 (string-length file_name)))\
    \ 1\n      (if (string-length file_name 0) 1\n        (let ([num (string-length\
    \ file_name)]) \n          (if (> num 3) \n            (if (string=? (substring\
    \ file_name 0 (string-length file_name)) \"A\") 1\n              (if (string=?\
    \ (substring file_name 0 (string-length file_name)) \"a\") 1\n               \
    \ (if (string=? (substring file_name 0 (string-length file_name)) \"Z\") 1\n \
    \                 (if (string=? (substring file_name 0 (string-length file_name))\
    \ \"z\") 1\n                    (if (string=? (substring file_name 0 (string-length\
    \ file_name)) \"1\") 1\n                      (if (string=? (substring file_name\
    \ 0 (string-length file_name)) \"0\") 1\n                        (if (string=?\
    \ (substring file_name 0 (string-length file_name)) \"9\") 1\n               \
    \           0\n                          0\n                        ))\n     \
    \                 ))\n                    ))\n                  ))\n         \
    \       ))\n              ))\n          )))))\n", "  (cond\n    ((= (string-length\
    \ file_name) 3) \"Yes\")\n    ((not (string-contains \".\" (substring file_name\
    \ 0 2))) \"No\")\n    ((not (string-contains \".\" (substring file_name 0 1)))\
    \ \"No\")\n    ((not (string-match \"^[a-z].+\" file_name)) \"No\")\n    ((= (string-match\
    \ \"^[a-z].+\" file_name) (string-length file_name))\n    (\"Yes\")))\n</code>\n\
    <|/ a tags=racket,scheme |>\n<| c |>\nThank you! That is much better. I forgot\
    \ to put that I am using the Racket interpreter, so I can't use any functions\
    \ that are part of the Racket language\n<|/ c |>\n<| c |>\nThen you should probably\
    \ state that in the question or tags.\n<|/ c |>\n<| c |>\nI did. I thought it\
    \ would be easy to read it like that, but you're right, it is difficult to read\
    \ the way you wrote it. But thank you again!\n<|/ c |>\n<| a tags=racket,scheme\
    \ dscore=0 |>\nThis seems more like something to do with checking that file names\
    \ are correct (as opposed to checking that they are valid programs). In fact,\
    \ it's probably easier to just write a function that returns true if a given file\
    \ name is valid, and false if it is not.\nIf it is, then you can just write something\
    \ like\n<code>", "  (cond\n    [(empty? file_name) \"Invalid\"]\n    [(> (length\
    \ (string-ref file_name 0)) 3) \"Invalid\"]\n    [(equal? (substring file_name\
    \ 0 (char-code (first '(#x30 #x3A #x38 #x5B #x5C))) \n                   '(#x30\
    \ #x3A #x38 #x5B #x5C)) \n    \"Invalid\"]\n    [(equal? (substring file_name\
    \ 0 (char-code (last '(#x30 #x3A #x38 #x5B #x5C))) \n                   '(#x30\
    \ #x3A #x38 #x5B #x5C)) \n    \"Invalid\"]\n    [(equal? (substring file_name\
    \ (substring file_name 0 (char-code (first '(#x30 #x3A #x38 #x5B #x5C))) \n  \
    \                 '(#x30 #x3A #x38 #x5B #x5C)) \n     '(#x30 #x3A #x38 #x5B #x5C))\
    \ \"Yes\"]\n    [(equal? (substring file_name (substring file_name 0 (char-code\
    \ (last '(#x30 #x3A #x38 #x5B #x5C))) \n                   '(#x30 #x3A #x38 #x5B\
    \ #x5C)) \n     '(#x30 #x3A #x38 #x5B #x5C)) \"No\"]\n    [else (file_name_check\
    \ file_name)]))\n", "  \n  ;; Write your code here\n  (cond \n    [(empty? file_name)\
    \ \"No\"]\n    [(= (count file_name) 3) \"No\"]\n    [(= (count file_name) 5)\
    \ \"No\"]\n    [(string-match (substring file_name 0 (char-code (first file_name)))\
    \ \"^[azA-Z]\") \"No\"]\n    [(= (length file_name) 1) \"No\"]\n    [(substring\
    \ file_name 0 (char-code (first file_name)) \"^[.]\"= \"No\"]\n    [else \"Yes\"\
    ]))\n", "  (cond\n    [(< 3 (string-length file_name))\n     (string-match \"\
    ^[0-9]+\" file_name)\n     (string-match \"\\.\" file_name)\n     (string-match\
    \ \"[a-z][a-zA-Z]\" file_name)\n     (string=? (substring (substring file_name\
    \ 0 2) (substring file_name 0 (string-length file_name) -1))) \n     \"Yes\"]\n\
    \    [else \n     (string-match \"^[a-z][a-zA-Z]\" file_name)\n     (string-match\
    \ \"\\.\" file_name)\n     (string-match \"[a-z][a-zA-Z]\" file_name)\n     (string-match\
    \ \"[0-9]+\" file_name)\n     (string-match \"\\.txt\" file_name)\n     (string-match\
    \ \"\\.exe\" file_name)\n     (string-match \"\\.dll\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.exe\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.bat\" file_name)\n     (string-match\
    \ \"\\.bat\" file_name)\n     (string-match \"\\.", "  (cond ((< (string-length\
    \ file_name) 3) (list file_name))\n        ((string-match (regexp-quote (substring\
    \ file_name 0 2)) \".\") (list file_name))\n        ((not (empty? (substring file_name\
    \ 0 1))) (list file_name))\n        ((not (string-match (regexp-quote (substring\
    \ file_name 0 1)) \".\") (list file_name))\n        (else (error \"Invalid file\
    \ name.\"))))\n</code>\n<|/ a |>\n<| c |>\nThank you for your help. I think I\
    \ am still running into trouble with the (define (file_name_check file_name) )\
    \ part of the code.\n<|/ c |>\n<| c |>\nI see you have another function `file_name-check`.\
    \ That will work as well. The point is that you define one more function `file_name_check`\
    \ which will call `file_name-check` with appropriate parameters.\n<|/ c |>\n<|\
    \ c |>\nThe function is already defined in `checker.rktd`. I think you didn't\
    \ read my comment in that file. You should remove that function definition from\
    \ the file and define it again in another file: `checker.rktd`. I edited my answer.\n\
    <|/ c |>\n<| c |>\nI actually have a checker.rktd file already. But I am trying\
    \ to run your code through DrRacket and it says that (error \"Invalid file name.\"\
    ) is undefined.\n<|/ c |>\n<| c |>\nThat makes no sense. Can you post the exact\
    \ error that you get?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#lang racket\n", " \
    \ (cond\n    ((string? file_name) (string-match #rx\"^[a-z][0-9]{3,}$\" file_name))\n\
    \    ((string? file_name) (string-match #rx\"^[^.].*\" file_name))\n    ((string?\
    \ file_name) (string-match #rx\"^[a-z].*\" file_name))\n    ((string? file_name)\
    \ (string-match #rx\"^[A-Z].*\" file_name))\n    (else false)))\n", "  (cond\n\
    \    [(= (length file_name) 0) \"No\"]\n    [(not (= (string-length (substring\
    \ file_name 0 (string-length file_name) -1)) 3))\n    \"No\"]\n    [(not (= (string-length\
    \ (substring file_name 0 (string-length file_name) -1)))\n    (= \"dot\" \n  \
    \  (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name) -1)))) \n    \"No\"]\n    [(and (= (substring file_name 0 (string-length\
    \ (substring file_name 0 (string-length file_name) -1)))\n    'a)\n    (not (=\
    \ (substring file_name 0 (string-length (substring file_name 0 (string-length\
    \ file_name) -1))) \n    'z))\n    \"No\"]\n    [(and (= (substring file_name\
    \ 0 (string-length (substring file_name 0 (string-length file_name) -1)))\n  \
    \  'A)\n    (not (= (substring file_name 0 (string-length (substring file_name\
    \ 0 (string-length file_name) -1))) \n    'Z))\n    \"No\"]\n    [(= \"txt\" (substring\
    \ file_name 0 (string-length (substring file_name 0 (string-length file_name)\
    \ -1)))\n    \"No\"]\n    [(= \"exe\" (substring file_name 0 (string-length (substring\
    \ file_name 0 (string-length file_name) -1)))\n    \"No\"]\n    [(= \"dll\" (substring\
    \ file_name 0 (string-length (substring file_name 0 (string-length file_name)\
    \ -1)))\n    \"No\"]\n    [else \"Yes\"]))\n</code>\n\nThe same goes for checking\
    \ if the file already exists:\n<code>", "  (cond\n    [(empty? file_name)\n  \
    \   (string->symbol \"No\")\n     (string->symbol \"No\")\n     (string->symbol\
    \ \"No\")]\n    [(string-match (first file_name) #\"[0-9]\") (string-match (substring\
    \ (first file_name) 0 3) \"[a-Z]\") (string-match #\"\\.\") (string->symbol \"\
    No\")\n     (string->symbol \"No\")]\n    [(symbol->string (string-match (first\
    \ file_name) #\"[0-9]\")) (symbol->string (string-match (substring (first file_name)\
    \ 0 3) \"[a-Z]\"))\n     (symbol->string #\"\\.\") (symbol->string #\"[^\\.]\"\
    )]\n    [(symbol->string (string-match (first file_name) #\"[0-9]\")) (symbol->string\
    \ (string-match (substring (first file_name) 0 3) \"[a-Z]\")) (symbol->string\
    \ #\"\\.\")\n     (symbol->string #\"\\.\") (symbol->string #\"\\.\")]))\n", " \
    \ (cond\n    ((< 3 (length (string-match #rx[0-999] file_name)))\n    (cond ((string-match\
    \ #rx[0] file_name)\n    (string-match #rx[a-z][A-Z] file_name))\n    ((string-match\
    \ #rx[-][a-z][A-Z] file_name)\n    (string-match #rx[a-z][A-Z] file_name))\n \
    \   ((string-match #rx[.] file_name)\n    (string-match #rx[.] file_name))\n \
    \   ((string-match #rx[.][a-z][A-Z] file_name)\n    (string-match #rx[.][a-z][A-Z]\
    \ file_name))\n    ((string-match #rx[.][a-z][A-Z] file_name)\n    (string-match\
    \ #rx[.][a-z][A-Z] file_name))\n    ((string-match #rx[.][a-z][A-Z] file_name)\n\
    \    (string-match #rx[.][a-z][A-Z] file_name))\n    ((string-match #rx[.][a-z][A-Z]\
    \ file_name)\n    (string-match #rx[.][a-z][A-Z] file_name))\n    ((string-match\
    \ #rx[.][a-z][A-Z] file_name)\n    (string-match #rx[.][a-z][A-Z] file_name))\n\
    \    ((string-match #rx[.][a-z][A-Z] file_name)\n    (string-match #rx[.][a-z][A-Z]\
    \ file_name))\n    ((string-match #rx[.][a-z][A-Z] file_name)\n    (string-match\
    \ #rx[.][a-z][A-Z] file_name))\n    ((string-match #rx[.][a-z][A-Z] file_name)\n\
    \    (string-match #rx[.][a-z][A-Z] file_name))\n    ((string-match #rx[.][a-z][A-Z]\
    \ file_name)\n    (string-match #rx[.][a-z][A-Z] file_name))\n    ((string-match\
    \ #rx[.][a-z][A-Z] file_name)\n    (string-match #rx[.][a-z][A-Z] file_name))\n\
    \    ((string-match #rx[.][a-z][A-Z] file_name)\n    (string-match #rx[.][a-z][A-Z]\
    \ file_name))\n    ((string-match #rx[.][a-z][A-Z] file_name)\n    (string-match\
    \ #rx[.][a-z][A-Z] file_name))\n    ((string-match #rx[.][a-z][A-Z] file_name)\n\
    \    (string-match #rx[.][a-z][A-Z] file_name))\n    ((string-match #rx[.][a-z][A-Z]\
    \ file_name)\n    (string-match #rx[.][a-z][A-Z] file_name))\n    ((string-match\
    \ #rx[.][a-z][A-Z] file_name)\n    (string-match #rx[.][a-z][A-Z] file_name))\n\
    \    ((string-match #rx[.][a-z][A-Z] file_name)\n    (string-match #rx[.][a-z][",
  "  (define (check_condition condition str)\n    (cond\n      ((equal? condition\
    \ false) false)\n      ((equal? condition (equal? (string->list str) '())) true)\n\
    \      (else (cond\n               ((or (not (string->list? str))\n          \
    \         (not (string=? (car str) \".\"))\n                   (not (string=?\
    \ (string-ref-char str 0) #\\a))\n                   (not (string=? (string-ref-char\
    \ str 1) #\\z))\n                   (not (string=? (string-ref-char str 2) #\\\
    A))\n                   (not (string=? (string-ref-char str 3) #\\Z))\n      \
    \             (not (string=? (string-ref-char str 4) '('))\n                 \
    \  (not (string=? (string-ref-char str 5) ')'))\n                   (not (string=?\
    \ (string-ref-char str 6) '['))\n                   (not (string=? (string-ref-char\
    \ str 7) ']'))\n                   (not (string=? (string-ref-char str 8) '{'))\n\
    \                   (not (string=? (string-ref-char str 9) '}'))\n           \
    \        (not (string=? (string-ref-char str 10) '\\t'))\n                   (not\
    \ (string=? (string-ref-char str 11) '\\n'))\n                   (not (string=?\
    \ (string-ref-char str 12) '\\r'))\n                   (not (string=? (string-ref-char\
    \ str 13) '\\v'))\n                   (not (string=? (string-ref-char str 14)\
    \ '\\f')))\n               (else false)))\n    )\n  )\n  (check-condition (< (length\
    \ file_name) 4) \"File name too long\")\n  (check-condition (< (length (string-ref-char\
    \ file_name 0) #\\a)) 1 \"File name must start with an latin letter\")\n  (check-condition\
    \ (< (length (string-ref-char file_name 1) #\\z)) 1 \"File name must start with\
    \ an latin letter\")\n  (check-condition (< (length (string-ref-char file_name\
    \ 2) #\\A)) 1 \"File name must start with an latin letter\")\n  (check-condition\
    \ (< (length (string-ref-char file_name 3) #\\Z)) 1 \"File name must start with\
    \ an latin letter\")\n  (check-condition (< (length (string-ref-char file_name\
    \ 4)) 1) \"File name must not contain more than one dot\")\n  (check-condition\
    \ (< (length (string-ref-char file_name 5)) 1) \"File name must not contain more\
    \ than one dot\")", "  (let ([ch (char->integer (char->string file_name))])\n\
    \    (cond (> 3\n           file_name\n           (string->symbol (string->string\
    \ file_name)))\n          ((char->string file_name)\n           (string->symbol\
    \ (string->string file_name)))\n          (else (string->symbol (string->string\
    \ file_name)))))\n", "  (cond\n    [(<= (length file_name) 3) 'Yes]\n    [(= (substring\
    \ file_name 0 (- (length file_name) 1)) 'a) (= 'z (substring file_name 1 (- (length\
    \ file_name) 1))) (= 'A (substring file_name 1 (- (length file_name) 1)))]\n \
    \   [(= (substring file_name 0 (- (length file_name) 1)) 'A) (= 'z (substring\
    \ file_name 1 (- (length file_name) 1))) (= 'A (substring file_name 1 (- (length\
    \ file_name) 1)))]\n    [(= (substring file_name 0 (- (length file_name) 1)) 'z)\
    \ (= 'A (substring file_name 1 (- (length file_name) 1))) (= 'A (substring file_name\
    \ 1 (- (length file_name) 1)))]\n    [else 'No]))\n", "  (let ([file_txt (file-name\
    \ file_name)]\n        [file_txt_len (length file_txt)]\n        [dot_cnt (file-name\
    \ (file-name file_name) '-' 1 'length)]\n        [dot_dot_cnt (file-name (file-name\
    \ file_name) '-' 2 'length)]\n        [dot_dot_dot_cnt (file-name (file-name file_name)\
    \ '-' 3 'length)]\n        [char_count (file-name (file-name file_name) '-' 1\
    \ 'length)]\n        [name_valid?\n         (string= (file-name file_name) \n\
    \                   (string->char\n                    (string->list \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\
    )))]\n    [let\n         ([(file_name (file_name-string file_name))]\n       \
    \   [\n           (cond\n             [(= file_txt_len 1) name_valid? \n     \
    \          (set! name_valid? false)]\n             [(< file_txt_len 3)\n     \
    \          (set! name_valid? false)]\n             [(< dot_cnt 3)\n          \
    \     (set! name_valid? false)]\n             [(< dot_dot_cnt 3)\n           \
    \    (set! name_valid? false)]\n             [(< dot_dot_dot_cnt 3)\n        \
    \       (set! name_valid? false)]\n             [(< char_count 3)\n          \
    \     (set! name_valid? false)]\n             [(< name_valid? false)\n       \
    \        (set! name_valid? (string= (file-name file_name) \n                 \
    \                             (file->char->string file_txt_len))))\n         \
    \   ])])\nname_valid?))\n", "  (cond\n    [(empty? file_name)\n      \"No\"]\n\
    \    [(>= (count file_name) 3)\n      \"No\"]\n    [(equal? (substring file_name\
    \ 0 2) (substring 'a' (first (reverse file_name)))) \n     (file_name_check (substring\
    \ file_name 3))]\n    [(equal? (substring file_name 0 2) (substring 'A' (first\
    \ (reverse file_name)))) \n     (file_name_check (substring file_name 3))]\n \
    \   [else\n      \"Yes\"]))", "  (cond\n    ((> (string-length file_name) 3) \"\
    Too many digits\")\n    ((string=? (substring file_name 0 (string- 0 file_name)\
    \ ) \"dot\") \"Invalid dot\")\n    ((string=? (substring file_name 0 1 (string-length\
    \ file_name)) \"digit\") \"Invalid char\")\n    ((char=? (substring file_name\
    \ 0 1 (string-length file_name)) #\\a) \"Invalid char\")\n    ((char=? (substring\
    \ file_name 0 1 (string-length file_name)) #\\A) \n     \"Invalid char\")\n  \
    \  ((char=? (substring file_name 0 1 (string-length file_name)) #\\Z) \n     \"\
    Invalid char\")\n    ((char=? (substring file_name 0 1 (string-length file_name))\
    \ #\\z) \n     \"Invalid char\")\n    ((char=? (substring file_name 0 1 (string-length\
    \ file_name)) #\\0) \n     \"Invalid char\")\n    ((char=? (substring file_name\
    \ 0 1 (string-length file_name)) #\\9) \n     \"Invalid char\")\n    ((char=?\
    \ (substring file_name 0 1 (string-length file_name)) #\\D) \n     \"Invalid char\"\
    )\n    ((char=? (substring file_name 0 1 (string-length file_name)) #\\d) \n \
    \    \"Invalid char\")\n    ((char=? (substring file_name 0 1 (string-length file_name))\
    \ #\\s) \n     \"Invalid char\")\n    ((char=? (substring file_name 0 1 (string-length\
    \ file_name)) #\\W) \n     \"Invalid char\")\n    ((char=? (substring file_name\
    \ 0 1 (string-length file_name)) #\\w) \n     \"Invalid char\")\n    ((char=?\
    \ (substring file_name 0 1 (string-length file_name)) #\\p) \n     \"Invalid char\"\
    )\n    ((char=? (substring file_name 0 1 (string-length file_name)) #\\P) \n \
    \    \"Invalid char\")\n    ((char=? (substring file_name 0 1 (string-length file_name))\
    \ #\\r) \n     \"Invalid char\")\n    ((char=? (substring file_name 0 1 (string-length\
    \ file_name)) #\\W) \n     \"Invalid char\")\n    ((char=? (substring file_name\
    \ 0 1 (string-length file_name)) #\\s) \n     \"Invalid char\")\n    ((char=?\
    \ (substring file_name 0 1 (string-length file_name)) #\\W) \n     \"Invalid char\"\
    )\n    ((char=? (substring file_name 0 1 (string-length file_name)) #\\e) \n \
    \    \"Invalid char\")\n    ((char=? (substring file_name 0 1 (string-length file_name))\
    \ #\\E) \n     \"Invalid char\")\n    ((char", "  (cond\n    [(= (length file_name)\
    \ 3) \"Yes\"]\n    [(string-char-subset? (string-ref file_name 0 (string-length\
    \ file_name)) #\\0)\n     (cond\n       [(string= (substring file_name 0 1) \"\
    .\") \"Yes\"]\n       [else \"No\"]\n       )]\n    [(string-char-subset? (substring\
    \ file_name 0 1) #\\a)\n     (cond\n       [(string= (substring file_name 0 2)\
    \ \".\") \"Yes\"]\n       [else \"No\"]\n       )]\n    [(string-char-subset?\
    \ (substring file_name 0 1) #\\z)\n     (cond\n       [(string= (substring file_name\
    \ 0 2) \".\") \"Yes\"]\n       [else \"No\"]\n       )]\n    [(string-char-subset?\
    \ (substring file_name 0 1) #\\A)\n     (cond\n       [(string= (substring file_name\
    \ 0 2) \".\") \"Yes\"]\n       [else \"No\"]\n       )]\n    [else (cond\n   \
    \        [(string= (substring file_name 0 1) \".\") \"No\"]\n           [else\
    \ (cond \n                 [(string= (substring file_name 0 2) \".\") \"No\"]\n\
    \                 [else (file_name_check (substring file_name 1 3))])])]))\n",
  "  (cond\n    [(< (length file_name) 3) \"invalid.\"]\n    [(string-match \"[Aa][Zz][a-z]\"\
    \ file_name) \"invalid.\"]\n    [(substring (substring file_name 0 2) 0) \"invalid.\"\
    ]\n    [(string-match \"[a-z][a-z][a-z].txt\" file_name) \"valid\"]\n    [else\
    \ \"invalid.\"]\n  )\n)\n", "  (let ((valid_file (check-file_name? file_name)))\n\
    \    (if (not valid_file)\n        'No\n        'Yes)))\n", "  (cond\n    [(<\
    \ (string-length file_name) 3) \"File name is too short\"\n     (and (not (= (string-index\
    \ file_name 0 \"0123456789\")) \n           (= (string-index file_name 0 \"0123456789\"\
    ) 0 \n                (string-index file_name 0 \"0123456789\") \"aA\"))\n   \
    \       (not (= (string-index file_name 0 \".\")\n             (string-index file_name\
    \ 0 \".\") \"aA\"))\n          (not (= (string-index file_name 1 \"aA\") \".\"\
    ))\n          (not (= (string-index file_name 1 \"aA\") \".\") \"aA\"))]\n   \
    \ [(= (string-length file_name) 3) \"File name contains more than three digits\"\
    \n     \"No\"]\n    [(string-ref file_name 0 \"0123456789\") \"File name contains\
    \ more than three digits\"\n     \"No\"]\n    [(string-ref file_name 0 \".\")\
    \ \"File name contains more than one dot\"\n     \"No\"]\n    [(string-ref file_name\
    \ 0 \".\") \"File name contains more than one dot\"\n     \"No\"]\n    [(string-ref\
    \ file_name 0 \".\") \"File name contains more than one dot\"\n     \"No\"]\n\
    \    [(string-index file_name 0 \"aA\") \"File name contains more than one dot\"\
    \n     \"No\"]\n    [(string-index file_name 0 \"aA\") \"File name contains more\
    \ than one dot\"\n     \"No\"]\n    [(= (string-index file_name 0 \"aA\") \".\"\
    ) \"File name contains more than one dot\"\n     \"No\"]\n    [(= (string-index\
    \ file_name 0 \"aA\") \".\") \"File name contains more than one dot\"\n     \"\
    No\"]\n    [(= (string-index file_name 0 \"aA\") \".\") \"File name contains more\
    \ than one dot\"\n     \"No\"]\n    [(string-index file_name 0 \"aA\") \".\" \"\
    File name contains more than one dot\"\n     \"No\"]\n    [(= (string-index file_name\
    \ 0 \"aA\") \".\") \"File name contains more than one dot\"\n     \"No\"]\n  \
    \  [(string-index file_name 0 \"aA\") \".\" \"File name contains more than one\
    \ dot\"\n     \"No\"]\n    [(string-index file_name 0 \"aA\") \".\" \"File name\
    \ contains more than one dot\"\n     \"No\"]\n    [(string-index file_name 0 \"\
    aA\") \".\" \"File name contains more than one dot\"\n     \"No\"]\n    [(string-index\
    \ file_name 0 \"aA\") \".\" \"File name contains more than one dot\"\n     \"\
    No\"]\n    [(string-index ", "  (cond\n    [(<= (file-length file_name) 3) (return\
    \ 'Yes)]\n    [(equal? (first file_name) '#\\. #\\.)\n     (if (equal? (second\
    \ file_name) 'exe)\n         (return 'Yes)\n         (return 'No))\n     ]\n \
    \   [(equal? (first file_name) '#\\. #\\.)\n     (if (equal? (second file_name)\
    \ 'dll)\n         (return 'Yes)\n         (return 'No))\n     ]\n    [(equal?\
    \ (first file_name) '#\\. #\\.)\n     (if (equal? (second file_name) 'txt)\n \
    \        (return 'Yes)\n         (return 'No))\n     ]\n    [(equal? (first file_name)\
    \ '#\\. #\\.)\n     (if (equal? (second file_name) 'exe)\n         (return 'Yes)\n\
    \         (return 'No))\n     ]\n    [(equal? (first file_name) '#\\. #\\.)\n\
    \     (if (equal? (second file_name) 'dll)\n         (return 'Yes)\n         (return\
    \ 'No))\n     ]\n    [else (return 'No)]\n  ))\n", "  (cond\n    [(empty? file_name)\n\
    \      'No]\n    [(not (list? (substring file_name 0 3)))\n      (cond\n     \
    \   [(string= (substring file_name 0 1) '?)\n          'No]\n        [(string=\
    \ (substring file_name 0 1) '!)\n          'No]\n        [(string= (substring\
    \ file_name 0 1) '^)\n          'No]\n        [(string= (substring file_name 0\
    \ 1) '%)\n          'No]\n        [(string= (substring file_name 0 1) '&)\n  \
    \        'No]\n        [(string= (substring file_name 0 1) '_)\n          'No]\n\
    \        [(string= (substring file_name 0 1) '*)\n          'No]\n        [(string=\
    \ (substring file_name 0 1) '#) \n          'No]\n        [(string= (substring\
    \ file_name 0 1) '~)\n          'No]\n        [(string= (substring file_name 0\
    \ 1) '#;)\n          'No]\n        [(string= (substring file_name 0 1) '$)\n \
    \         'No]\n        [(string= (substring file_name 0 1) '%)\n          'No]\n\
    \        [(string= (substring file_name 0 1) '=)\n          'No]\n        [(string=\
    \ (substring file_name 0 1) '?)\n          'No]\n        [(string= (substring\
    \ file_name 0 1) '@)\n          'No]\n        [(string= (substring file_name 0\
    \ 1) '&)\n          'No]\n        [(string= (substring file_name 0 1) '@)\n  \
    \        'No]\n        [(string= (substring file_name 0 1) '|)\n          'No]\n\
    \        [(string= (substring file_name 0 1) '#;)\n          'No]\n        [(string=\
    \ (substring file_name 0 1) '^)\n          'No]\n        [(string= (substring\
    \ file_name 0 1) '#)\n          'No]\n        [(string= (substring file_name 0\
    \ 1) '%)\n          'No]\n        [(string= (substring file_name 0 1) '[)\n  \
    \        'No]\n        [(string= (substring file_name 0 1) '#;)\n          'No]\n\
    \        [(string= (substring file_name 0 1) '&)\n          'No]\n        [(string=\
    \ (substring file_name 0 1) '@)\n          'No]\n        [(string= (substring\
    \ file_name 0 1) '(#)\n          'No]\n        [(string= ", "  (cond\n    ((and\
    \ (string-length file_name) (string-match #rx\"^[A-z0-9]+\") (string-match #rx\"\
    ^.\") (string-match #rx\"^[a-zA-z]\"))\n      (cond\n        ((string-match #rx\"\
    ^[a-zA-z]*\\.(txt|exe|dll)$\" file_name)\n         'Yes)\n        ('No)))\n  \
    \  ((and (string-length file_name) (string-match #rx\"^[A-z0-9]+\") (string-match\
    \ #rx\"^\\.\"))\n      (cond\n        ((string-match #rx\"^[a-zA-z].*\\.(txt|exe|dll)$\"\
    \ file_name)\n         'Yes)\n        ('No)))\n    ((and (string-length file_name)\
    \ (string-match #rx\"^[A-z0-9]+\") (string-match #rx\"^\\.\"))\n      (cond\n\
    \        ((string-match #rx\"^[a-zA-z].*\\.(txt|exe|dll)$\" file_name)\n     \
    \    'No)\n        ('Yes)))\n    ((and (string-length file_name) (string-match\
    \ #rx\"^[A-z0-9]+\") (string-match #rx\"^\\.\"))\n      (cond\n        ((string-match\
    \ #rx\"^[a-zA-z].*\\.(txt|exe|dll)$\" file_name)\n         'Yes)\n        ('No)))\n\
    \    ((and (string-length file_name) (string-match #rx\"^[A-z0-9]+\"))\n     \
    \ (cond\n        ((string-match #rx\"^[a-zA-z].*\\.(txt|exe|dll)$\" file_name)\n\
    \         'Yes)\n        ('No)))\n    ((and (string-length file_name) (string-match\
    \ #rx\"^[A-z0-9]+\"))\n      (cond\n        ((string-match #rx\"^[a-zA-z].*\\\
    .(txt|exe|dll)$\" file_name)\n         'No)\n        ('Yes)))\n    ((and (string-length\
    \ file_name) (string-match #rx\"^[A-z0-9]+\"))\n      (cond\n        ((string-match\
    \ #rx\"^[a-zA-z].*\\.(txt|exe|dll)$\" file_name)\n         'Yes)\n        ('No)))\n\
    \    ((and (string-length file_name) (string-match #rx\"^[A-z0-9]+\"))\n     \
    \ (cond\n        ((string-match #rx\"^[a-zA-z].*\\.(txt|exe|dll)$\" file_name)\n\
    \         'No)\n        ('Yes)))\n    ((and (string-length file_name) (string-match\
    \ #rx\"^[", "  (cond\n    [(empty? file_name) \"No\"]\n    [(string-match? \"\
    ^[0-9]+$\" file_name) \"No\"]\n    [(string-match? \"^[a-z]+\\.[a-z]+$\" file_name)\
    \ \"No\"]\n    [(string-match? \"^[a-z]+\\.\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond [(and (= (length (string-ref-all file_name)) 4) \n      \
    \      (= (string-ref-at (string-ref-all file_name) -1) ?.)\n            (string=?\
    \ (substring (string-ref-all file_name) 0 1)\n                      (let ([letter\
    \ (char->integer (substring (string-ref-all file_name) 0 1))])\n             \
    \           (string=? (char->string letter)\n                                \
    \  (let ([letter (char->integer (substring (string-ref-all file_name) 1 1))])\n\
    \                                    (string=? (char->string letter)\n       \
    \                                       (let ([letter (char->integer (substring\
    \ (string-ref-all file_name) 2 1))])\n                                       \
    \         (string=? (char->string letter)\n                                  \
    \                        (\"txt\" \"exe\" \"dll\"))))))))\n        (\"No\")])\n\
    \  )\n", "  (= (string-length (string->list file_name)) 4)\n  (= (string-index\
    \ (string->list file_name) '.') 0)\n  (and (<= (string-index (string->list file_name)\
    \ 'a' 1)\n         (string-index (string->list file_name) 'z' -1))\n       (and\
    \ (<= (string-index (string->list file_name) 'A' 1)\n               (string-index\
    \ (string->list file_name) 'Z' -1))\n           (not (string-contains (string->list\
    \ file_name) \".\")))\n  (or (string=? (string->list file_name) \"txt\")\n   \
    \   (string=? (string->list file_name) \"exe\")\n      (string=? (string->list\
    \ file_name) \"dll\")))\n", "  (cond ((string=? file_name \"\") \"No\")\n    \
    \    ((char=? (string=? (string-index file_name 0) \"0123456789\") #\\dot) \"\"\
    )\n        ((char=? (string=? (string-index file_name 0) #\"a\" #\"z\") #\\alpha)\
    \ \"\")\n        ((string=? (string-index file_name 0) #\"A\" #\"Z\") \"\")\n\
    \        (else \"Yes\"))\n  )\n", "  (and (not (empty? file_name))\n       (not\
    \ (file-name file_name)\n           (string->list file_name)\n           (equal?\
    \ (substring file_name 0 3) \"..\")\n           (string->char (substring file_name\
    \ 0 1))\n           (string->char (substring file_name 2 1))\n           (string->char\
    \ (substring file_name 1 1))\n           (string->char (substring file_name 3\
    \ 1))\n           (equal? (substring file_name 4 'txt) (substring file_name 4\
    \ 'exe)\n               (substring file_name 4 'dll)))))\n", "  (let ((digits\
    \ (string-length (string-substring file_name 0 9))))\n    (cond ((= digits 3)\
    \ 'Yes)\n          ((and (number? (string-length file_name)) (string-substring\
    \ file_name 0 1)\n               (not (equal? (string-substring file_name 0 1)\
    \ \"\"))))\n          ((and (member (substring file_name 0 1) '(a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z))\n               (not (equal? (substring\
    \ file_name 0 1) \".\"))))\n          ((and (equal? (substring file_name 0 1)\
    \ \"a\") (equal? (substring file_name 0 2) \"z\"))\n               (not (equal?\
    \ (substring file_name 0 1) \"a\"))))\n          ((and (equal? (substring file_name\
    \ 0 1) \"A\") (equal? (substring file_name 0 2) \"Z\"))\n               (not (equal?\
    \ (substring file_name 0 1) \"A\"))))\n          ((and (equal? (substring file_name\
    \ 0 1) \"0\") (equal? (substring file_name 0 2) \"9\"))\n               (not (equal?\
    \ (substring file_name 0 1) \"0\"))))\n          ((and (equal? (substring file_name\
    \ 0 1) \".\") (equal? (substring file_name 0 2) \"z\"))\n               (not (equal?\
    \ (substring file_name 0 1) \".\"))))\n          ((and (equal? (substring file_name\
    \ 0 1) \".\") (equal? (substring file_name 0 2) \"Z\"))\n               (not (equal?\
    \ (substring file_name 0 1) \".\"))))\n          (else 'No))))\n", "  (cond\n\
    \    [(< (length file_name) 3) \"Too short\"]\n    [(= (substring file_name 0\
    \ 3) \"0\") \"No numbers\"]\n    [(= (substring file_name 0 1) \"a\") (and (<=\
    \ (length file_name) (substring file_name 0 2)) (not (= (substring file_name 2\
    \ 2) \".\")))]\n    [(= (substring file_name 0 1) \"A\") (and (<= (length file_name)\
    \ (substring file_name 0 2)) (not (= (substring file_name 2 2) \".\")))]\n   \
    \ [else\n     (let ([checked_substring (substring file_name 0 2)])\n       (cond\n\
    \         [(= (substring file_name 0 1) \"a\") (or (= 'A' (substring checked_substring\
    \ 0 1)) \n                                          (= 'a' (substring checked_substring\
    \ 0 1)))]\n         [(= (substring file_name 0 1) \"A\") (or (= 'A' (substring\
    \ checked_substring 0 1)) \n                                          (= 'a' (substring\
    \ checked_substring 0 1)))]\n         [(= (substring file_name 0 1) \"0\") \"\
    No numbers\"]\n         [else\n          (cond\n            [(= (substring file_name\
    \ 0 1) \"e\") (and (<= (length file_name) (substring file_name 0 2)) (not (= (substring\
    \ file_name 2 2) \".\")))]\n            [(= (substring file_name 0 1) \"E\") (and\
    \ (<= (length file_name) (substring file_name 0 2)) (not (= (substring file_name\
    \ 2 2) \".\")))]\n            [else\n             (let ([checked_substring (substring\
    \ file_name 0 2)])\n               (cond\n                 [(= (substring file_name\
    \ 0 1) \"e\") (or (= 'E' (substring checked_substring 0 1)) \n               \
    \                                     (= 'e' (substring checked_substring 0 1)))]\n\
    \                 [(= (substring file_name 0 1) \"E\") (or (= 'E' (substring checked_substring\
    \ 0 1)) \n                                                    (= 'e' (substring\
    \ checked_substring 0 1)))]\n                 [else\n                  \"Yes\"\
    ]))))]))]))\n", "  (cond\n    [(and (string-length file_name) <= 3) \"No\"]\n\
    \    [(or (not (string-match (string-ref file_name 0) #\\.))\n         (not (string-match\
    \ (string-ref file_name 0 1) #[a-z] [A-Z]))\n         (not (string-match (string-ref\
    \ file_name 0 2) \"[a-z] [A-Z] [0-9] [a-z] [A-Z] [0-9] [a-z] [A-Z]\"))\n     \
    \    \"No\"]\n    [else \"Yes\"]))\n", "  (cond ((= (length file_name) 0)\n  \
    \       'No)\n        ((char? (car file_name))\n         (char? (car file_name))\n\
    \         (char? (car file_name))\n         (file_name_check (cdr file_name)))\n\
    \        ((= (string-match \".\" (substring file_name 0 (string- (string-length\
    \ file_name)) 0))\n          (string-match \"[\\\\w]+\" file_name (substring file_name\
    \ 0 (string- (string-length file_name)) 0)))\n        (else\n         (file_name_check\
    \ (cdr file_name)))))\n", "  (cond\n    [(string-equal? (string-length file_name)\
    \ 3)\n     (string-contains file_name\n                     '(#\\0 #\\1 #\\2 #\\\
    3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V #\\W #\\X #\\Y #\\\
    Z))\n     (string-contains? file_name \".\")\n     (string=? (substring file_name\
    \ 0 (string-length file_name-1))\n               '(a-z A-Z 0-9 . _ ))\n     (string=?\
    \ (substring file_name (string-length file_name)-2)\n               '(tx exe dll\
    \ )\n               :start (string-length file_name) \n               :end 0\n\
    \               :case-fold #t)\n     (string-equal? file_name \"..\")\n     (string-equal?\
    \ file_name \".\")\n     (string-equal? file_name \"example.txt\")\n     (string-equal?\
    \ file_name \"1example.dll\")\n     (string-equal? file_name \"example\")\n  \
    \   (string-equal? file_name \"1example\")\n     (string-equal? file_name \"example.exe\"\
    )\n     (string-equal? file_name \"example.dll\")\n     (string-equal? file_name\
    \ \"example.exe.txt\")\n     (string-equal? file_name \"example.dll.txt\")\n \
    \    (string-equal? file_name \"example.exe.txt\")\n     (string-equal? file_name\
    \ \"example.dll.txt\")\n     (string-equal? file_name \"example.exe.txt\")\n \
    \    (string-equal? file_name \"example.dll.txt\")\n     (string-equal? file_name\
    \ \"example.exe.txt\")\n     (string-equal? file_name \"example.dll.txt\")\n \
    \    (string-equal? file_name \"example.txt\")\n     (string-equal? file_name\
    \ \"1example.txt\")\n     (string-equal? file_name \"example.txt\")\n     (string-equal?\
    \ file_name \"1example.txt\")\n     (string-equal? file_name \"example.txt\")\n\
    \     (string-equal? file_name \"1example.txt\")\n     (string-equal? file_name\
    \ \"example.txt\")\n     (string-equal? file_name \"1example.txt\")\n     (string-equal?\
    \ file_name \"example.txt\")\n     (string-equal? file_name \"1example.txt\")\n\
    \     (string-equal? file_name \"", "  (cond\n    ((= (length (string-length file_name))\
    \ 3)\n     (string-match \"^[a-z][0-9]\" file_name))\n    ((= (string-match (substring\
    \ file_name 0 1) \"\\.\") 0)\n     (string-match (substring file_name 0 1) \"\
    [a-zA-z]\"))\n    ((string= (string-match (substring file_name 0 1) \"\\.\") \"\
    ..\")\n     (string-match (substring file_name 0 1) \"[a-zA-z]\"))\n    ((string=\
    \ (string-match (substring file_name 0 1) \"\\.\") \".\")\n     (string-match\
    \ file_name \"[a-zA-z]\"))\n    (else \"No\"))\n", "  (cond \n    ((string-length\
    \ file_name) 0)\n    ((string= file_name \"\")\n     \"No\")\n    ((string= file_name\n\
    \              (file-name (file-name file_name)))\n     \"Yes\")\n    ((string=\
    \ file_name\n              (file-name (file-name file_name)))\n     ((list? (file-name\
    \ file_name))\n      (file-name (file-name file_name)))\n    ((string= file_name\n\
    \              (file-name (file-name file_name)))\n     ((list? (file-name file_name))\n\
    \      (or (file_name_check (first file_name))\n          (file_name_check (second\
    \ file_name))\n          (file_name_check (third file_name))))\n    ((string=\
    \ file_name\n              (file-name (file-name file_name)))\n     ((list? (file-name\
    \ file_name))\n      (or (file_name_check (first file_name))\n          (file_name_check\
    \ (second file_name))\n          (file_name_check (third file_name))))\n    ((string=\
    \ file_name\n              (file-name (file-name file_name)))\n     ((list? (file-name\
    \ file_name))\n      (or (file_name_check (first file_name))\n          (file_name_check\
    \ (second file_name))\n          (file_name_check (third file_name))))\n    ((string=\
    \ file_name\n              (file-name (file-name file_name)))\n     ((list? (file-name\
    \ file_name))\n      (or (file_name_check (first file_name))\n          (file_name_check\
    \ (second file_name))\n          (file_name_check (third file_name))))\n    ((string=\
    \ file_name\n              (file-name (file-name file_name)))\n     ((list? (file-name\
    \ file_name))\n      (or (file_name_check (first file_name))\n          (file_name_check\
    \ (second file_name))\n          (file_name_check (third file_name))))\n    ((string=\
    \ file_name\n              (file-name (file-name file_name)))\n     ((list? (file-name\
    \ file_name))\n      (or (file_name_check (first file_name))\n          (file_name_check\
    \ (second file_name))\n          (file_name_check (third file_name))))\n    ((string=\
    \ file_name\n              (file-name (file-name file_name)))\n     ((list? (file-name\
    \ file_name))\n      (or (file_name_check (first file_name))\n          (file_name_check\
    \ (second file_name))\n          (file_name_check (third file_name))))\n    ((string=\
    \ file_name\n              (file-name (file-name file_name)))\n     ((list? (file-name\
    \ file_name))\n      (or (file_name_check (first file_name))\n          (file_name_check\
    \ (second file_name))\n          (file_name_check (third file_name))))\n    ((string=\
    \ file_name\n", "  (cond\n    [(= (file-length file_name) 0) \"No\"]\n    [(equal?\
    \ (substring file_name 0 2) \".\") \"No\"]\n    [(equal? (substring file_name\
    \ 0 1) \"a\") \"No\"]\n    [(equal? (substring file_name 0 1) \"A\") \"No\"]\n\
    \    [(= (length file_name) 3) \"No\"]\n    [(= (substring file_name 0 1) (substring\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" 0 1)) \"No\"]\n   \
    \ [(= (substring file_name 0 1) (substring \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \ 0 2)) \"No\"]\n    [else \"Yes\"]))", "  (cond [(< 3 (length file_name))\n \
    \        \"Invalid file name\"\n         false\n         ]\n        [(= (length\
    \ file_name) 3)\n         \"Invalid file name\"\n         false\n         ]\n\
    \        [(equal? (substring file_name (- 3 file_name)) \".\")\n         \"Invalid\
    \ file name\"\n         false\n         ]\n        [(or (equal? (substring file_name\
    \ 0 1) \"a\")\n             (equal? (substring file_name 0 1) \"A\"))\n      \
    \   \"Invalid file name\"\n         false\n         ]\n        [(or (equal? (substring\
    \ file_name 1 2) \"b\")\n             (equal? (substring file_name 1 2) \"B\"\
    ))\n         \"Invalid file name\"\n         false\n         ]\n        [(or (equal?\
    \ (substring file_name 1 2) \"c\")\n             (equal? (substring file_name\
    \ 1 2) \"C\"))\n         \"Invalid file name\"\n         false\n         ]\n \
    \       [(or (equal? (substring file_name 1 2) \"d\")\n             (equal? (substring\
    \ file_name 1 2) \"D\"))\n         \"Invalid file name\"\n         false\n   \
    \      ]\n        [(or (equal? (substring file_name 1 2) \"e\")\n            \
    \ (equal? (substring file_name 1 2) \"E\"))\n         \"Invalid file name\"\n\
    \         false\n         ]\n        [(or (equal? (substring file_name 1 2) \"\
    f\")\n             (equal? (substring file_name 1 2) \"F\"))\n         \"Invalid\
    \ file name\"\n         false\n         ]\n        [(or (equal? (substring file_name\
    \ 1 2) \"g\")\n             (equal? (substring file_name 1 2) \"G\"))\n      \
    \   \"Invalid file name\"\n         false\n         ]\n        [(or (equal? (substring\
    \ file_name 1 2) \"h\")\n             (equal? (substring file_name 1 2) \"H\"\
    ))\n         \"Invalid file name\"\n         false\n         ]\n        [(or (equal?\
    \ (substring file_name 1 2) \"i\")\n             (equal? (substring file_name\
    \ 1 2) \"I\"))\n         \"Invalid file name\"\n         false\n         ]\n \
    \       [(or (equal? (substring file_name 1 2) \"j\")\n             (equal? (substring\
    \ file_name 1 2) \"J\"))\n         \"Invalid file name\"\n         false\n   \
    \      ]\n        [(or (equal? (substring file_name 1 2) \"k\")\n            \
    \ (equal? (substring file_name 1 2) \"K\"))\n         \"Invalid file name\"\n\
    \         false\n         ]\n        [(or (equal? (sub", "  (cond\n    ((= (length\
    \ file_name) 3)\n     (eqv? (char->integer (substring file_name 0 2)) 9)\n   \
    \  (not (string-empty? file_name))\n     (char->integer (substring file_name 0\
    \ 1)) \n     (or (char->integer (substring file_name 0 1)) \n         (char->integer\
    \ (substring file_name 0 2)) \n         (char->integer (substring file_name 0\
    \ 3)) \n         (char->integer (substring file_name 0 4)) \n         (char->integer\
    \ (substring file_name 0 5)) \n         (char->integer (substring file_name 0\
    \ 6)) \n         (char->integer (substring file_name 0 7)) \n         (char->integer\
    \ (substring file_name 0 8)) \n         (char->integer (substring file_name 0\
    \ 9))\n         (char->integer (substring file_name 0 10)))\n     (not (char->integer\
    \ (substring file_name 0 1)) \n          (char->integer (substring file_name 0\
    \ 2)) \n          (char->integer (substring file_name 0 3)) \n          (char->integer\
    \ (substring file_name 0 4)) \n          (char->integer (substring file_name 0\
    \ 5)) \n          (char->integer (substring file_name 0 6)) \n          (char->integer\
    \ (substring file_name 0 7)) \n          (char->integer (substring file_name 0\
    \ 8)) \n          (char->integer (substring file_name 0 9))\n          (char->integer\
    \ (substring file_name 0 10)))\n     (not (char->integer (substring file_name\
    \ 0 1)) \n          (char->integer (substring file_name 0 2)) \n          (char->integer\
    \ (substring file_name 0 3)) \n          (char->integer (substring file_name 0\
    \ 4)) \n          (char->integer (substring file_name 0 5)) \n          (char->integer\
    \ (substring file_name 0 6)) \n          (char->integer (substring file_name 0\
    \ 7)) \n          (char->integer (substring file_name 0 8)) \n          (char->integer\
    \ (substring file_name 0 9))\n          (char->integer (substring file_name 0\
    \ 10)))\n     (not (char->integer (substring file_name 0 1)) \n          (char->integer\
    \ (substring file_name 0 2)) \n          (char->integer (substring file_name 0\
    \ 3)) \n          (char->integer (substring file_name 0 4)) \n          (char->integer\
    \ (substring file_name 0 5)) \n          (char->integer (substring file_", " \
    \ (let ([alphapet \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"])\n\
    \    (if (= (file-name file_name) (substring file_name 0 (string-length file_name)))\n\
    \        (string-match \"\\\\..*\" file_name) ; file ending with dot '.'\n   \
    \     (let ([dot (substring file_name 0 (string-length file_name))]) \n      \
    \    (cond\n            ((= (string-length dot) 0) ; file starting with a dot\n\
    \             (cond\n               ;; Examples of valid file names: (empty string,\
    \ non-empty, \n               ;; a dot, a dot and a letter):\n               ((=\
    \ (= dot \"\") (string-length file_name)) ; non-empty name\n               ((=\
    \ (= dot \"\") 0) \n                 ; a dot\n                 (cond\n       \
    \            ;; Example of valid file names: (empty string, non-empty, \n    \
    \               ;; a dot, a dot and a letter):\n                   ((= (= dot\
    \ \"\") (string-length file_name)) ; non-empty name\n                   ((= (=\
    \ dot \"\") 0) \n                     ; a dot\n                     (cond\n  \
    \                     ;; Example of valid file names: (empty string, non-empty,\
    \ \n                       ;; a dot, a dot and a letter):\n                  \
    \     ((= (= dot \"\") (string-length file_name)) ; non-empty name\n         \
    \              ((= (= dot \"\") 0) \n                         ; a dot\n      \
    \                   (cond\n                           ;; Examples of valid file\
    \ names: (empty string, non-empty, \n                           ;; a dot, a dot\
    \ and a letter):\n                           ((= (= dot \"\") (string-length file_name))\
    \ ; non-empty name\n                           ((= (= dot \"\") 0) \n        \
    \                    ; a dot\n                            (cond\n            \
    \                  ((= (string-length dot) 0) ; non-empty name\n             \
    \                  (cond\n                                ((= (= dot \"\") (string-length\
    \ file_name)) ; non-empty name\n                                (string-match\
    \ alphapet file_name) ; a letter\n                                (string-match\
    \ alphapet file_name) ; a letter\n                                (string-match\
    \ alphapet file_name) ; a letter\n                                (string-match\
    \ alphapet file_name) ; a letter\n                                (string-match\
    \ alphapet file_name) ; a letter\n                                (symbol=? file_name\
    \ \"#t\")) ; a file name\n                               (symbol=? file_name \"\
    #f\")))))))))))))))))))\n", "  (cond\n    [(string-length (file_name)) (bool-not\
    \ (symbol=? (substring file_name 0 3) \"00\"))]\n    [(symbol=? (substring file_name\
    \ 0 1) \"0\") (bool-not (symbol=? (substring file_name 0 1) \"0\"))]\n    [(symbol=?\
    \ (substring file_name 0 1) \"a\") (bool-not (symbol=? (substring file_name 0\
    \ 1) \"0\"))]\n    [(symbol=? (substring file_name 0 1) \"b\") (bool-not (symbol=?\
    \ (substring file_name 0 1) \"0\"))]\n    [(symbol=? (substring file_name 0 1)\
    \ \"c\") (bool-not (symbol=? (substring file_name 0 1) \"0\"))]\n    [(symbol=?\
    \ (substring file_name 0 1) \"d\") (bool-not (symbol=? (substring file_name 0\
    \ 1) \"0\"))]\n    [(symbol=? (substring file_name 0 1) \"e\") (bool-not (symbol=?\
    \ (substring file_name 0 1) \"0\"))]\n    [(symbol=? (substring file_name 0 1)\
    \ \"f\") (bool-not (symbol=? (substring file_name 0 1) \"0\"))]\n    [(symbol=?\
    \ (substring file_name 0 1) \"g\") (bool-not (symbol=? (substring file_name 0\
    \ 1) \"0\"))]\n    [(symbol=? (substring file_name 0 1) \"h\") (bool-not (symbol=?\
    \ (substring file_name 0 1) \"0\"))]\n    [(symbol=? (substring file_name 0 1)\
    \ \"i\") (bool-not (symbol=? (substring file_name 0 1) \"0\"))]\n    [(symbol=?\
    \ (substring file_name 0 1) \"j\") (bool-not (symbol=? (substring file_name 0\
    \ 1) \"0\"))]\n    [(symbol=? (substring file_name 0 1) \"k\") (bool-not (symbol=?\
    \ (substring file_name 0 1) \"0\"))]\n    [(symbol=? (substring file_name 0 1)\
    \ \"l\") (bool-not (symbol=? (substring file_name 0 1) \"0\"))]\n    [(symbol=?\
    \ (substring file_name 0 1) \"m\") (bool-not (symbol=? (substring file_name 0\
    \ 1) \"0\"))]\n    [(symbol=? (substring file_name 0 1) \"n\") (bool-not (symbol=?\
    \ (", "  (cond ((string-length (string-ref\n             (string-ref (substring\
    \ file_name 0 (string-length (string-ref file_name 0))) 0))) 3)\n        ((string=?\
    \ (substring file_name 0 (string-length (string-ref file_name 0))) \"..\")\n \
    \        (return \"No\"))\n        ((string=? (substring file_name 0 (string-length\
    \ (string-ref file_name 0))) \"#.#\")\n         (return \"No\"))\n        ((string=?\
    \ (substring file_name 0 (string-length (string-ref file_name 0))) \"#...\")\n\
    \         (return \"No\"))\n        ((string=? (substring file_name 0 (string-length\
    \ (string-ref file_name 0))) \"#..\")\n         (return \"No\"))\n        ((string=?\
    \ (substring file_name 0 (string-length (string-ref file_name 0))) \"#.\")\n \
    \        (return \"No\"))\n        ((string=? (substring file_name 0 (string-length\
    \ (string-ref file_name 0))) \"#.#\")\n         (return \"No\"))\n        ((string=?\
    \ (substring file_name 0 (string-length (string-ref file_name 0))) \"#...\")\n\
    \         (return \"No\"))\n        ((string=? (substring file_name 0 (string-length\
    \ (string-ref file_name 0))) \"#..\")\n         (return \"No\"))\n        ((string=?\
    \ (substring file_name 0 (string-length (string-ref file_name 0))) \"#.\")\n \
    \        (return \"No\"))\n        ((string=? (substring file_name 0 (string-length\
    \ (string-ref file_name 0))) \"#.#\")\n         (return \"No\"))\n        ((string=?\
    \ (substring file_name 0 (string-length (string-ref file_name 0))) \"#...\")\n\
    \         (return \"No\"))\n        ((string=? (substring file_name 0 (string-length\
    \ (string-ref file_name 0))) \"#..\")\n         (return \"No\"))\n        ((string=?\
    \ (substring file_name 0 (string-length (string-ref file_name 0))) \"#.\")\n \
    \        (return \"No\"))\n        ((string=? (substring file_name 0 (string-length\
    \ (string-ref file_name 0))) \"#.#\")\n         (return \"No\"))\n        ((string=?\
    \ (substring file_name 0 (string-length (string-ref file_name 0))) \"#...\")\n\
    \         (return \"No\"))\n        ((string=? (substring file_name 0 (string-length\
    \ (string-ref file_name 0))) \"#..\")\n         (return \"No\"))\n        ((string=?\
    \ (substring file_name 0 (string-length (string-ref file_name 0))) \"#.\")\n \
    \        (return \"No\"))\n        ", "  (cond\n    [(<= (file-name (file-name\
    \ file_name))\n        (string->number '(#\\1 #\\. #\\1))\n        'false)\n \
    \    (let* \n        [(check (string->list file_name))\n         (num-digit (lambda\
    \ (str)\n                       (string->number (string->string str)))\n     \
    \    (name-char (lambda (str)\n                      (string->list (string->string\
    \ str)))\n         (first (lambda (str)\n                   (string->list (string->string\
    \ str))\n                   (string->string str))\n         (last (lambda (str)\n\
    \                  (string->list (string->string str))\n                  (string->string\
    \ str))\n         (rest \n          (lambda (str)\n            (string->list (string->string\
    \ str))\n            (string->string str))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list file_name))\n\
    \         (check (string->list file_name))\n         (check (string->list ", " \
    \ (if (or (char-alphabet file_name) (char-numeric file_name))\n      (cond ((not\
    \ (string-match \"[0-9]\" file_name))\n             (cond ((not (string-match\
    \ \"[^A-Za-z]\" file_name))\n                    (and (string-match \"\\.\" file_name)\n\
    \                         (file-extension? file_name)))\n                (else\
    \ \"No\")))\n      (else \"No\")))\n", "  (cond\n    [(= (file-length file_name)\
    \ 3) \"Yes\"]\n    [(= (file-name file_name) \".\") \"No\"]\n    [(string-equal?\
    \ (substring file_name (length file_name-2)) \"\")\n    \"No\"]\n    [(let ((first\
    \ (substring file_name (length file_name-2)\n                          (length\
    \ file_name-2))\n                (rest (substring file_name (length file_name-2)\n\
    \                                    (length file_name-2))))\n         (= (string-char-alphabet\
    \ first)\n          (= (string-char-alphabet rest)\n           (= (substring first\
    \ 0 (string-length first))\n               (substring rest 0 (string-length rest)))))))\n\
    \     \"No\"]\n    [else (file_name_check file_name))))\n</code>\n<|/ a dscore=1\
    \ tags=racket,scheme,functional-programming |>\n<| c |>\nthank you! I'm pretty\
    \ new to racket and it's hard to read this code, can you explain it to me?\n<|/\
    \ c |>\n<| c |>\nI added comments to the code.  You can read more about `let`\
    \ [here](https://docs.racket-lang.org/guide/let.html).\n<|/ c |>\n<| c |>\nthank\
    \ you so much. the code is so much better now :)\n<|/ c |>\n<| c |>\nI added a\
    \ solution that doesn't rely on `racket`'s `file` module, and it can handle filenames\
    \ with `'\\N'`.\n<|/ c |>\n<| c |>\nThank you so much for the help! It works perfectly\
    \ now!\n<|/ c |>\n<| a |>\nThis solution doesn't depend on racket's file module,\
    \ and it can handle filenames with '\\N'.\n<code>", "  (let ([str (string)])\n\
    \    (set! str (string-ref file_name 0))\n    (if (not (string? str))\n      \
    \  'No\n      (let ([i (string-index str '.')])\n        (if (< i 0)\n       \
    \     'No\n          (let ([j (string-index str 0)])\n            (if (or (string=?\
    \ str '.') (= j 0))\n                'No\n                (cond [(<= (- i j) 3)\
    \ 'Yes]\n                      [(and (string=? (substring str 0 i) 'a') (string=?\
    \ (substring str 0 j) 'a'))\n                       (cond\n                  \
    \       [(string=? (substring str 0 i) 'a') (file_name_check (substring str 1\
    \ j))]\n                         [else (file_name_check (substring str 1 (+ i\
    \ 1)))])))])))\n    'No))\n", "  (cond\n    [(= (length file_name) 0) 'No]\n \
    \   [(and (<= 3 (string-length file_name)) (string-match \"^[A-z]\" file_name))\n\
    \     (if (string=? \"..\" (string-ref file_name 0 (string-length file_name)-1))\n\
    \         'No]\n    [(= (string-match \".\" file_name) 'None)\n     (if (string=?\
    \ \"exe\" file_name)\n         'No\n         (if (string=? \"dll\" file_name)\n\
    \             'No\n             (if (string=? \"txt\" file_name)\n           \
    \      'No\n                 (if (string=? \"png\" file_name)\n              \
    \       'No\n                     'No)))))])\n", "  (if (string-empty? file_name)\n\
    \      'No\n      (if (string-match-p #rx\"^[a-z]\" file_name)\n          'Yes\n\
    \          (if (string-match-p #rx\"^[0-9]{3}$\" file_name)\n              'Yes\n\
    \              'No))))\n", "  ;; Convert the file name to string and split it\
    \ at its last dot '.'\n  (string->symbol (string->list file_name)) \n  (and (substring\
    \ file_name 0 (- (string-length file_name) 1))\n       (not (= (string-substring\
    \ file_name 0 (- (string-length file_name) 1)) \".\"))\n       (char->boolean\
    \ (string->char (substring file_name 0 (- (string-length file_name) 1)))) \n \
    \      (= '(a b c d e f g h i j k l m n o p q r s t u v w x y z) \n         (string->char\
    \ (substring file_name 0 (- (string-length file_name) 1)))))\n  \n  ;; For each\
    \ substring after the dot, check whether the substring is\n  ;; acceptable\n \
    \ (let ((substring_len (- (string-length file_name) 1)))\n    (do ((i (+ substring_len\
    \ 1))\n         (substring_name (substring file_name 0 (- i 1))))\n        ((>\
    \ i 0)\n         (when (file_name_check substring_name)\n           (return (cons\
    \ \"Yes\" substring_name)))))))\n", "  (cond\n    ((and (= (string-length file_name)\
    \ 3) (= (string-index (char->string #\\0) file_name) 0))\n     (if (char->string=?\
    \ (substring file_name 0 1) #\\.)\n        (values \"Yes\" \"No\")\n        (values\
    \ \"No\" \"Yes\")))\n    ((and (= (string-length file_name) 1) (= (string-index\
    \ (char->string #\\0) file_name) 0))\n     (if (char->string=? (substring file_name\
    \ 0 1) #\\.)\n        (values \"Yes\" \"No\")\n        (values \"No\" \"Yes\"\
    )))\n    ((and (= (string-length file_name) 2) (= (string-index (char->string\
    \ #\\0) file_name) 0))\n     (if (char->string=? (substring file_name 0 1) #\\\
    .)\n        (values \"Yes\" \"No\")\n        (values \"No\" \"Yes\")))\n    ((and\
    \ (= (string-length file_name) 3) (= (string-index (char->string #\\0) file_name)\
    \ 0))\n     (if (char->string=? (substring file_name 0 1) #\\.)\n        (values\
    \ \"Yes\" \"No\")\n        (values \"No\" \"Yes\")))\n    ((char->string=? (substring\
    \ file_name 0 1) #\\a)\n     (if (char->string=? (substring file_name 0 2) #\\\
    z)\n        (values \"Yes\" \"No\")\n        (values \"No\" \"Yes\"))) ; 'a' should\
    \ be followed a letter from latin alphapet.\n    ((char->string=? (substring file_name\
    \ 0 1) #\\A)\n     (if (char->string=? (substring file_name 0 2) #\\Z)\n     \
    \   (values \"Yes\" \"No\")\n        (values \"No\" \"Yes\"))) ; 'A' should be\
    \ followed a letter from latin alphapet.\n    (else\n     (if (char->string=?\
    \ (substring file_name 0 2) #\\z)\n        (values \"Yes\" \"No\")\n        (values\
    \ \"No\" \"Yes\")))))\n", "  (cond ((string? file_name) #t)\n        ((< 3 (string-length\
    \ file_name))\n         (string-contains \"[1Z]\" (string-ref file_name 0 1)))\
    \ #t)\n        ((string-contains \".\" file_name) #t)\n        ((string-length\
    \ (string-ref file_name 0 0)) 1)\n        ((not (member (string-ref file_name\
    \ 0 0) \"abcdefghijklmnopqrstuvwxyz\")) #f)\n        ((not (member (string-ref\
    \ file_name 0 0) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) #f)\n        ((string-ref file_name\
    \ 0 (string->list 4)) \"exe\")\n        ((string-ref file_name 0 (string->list\
    \ 4)) \"dll\"))))\n", "  (cond\n    [(string-empty? file_name)\n      \"No\"]\n\
    \    [(string-equal? (substring (substring file_name 0 3) 0 1)\n             \
    \       (string-char 'a))\n      \"No\"]\n    [(string-equal? (substring (substring\
    \ file_name 0 3) 0 1)\n                    (string-char 'A))\n      \"No\"]\n\
    \    [(string-equal? (substring (substring file_name 0 3) 0 1)\n             \
    \       (string-char 'z))\n      \"No\"]\n    [(string-equal? (substring (substring\
    \ file_name 0 3) 0 1)\n                    (string-char 'Z))\n      \"No\"]\n\
    \    [(string-equal? (substring (substring file_name 0 3) 0 1)\n             \
    \       (string-char '0'))\n      \"No\"]\n    [(string-equal? (substring (substring\
    \ file_name 0 3) 0 1)\n                    (string-char '9'))\n      \"No\"]\n\
    \    [(equal? (substring file_name 0 4)\n               (string-char '.'))\n \
    \     \"No\"]\n    [(equal? (substring file_name 0 4)\n               (string-char\
    \ '.'))\n      \"No\"]\n    [(equal? (substring file_name 0 4)\n             \
    \  (string-char '.'))\n      \"No\"]\n    [(equal? (substring file_name 0 4)\n\
    \               (string-char '.'))\n      \"No\"]\n    [(equal? (substring file_name\
    \ 0 4)\n               (string-char '.'))\n      \"No\"]\n    [(equal? (substring\
    \ file_name 0 4)\n               (string-char '.'))\n      \"No\"]\n    [(equal?\
    \ (substring file_name 0 4)\n               (string-char '.'))\n      \"No\"]\n\
    \    [(equal? (substring file_name 0 4)\n               (string-char '.'))\n \
    \     \"No\"]\n    [(equal? (substring file_name 0 4)\n               (string-char\
    \ '.'))\n      \"No\"]\n    [(equal? (substring file_name 0 4)\n             \
    \  (string-char '.'))\n      \"No\"]\n    [(equal? (substring file_name 0 4)\n\
    \               (string-char '.'))\n      \"No\"]\n    [(equal? (substring file_name\
    \ 0 4)\n               (string-char '.'))\n      \"No\"]\n    [(equal? (substring\
    \ file_name 0 4)\n               (string-char '.'))\n      \"No\"]\n    [(equal?\
    \ (substring file_name 0 4)\n               (string-char '.'))\n      \"No\"]\n\
    \    [(equal? (substring file_name 0 4)", "  (let ([dot (substring file_name 0\
    \ (string-length file_name))])\n    (cond [(= (string-length dot) 0) \"No dot\
    \ in the file name\"]\n          [(substring dot 0 (string-length dot)) \"No empty\
    \ substring before the dot\"]\n          [(substring dot 0 (string-length dot))\
    \ \"The substring before the dot is not a letter\"]\n          [(or  (equal? (char->integer\
    \ ?a) (char->integer ?a)) \n                (equal? (char->integer ?A) (char->integer\
    \ ?A))) \"The substring before the dot is not an English letter\"]\n         \
    \ [else (let ([extension (substring file_name (string-length (substring file_name\
    \ 0 (string-length file_name)))])])\n                   (or (equal? (symbol-name\
    \ extension) \"exe\") \n                       (equal? (symbol-name extension)\
    \ \"dll\")\n                       (equal? (symbol-name extension) \"txt\")) \"\
    The substring after the dot is invalid. File names can only be 'txt', 'exe', 'dll'\"\
    ])))\n  (file_name-check file_name))\n  ", "  (cond\n    [(> (string-length file_name)\
    \ 3)\n     (let ([error (make-error \"File's name is too long\")])\n       (displayln\
    \ error)\n       error)]\n    [(string-equal? (string-ref file_name 0) (make-string\
    \ 1 '(#\\0)) false)\n     (let ([error (make-error \"File's name cannot start\
    \ with a '0' character\")])\n       (displayln error)\n       error)]\n    [(string-ref?\
    \ (string-ref file_name 1) '(#\\0)\n    (let ([error (make-error \"File's name\
    \ cannot start with a '0' character\")])\n      (displayln error)\n      error)]\n\
    \    [(and (> (string-length (substring file_name 0 3)) 1)\n          (string-ref?\
    \ (substring file_name 0 1) '(#\\0 #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\\
    . #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #\\. #", "  (cond\n    [(empty? file_name)\
    \ \"No\"]\n    [(string-char? file_name #\\0) \"No\"]\n    [(string-char? file_name\
    \ #\\9) #\"Yes\"]\n    [(string-char? file_name #\\a) #\"Yes\"]\n    [(string-char?\
    \ file_name #\\z) #\"Yes\"]\n    [(string-char? file_name #\\A) #\"Yes\"]\n  \
    \  [(string-char? file_name #\\Z) #\"Yes\"]\n    [(= (string-length file_name)\
    \ 3) \"No\"]\n    [(equal? (string-upcase file_name) (string-downcase file_name))\
    \ \"Yes\"]\n    [(equal? (substring file_name 0 1) (string-downcase (substring\
    \ file_name 0 1))) \"No\"]\n    [(equal? (substring file_name 0 2) (string-downcase\
    \ (substring file_name 0 2))) \"No\"]\n    [(equal? (substring file_name 0 3)\
    \ (string-downcase (substring file_name 0 3))) \"No\"]\n    [else (let ([substring\
    \ (substring file_name 0 1) (substring file_name 0 2)])\n            (equal? (substring\
    \ file_name 0 1) (string-downcase (substring file_name 0 1)))\n            (equal?\
    \ (substring file_name 0 2) (string-downcase (substring file_name 0 2)))\n   \
    \         (equal? (substring file_name 0 3) (string-downcase (substring file_name\
    \ 0 3)))\n            (equal? (substring file_name 0 4) (substring file_name 0\
    \ 4)))]))\n</code>\n<|/ a |>\n<| c |>\nI appreciate the help but I don't understand\
    \ what is wrong with my code. Could you please let me know what is wrong with\
    \ it? It works when I try it with other files and strings, but it didn't work\
    \ with the code I pasted. I thought I made everything correct, but it's not. I'm\
    \ new to Racket and I don't understand what's wrong with the code.\n<|/ c |>\n\
    <| c |>\nThe only thing i can think of is that the file isn't in the correct location.\
    \ Try changing it to `(file->string->path \"c:\\users\\user\\desktop\\example.txt\"\
    )` and see if it works. Also, make sure that the file actually has those conditions.\n\
    <|/ c |>\n<| c |>\nI'm pretty sure the file does have those conditions, since\
    \ I copied those exact conditions into the code and it worked. I just can't get\
    \ it to work with the files I put in. I'm pretty sure the file is in the correct\
    \ location because I ran the file through the checker, and it says the file is\
    \ correct. Also, I ran `(file", "  (and (not (empty? file_name))\n       (not\
    \ (equal? (substring file_name 0 2) (substring '0 1 2 3 4 5 6 7 8 9 A B C D E\
    \ F G H I J K L M N O P Q R S T U V W X Y Z)))\n       (not (equal? (substring\
    \ file_name 1 1) (substring 'a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z))))\n       (not (equal? (substring file_name 2 1) (substring '0 1 2 3 4 5\
    \ 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z))))\n       (equal?\
    \ (substring file_name 3 0) \".\")\n       (equal? (substring file_name 4 0) \"\
    .txt\"))\n  (or (file_name-ext-p file_name)\n      (file_name-ext-p file_name)))\n",
  "  (let ([len (string-length file_name)])\n    (if (= len 3)\n        (string= (substring\
    \ file_name 0 1) '0-9)\n        (string= file_name \".\")\n        (and (not (string=\
    \ (substring file_name 0 1) \"\")) (string= (substring file_name 0 1) '(a-zA-Z)')\
    \ \n             (not (string= (substring file_name len (string-length file_name))\
    \ '(a-zA-Z)'))))\n    'No))\n", "  (cond\n    ((string-length file_name) > (string-length\
    \ 3))\n    ((string=? file_name\n          (string-append \"0\" (substring file_name\
    \ (length (string-length file_name)) 3))\n          #:not-equal? (string=? (substring\
    \ file_name 0 ((length (string-length file_name) 3) -1))\n                   \
    \       (substring file_name (length (string-length file_name) 2))))\n     #:else\n\
    \     (string=? file_name\n          (string-append \"0\" (substring file_name\
    \ (length (string-length file_name)) 3))\n          #:not-equal? (string=? (substring\
    \ file_name 0 ((length (string-length file_name) 3) -1))\n                   \
    \       (substring file_name (length (string-length file_name) 2)))\n        \
    \  #:else\n          (or (string=? (substring file_name 0 ((length (string-length\
    \ file_name) 3) -1))\n                        (string-append \"0\" (substring\
    \ file_name (length (string-length file_name)) 3)))\n              (string=? (substring\
    \ file_name 0 ((length (string-length file_name) 3) -1))\n                   \
    \     (string-append \"0\" (substring file_name (length (string-length file_name))\
    \ 2)))\n              (string=? (substring file_name 0 ((length (string-length\
    \ file_name) 3) -1))\n                        (string-append \"0\" (substring\
    \ file_name (length (string-length file_name)) 1))))))\n", "  (cond\n    [(< (length\
    \ file_name) 3) \"No\"]\n    [(= \"..\" (substring file_name 0 (char-code (first\
    \ file_name))) ) \"No\"]\n    [(= \"txt\" (substring file_name 0 (char-code (first\
    \ file_name))) ) \"No\"]\n    [(= \"exe\" (substring file_name 0 (char-code (first\
    \ file_name))) ) \"No\"]\n    [(= \"dll\" (substring file_name 0 (char-code (first\
    \ file_name))) ) \"No\"]\n    [(> (length file_name) 3) \"No\"]\n    [(string-chars-match\
    \ (char-code (first file_name)) '(#\\A #\\z) #\\z) \"No\"]\n    [else \"Yes\"\
    ]))\n", "  (cond\n    [(> (string-length file_name) 3) 'No]\n    [(string-match\
    \ (regexp-quote (string-append \"^[a-zA-z].*\") file_name) 'No]\n    [(string-match\
    \ (regexp-quote (string-append \"^[\\\\w].*\") file_name) 'No]\n    [(> (string-index\
    \ file_name \".\" 0) 0) 'No]\n    [(file_name-substring file_name 0) (file_name-substring\
    \ file_name 1)]))\n", "  (if (or (string-length (substring file_name 0 2)) (string-length\
    \ (substring file_name 0 1)) (string-length (substring file_name 0 0))) (list\
    \ \"No\" \"Invalid file name\") (list (string-length (substring file_name 0 3))\
    \ (substring file_name 0 1) (substring file_name 0 0))))\n", "  (let* ((files\
    \ (string->list (file_name)))\n         (check (append (= 3 (length files))\n\
    \                        (= 1 (string-length (file-name 0 (string-length files)))\n\
    \                        (= (string-ref (file-name 0 (string-length files)) 0)\n\
    \                            '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\\
    9 #\\10 #\\11 #\\12)\n                            (string-length (file-name 0\
    \ (string-length files)))\n                            (file-name 0 (string-length\
    \ files)) \"exe\"\n                            (file-name 0 (string-length files))\
    \ \"dll\")))\n    (string=? (file-name 0 (string-length files)) check)))\n", " \
    \ (let ([name (string->list (string->symbol file_name))])\n    (and (= 3 (length\
    \ (string-match \"[0-9][0-9][0-9]\" (string->symbol file_name))))\n         (not\
    \ (string=? (substring (string-ref name 0) 0) #\\\".\\\"))\n         (and (string=?\
    \ (substring (string-ref name 0) 0) #\\a)\n              (string=? (substring\
    \ (string-ref name 0) 0) #\\z)\n              (string=? (substring (string-ref\
    \ name 0) 0) #\\A)\n              (string=? (substring (string-ref name 0) 0)\
    \ #\\Z)))\n     #\\Yes))\n", "  (cond ((string-length (string-ref file_name 0))\
    \ > 3)\n        ((char=? (substring (string file_name 0) 0) #\\0)\n         (char=?\
    \ (substring (string file_name 0) 0) #\\9)\n         (char=? (substring (string\
    \ file_name 0) 0) #\\0)\n         (char=? (substring (string file_name 0) 0) #\\\
    9)\n         (char=? (substring (string file_name 0) 0) #\\0)\n         (char=?\
    \ (substring (string file_name 0) 0) #\\9)\n         (char=? (substring (string\
    \ file_name 0) 0) #\\0)\n         (char=? (substring (string file_name 0) 0) #\\\
    9)\n         (char=? (substring (string file_name 0) 0) #\\0)\n         (char=?\
    \ (substring (string file_name 0) 0) #\\9)\n         (char=? (substring (string\
    \ file_name 0) 0) #\\0)\n         (char=? (substring (string file_name 0) 0) #\\\
    9)\n         (char=? (substring (string file_name 0) 0) #\\0)\n         (char=?\
    \ (substring (string file_name 0) 0) #\\9)\n         (char=? (substring (string\
    \ file_name 0) 0) #\\0)\n         (char=? (substring (string file_name 0) 0) #\\\
    9)\n         (char=? (substring (string file_name 0) 0) #\\0)\n         (char=?\
    \ (substring (string file_name 0) 0) #\\9)\n         (char=? (substring (string\
    \ file_name 0) 0) #\\0)\n         (char=? (substring (string file_name 0) 0) #\\\
    9)\n         (char=? (substring (string file_name 0) 0) #\\0)\n         (char=?\
    \ (substring (string file_name 0) 0) #\\9)\n         (char=? (substring (string\
    \ file_name 0) 0) #\\0)\n         (char=? (substring (string file_name 0) 0) #\\\
    9)\n         (char=? (substring (string file_name 0) 0) #\\0)\n         (char=?\
    \ (substring (string file_name 0) 0) #\\9)\n         (char=? (substring (string\
    \ file_name 0) 0) #\\0)\n         (char=? (substring (string file_name 0) 0) #\\\
    9)\n         (char=? (substring (string file_name 0) 0) #\\0)\n         (char=?\
    \ (substring (string file_name 0) 0) #\\9)\n         (char=? (substring (string\
    \ file_name 0) 0) #\\0)\n         (char=? (substring (string file_name 0) 0) #\\\
    9)\n         (char=? (substring (string file_name 0) 0) #\\0)\n         (", " \
    \ (cond\n    ((empty? file_name)\n      'No)\n    ((substring-before (car file_name)\
    \ \".\" empty?)\n      (begin\n        (cond\n          ((null? (cdr file_name))\n\
    \           'Yes)\n          ((char=? (car file_name) 'a) (begin\n           \
    \                    (char=? (car file_name) 'b) (begin\n                    \
    \                                        (char=? (car file_name) 'c) (begin\n\
    \                                                                (char=? (car\
    \ file_name) 'd)\n                                                           \
    \     'Yes)\n                                                            (char=?\
    \ (car file_name) 'e)\n                                                      \
    \          'Yes)\n                                                           \
    \ (char=? (car file_name) 'f)\n                                              \
    \                  'Yes)\n                                                   \
    \         (char=? (car file_name) 'g) (begin\n                               \
    \                                             (char=? (car file_name) 'h)\n  \
    \                                                                          (char=?\
    \ (car file_name) 'i)\n                                                      \
    \                      (char=? (car file_name) 'j)\n                         \
    \                                                   (char=? (car file_name) 'k)\n\
    \                                                                            (char=?\
    \ (car file_name) 'l)\n                                                      \
    \                      (char=? (car file_name) 'm)\n                         \
    \                                                   (char=? (car file_name) 'n)\n\
    \                                                                            (char=?\
    \ (car file_name) 'o)\n                                                      \
    \                      (char=? (car file_name) 'p)\n                         \
    \                                                   (char=? (car file_name) 'q)\n\
    \                                                                            (char=?\
    \ (car file_name) 'r)\n                                                      \
    \                      (char=? (car file_name) 's)\n                         \
    \                                                   (char=? (car file_name) 't))\n\
    \                                                                            'Yes)\n\
    \                                                            (char=? (car file_name)\
    \ 'v)\n                                                                      \
    \      (char=? (car file_name) 'w)\n                                         \
    \                                   (char=? (car file_name) 'x)\n            \
    \                                                                (char=? (car\
    \ file_name) 'y)\n                                                           \
    \                 (char=? (car file_name) 'z)\n                              \
    \                                              'Yes)\n                       \
    \                                     (char=? (car file_name) 'A)\n          \
    \                                                                  (char=? (car\
    \ file_name) 'B)\n                                                           \
    \                 (char=? (car file_name) 'C)\n                              \
    \                                              (char=? (car file_name) 'D)\n \
    \                                                                           (char=?\
    \ (car file_name) 'E)\n                                                      \
    \                      (char=? (car file_name) 'F)\n                         \
    \                                                   (char=? (car file_name) 'G)\n\
    \                                                                            (char=?\
    \ (car file_name) 'H)\n                                                      \
    \                      (char=? (car file_name) 'I)\n                         \
    \                                                   (char=? (car file_name) 'J)\n\
    \                                                                            (char=?\
    \ (car file_name) 'K)\n                                                      \
    \                      (char=? (car ", "  (cond\n    [(= (length file_name) 3)\n\
    \     (begin (display \"Yes\") (newline) (return))]\n    [(= (length file_name)\
    \ 4)\n     (begin (display \"No\") (newline) (return))]\n    [(= (substring file_name\
    \ 0 3) (substring \"a\" 0 1))\n     (begin (display \"Yes\") (newline) (return))]\n\
    \    [(= (substring file_name 0 3) (substring \"A\" 0 1))\n     (begin (display\
    \ \"No\") (newline) (return))]\n    [else (begin (display \"No\") (newline) (return)])]))\n",
  "  (string->symbol (regexp-opt (list (string->string file_name)) \"[^0-9.]*\\.[^a-z][a-z]*\"\
    \ 0)))\n", "  (let ((n (string-length file_name)))\n    (cond ((= n 3) (string-match\
    \ (regexp-quote (first file_name)) (regexp-quote \"^[0-9]{3}.[^.].*$\"))) ; The\
    \ file's name is valid\n          (else (string-match \"[^0-9.]\" file_name)))\
    \ ; The file's name is invalid\n    ))\n", "  (cond\n    ((string-empty? file_name)\
    \ \"No\")\n    ((string-no-blanks? file_name) \"No\")\n    ((string-equal? file_name\
    \ \".\") \"No\")\n    ((string-equal? (string-prefix-before file_name \".\") \"\
    \") \"No\")\n    (else (string-equal? (string-prefix-after file_name \".\") (list\
    \ \"exe\" \"dll\")) \"No\")))\n", "  (cond\n    [(= (length (string-prefix (substring\
    \ file_name 0 3) \"0123456789\") 0) 'NO)\n     (begin (display \"No\")\n     \
    \      (newline))\n     (begin (display \"Yes\")\n           (newline))]\n   \
    \ [(and (substring file_name 0 1) (equal? (substring file_name 0 1) 'dot))\n \
    \    (begin (display \"No\")\n           (newline))\n     (begin (display \"Yes\"\
    )\n           (newline))]\n    [(or (substring file_name 0 1) (substring file_name\
    \ 0 1) 'NO)\n     (begin (display \"No\")\n           (newline))\n     (begin\
    \ (display \"Yes\")\n           (newline))]\n    [(or (equal? (substring file_name\
    \ 0 1) 'letter) (equal? (substring file_name 0 1) 'NO))\n     (begin (display\
    \ \"No\")\n           (newline))\n     (begin (display \"Yes\")\n           (newline))]\n\
    \    [(or (equal? (substring file_name 0 1) 'letter) (equal? (substring file_name\
    \ 0 1) 'letter))\n     (begin (display \"Yes\")\n           (newline))]\n    [else\n\
    \     (begin (display \"Yes\")\n           (newline))]))\n", "  (let ([count 0])\n\
    \    (cond\n      [(string=? \"1234567890\" file_name)\n       \"Yes\"]\n    \
    \  [(string=? (string-length file_name) 0)\n       \"No\"]\n      [(string=? (substring\
    \ file_name 0 (string-length file_name) 1)\n                    #\"[0-9]\"\n \
    \                   true)\n       \"No\"]\n      [(string=? (substring file_name\
    \ 0 (string-length file_name) 1) #\".\" true)\n       \"No\"]\n      [(string=?\
    \ (substring file_name 0 (string-length file_name) 1)\n                    #\"\
    [a-z]\"\n                    true)\n       \"No\"]\n      [(string=? (substring\
    \ file_name 0 (string-length file_name) 1)\n                    #\"[A-Z]\"\n \
    \                   true)\n       \"No\"]\n      [(string=? (substring file_name\
    \ 0 (string-length file_name) 1)\n                    #\"[a-z][A-Z]\"\n      \
    \              true)\n       \"No\"]\n      [(string=? (substring file_name 0\
    \ (string-length file_name) 1) #\".txt\"\n                    true)\n       \"\
    Yes\"]\n      [(string=? (substring file_name 0 (string-length file_name) 1) #\"\
    .exe\"\n                    true)\n       \"Yes\"]\n      [(string=? (substring\
    \ file_name 0 (string-length file_name) 1) \".dll\"\n                    true)\n\
    \       \"Yes\"]\n      [(string=? (substring file_name 0 (string-length file_name)\
    \ 1)\n                    #\"\\.\"\n                    true)\n       \"Yes\"\
    ]\n      [(string=? (substring file_name 0 (string-length file_name) 1)\n    \
    \                #\"\\.exe\"\n                    true)\n       \"Yes\"]\n   \
    \   [(string=? (substring file_name 0 (string-length file_name) 1)\n         \
    \           #\"\\.dll\"\n                    true)\n       \"Yes\"]\n      [else\n\
    \       \"Yes\"])))\n", "  (cond\n    [(< 3 (string-length file_name))\n     (string=?\
    \ file_name \"0\")\n     (string=? file_name \"1\")\n     (string=? file_name\
    \ \"2\")\n     (string=? file_name \"3\")\n     (string=? file_name \"4\")\n \
    \    (string=? file_name \"5\")\n     (string=? file_name \"6\")\n     (string=?\
    \ file_name \"7\")\n     (string=? file_name \"8\")\n     (string=? file_name\
    \ \"9\")\n     (string=? file_name \".\")\n     (and (>= (string-length file_name)\
    \ 1) \n          (string=? (substring file_name 0 (string-length file_name)) \n\
    \                     '[a-dA-Z][a-dA-Z0-9]'))]\n    [else (print \"The file name\
    \ must contain exactly one digit and one dot '.'\")]))\n", "  (cond\n    [(and\
    \ (substring file_name 0 1) (substring file_name 0 1) (substring file_name 0 1)\
    \ (member (substring file_name 0 1) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7\
    \ #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\n     \"Yes\"]\n    [(and (substring\
    \ file_name 0 1) (substring file_name 0 1) (substring file_name 0 1) (member (substring\
    \ file_name 0 1) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\b #\\c #\\d #\\\
    e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z))\n     \"No\"]\n    [else\n     \"No\"]\n   ))\n", "  (<\
    \ (string-length file_name) 3)\n  (not (string= (substring file_name 0 1) \".\"\
    ))\n  ;; Must not have empty substring before dot\n  (not (string=\n         \
    \   (substring file_name 0 1)\n            (substring (substring file_name 1 2)\
    \ 0 1)))\n  ;; Must not have non-valid substring after dot\n  (not (string=\n\
    \            (substring file_name 0 2)\n            (list \"txt\" \"exe\" \"dll\"\
    ))))\n", "  (cond\n    [(empty? file_name)\n     'No]\n    [(= (length file_name)\
    \ 3)\n     'No]\n    [(string=? (char-code (car file_name)) #\\0)\n     'No]\n\
    \    [(and (string=? (char-code (car file_name)) #\\0) (string=? (substring file_name\
    \ 0 (char-code #\\0) \"a..z\" \"A..Z\")\n      'No]\n    [(and (string=? (char-code\
    \ (car file_name)) #\\0) (string=? (substring file_name 0 (char-code #\\0) \"\
    a..z\" \"A..Z\")\n      'No]\n    [(and (string=? (char-code (car file_name))\
    \ #\\0) (string=? (substring file_name 0 (char-code #\\0) \"a..z\" \"A..Z\")\n\
    \      'No]\n    [(and (string=? (char-code (car file_name)) #\\0) (string=? (substring\
    \ file_name 0 (char-code #\\0) \"a..z\" \"A..Z\")\n      'No]\n    [(and (string=?\
    \ (char-code (car file_name)) #\\0) (string=? (substring file_name 0 (char-code\
    \ #\\0) \"a..z\" \"A..Z\")\n      'No]\n    [(and (string=? (char-code (car file_name))\
    \ #\\0) (string=? (substring file_name 0 (char-code #\\0) \"a..z\" \"A..Z\")\n\
    \      'No]\n    [(and (string=? (char-code (car file_name)) #\\0) (string=? (substring\
    \ file_name 0 (char-code #\\0) \"a..z\" \"A..Z\")\n      'No]\n    [(and (string=?\
    \ (char-code (car file_name)) #\\0) (string=? (substring file_name 0 (char-code\
    \ #\\0) \"a..z\" \"A..Z\")\n      'No]\n    [(and (string=? (char-code (car file_name))\
    \ #\\0) (string=? (substring file_name 0 (char-code #\\0) \"a..z\" \"A..Z\")\n\
    \      'No]\n    [(and (string=? (char-code (car file_name)) #\\0) (string=? (substring\
    \ file_name 0 (char-code #\\0) \"a..z\" \"A..Z\")\n      'No]\n    [(and (string=?\
    \ (char-code (car file_name)) #\\0) (string=? (substring file_name 0 (char-code ",
  "  (cond\n    [(or (>= (string-length file_name) 3)\n          (string-contains\
    \ file_name \"..\")\n          (string-index file_name 0 (string-length file_name)\
    \ 0))\n     (begin (display \"No\")\n           (newline)\n           (newline)]\n\
    \    [(string-substring file_name 0 (string-length file_name) 0)\n     (begin\
    \ (display \"Yes\")\n           (newline)\n           (newline)]\n    [else\n\
    \     (begin (display \"No\")\n           (newline)\n           (newline)])))\n",
  "  (let ([is_valid (= (string-length file_name) 3)\n          dot_found (boolean?\
    \ \n                      (find file_name #\\. 0 0))\n          dot_pos_found\
    \ (boolean? (find file_name #\\.))\n          first_letter_found (boolean? (char-equal?\
    \ (first file_name) \n                                            'a)))])\n  \
    \  (if (or dot_found dot_pos_found first_letter_found)\n        (string \"Yes\"\
    )\n        (string \"No\"))))\n", "  (= (length file_name) 3)\n  (= (index (substring\
    \ file_name 0 (index (length file_name) 2) file_name))\n      (. (substring file_name\
    \ 0 (index (length file_name) 2) file_name))\n      'a)\n  (= (substring (substring\
    \ file_name 0 (index (length file_name) 2) file_name) 1 0)\n      '([a-zA-Z]))\n",
  "  (cond [(empty? file_name) \"No\"]\n        [(not (= (length file_name) 4)) \"\
    No\"]\n        [(or (empty? (substring file_name 0 2)) (not (eq? (substring file_name\
    \ 0 2) \".\"))) \"No\"]\n        [(or (not (eq? (substring file_name 0 1) \"a\"\
    )) (not (eq? (substring file_name 0 1) \"A\"))) \"No\"]\n        [(or (not (eq?\
    \ (substring file_name 0 (string-length file_name)) \"0\")) (not (= (string-length\
    \ file_name) 1))) \"No\"]\n        [(or (not (eq? (substring file_name 0 (string-length\
    \ file_name)) \"0\")) (not (= (string-length file_name) 2))) \"No\"]\n       \
    \ [(or (not (eq? (substring file_name 0 (string-length file_name)) \"0\")) (not\
    \ (= (string-length file_name) 3))) \"No\"]\n        [else (= \"txt\" file_name)\
    \ \"Yes\"]\n        [else (= \"exe\" file_name) \"Yes\"]\n        [else (= \"\
    dll\" file_name) \"Yes\"]\n        [else (= \"Racket__\" file_name) \"Yes\"]\n\
    \        [else (= \"Racket__0\" file_name) \"Yes\"]\n        [else (= \"Racket__1\"\
    \ file_name) \"Yes\"]\n        [else (= \"Racket__2\" file_name) \"Yes\"]\n  \
    \      [else (= \"Racket__3\" file_name) \"Yes\"]\n        [else (= \"Racket__4\"\
    \ file_name) \"Yes\"]\n        [else (= \"Racket__5\" file_name) \"Yes\"]\n  \
    \      [else (= \"Racket__6\" file_name) \"Yes\"]\n        [else (= \"Racket__7\"\
    \ file_name) \"Yes\"]\n        [else (= \"Racket__8\" file_name) \"Yes\"]\n  \
    \      [else (= \"Racket__9\" file_name) \"Yes\"]\n        [else (= \"Racket__10\"\
    \ file_name) \"Yes\"]\n        [else (= \"Racket__11\" file_name) \"Yes\"]\n \
    \       [else (= \"Racket__12\" file_name) \"Yes\"]\n        [else (= \"Racket__13\"\
    \ file_name) \"Yes\"]\n        [else (= \"Racket__14\" file_name) \"Yes\"]\n \
    \       [else (= \"Racket__15\" file_name) \"Yes\"]\n        [else (= \"Racket__16\"\
    \ file_name) \"Yes\"]\n        [else (= \"Racket__17\" file_name) \"Yes\"]\n \
    \       [else (= \"Racket__18\" file_name) \"Yes\"]\n        [else (= \"", " \
    \ (cond\n    [(= (length file_name) 3)\n      (if (char=? (char-code file_name)\
    \ 48)\n          (if (char=? (char-code file_name) 57) 'No 'Yes)\n          'Yes)\n\
    \      (if (char=? (char-code file_name) 50)\n          (if (char=? (char-code\
    \ file_name) 49) 'No 'Yes)\n          'Yes)\n      (if (char=? (char-code file_name)\
    \ 51)\n          (if (char=? (char-code file_name) 51) 'No 'Yes)\n          'Yes)\n\
    \      (if (char=? (char-code file_name) 52)\n          (if (char=? (char-code\
    \ file_name) 52) 'No 'Yes)\n          'Yes)\n      (if (char=? (char-code file_name)\
    \ 53)\n          (if (char=? (char-code file_name) 53) 'No 'Yes)\n          'Yes)\n\
    \      (if (char=? (char-code file_name) 54)\n          (if (char=? (char-code\
    \ file_name) 54) 'No 'Yes)\n          'Yes)\n      (if (char=? (char-code file_name)\
    \ 55)\n          (if (char=? (char-code file_name) 55) 'No 'Yes)\n          'Yes)\n\
    \      (if (char=? (char-code file_name) 56)\n          (if (char=? (char-code\
    \ file_name) 56) 'No 'Yes)\n          'Yes)\n      (if (char=? (char-code file_name)\
    \ 57)\n          (if (char=? (char-code file_name) 57) 'No 'Yes)\n          'Yes)\n\
    \      (if (char=? (char-code file_name) 64)\n          (if (char=? (char-code\
    \ file_name) 64) 'No 'Yes)\n          'Yes)\n      (if (char=? (char-code file_name)\
    \ 83)\n          (if (char=? (char-code file_name) 83) 'No 'Yes)\n          'Yes)\n\
    \      (if (char=? (char-code file_name) 90)\n          (if (char=? (char-code\
    \ file_name) 90) 'No 'Yes)\n          'Yes)\n      (if (char=? (char-code file_name)\
    \ 96)\n          (if (char=? (char-code file_name) 96) 'No 'Yes)\n          'Yes)\n\
    \      (if (char=? (char-code file_name) 123)\n          (if (char=? (char-code\
    \ file_name) 123) 'No 'Yes)\n          'Yes)\n", "  (cond ((null? file_name) \"\
    No\")\n        ((string-empty? file_name)\n         (cons \"No\" 'No))\n     \
    \   ((string-match (substring file_name 0 (string-length file_name)) \"[1-9][0-9]*\"\
    )\n         (cons \"No\" 'No))\n        ((string-match (substring file_name 0\
    \ (string-length file_name)) \".\")\n         (cons \"No\" 'No))\n        ((string-match\
    \ (substring file_name 0 (string-length file_name)) \"[a-z][^.]*\")\n        \
    \ (cons \"No\" 'No))\n        (else\n         (cons \"Yes\" 'Yes))))\n", "  ;;\
    \ Your code goes here\n  (file_name = file_name\n    (string-match \"^[0-9]{3}$\"\
    \ file_name)\n    (string-match \"^[^.]*[.]\" file_name)\n    (not(string=? #\\\
    . file_name))\n    (string=? (substring (substring file_name 0 (string-length\
    \ file_name) 1) 0 \"a\" \"z\" \"A\") file_name)))\n", "  (let ([length (string-length\
    \ file_name)]) \n    (if (= 3 length)\n        (if (= (string-ref file_name 0)\
    \ (string-ref file_name 1))\n            (if (and (= (string-ref file_name 0)\
    \ (string-ref file_name 2) )\n                     (string=? (substring file_name\
    \ 0 (- 2 length)) \"txt\"))\n                (if (and (= (string-ref file_name\
    \ 0) (string-ref file_name 3) )\n                        (string=? (substring\
    \ file_name 0 (- 3 length)) \"exe\")\n                        (if (and (= (string-ref\
    \ file_name 0) (string-ref file_name 4) ) (string=? (substring file_name 0 (-\
    \ 4 length)) \"dll\"))\n                            (return 'Yes))))\n       \
    \     (return 'No))))))\n", "  (cond\n    [(< (string-length file_name) 3) \"\
    The file's name should have less than three characters.\"]\n    [(string-match\
    \ (substring file_name 0 3) \"^[a-z]\" false) \"The file's name should start with\
    \ a latin letter from capital alphabet.\"]\n    [(string-match (substring file_name\
    \ 0 3) \"^[0-9]\" false) \"The file's name should contain only digits and should\
    \ not start with a digit.\"]\n    [(string-match (substring file_name 0 (string-length\
    \ file_name-3)) \"^[a-z].*\" false) \"The file's name should contain only latin\
    \ letters after a dot in the file's name.\"]\n    [(string-match (substring file_name\
    \ 0 (string-length file_name-3)) \"^[0-9].*\" false) \"The file's name should\
    \ contain only digits after a dot in the file's name.\"]\n    [(< (string-length\
    \ file_name) 4) (error \"The file's name should have less than four characters.\"\
    )]\n    [(string-match (substring file_name 0 (string-length file_name-3)) \"\
    .*\\.(txt|exe|dll)$\" false) \"The file's name should end with 'txt', 'exe' or\
    \ 'dll'.\"]\n    [else (error \"The file's name should end with 'txt', 'exe' or\
    \ 'dll'.\")]))", "  (= (string-length file_name)\n     (string-length (string-match\
    \ #rx[0-9] file_name))\n     (string-match (string-match (string-match #rx\\.[^.]+)\
    \ file_name) '[txt exe dll]))\n  ", "  (cond\n    [(= (string-length (substring\
    \ file_name 0 3)) 3)\n      (cond\n        [(= (string-length (substring file_name\
    \ 0 1)) 0)\n         (display \"Yes: \")\n         (cond\n            [(string-match\
    \ (substring file_name 0 1) \"^[a-z][a-zA-Z]+$\")\n             (display \"Yes:\
    \ \")\n             (cond\n               [(= (substring file_name 0 (string-length\
    \ (substring file_name 0 1)))\n                (substring file_name 0 (string-length\
    \ (substring file_name 0 1))))]\n               [else (display \"No: \")\n   \
    \                (cond\n                     [(string-match (substring file_name\
    \ 0 1) \"^[a-zA-Z]+$\")\n                      (display \"No: \")\n          \
    \            (cond\n                        [(= (substring file_name 0 (string-length\
    \ (substring file_name 0 1)))\n                          (substring file_name\
    \ 0 (string-length (substring file_name 0 1))))]\n                        [else\
    \ (display \"No: \")\n                           (cond\n                     \
    \        [(= (substring file_name 0 (string-length (substring file_name 0 1)))\n\
    \                              (substring file_name 0 (string-length (substring\
    \ file_name 0 1))))]\n                             [else (display \"No: \")\n\
    \                               (cond\n                                 [(= (substring\
    \ file_name 0 (string-length (substring file_name 0 1)))\n                   \
    \               (substring file_name 0 (string-length (substring file_name 0 1))))]\n\
    \                                 [else (display \"No: \")\n                 \
    \                  (cond\n                                     [(= (substring\
    \ file_name 0 (string-length (substring file_name 0 1)))\n                   \
    \                   (substring file_name 0 (string-length (substring file_name\
    \ 0 1))))]\n                                     [else (display \"No: \")\n  \
    \                                     (cond\n                                \
    \         [(= (substring file_name 0 (string-length (substring file_name 0 1)))\n\
    \                                          (substring file_name 0 (string-length\
    \ (substring file_name 0 1))))]\n                                         [else\
    \ (display \"No: \")\n                                           (cond\n     \
    \                                        [(= (substring file_name 0 (string-length\
    \ (substring file_name 0 1)))\n                                              (substring\
    \ file_name 0 (string-length (substring file_name 0 1))))]\n                 \
    \                            [else (display \"No: \")\n                      \
    \                         (cond\n                                            \
    \     [(= (substring file_name 0 (string-length (substring file_name 0 1)))\n\
    \                                                  (substring file_name 0 (string-length\
    \ (substring file_name 0 1))))]\n                                            \
    \     [else (display \"No: \")\n                                             \
    \      (cond\n                                                     [(= (substring\
    \ file_", "  (let* ((file_name_length (string-length file_name))\n         (dots_count\
    \ (file-name-length file_name_length)\n         (first_letter (substring file_name\n\
    \                               0 (- (string-length file_name_length)\n      \
    \                             dots_count)))\n         (extensions (list\n    \
    \                 (\"txt\" . \"text\")\n                     (\"exe\" . \"executable\"\
    )\n                     (\"dll\" . \"library\"))))\n    (cond\n      ((equal?\
    \ dots_count 0) \"No\")\n      ((and (equal? first_letter \"a\")\n           (equal?\
    \ (substring file_name\n                             (+ 0 (- 3 (string-length\
    \ file_name))) file_name_length)\n                    \"z\"))\n       (cond\n\
    \         ((equal? file_name\n                  (substring file_name\n       \
    \                      (- (- (string-length file_name) dots_count)\n         \
    \                        file_name_length)\n                             file_name_length))\n\
    \          \"No\")\n         ((equal? file_name\n                  (substring\
    \ file_name\n                             (- (- (string-length file_name) dots_count)\n\
    \                                 file_name_length)\n                        \
    \     (- (string-length file_name) dots_count))\n                            file_name_length)\n\
    \          \"No\")\n         ((equal? file_name\n                  (substring\
    \ file_name\n                             (- (- (string-length file_name) dots_count)\n\
    \                                 file_name_length)\n                        \
    \     (- (string-length file_name) dots_count)\n                             \
    \   file_name_length)\n                            file_name_length)\n       \
    \   \"Yes\")\n         (else \"No\"))\n      ((and (equal? first_letter \"a\"\
    )\n           (equal? (substring file_name\n                             (+ 0\
    \ (- 3 (string-length file_name))) file_name_length)\n                    \"z\"\
    ))\n       (cond\n         ((equal? file_name\n                  (substring file_name\n\
    \                             (- (- (string-length file_name) dots_count)\n  \
    \                               file_name_length)\n                          \
    \   (- (string-length file_name) dots_count)\n                               \
    \  file_name_length))\n          \"No\")\n         ((equal? file_name\n      \
    \            (substring file_name\n                             (- (- (string-length\
    \ file_name) dots_count)\n                                 file_name_length)\n\
    \                             (- (string-length file_name) dots_count)\n     \
    \                           file_name_length)\n                            file_name_length)\n\
    \          \"No\")\n         ((equal? file_name\n                  (substring\
    \ file_name\n                             (- (- (string-length file_name) dots_count)\n\
    \                                 file_name_length)\n                        \
    \     (- (string-length file_name) dots_count)\n                             \
    \   file_name_length)\n                            file_name_length)\n       \
    \   \"No\")\n         ((equal? file_name\n                  (substring file_name\n\
    \                             (- (- (string-length file_name) dots_count)\n  \
    \                               file_name_length)\n                          \
    \   (- (string-length file_name) dot", "  (cond \n    [(string-match \"^[0-9]*$\"\
    \ (string->number file_name)) \"No\"]\n    [(< (length (string->list file_name))\
    \ 3) \"No\"]\n    [(string-match \"^[a-zA-Z].*\" file_name) \"No\"]\n    [(substring\
    \ file_name 0 2) \"Yes\"]\n    [else \"No\"]))\n", "  (let ([numbers (string->list\
    \ file_name)])\n    (if (equal? (string-length file_name) 3)\n      (if (or (equal?\
    \ (first numbers) '0) (equal? (first numbers) '9))\n        'Yes\n        'No)\n\
    \      (equal? (first numbers) '.)\n      (if (or (null? (substring file_name\
    \ 0 1))\n              (and (string=? (substring file_name 0 1) 'a) (string=?\
    \ (substring file_name 0 1) 'z))\n              (and (string=? (substring file_name\
    \ 0 1) 'A) (string=? (substring file_name 0 1) 'Z)))\n        (if (and (equal?\
    \ (substring file_name 0 2) 'txt)\n                 (equal? (substring file_name\
    \ 0 3) 'exe)\n                 (equal? (substring file_name 0 3) 'dll))\n    \
    \      'Yes\n          'No)\n      (equal? (substring file_name 0 (string-length\
    \ file_name)) 'exe)\n      (equal? (substring file_name 0 (string-length file_name))\
    \ 'dll)\n      (equal? (substring file_name 0 (string-length file_name)) 'txt)\n\
    \      (equal? (substring file_name 0 (string-length file_name)) 'exe)\n     \
    \ (equal? (substring file_name 0 (string-length file_name)) 'dll)\n      (equal?\
    \ (substring file_name 0 (string-length file_name)) 'txt)))))\n", "  (cond\n \
    \   [(empty? file_name) \"No\"]\n    [(= (length (string-ref file_name 0)) 3)\
    \ \"No\"]\n    [(not (= (string-ref file_name 0) (substring file_name 0 (- (string->list\
    \ (string-ref file_name 0)) 1))))\n     \"No\"]\n    [(and (char->integer (substring\
    \ file_name 0 (- (string->list (string-ref file_name 0)) 0)) \n\t\t(>= (char->integer\
    \ (substring file_name 0 (- (string->list (string-ref file_name 0)) 0)) 65)\n\t\
    \t(<= (char->integer (substring file_name 0 (- (string->list (string-ref file_name\
    \ 0)) 0)) 90)) \n\t\t(= (length (substring file_name 0 \n\t\t\t\t((- (string->list\
    \ (string-ref file_name 0)) 0)) 0))\n\t\t3 \n\t\t(= (string->list (substring file_name\
    \ 0 \n\t\t\t\t((- (string->list (string-ref file_name 0)) 0)) 0)) 'exe \n\t\t\
    (= (string->list (substring file_name 0 \n\t\t\t\t((- (string->list (string-ref\
    \ file_name 0)) 0)) 0)) 'dll))\n     \"Yes\"])))\n", "  (cond\n    [(and (<= (string-length\
    \ file_name) 3) (string=? (substring file_name 0 1) \"0123456789\")) 'Yes']\n\
    \    [(and (<= (string-length file_name) 3) (string=? (substring file_name 0 1)\
    \ \"abcdefghijklmnopqrstuvwxyz\")) 'No']\n    [(and (<= (string-length file_name)\
    \ 3) (string=? (substring file_name 0 1) \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) 'No']\n\
    \    [(and (<= (string-length file_name) 3) (string=? (substring file_name 0 1)\
    \ \".\")) 'No]\n    [else (file_name_check file_name)]\n    )\n  )\n", "  (cond\n\
    \    [(> (string-length file_name) 3) \"Not enough digits in filename\" 'No]\n\
    \    [(string-match #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\" (substring\
    \ file_name 0 2)) \"Invalid filename\"]\n    [else (= \"exe\" (replace \"txt\"\
    \ \"exe\" (substring file_name 0 3))) \"Invalid filename\"]\n    [else \"No\"\
    ]\n  )\n)\n", "  (cond\n    [(> (string-length file_name) 3) (display \"Invalid\
    \ file name\")]\n    [(> (char-code (first file_name)) 48) (display \"Invalid\
    \ file name\")]\n    [(string-match-glob \"^[a-z][a-z][a-z].*$\" file_name) (display\
    \ \"Invalid file name\")]\n    [else (display \"Yes\")]\n  ))\n", "  (if (string?\
    \ file_name)\n      (if (and (string=? file_name \".\")\n              (string=?\
    \ (substring file_name 0 (string-length file_name)) \"\")\n              (string=?\
    \ (substring file_name 0 (string-length file_name)) 'a' \n                'b'\
    \ 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' \n                'p' 'q'\
    \ 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z')\n              (string=? (substring file_name\
    \ 0 (string-length file_name)) 'A' \n                'B' 'C' 'D' 'E' 'F' 'G' 'H'\
    \ 'I' 'J' 'K' 'L' 'M' \n                'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W'\
    \ 'X' 'Y' 'Z'))\n          'Yes'\n          'No'))))\n</code>\n<|/ q tags=racket\
    \ |>\n<| c |>\nPlease read [ask].  SO is not a code writing service.  What did\
    \ you try yourself so far?\n<|/ c |>\n<| c |>\nI've tried to create a procedure\
    \ which will check if the file's name contains only letters from 'a' to 'z' and\
    \ 'A' to 'Z' and it works perfectly fine. But what if I add more characters to\
    \ it?\n<|/ c |>\n<| c |>\nPlease post your code.\n<|/ c |>\n<| c |>\nI've posted\
    \ the code!\n<|/ c |>\n<| c |>\nDo you need the procedure to work for any file\
    \ name or is it just these three files?\n<|/ c |>\n<| a dscore=0 |>\nHere's a\
    \ procedure to check for the existence of letters a-z and A-Z followed by a single\
    \ dot . in any position in the name. The procedure will return the name of the\
    \ file if it's valid, or else an error message.\n<code>", "  (cond\n    [(< 3\
    \ (string-length file_name))\n     (printf \"No\\n\")]\n    [(string-match (regexp-quote\
    \ file_name) '[0-9][0-9]+\\.[a-z]{0,2}')\n     (printf \"Yes\\n\")]\n    [(string-match\
    \ (regexp-quote file_name) '[^\\.]*')\n     (printf \"No\\n\")]\n    [else\n \
    \    (printf \"No\\n\")]))\n", "  (cond\n    [(string-contains file_name \".\"\
    ) 'No]\n    [(string-contains file_name\n                      (string-append\
    \ \"\\\\\" (substring file_name 0 3))) 'No]\n    [(string-contains file_name (string-append\
    \ \"\\\\\" (substring file_name 0 3))) 'Yes]\n    [else (string-append \"Yes\"\
    \ (substring file_name 0 3)\n                       (cond\n                  \
    \      [(string-contains file_name\n                                         \
    \  (string-append \"\\\\\" (substring file_name 1 4))) 'Yes]\n               \
    \         [else (string-append \"\\\\\" (substring file_name 1 4))])))])))\n",
  "  (cond \n    [(= (file-name file_name) 'No) 'No]\n    [(= (file-name file_name)\
    \ 'Yes) 'Yes]\n    [(= (file-name file_name) 'Yes) (let* ((file-name (substring\
    \ file_name 0 (string-length (file_name-noextension (file_name))))))\n       \
    \            (when (= (file-name file-name) 'Yes) (begin\n                   \
    \                                 (let ((extension (file_name-noextension (file_name)))\n\
    \                                                        (extensions (list* \"\
    txt\" extension \"exe\" extension \"dll\"))))\n                              \
    \                    (let ((valid (member (string-append \"0\" file-name) extensions)))\n\
    \                                                    (cond\n                 \
    \                                     [((not valid) 'No) 'No]\n              \
    \                                        [else (file_name_check file)])))]\n \
    \   [else (file_name_check (file-name))]))))\n", "  (cond\n    [(and (< (length\
    \ file_name) 3) (= (substring file_name 0 2) \"[0-9]\"))\n     (if (not (= (substring\
    \ file_name 0 2) \"[0-9]\"))\n         (begin (display \"The first two characters\
    \ of a file name should not be digits. Please try again.\")\n                (newline))\n\
    \         (begin (display \"The file name contains more than one digit. Please\
    \ try again.\")\n                (newline))\n         (begin (display \"The substring\
    \ before the dot should not be empty. Please try again.\")\n                (newline))\n\
    \         (begin (display \"The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']. Please try again.\")\n                (newline))\n  \
    \       (begin (display \"The file name contains one or more invalid characters.\
    \ Please try again.\")\n                (newline))\n         (display \"Yes\"\
    )\n         (newline))]\n    [(and (= (substring file_name 0 1) \"-\")\n     \
    \      (not (= (substring file_name 0 1) \"-\"))\n           (= (length (substring\
    \ file_name 1 1)) \"[0-9]\"))\n     (begin (display \"The file name should not\
    \ contain hyphens. Please try again.\")\n            (newline))\n     (begin (display\
    \ \"The file name should start with a letter. Please try again.\")\n         \
    \   (newline))\n     (begin (display \"The substring before the dot should not\
    \ be empty. Please try again.\")\n            (newline))\n     (begin (display\
    \ \"The substring after the dot should be one of these: ['txt', 'exe', 'dll'].\
    \ Please try again.\")\n            (newline))\n     (begin (display \"The file\
    \ name contains one or more invalid characters. Please try again.\")\n       \
    \     (newline))\n     (begin (display \"Yes\")\n            (newline))]\n   \
    \ [(and (= (substring file_name 0 1) \"-\")\n           (not (= (substring file_name\
    \ 0 1) \"-\"))\n           (= (length (substring file_name 1 1)) \"[0-9]\"))\n\
    \     (begin (display \"The file name should not contain hyphens. Please try again.\"\
    )\n            (newline))\n     (begin (display \"The file name should start with\
    \ a letter. Please try again.\")\n            (newline))\n     (begin (display\
    \ \"The substring before the dot should not be empty. Please try again.\")\n \
    \           (newline))\n     (begin (display \"The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']. Please try again.\")\n            (newline))\n\
    \     (begin (display \"The file name contains one or more invalid characters.\
    \ Please try again.\")\n            (newline))\n     (begin (display \"No\")\n\
    \            (newline))]\n    [else\n     (begin (display \"No\")\n", "  (let\
    \ ([len (string-length file_name)]\n        [dot_count (string-count file_name\
    \ \".\")]\n        [first_letter (string->char (substring file_name 0 1))]\n \
    \       [dot_before_letter (substring file_name 0 dot_count)]\n        [dot_after_letter\
    \ (substring file_name (dot_count + 1))])\n    (cond\n      [(and (> len 3) (string-match\
    \ #\\0 file_name))\n       (cond [(not (or (char? first_letter) (char? dot_before_letter))\
    \ dot_after_letter\n               (or (char? first_letter) (string-match #\\\
    . file_name)))]\n             [else (cond [(not (string-match #\\. dot_after_letter))\n\
    \                          (cond [(not (string-match #\\. dot_before_letter))\
    \ 'Yes]\n                                [(char? first_letter) (cond [(string-match\
    \ #\\. dot_before_letter) 'No]\n                                             \
    \                  [(string=? \"a\" first_letter 'A') 'No]\n                 \
    \                                              [(string=? \"b\" first_letter 'B')\
    \ 'No]\n                                                               [(string=?\
    \ \"c\" first_letter 'C') 'No]\n                                             \
    \                  [(string=? \"d\" first_letter 'D') 'No]\n                 \
    \                                              [(string=? \"e\" first_letter 'E')\
    \ 'No]\n                                                               [(string=?\
    \ \"f\" first_letter 'F') 'No]\n                                             \
    \                  [(string=? \"g\" first_letter 'G') 'No]\n                 \
    \                                              [(string=? \"h\" first_letter 'H')\
    \ 'No]\n                                                               [(string=?\
    \ \"i\" first_letter 'I') 'No]\n                                             \
    \                  [(string=? \"j\" first_letter 'J') 'No]\n                 \
    \                                              [(string=? \"k\" first_letter 'K')\
    \ 'No]\n                                                               [(string=?\
    \ \"l\" first_letter 'L') 'No]\n                                             \
    \                  [(string=? \"m\" first_letter 'M') 'No]\n                 \
    \                                              [(string=? \"n\" first_letter 'N')\
    \ 'No]\n                                                               [(string=?\
    \ \"o\" first_letter 'O') 'No]\n                                             \
    \                  [(string=? \"p\" first_letter 'P') 'No]\n                 \
    \                                              [(string=? \"q\" first_letter 'Q')\
    \ 'No]\n                                                               [(string=?\
    \ \"r\" first_letter 'R') 'No]\n                                             \
    \                  [(string=? \"s\" first_letter 'S') 'No]\n                 \
    \                                              [(string=? \"t\" first_letter 'T')\
    \ 'No]\n                                                               [(string=?\
    \ \"u\" ", "  (cond\n    [(= string-length (string-trim file_name)) 0]\n    [(string-match\
    \ (string-trim \".\") file_name)]\n    [(string-match (substring file_name 0 (string-length\
    \ (string-trim file_name))) \n                   #:letters #((\"a\" . \"b\")(\"\
    A\" . \"B\")(\"b\" . \"B\")(\"A\" . \"a\"))) \n     (if (= \"Yes\" \n        \
    \     (string-match #:digits (substring file_name 0 (string-length (string-trim\
    \ file_name)))) \n             \"Yes\" \n             \"No\")\n     \"Yes\" \n\
    \     \"No\")]\n    [else (begin \"No\" \"No\" \"No\")]\n  )\n)", "  (cond\n \
    \   ((empty? (string-ref file_name 0)) #f)\n    ((contains? (string-ref file_name\
    \ 0) \".\") #f)\n    ((not? (sub1 (string-ref file_name 0)) \"\") #f)\n    ((string?\
    \ (sub1 (string-ref file_name 0)) \n      (string-match (sub1 (string-ref file_name\
    \ 0)) \n                    (\"a\" \"z\" \"A\" \"Z\" \"0\" \"9\")))))", "  (define\
    \ (number? x) (and (char=? x #\\0) (char=? (char-after (string=! x) \".\") #\\\
    .)))\n  (define (one_dot? x) (char=? (char-after (string=! x) \".\") #\\.))\n\
    \  (define (first_letter(string) (string=? (substring string 0 1) #\\a)))\n  (define\
    \ (all_letters string) (string=? (substring string 0 3) #\\a#\\z#\\A#\\z#\\0))\n\
    \  (define (file_type_check file_name extension)\n    (cond\n      [(number? file_name)\
    \  \"No\"]\n      [(one_dot? file_name) \"No\"]\n      [(not (first_letter (string=!\
    \ file_name)))  \"No\"]\n      [(all_letters (string=! file_name))  \"No\"]\n\
    \      [else            \"Yes\"]\n    )\n  )\n  (if (string=? (string=! file_name)\
    \ \".\")\n      \"No\"\n      (if (file_type_check file_name \"txt\")\n      \
    \    \"Yes\"\n          \"No\")\n  )\n)\n", "  (cond ((string-length (string-ref\
    \ file_name 0 4)) > 3)\n         (string-ref file_name 0 4)\n         (string-ref\
    \ file_name 0 1)\n         ((string-length (string-ref file_name 0 3)) > 1)\n\
    \         ((and (char->integer (string-ref file_name 0 1))\n              (char->integer\
    \ (string-ref file_name 0 2)))\n          (string-ref file_name 0 1))\n      \
    \   ((or (char->integer (string-ref file_name 0 1))\n              (char->integer\
    \ (string-ref file_name 0 2)))\n          (string-ref file_name 0 2))))\n", " \
    \ (cond [(< 3 (string-length file_name)) 'No]\n        [(string-match \"^[^.]*\"\
    \ file_name)\n         'Yes]\n        [else\n         (string-match \"^[^.]*\\\
    .[^.]*\" file_name) ; <-- See here ^\n         'Yes]\n        [else\n        \
    \ (string-match \"^[^.]*\\.[^.]*\\.[^.]*\" file_name) ; <-- See here ^\n     \
    \    'Yes]\n        [else\n         (string-match \"^[^.]*\\.[^.]*\\.[^.]*\\.[^.]*\"\
    \ file_name) ; <-- See here ^\n         'Yes]\n        [else\n         'No]\n\
    \        [else\n         'No]\n        [else\n         'No]\n        [else\n \
    \        'No]\n        [else\n         'No]\n        [else\n         'No]\n  \
    \      [else\n         'No]\n        [else\n         'No]\n        [else\n   \
    \      'No]\n        [else\n         'No]\n        [else\n         'No]\n    \
    \    [else\n         'No]\n        [else\n         'No]\n        [else\n     \
    \    'No]\n        [else\n         'No]\n        [else\n         'No]\n      \
    \  [else\n         'No]\n        [else\n         'No]\n        [else\n       \
    \  'No]\n        [else\n         'No]\n        [else\n         'No]\n        [else\n\
    \         'No]\n        [else\n         'No]\n        [else\n         'No]\n \
    \       [else\n         'No]\n        [else\n         'No]\n        [else\n  \
    \       'No]\n        [else\n         'No]\n        [else\n         'No]\n   \
    \     [else\n         'No]\n        [else\n         'No]\n        [else\n    \
    \     'No]\n        [else\n         'No]\n        [else\n         'No]\n     \
    \   [else\n         'No]\n        [else\n         'No]\n        [else\n      \
    \   'No]\n        [else\n         'No]\n        [else\n         'No]\n       \
    \ [else\n         'No]\n        [else\n         'No]\n        [else\n        \
    \ 'No]\n        [else\n         'No]\n        [else\n         'No]\n        [else\n\
    \         'No]\n        [else\n         'No]\n        [else\n         'No]\n \
    \       [else\n         'No]\n        [else\n         'No]\n        [else\n  \
    \       'No]\n        [else\n         'No]\n        [else\n         'No]\n   \
    \     [else\n         'No]\n        [else\n         'No]\n        [else\n    \
    \     'No", "  (cond\n    [(and (char->integer (char-after file_name) 0) (< 3\
    \ (string-length file_name)) (string-index file_name 0) (char->integer (char-after\
    \ file_name 1) 0) (< 3 (string-length file_name)))\n     (begin (display \"Yes\"\
    ) (newline) (return 'Yes)]\n    [else\n     (begin (display \"No\") (newline)\
    \ (return 'No)]))\n</cell>\n<text>\nExercise 4\nWrite a procedure to determine\
    \ the length of a string. The procedure should take a string\nas input, and it\
    \ should output the length in characters as an integer.\n\nExample:\n", "  (if\
    \ (or (and (= (length file_name) 3) (= (substring file_name 0 1) (substring file_name\
    \ 0 1) (substring file_name 0 1))) (substring file_name 0 1) (substring file_name\
    \ 0 1) (substring file_name 0 1)) (begin (begin \"No\" \"Name\" \"Too Short For\"\
    \ \"Invalid Characters\") \"Invalid\" )))\n", "  (cond\n    [(< (string-length\
    \ file_name) 3) \"No\"]\n    [(not (equal? (char-code (file-name 0)) 0)) \"No\"\
    ]\n    [(not (equal? (char-code (file-name 0 2)) 60)) \"No\"]\n    [(not (equal?\
    \ (char-code (file-name 0 2)) 63)) \"No\"]\n    [(equal? (substring file_name\
    \ 0 2) \".\") \"No\"]\n    [(or (< (string->list (substring file_name 0 2)) (list\
    \ 'a (string->list (substring file_name 0 2 1))))) \"No\"]\n    [(equal? (substring\
    \ file_name (+ 2 2)) \".dll\") \"Yes\"]\n    [(equal? (substring file_name (+\
    \ 2 3)) \".exe\") \"Yes\"]\n    [else (print \"Wrong extension\")]))\n</code>\n\
    This code will return \"Yes\" if file name is valid, and \"No\" if the name is\
    \ invalid.\n<code>\n#lang racket\n", "  (cond\n    [(= (string-length file_name)\
    \ 3) \"Yes\"]\n    [(= (string-length file_name) 5) \"Yes\"]\n    [(= (string-length\
    \ file_name) 4) \"Yes\"]\n    [(string-char (char-code (first file_name)) #\\\
    0) \"Yes\"]\n    [(string-char (char-code (first file_name)) #\\9) \"Yes\"]\n\
    \    [(string-char (char-code (first file_name)) #\\a) \"Yes\"]\n    [(string-char\
    \ (char-code (first file_name)) #\\b) \"Yes\"]\n    [(string-char (char-code (first\
    \ file_name)) #\\c) \"Yes\"]\n    [(string-char (char-code (first file_name))\
    \ #\\d) \"Yes\"]\n    [(string-char (char-code (first file_name)) #\\e) \"Yes\"\
    ]\n    [(string-char (char-code (first file_name)) #\\f) \"Yes\"]\n    [(string-char\
    \ (char-code (first file_name)) #\\g) \"Yes\"]\n    [(string-char (char-code (first\
    \ file_name)) #\\h) \"Yes\"]\n    [(string-char (char-code (first file_name))\
    \ #\\i) \"Yes\"]\n    [(string-char (char-code (first file_name)) #\\j) \"Yes\"\
    ]\n    [(string-char (char-code (first file_name)) #\\k) \"Yes\"]\n    [(string-char\
    \ (char-code (first file_name)) #\\l) \"Yes\"]\n    [(string-char (char-code (first\
    \ file_name)) #\\m) \"Yes\"]\n    [(string-char (char-code (first file_name))\
    \ #\\n) \"Yes\"]\n    [(string-char (char-code (first file_name)) #\\o) \"Yes\"\
    ]\n    [(string-char (char-code (first file_name)) #\\p) \"Yes\"]\n    [(string-char\
    \ (char-code (first file_name)) #\\q) \"Yes\"]\n    [(string-char (char-code (first\
    \ file_name)) #\\r) \"Yes\"]\n    [(string-char (char-code (first file_name))\
    \ #\\s) \"Yes\"]\n    [(string-char (char-code (first file_name)) #\\t) \"Yes\"\
    ]\n    [(string-char (char-code (first file_name)) #\\v) \"Yes\"]\n    [(string-char\
    \ (char-code (first file_name)) #\\w) \"Yes\"]\n    [(string-char (char-code (first\
    \ file_name)) #\\X) \"Yes\"]\n    [(string", "  (cond\n    [(string=? file_name\
    \ (substring file_name 0 4)) 'Yes]\n    [else 'No]))\n</code>\n<|/ a |>\n<| c\
    \ |>\n\"The substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z').\" is not very clear. Could\
    \ you explain it a bit?\n<|/ c |>\n<| c |>\nThat condition is only true when `file_name`\
    \ is in fact of the form \"filename.txt\", which means there is an extension and\
    \ the first character is alphabetic.  Since this appears before the dot, it is\
    \ not a possibility, therefore it is not valid.\n<|/ c |>\n<| c |>\nI see. Thank\
    \ you. It really helped. Just to double check, should I put `(file_name_check\
    \ \"1example.dll\")` instead of `(file_name_check \"example.txt\")`?\n<|/ c |>\n\
    <| c |>\nNo, you should use `(file_name_check \"1example.dll\")`.\n<|/ c |>\n\
    <| c |>\nThank you very much for explaining it so clearly. It's quite useful.\n\
    <|/ c |>\n<| a dscore=1 |>\nI recommend that you use regular expressions to validate\
    \ your input. Here's a quick-and-dirty implementation:\n<code>\n#lang racket\n",
  "  (cond\n    [(empty? file_name) \"No\"]\n    [(string-match (regexp-opt (list*\
    \ (regexp-opt \"[^0-9]\") (regexp-opt \".\"))) file_name) \"No\"]\n    [(list-ref\
    \ (subseq (string->list (substring file_name 0 (string-length file_name))) 0 (-\
    \ (string-length file_name) (string-length \n                                \
    \                                                                     (substring\
    \ file_name 0 (string-length file_name)))) \n                (string->list (substring\
    \ file_name 0 (string-length file_name)))) (string-match (regexp-opt \n      \
    \                                                                            \
    \                   (list* (regexp-opt \"[A-Za-z]\") \n                      \
    \                                                                            \
    \   (regexp-opt \"[0-9]))) \n                (substring file_name 0 (string-length\
    \ file_name))) \"No\"]\n    [else (file-name-valid (substring file_name 0 (string-length\
    \ file_name)))]\n  )\n)\n", "  (cond\n    ((< 3 (string-length file_name))\n \
    \    (display \"ERROR: The file name is too long. \nThe file's name should not\
    \ have more than three digits ('0'-'9').\")\n     (display \"Press ENTER to continue.\"\
    )\n     (newline))\n    ((not (string-contains file_name\n                   \
    \   \".\"))\n     (display \"ERROR: The file name is invalid. \nThe file's name\
    \ should not contain any dot.\")\n     (display \"Press ENTER to continue.\")\n\
    \     (newline))\n    ((not (string-contains file_name\n                     \
    \ \".\"))\n     (display \"ERROR: The file name is invalid. \nThe file's name\
    \ should not contain any dot.\")\n     (display \"Press ENTER to continue.\")\n\
    \     (newline))\n    ((not (string-contains file_name\n                     \
    \ \".\"))\n     (display \"ERROR: The file name is invalid. \nThe file's name\
    \ should not contain any dot.\")\n     (display \"Press ENTER to continue.\")\n\
    \     (newline))\n    ((not (string-contains file_name\n                     \
    \ \".\"))\n     (display \"ERROR: The file name is invalid. \nThe file's name\
    \ should not contain any dot.\")\n     (display \"Press ENTER to continue.\")\n\
    \     (newline))\n    ((char (substring file_name 0 (string-length file_name)\
    \ 1)) (display \"ERROR: The file name is invalid. \nThe file's name should not\
    \ contain any dot.\")\n     (display \"Press ENTER to continue.\")\n     (newline))\n\
    \    ((char (substring file_name 0 (string-length file_name) 1)) \n     (char\
    \ (substring file_name 1 \n         (string-length file_name) 1)) \n     (display\
    \ \"ERROR: The file name is invalid. \nThe file's name should not contain any\
    \ dot.\")\n     (display \"Press ENTER to continue.\")\n     (newline))\n    ((char\
    \ (substring file_name 0 (string-length file_name) 1)) \n     (char (substring\
    \ file_name 1 \n         (string-length file_name) 1)) \n     (char (substring\
    \ file_name 2 \n         (string-length file_name) 1)) \n     (display \"ERROR:\
    \ The file name is invalid. \nThe file's name should not contain any dot.\")\n\
    \     (display \"Press ENTER to continue.\")\n     (newline))\n    ((char (substring\
    \ file_name 0 (string-length file_name) 1)) \n     (char (substring file_name\
    \ 1 \n         (string-length file_name) 1)) \n     (char (substring file_name\
    \ 2 \n         (string-length file_name) 1)) \n     (char (substring file_name\
    \ 3 \n         (string-length file_name) 1)) \n     (display \"ERROR: The file\
    \ name is invalid. \nThe file's name should not contain any dot.\")\n     (display\
    \ \"Press ENTER to continue", "  (cond\n    [(number? (string->number (string-trim\
    \ file_name))) 'Yes']\n    [(string-contains-dots (string-trim file_name)) 'No']\n\
    \    [(string-not-empty (substring (file-name 0 string-length (file-name 0 file_name)))\
    \ 'No']\n    [(string-not-empty (substring (file-name 0 string-length (file-name\
    \ 0 file_name))) 'Yes']\n    [(and (substring (file-name 0 string-length (file-name\
    \ 0 file_name)) ?[a-z] [?A-Z]) \n         (string-contains-dots\n          (string-trim\
    \ (substring (file-name 0 (string-length (file-name 0 file_name)) \n         \
    \                      string-length (file-name 0 (string-length (file-name 0\
    \ file_name))))))) 'No']\n    [(and (substring (file-name 0 string-length (file-name\
    \ 0 file_name)) ?[a-z] [?A-Z]) \n         (string-contains-dots\n          (string-trim\
    \ (substring (file-name 0 (string-length (file-name 0 file_name)) \n         \
    \                      string-length (file-name 0 (string-length (file-name 0\
    \ file_name))))))) 'Yes']\n    [else 'No'])) \n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nYou just have to check the length before you try to do the string comparison:\n\
    <code>", "  (if (or (null? file_name)\n          (empty? file_name))\n      'No\n\
    \      (let ([name_part (substring file_name 0 (string-length file_name) 1)]\n\
    \            [ext (substring-before file_name \".\")]\n            [dot_loc (string-index\
    \ file_name \".\" 0)])\n        (and (= 1 (string-length name_part))\n       \
    \      (= 1 (string-length ext))\n             (string=? (substring file_name\
    \ 1 (- (string-length dot_loc) 1))\n                      '(a b c d e f g h i\
    \ j k l m n o p q r s t u v w x y z))\n             (string=? (substring file_name\
    \ 1 (- (string-length dot_loc) 2))\n                      '(tx ty tz tx ty tz\
    \ tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty\
    \ tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx\
    \ ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz\
    \ tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty\
    \ tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx\
    \ ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz\
    \ tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty\
    \ tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx ty tz tx\
    \ ty tz tx ty tz tx ty tz tx ", "  (cond\n    [(= (length file_name) 3) \"Yes\"\
    ]\n    [(= \"#\\.\" file_name) \"Yes\"]\n    [(> (string->list (string->string\
    \ file_name)) 3)\n     (error \"Too many numbers in file's name\")])\n    (cond\n\
    \      [(char? (car file_name)) (string->list (string->string file_name))\n  \
    \     (error \"File name must not contain '.'\")])\n    [(or (string->char (car\
    \ file_name)) (string->char (car file_name))\n         (string->char (car file_name)))\n\
    \     (error \"Substring before dot must be non-empty\")])\n    [(or (string->char\
    \ (string->string file_name)))\n     (error \"Substring after dot must be one\
    \ of these: ['txt', 'exe', 'dll']\")])\n    (cond\n      [(string->char (string->string\
    \ file_name))\n       (error \"File name must contain exactly one dot '.'\")])\n\
    \    [(or (char->string\n            (string->char (string->string file_name)))\n\
    \       (char->string\n            (string->char (string->string file_name)))\n\
    \       (char->string\n            (string->char (string->string file_name)))\n\
    \       (error \"Substring before dot must start with a letter from the latin\
    \ alphabet.\")])\n    [(or (char->string\n            (string->char (string->string\
    \ file_name)))\n       (char->string\n            (string->char (string->string\
    \ file_name)))\n       (char->string\n            (string->char (string->string\
    \ file_name)))\n       (error \"Substring after dot must be one of these: ['txt',\
    \ 'exe', 'dll']\")])\n    [(= (string->list (string->string file_name)) '(yes))\
    \ true]\n    [(= (string->list (string->string file_name)) '(no))\n     (error\
    \ \"File name must have two numbers in it.\")]\n    [else false]))\n</code>\n\
    To test it:\n<code>", "  (let ([filename-regex (string->regexp file_name)])\n\
    \    (and (not (re-search-forward \"^[0-9][0-9]\" filename-regex))\n         (not\
    \ (re-search-forward \"[.]\" filename-regex))\n         (not (re-search-forward\
    \ \"^[a-z][a-z]\" filename-regex))\n         (not (re-search-forward \"[.]\" filename-regex))\n\
    \         (string=? (substring (substring file_name 0 3) 0)\n                \
    \    '(a b c d e f g h i j k l m n o p q r s t u v w x y z)))\n    (string=? (substring\
    \ (substring file_name 3 4)) '(\"exe\" \"dll\"))))\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI appreciate your answer! But could you elaborate on the \"regex\" parts?\
    \ I see that they're not part of scheme itself, but I wasn't sure which library\
    \ I should use for them. Can you please provide a sample code?\n<|/ c |>\n<| c\
    \ |>\nThe `regex` library is a library that provides functions for string processing\
    \ and regular expressions in Scheme.  You can see an example of how to use the\
    \ `regex` library here: http://srfi.schemers.org/srfi-31/srfi-31.html\n<|/ c |>\n\
    <| c |>\nThank you very much! I will read through this library, and implement\
    \ it. Hopefully this will solve my problem!\n<|/ c |>\n<| a tags=scheme,functional-programming\
    \ |>\n<code>", "  (match file_name\n    ; A valid file's name must have exactly\
    \ three digits and a dot.\n    [(<> num_string \".\") (< 3 (string-length file_name))]\n\
    \    ; A valid file's name cannot start with a number.\n    [(< 3 (string-length\
    \ file_name)) (string-match \"[0-9]\" (substring file_name 0 3))]\n    ; A valid\
    \ file's name cannot have a dot after the dot.\n    [(string-match \".\" file_name)\
    \ (string-match \"[0-9]\" (substring file_name (in-string file_name) (in-string\
    \ file_name) 3))]\n    ; A valid file's name cannot have two dots after the dot.\n\
    \    [(string-match \".\" file_name) (string-match \"[0-9]\" (substring file_name\
    \ (in-string file_name) (in-string file_name) (in-string file_name) 3))]\n   \
    \ ; A valid file's name cannot end with one of these: ['txt', 'exe', 'dll']\n\
    \    [(< 3 (string-length file_name)) (string-match \"[txt|exe|dll]\" (substring\
    \ file_name (in-string file_name) (in-string file_name)))]\n    ; A valid file's\
    \ name must end with a dot.\n    [(string-match \".\" file_name) (string-match\
    \ \"[0-9]\" (substring file_name (in-string file_name) (+ 0 (string-length file_name))))]\n\
    \    ; A valid file's name must end with one of these: ['txt', 'exe', 'dll']\n\
    \    [(string-match \".\" file_name) (string-match \"[0-9]\" (substring file_name\
    \ (in-string file_name) (+ 0 (string-length file_name))) )]\n    ; A valid file's\
    \ name must not end with another dot.\n    [(string-match \".\" file_name) (string-match\
    \ \"[0-9]\" (substring file_name (in-string file_name) (+ 0 (string-length file_name))\
    \ ))]\n    ; A valid file's name must not end with one of these: ['txt', 'exe',\
    \ 'dll']\n    [(string-match \".\" file_name) (string-match \"[0-9]\" (substring\
    \ file_name (in-string file_name) (+ 0 (string-length file_name)) )) ]\n    ;\
    \ A valid file's name must not start with two numbers.\n    [(< 3 (string-length\
    \ file_name)) (string-match \"[0-9]\" (substring file_name 0 (in-string file_name)))]\n\
    \    ; A valid file's name must not start with one of these: ['txt', 'exe', 'dll']\n\
    \    [(string-match \".\" file_name) (string-match \"[0-9]\" (substring file_name\
    \ 0 (in-string file_name) ))]\n    ; ", "  ;; Get the string length\n  (define\
    \ (string_length string_name)\n    (string-length string_name))\n\n  ;; Check\
    \ to make sure that the file name contains no more than three digits\n  (define\
    \ (name_length string_name)\n    (if (= (string-length string_name) 3)\n     \
    \   #t\n        #f))\n\n  ;; Check to make sure that the file name contains only\
    \ one dot\n  (define (dot_count string_name)\n    (if (= (string-length string_name)\
    \ 0)\n        #t\n        #f))\n\n  ;; Check to make sure that there is only one\
    \ dot ('.') and that the file name\n  ;; starts wiht a letter from the latin alphabet\n\
    \  (define (only_one_dot string_name)\n    (if (dot_count string_name)\n     \
    \   #t\n        #f))\n\n  ;; Check to make sure that all the conditions above\
    \ are satisfied\n  (define (check_file_name string_name)\n    (if (name_length\
    \ string_name)\n        (only_one_dot string_name)\n        (dot_count string_name)\n\
    \        (string-length string_name)\n        (<\n          (string-ref string_name\
    \ 0)\n          'a\n          (string-ref string_name 1)\n          'z\n     \
    \     (string-ref string_name 2)\n          'A\n          (string-ref string_name\
    \ 3)\n          'Z)))\n\n  ;; Check to make sure the file's name is valid\n  (define\
    \ (file_name_check file_name)\n    (if (file_name_check file_name)\n        #t\n\
    \        #f))\n\n  ;; Check to make sure that the file's name is the correct format\n\
    \  (define (file_name_check file_name)\n    (if (file_name_check file_name)\n\
    \        #t\n        #f))\n\n  ;; Check to make sure the file's name is the correct\
    \ format\n  (file_name_check file_name)\n", "  (cond\n    ((<= 3 (length file_name))\n\
    \     (and (= (string-char-at (sub1 file_name) 0) '0)\n          (= (string-char-at\
    \ (sub1 file_name) 1) '9)\n          (not (= \"..\" \n                    (sub1\
    \ (sub1 file_name)))))\n     (and (string=? (sub1 (sub1 file_name))\n        \
    \            (list 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't\n\
    \                          'u 'v 'w 'x 'y 'z 'A 'B 'C 'D 'E 'F 'G 'H 'I 'J 'K\
    \ 'L \n                          'M 'N 'O 'P 'Q 'R 'S 'T 'U 'V 'W 'X 'Y 'Z 'a\
    \ \n                          'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q\
    \ 'r \n                          's 't 'u 'v 'w 'x 'y 'z 'A 'B 'C 'D 'E 'F 'G\
    \ 'H 'I \n                          'J 'K 'L M 'N 'O 'P 'Q 'R 'S 'T 'U 'V 'W 'X\
    \ 'Y 'Z 'A \n                          'B 'C 'D 'E 'F 'G 'H 'I 'J 'K 'L M 'N 'O\
    \ 'P 'Q 'R \n                          'S 'T 'U 'V 'W 'X 'Y 'Z 'a b 'c 'd 'e 'f\
    \ 'g 'h \n                          'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v\
    \ 'w 'x \n                          'y 'z 'A B 'C 'D 'E 'F 'G 'H 'I 'J 'K 'L M\
    \ 'N \n                          'O 'P 'Q 'R 'S 'T 'U 'V 'W 'X 'Y 'Z 'a b 'c 'd\
    \ 'e \n                          'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't\
    \ 'u \n                          'v 'w 'x 'y 'z 'A B 'C 'D 'E 'F 'G 'H 'I 'J 'K ",
  "  (cond\n    [(< (string-length file_name) 3) \"name should be more than 3 digits\"\
    ]\n    [(string-match \".\" (substring file_name 0 (- (string-length file_name)\
    \ 2))) \"name should contains a dot\"]\n    [(string-match #{\\a \\z A-Z} \n \
    \                   (substring file_name 0 (- (string-length file_name) 1))) \"\
    name should start with letter\"]\n    [else 'No']))\n", "  (cond [(string-empty?\
    \ file_name)\n         \"Yes\"]\n        [(string-equal? \"..\" file_name)\n \
    \        \"No\"]\n        [(string-contains? \".\" file_name)\n         (string-equal?\
    \ (string-upcase (string-ref file_name 0 0)) (substring file_name\n          \
    \                                                               1 (string-length\
    \ file_name)))]\n        [(string-equal? (substring file_name 0 (string-length\
    \ file_name)) \".txt\")\n         \"Yes\"]\n        [(string-equal? (substring\
    \ file_name 0 (string-length file_name)) \".exe\")\n         \"Yes\"]\n      \
    \  [(string-equal? (substring file_name 0 (string-length file_name)) \".dll\"\
    )\n         \"Yes\"]\n        [(string-equal? (substring file_name 0 (string-length\
    \ file_name)) \".tXT\")\n         \"Yes\"]\n        [(string-equal? (substring\
    \ file_name 0 (string-length file_name)) \".EXE\")\n         \"Yes\"]\n      \
    \  [(string-equal? (substring file_name 0 (string-length file_name)) \".DLL\"\
    )\n         \"Yes\"]\n        [(string-equal? (substring file_name 0 (string-length\
    \ file_name)) \".TXT\")\n         \"Yes\"]\n        [else (string-equal? \"Yes\"\
    \ \"\")]))\n", "  (let ([file_name_str (string-ref file_name 0)])\n    (let ([dot_position\
    \ (string-indexof file_name_str '.)])\n      (if (< dot_position 0)\n        \
    \  'No\n          (let ([dot_string_check (string-substring file_name_str dot_position\
    \ '())])\n            (if (empty? dot_string_check)\n                'No\n   \
    \             (if (member dot_string_check\n                           (list \"\
    txt\" \"exe\" \"dll\"))\n                    'Yes\n                    'No))))))\n",
  "  (cond\n    [(< (length file_name) 3) 'No]\n    [(string-match \"^[0-9]\" file_name)\
    \ 'No]\n    [(< (string-index file_name \"\\\\.\") 0) 'No]\n    [(string-match\
    \ \"^[a-z][a-zA-Z0-9]+\" file_name) 'Yes]\n    [else 'No]))\n", "  (match file_name\n\
    \  ((string \"\" \"No\" \"\")\n   \"No\")\n  ((string-match \"^[0-9]*\\.[^\\.]*$\"\
    \ file_name)\n   \"Yes\")\n  ((string-match \"^[a-z][a-z\\.]*\" file_name)\n \
    \  \"Yes\")\n  ((string-match \"^[a-z][a-z\\.]*\\.txt$\" file_name)\n   \"Yes\"\
    )\n  ((string-match \"^[a-z][a-z\\.]*\\.exe$\" file_name)\n   \"Yes\")\n  ((string-match\
    \ \"^[a-z][a-z\\.]*\\.dll$\" file_name)\n   \"Yes\")\n  (else\n   \"No\"))\n \
    \ )\n", "  (if (string=? file_name (check-string \"0[0-9]\\.[txt|exe|dll]\"))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(equal? (string-length (file_name))\
    \ 6)\n     (if (equal? (char (substring file_name 0 2)) 48) (\n           (equal?\
    \ (char (substring file_name 0 2)) 57) (\n           (equal? (char (substring\
    \ file_name 0 2)) 65) (\n           (equal? (char (substring file_name 0 2)) 90)\
    \ (\n           (equal? (char (substring file_name 0 2)) 97) (\n           (equal?\
    \ (char (substring file_name 0 2)) 98) (\n           (equal? (char (substring\
    \ file_name 0 2)) 99) (\n           (equal? (char (substring file_name 0 2)) 101)\
    \ (\n           (equal? (char (substring file_name 0 2)) 105) (\n           (equal?\
    \ (char (substring file_name 0 2)) 106) (\n           (equal? (char (substring\
    \ file_name 0 2)) 107) (\n           (equal? (char (substring file_name 0 2))\
    \ 109) (\n           (equal? (char (substring file_name 0 2)) 110) (\n       \
    \    (equal? (char (substring file_name 0 2)) 111) (\n           (equal? (char\
    \ (substring file_name 0 2)) 112) (\n           (equal? (char (substring file_name\
    \ 0 2)) 113) (\n           (equal? (char (substring file_name 0 2)) 114) (\n \
    \          (equal? (char (substring file_name 0 2)) 115) (\n           (equal?\
    \ (char (substring file_name 0 2)) 116) (\n           (equal? (char (substring\
    \ file_name 0 2)) 117) (\n           (equal? (char (substring file_name 0 2))\
    \ 118) (\n           (equal? (char (substring file_name 0 2)) 119) (\n       \
    \    (equal? (char (substring file_name 0 2)) 120) (\n           (equal? (char\
    \ (substring file_name 0 2)) 121) (\n           (equal? (char (substring file_name\
    \ 0 2)) 122) (\n           (equal? (char (substring file_name 0 2)) 123) (\n \
    \          (equal? (char (substring file_name 0 2)) 124) (\n           (equal?\
    \ (char (substring file_name 0 2)) 125) (\n           (equal? (char (substring\
    \ file_name 0 2)) 126) (\n           (equal? (char (substring file_name 0 2))\
    \ 127) (\n           (equal? (char (substring file_name 0 2)) 128) (\n       \
    \    (equal? (char (substring file_name 0 2)) 129) (\n           (equal? (char\
    \ (substring file_name 0 2)) ", "  (cond\n    [(string-length file_name) <= 3]\n\
    \    [(substring file_name 0 (string-length file_name)) <> \".\"]\n    [(substring\
    \ file_name 0 (string-length file_name))\n         (char=? (substring file_name\
    \ 0 (string-length file_name)) #\\0)\n         (char=? (substring file_name 0\
    \ (string-length file_name)) #\\9)\n         (char=? (substring file_name 0 (string-length\
    \ file_name)) #\\A)\n         (char=? (substring file_name 0 (string-length file_name))\
    \ #\\Z)\n         (char=? (substring file_name 0 (string-length file_name)) #\\\
    A)\n         (char=? (substring file_name 0 (string-length file_name)) #\\Z)]\n\
    \    [(file_name-check file_name (substring file_name 0 (string-length file_name)))]\n\
    \    [else \"\"]))\n", "  (cond\n    [(<= 3 (length file_name)) \"Yes\"]\n   \
    \ [(contains (string->char '.) file_name) \"Yes\"]\n    [(member (substring file_name\
    \ 0 1) '(\"a\" . \"z\"))\n     (cond\n       [(member (substring file_name 0 2)\
    \ '(\"A\" . \"Z\")) \"Yes\"]\n       [(member (substring file_name 0 3) '(\"0\"\
    \ . \"9\")) \"No\"]\n       [else (error \"Invalid name\" file_name)]\n      \
    \ )]\n    [else (error \"Invalid name\" file_name)]))\n", "  (cond\n    ((< (length\
    \ file_name) 3) \"File name is too short\")\n    ((char-alphabet (file-name 0\
    \ (length file_name))) \"File name contains illegal characters\")\n    ((file-name\
    \ 0 (file-name 0 (length file_name)) \"File name starts with illegal character\"\
    )\n    ((equal? file-name (substring (string (substring (file file_name) 1 1))\
    \ (substring (file file_name) 0 (length file_name)))) \"File name ends with illegal\
    \ character\")\n    ((equal? (substring (file file_name) 0 (length (file file_name))\
    \ \".\") \"File name contains illegal character\"))\n    (else \"Yes\")))\n",
  "  (and (= (string-length file_name) 3)\n       (char=? (substring file_name 0 1)\
    \ #\\0)\n       (char=? (substring file_name 0 1) #\\9)\n       (char=? (substring\
    \ file_name 0 1) #\\a)\n       (char=? (substring file_name 0 1) #\\z)\n     \
    \  (char=? (substring file_name 1 2) #\\.)\n       (= (string-length file_name)\
    \ 4)\n       (char=? (substring file_name 2 3) #\\.)\n       (string=? (substring\
    \ file_name 3 4) \"txt\"\n                   \"exe\"\n                   \"dll\"\
    )))\n</cell>\n<text>\nExercise: Write a function called 'directory_exists' that\
    \ takes a string representing a directory name and returns 'Yes' if the directory\
    \ name refers to an existing directory, and returns 'No' otherwise.\n\n</text>\n\
    <cell>", "  (cond\n    [(>= (length file_name) 3) \"No\"]\n    [(member '. (file-name\
    \ file_name)) \"No\"]\n    [(not (begins-with? file_name)) \"No\"]\n    [else\n\
    \     (cond \n       [(member (symbol->string (file->symbol file_name)) '(#\\\
    a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)) \"No\"]\n       [(member (symbol->string\
    \ (file->symbol file_name)) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\\
    J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z))\
    \ \"No\"]\n       [else (cond\n               [(member (symbol->string (file->symbol\
    \ file_name)) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)) \"No\"]\n\
    \               [else (cond\n                        [(member (symbol->string\
    \ (file->symbol file_name)) '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\\
    j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z))\
    \ \"No\"]\n                        [(member (symbol->string (file->symbol file_name))\
    \ '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\\
    O #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)) \"No\"]\n              \
    \          [(member (symbol->string (file->symbol file_name)) '(#\\0 #\\1 #\\\
    2 #\\3 #\\4 #\\5 #\\", "  (cond\n    [(< (string-length file_name) 3)\n     (string-match\
    \ \"^[0123456789]\" file_name)\n     (string-match \".\" file_name)\n     (string-match\
    \ \"^([a-z]|[A-z])\" file_name)\n     (string-match \".(txt|exe|dll)$\" file_name)\n\
    \     (string-match \".(txt|exe|dll)$\" file_name)\n     (string-match \".(txt|exe|dll)$\"\
    \ file_name)]\n    [else (return 'No)]\n  )\n)\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\nIn Scheme you could use string-match to find the file name with\
    \ the desired format. For example to find files with names starting with letters\
    \ other than 'a' and ending in 'txt':\n<code>", "  (cond\n    ((empty? file_name)\n\
    \     \"No\")\n    ((equal? (string-length (substring file_name 0 (string-length\
    \ file_name)))\n              3) \n     \"Yes\")\n    ((equal? (string-length\
    \ (substring file_name 0 (string-length file_name)))\n              'dot)\n  \
    \   \"No\")\n    ((not (equal? (char-alphabetic? (substring file_name 0 (string-length\
    \ file_name) )) (equal? (substring file_name 0 (string-length file_name)) 'a')\
    \ )\n     \"No\")\n    ((equal? (substring file_name 0 (string-length file_name))\n\
    \              (substring file_name 0 (string-length file_name) 0))\n     \"No\"\
    )\n    ((equal? (substring file_name 0 (string-length file_name))\n          \
    \    (substring file_name 0 (string-length file_name) 1))\n     \"No\")\n    ((equal?\
    \ (substring file_name 0 (string-length file_name))\n              'a')\n    \
    \ \"No\")\n    ((equal? (substring file_name 0 (string-length file_name))\n  \
    \            'b)\n     \"No\")\n    ((equal? (substring file_name 0 (string-length\
    \ file_name))\n              'c)\n     \"No\")\n    ((equal? (substring file_name\
    \ 0 (string-length file_name))\n              'd)\n     \"No\")\n    ((equal?\
    \ (substring file_name 0 (string-length file_name))\n              'e)\n     \"\
    No\")\n    ((equal? (substring file_name 0 (string-length file_name))\n      \
    \        'f)\n     \"No\")\n    ((equal? (substring file_name 0 (string-length\
    \ file_name))\n              'g)\n     \"No\")\n    ((equal? (substring file_name\
    \ 0 (string-length file_name))\n              'h)\n     \"No\")\n    ((equal?\
    \ (substring file_name 0 (string-length file_name))\n              'i)\n     \"\
    No\")\n    ((equal? (substring file_name 0 (string-length file_name))\n      \
    \        'j)\n     \"No\")\n    ((equal? (substring file_name 0 (string-length\
    \ file_name))\n              'k)\n     \"No\")\n    ((equal? (substring file_name\
    \ 0 (string-length file_name))\n              'l)\n     \"No\")\n    ((equal?\
    \ (substring file_name 0 (string-length file_name))\n              'm)\n     \"\
    No\")\n    ((equal? (substring file_name 0 (string-length file_name))\n      \
    \        'n)\n     \"No\")\n    ((equal? (substring file_name 0 (string-length\
    \ file_name))\n              'o)\n     \"No\")\n    ((equal? (substring file_name\
    \ 0 (string-length file_name))\n              'p)\n     \"No\")\n    ((equal?\
    \ (substring file_name 0 (string-length file_name))\n              'q)\n     \"\
    No\")\n    ((equal? (substring file_name 0 (string-length file_name", "  (cond\n\
    \    [(string= file_name \"\") 'No]\n    [(string= (reverse file_name) \"\") 'No]\n\
    \    [(string= (reverse file_name) (substring file_name 0 (string-length file_name)))\n\
    \     (cond \n       [(equal? (substring file_name 0 (string-length file_name))\
    \ \".\") 'No]\n       [else 'No]\n       )\n    ]\n    [else (begin \n       \
    \        (string-match \"[0-9]{3}\" file_name)\n               (string-match \"\
    .\" file_name)\n               (string-match \"^[a-Z].+\" file_name)\n       \
    \        (string-match \"[exe|dll]\" file_name)\n               (begin (equal?\
    \ (string-length file_name) (string-length (substring file_name 0 (string-length\
    \ file_name))))\n                    (equal? (substring file_name 0 (string-length\
    \ file_name)) \".\")\n                    (equal? (substring file_name 0 (string-length\
    \ file_name)) \"exe\")\n                    (equal? (substring file_name 0 (string-length\
    \ file_name)) \"dll\")\n                    )\n               (begin (equal? (string-length\
    \ file_name) (string-length (substring file_name 0 (string-length file_name))))\n\
    \                    (equal? (substring file_name 0 (string-length file_name))\
    \ \".\")\n                    (equal? (substring file_name 0 (string-length file_name))\
    \ \"exe\")\n                    )\n               (begin (equal? (string-length\
    \ file_name) (string-length (substring file_name 0 (string-length file_name))))\n\
    \                    (equal? (substring file_name 0 (string-length file_name))\
    \ \".\")\n                    )\n               (begin (equal? (string-length\
    \ file_name) (string-length (substring file_name 0 (string-length file_name))))\n\
    \                    (equal? (substring file_name 0 (string-length file_name))\
    \ \".\")\n                    )\n               (begin (equal? (string-length\
    \ file_name) (string-length (substring file_name 0 (string-length file_name))))\n\
    \                    (equal? (substring file_name 0 (string-length file_name))\
    \ \".\")\n                    )\n               (begin (equal? (string-length\
    \ file_name) (string-length (substring file_name 0 (string-length file_name))))\n\
    \                    (equal? (substring file_name 0 (string-length file_name))\
    \ \".\")\n                    )\n               (begin (equal? (string-length\
    \ file_name) (string-length (substring file_name 0 (string-length file_name))))\n\
    \                    (equal? (substring file_name 0 (string-length file_name))\
    \ \".\")\n                    )\n               (begin (equal? (string-length\
    \ file_name) (string-length (substring file_name 0 (string-length file_name))))\n\
    \                    (equal? (substring file_name 0 (string-length file_name))\
    \ \".\")\n                    )\n               (begin (equal? (string-length ",
  "  (let* ((name_chars (string->list file_name))\n         (length (length name_chars))\n\
    \         (valid-chars (sub1 (make-char-list '('a 'z 'A 'Z)))\n         (valid_name\
    \ (null? (string->list file_name)))\n         (valid-number (null? (string->list\
    \ file_name)))\n         (dot (first (first name_chars)))\n         (name (second\
    \ name_chars))\n         (first_char (first name))\n         (second_char (second\
    \ name))\n         (char (string->list file_name)))\n    (cond\n      [(< length\
    \ 3) \"No\"]\n      [(< length 5) \"No\"]\n      [(= length 3) \"Yes\"]\n    \
    \  [(= length 5) \"Yes\"]\n      [(= length 2) \"Yes\"]\n      [(char= first_char\
    \ valid-chars) \"Yes\"]\n      [(char= second_char valid-chars) \"Yes\"]\n   \
    \   [(char= first_char valid-num) \"No\"]\n      [(char= second_char valid-num)\
    \ \"No\"]\n      [(char= first_char valid-num) \n       \"No\"]\n      [(char=\
    \ second_char valid-num) \n       \"No\"]\n      [(char= first_char valid-num)\
    \ \n       \"No\"]\n      [(char= second_char valid-num) \n       \"No\"]\n  \
    \    [(char= first_char valid-num) \n       \"No\"]\n      [(char= second_char\
    \ valid-num) \n       \"No\"]\n      [(char= first_char valid-num) \n       \"\
    No\"]\n      [(char= second_char valid-num) \n       \"No\"]\n      [(char= first_char\
    \ valid-num) \n       \"No\"]\n      [(char= second_char valid-num) \n       \"\
    No\"]\n      [(char= first_char valid-num) \n       \"No\"]\n      [(char= second_char\
    \ valid-num) \n       \"No\"]\n      [(char= first_char valid-num) \n       \"\
    No\"]\n      [(char= second_char valid-num) \n       \"No\"]\n      [(char= first_char\
    \ valid-num) \n       \"No\"]\n      [(char= second_char valid-num) \n       \"\
    No\"]\n      [(char= first_char valid-num) \n       \"No\"]\n      [(char= second_char\
    \ valid-num) \n       \"No\"]\n      [(char= first_char valid-num) \n       \"\
    No\"]\n      ", "  (cond\n    [(and (or (char-set->integer file_name) 0)\n   \
    \       (< 4 (length file_name)))\n     (cond\n       [(string=? (substring file_name\
    \ 0 (- (length file_name) 1)) \"..\")\n        (string-append \"No\" \"File name\
    \ cannot contain dots\")]\n       [(string=? (substring file_name 0 (- (length\
    \ file_name) 1)) \"\")\n        (string-append \"No\" \"File name cannot contain\
    \ spaces\")]\n       [(string=? (substring file_name 0 (- (length file_name) 1))\
    \ \n                  \"a\" \n                  \"Z\" \n                  \"A\"\
    \ \n                  \"9\")\n        (string-append \"No\" \"File name cannot\
    \ start with a number\")]\n       [else\n        (string-append \"Yes\" \"File\
    \ name is valid\")]\n       ])]\n    [else\n     (string-append \"No\" \"File\
    \ name must be a string of maximum 3 digits\")]\n    [else\n     (string-append\
    \ \"No\" \"File name cannot contain dots\")]))\n", "  (cond\n    [(string=? file_name\
    \ \"\")\n     \"No\"]\n    [(substring file_name 0 (string-length file_name))\
    \ \n     ((length= (file-name file_name) 0) \"No\")\n     ((file-name-valid file_name)\
    \ \"No\")\n    ]\n    [(and (not(string-includes file_name \".\")) \n        \
    \  (string=? (substring file_name 0 (string-length file_name)) \"\")) \n     ((length=\
    \ (file-name file_name) 1) \"No\")\n     ((file-name-valid file_name) \"No\")\n\
    \    ]\n    [(and (not(string-includes file_name \".\")) \n          (string=?\
    \ (substring file_name 0 (string-length file_name)) \"\")) \n     ((file-name-valid\
    \ file_name) \"No\")\n    ]\n    [(and (not(string-includes file_name \".\"))\
    \ \n          (string=? (substring file_name 0 (string-length file_name)) \"\"\
    )) \n     ((file-name-valid file_name) \"No\")\n    ]\n    [(and (not(string-includes\
    \ file_name \".\")) \n          (string=? (substring file_name 0 (string-length\
    \ file_name)) \"\")) \n     ((file-name-valid file_name) \"No\")\n    ]\n    [(and\
    \ (not(string-includes file_name \".\")) \n          (string=? (substring file_name\
    \ 0 (string-length file_name)) \"\")) \n     ((file-name-valid file_name) \"No\"\
    )\n    ]\n    [(and (not(string-includes file_name \".\")) \n          (string=?\
    \ (substring file_name 0 (string-length file_name)) \"\")) \n     ((file-name-valid\
    \ file_name) \"No\")\n    ]\n    [(and (not(string-includes file_name \".\"))\
    \ \n          (string=? (substring file_name 0 (string-length file_name)) \"\"\
    )) \n     ((file-name-valid file_name) \"No\")\n    ]\n    [(and (not(string-includes\
    \ file_name \".\")) \n          (string=? (substring file_name 0 (string-length\
    \ file_name)) \"\")) \n     ((file-name-valid file_name) \"No\")\n    ]\n    [(and\
    \ (not(string-includes file_name \".\")) \n          (string=? (substring file_name\
    \ 0 (string-length file_name)) \"\")) \n     ((file-name-valid file_name) \"No\"\
    )\n    ]\n    [(and (not(string-includes file_name \".\")) \n          (string=?\
    \ (substring file_name 0 (string-length file_name)) \"\")) \n     ((file-name-valid\
    \ file_name) \"No\")\n    ]\n    [(and (not(string-includes file_name \".\"))\
    \ \n          (string=? (substring file_name 0 (string-length file_name)) \"\"\
    )) \n     ((file-name-valid file_name) \"No\")\n    ]\n    [(and (not(string-",
  "  (cond\n    [(< 3 (string-length file_name)) \"No\"]\n    [(not (= (string-length\
    \ file_name) 4)) \"No\"]\n    [(not (string-match #rx\\. (substring file_name\
    \ 0 -2))) \"No\"]\n    [(not (or (substring file_name 0 1)\n              (string-match\
    \ #rx[a-z] file_name))) \"No\"]\n    [else \"Yes\"]\n  )\n)\n", "  (if (<= 3 (string-length\
    \ file_name)) \n      (if (= (string-ref file_name 0 0) (string-ref file_name\
    \ 0 1))\n          (if (string-match \"..\" file_name)\n              \"No\"\n\
    \              \"Yes\"))\n      \"No\"))\n", "  (let ((valid_name (string-match\
    \ \"^[0-9]\" file_name)))\n    (if (or (string-match \".\" file_name)\n      \
    \       (string-match \"^[a-Z][a-z]*\" file_name))\n        (begin \n        \
    \  (string-match \"^[a-zA-Z]\" file_name)\n          (string-match \"^[a-z]\"\
    \ file_name)\n          (string-match \"^[a-Z][a-z]\" file_name)\n          (string-match\
    \ \"^[a-z][a-z]\" file_name)\n          (string-match \"^[a-Z]$\" file_name)\n\
    \          \"No\")\n      \"Yes\")))\n", "  (let ([first_digit (string->number\
    \ (substring file_name 0 1)))]\n        [file_name (substring file_name 2)])\n\
    \    (cond\n      [(< first_digit (length file_name))\n       (begin (display\
    \ \"No\") (newline) (exit 1))]\n      [(not (= 1 (string-length file_name))\n\
    \       (begin (display \"No\") (newline) (exit 1))]\n      [(not (= (file-name\
    \ 0) (file-name (file-name (file-name file_name) 1))))\n       (begin (display\
    \ \"No\") (newline) (exit 1))]\n      [(not (string-contains-symbol? (substring\
    \ file_name 0 1)))\n       (begin (display \"No\") (newline) (exit 1))]\n    \
    \  [(not (string-contains-symbol? (substring file_name 0 1)))\n       (begin (display\
    \ \"No\") (newline) (exit 1))]\n      [(not (string-contains-symbol? (substring\
    \ file_name 0 1)))\n       (begin (display \"No\") (newline) (exit 1))]\n    \
    \  [(not (string-contains-symbol? (substring file_name 0 1)))\n       (begin (display\
    \ \"No\") (newline) (exit 1))]\n      [(not (string-contains-symbol? (substring\
    \ file_name 0 1)))\n       (begin (display \"No\") (newline) (exit 1))]\n    \
    \  [(not (string-contains-symbol? (substring file_name 0 1)))\n       (begin (display\
    \ \"No\") (newline) (exit 1))]\n      [(not (string-contains-symbol? (substring\
    \ file_name 0 1)))\n       (begin (display \"No\") (newline) (exit 1))]\n    \
    \  [(not (string-contains-symbol? (substring file_name 0 1)))\n       (begin (display\
    \ \"No\") (newline) (exit 1))]\n      [(not (string-contains-symbol? (substring\
    \ file_name 0 1)))\n       (begin (display \"No\") (newline) (exit 1))]\n    \
    \  [(not (string-contains-symbol? (substring file_name 0 1)))\n       (begin (display\
    \ \"No\") (newline) (exit 1))]\n      [(not (string-contains-symbol? (substring\
    \ file_name 0 1)))\n       (begin (display \"No\") (newline) (exit 1))]\n    \
    \  [(not (string-contains-symbol? (substring file_name 0 1)))\n       (begin (display\
    \ \"No\") (newline) (exit 1))]\n      [(not (string-contains-symbol? (substring\
    \ file_name 0 1)))\n       (begin (display \"No\") (newline) (exit 1))]\n    \
    \  [(not (string-contains-", "  (cond\n    [(string=? file_name \".\")\n     (error\
    \ \"file name must not contain a dot '.'.\")]\n    [(substring (substring file_name\
    \ 0 (string-length file_name)) 1 3)\n     (error \"file name must not contain\
    \ more than three digits.\")]\n    [(symbol=? (string->symbol file_name) (substring\
    \ (substring file_name 0 (string-length file_name)) 1 3))\n     (error \"file\
    \ name must not contain more than one dot '.'.\")]\n    [(string=? (substring\
    \ (substring file_name 0 (string-length file_name)) 1 3) \"a\")\n     (error \"\
    file name must not start with a letter from the latin alphabet.\")]\n    [(string=?\
    \ (substring (substring file_name 0 (string-length file_name)) 1 3) \"A\")\n \
    \    (error \"file name must not start with a letter from the latin alphabet.\"\
    )]\n    [(symbol=? (string->symbol file_name) (substring (substring file_name\
    \ 0 (string-length file_name)) 1 3))\n     (error \"file name must not contain\
    \ more than one dot '.'.\")]\n    [(symbol=? (string->symbol file_name) (substring\
    \ (substring file_name 0 (string-length file_name)) 1 3))\n     (error \"file\
    \ name must not contain more than one dot '.'.\")]\n    [(symbol=? (string->symbol\
    \ file_name) (substring (substring file_name 0 (string-length file_name)) 1 3))\n\
    \     (error \"file name must not contain more than one dot '.'.\")]\n    [(string=?\
    \ (substring (substring file_name 0 (string-length file_name)) 1 3) \"txt\")\n\
    \     (return \"Yes\")]\n    [(symbol=? (string->symbol file_name) (substring\
    \ (substring file_name 0 (string-length file_name)) 1 3))\n     (error \"file\
    \ name must not contain more than one dot '.'.\")]\n    [(symbol=? (string->symbol\
    \ file_name) (substring (substring file_name 0 (string-length file_name)) 1 3))\n\
    \     (error \"file name must not contain more than one dot '.'.\")]\n    [(symbol=?\
    \ (string->symbol file_name) (substring (substring file_name 0 (string-length\
    \ file_name)) 1 3))\n     (error \"file name must not contain more than one dot\
    \ '.'.\")]\n    [(symbol=? (string->symbol file_name) (substring (substring file_name\
    \ 0 (string-length file_name)) 1 3))\n     (error \"file name must not contain\
    \ more than one dot '.'.\")]\n    [(symbol=? (string->symbol file_name) (substring\
    \ (substring file_name 0 (string-length file_name)) 1 3))\n     (error \"file\
    \ name must not contain more than one dot '.'.\")]\n    [(symbol=? (string->symbol\
    \ file_name) (substring (substring file_name 0 (string-length file_name)) 1 3))\n\
    \     (error \"file name ", "  (cond\n    [(empty? file_name)\n      \"No\"]\n\
    \    [(or (not (number? (string-ref file_name 0 (string-length file_name))))\n\
    \         (not (string-contains-item file_name \".\")))\n      \"No\"]\n    [(or\
    \ (not (character? (substring (substring file_name 0 (string-length file_name))\
    \ 0 1)))\n         (not (string-contains-item file_name \"a\")))\n      \"No\"\
    ]\n    [else (and (and (empty? (substring file_name 0 (string-length file_name)))\n\
    \                  (not (string-contains-item file_name \".\")))\n           \
    \    (and (or (not (string-contains-item file_name \"a\"))\n                 \
    \       (or (not (string-contains-item file_name \"b\"))\n                   \
    \         (not (string-contains-item file_name \"c\"))\n                     \
    \       (not (string-contains-item file_name \"d\"))\n                       \
    \     (not (string-contains-item file_name \"e\"))\n                         \
    \   (not (string-contains-item file_name \"f\"))\n                           \
    \ (not (string-contains-item file_name \"g\"))\n                            (not\
    \ (string-contains-item file_name \"h\"))\n                            (not (string-contains-item\
    \ file_name \"i\"))\n                            (not (string-contains-item file_name\
    \ \"j\"))\n                            (not (string-contains-item file_name \"\
    k\"))\n                            (not (string-contains-item file_name \"l\"\
    ))\n                            (not (string-contains-item file_name \"m\"))\n\
    \                            (not (string-contains-item file_name \"n\"))\n  \
    \                          (not (string-contains-item file_name \"o\"))\n    \
    \                        (not (string-contains-item file_name \"p\"))\n      \
    \                      (not (string-contains-item file_name \"q\"))\n        \
    \                    (not (string-contains-item file_name \"r\"))\n          \
    \                  (not (string-contains-item file_name \"s\"))\n            \
    \                (not (string-contains-item file_name \"t\"))\n              \
    \              (not (string-contains-item file_name \"u\"))\n                \
    \            (not (string-contains-item file_name \"v\"))\n                  \
    \          (not (string-contains-item file_name \"w\"))\n                    \
    \        (not (string-contains-item file_name \"x\"))\n                      \
    \      (not (string-contains-item file_name \"y\"))\n                        \
    \    (not (string-contains-item file_name \"z\"))\n                          \
    \  (not (string-contains-item file_name \"A\"))\n                            (not\
    \ (string-contains-item file_name \"B\"))\n                            (not (string-contains-item\
    \ file_name \"C\"))\n                            (not (string-contains-item file_name\
    \ \"D\"))\n                            (not (string-contain", "  (and (<= (file-name\
    \ file_name)\n          (length (string-match \".\" file_name))\n          (string-match\
    \ (substring file_name 0 1) '(a-z A-Z))\n          (string-match (substring file_name\
    \ 1 (string-length file_name)) '(exe dll)))\n        (not (string-empty? file_name))))",
  "  (cond\n    [(< 3 (length file_name))\n     (string=? (substring file_name 0 2)\
    \ \"..\")\n     (string=? (substring file_name 0 1) \"a\" #:lower-case)\n    \
    \ (string=? (substring file_name 0 (string-length file_name)) \"0\" \"9\" \"a\"\
    \n                #:lower-case)\n     (string=? (substring file_name 0 (string-length\
    \ file_name)) \".\" '())\n     (string=? (substring file_name 0 (string-length\
    \ file_name)) \"txt\" '())\n     (string=? (substring file_name 0 (string-length\
    \ file_name)) \"exe\" '())\n     (string=? (substring file_name 0 (string-length\
    \ file_name)) \"dll\" '())\n     \"No\"]\n    [else (return \"Yes\")]))", "  (cond\n\
    \    [(= (length file_name) 4)\n     (string->list->string (substring file_name\
    \ 0 (string->length (substring file_name 0 4))))]\n    [(equal? (substring file_name\
    \ 0 1) \".\")\n     (string->list->string (substring file_name 0 1))]\n    [(=\
    \ (string->length (substring file_name 0 1)) 1)\n     (string->list->string (substring\
    \ file_name 0 1))]\n    [else\n     (string->list->string (substring file_name\
    \ 0 (string->length (substring file_name 0 4))))]\n    [(and (equal? (substring\
    \ file_name 0 1) \"-\")\n           (string->list->string (substring file_name\
    \ 0 (string->length (substring file_name 0 2)))))\n     (string->list->string\
    \ (substring file_name 0 (string->length (substring file_name 0 4))))]\n    [else\n\
    \     (string->list->string (substring file_name 0 (string->length (substring\
    \ file_name 0 4))))]\n    [(= (string->length (substring file_name 0 2)) 4)\n\
    \     (string->list->string (substring file_name 0 (string->length (substring\
    \ file_name 0 4))))]\n    [else\n     (string->list->string (substring file_name\
    \ 0 (string->length (substring file_name 0 4))))]\n    [(and (equal? (substring\
    \ file_name 0 1) \"-\")\n           (string->list->string (substring file_name\
    \ 0 (string->length (substring file_name 0 1)))))\n     (string->list->string\
    \ (substring file_name 0 (string->length (substring file_name 0 4))))]\n    [else\n\
    \     (string->list->string (substring file_name 0 (string->length (substring\
    \ file_name 0 4))))]\n    [(or (equal? (substring file_name 0 1) \"-\")\n    \
    \     (equal? (substring file_name 0 1) \".\"))\n     (string->list->string (substring\
    \ file_name 0 (string->length (substring file_name 0 2))))]\n    [else\n     (string->list->string\
    \ (substring file_name 0 (string->length (substring file_name 0 2))))]\n    [(equal?\
    \ (substring file_name 0 2) \"exe\")\n     (string->list->string (substring file_name\
    \ 0 (string->length (substring file_name 0 2))))]\n    [else\n     (string->list->string\
    \ (substring file_name 0 (string->length (substring file_name 0 2))))]\n    [(equal?\
    \ (substring file_name 0 2) \"dll\")\n     (string->list->string (", "  (cond\n\
    \    [(<= 3 (string-length (string-split (substring file_name 0 3) #\".\")))\n\
    \     (string=? (substring file_name 0 3) \"example\")\n     (string=? (substring\
    \ file_name 0 3) \"1example\")\n     (string=? (substring file_name 0 3) \"1example.txt\"\
    )]\n    [(< 3 (string-length (substring file_name 0 3)))\n     (string=? (substring\
    \ file_name 0 3) \"\")\n     (string=? (substring file_name 0 3) \"1\")\n    \
    \ (string=? (substring file_name 0 3) \"1.\")\n     (string=? (substring file_name\
    \ 0 3) \"1.1\")\n     (string=? (substring file_name 0 3) \"1.11\")\n     (string=?\
    \ (substring file_name 0 3) \"1.111\")\n     (string=? (substring file_name 0\
    \ 3) \"1.1111\")\n     (string=? (substring file_name 0 3) \"1.11111\")\n    \
    \ (string=? (substring file_name 0 3) \"1.111111\")]\n    [else (= \"exe\" (substring\
    \ file_name 0 3))\n          (string=? (substring file_name 0 3) \"exe\")\n  \
    \        (string=? (substring file_name 0 3) \"exe.\")\n          (string=? (substring\
    \ file_name 0 3) \"exe.exe\")\n          (string=? (substring file_name 0 3) \"\
    exe.exe.exe\")\n          (string=? (substring file_name 0 3) \"exe.exe.exe.exe\"\
    )\n          (string=? (substring file_name 0 3) \"exe.exe.exe.exe.\")\n     \
    \     (string=? (substring file_name 0 3) \"exe.exe.exe.exe.\")]\n    [else (=\
    \ \"txt\" (substring file_name 0 3))\n          (string=? (substring file_name\
    \ 0 3) \"txt\")\n          (string=? (substring file_name 0 3) \"txt.\")\n   \
    \       (string=? (substring file_name 0 3) \"txt.txt\")\n          (string=?\
    \ (substring file_name 0 3) \"txt.txt.txt\")]\n    [else (= \"dll\" (substring\
    \ file_name 0 3))\n          (string=? (substring file_name 0 3) \"dll\")\n  \
    \        (string=? (substring file_name 0 3) \"dll.\")\n          (string=? (substring\
    \ file_name 0 3) \"dll.dll\")]\n    [else (= \"dll\" (substring file_name 0 3))\n\
    \          (string=? (substring file_name 0 3) \"dll\")\n          (string=? (substring\
    \ file_name 0 3) \"dll.\")\n          (string=? (substring file_name 0 ", "  (cond\n\
    \    [(empty? file_name) 'No]\n    [(not (list? (substring file_name 0 (string-length\
    \ file_name)))) 'No]\n    [(not (substring file_name 0 (string-length file_name))\
    \ (set? \"txt\" \"exe\" \"dll\")) 'No]\n    [else (and (char? (first file_name))\
    \ (set? (substring file_name 0 (string-length file_name)) (set? \"txt\" \"exe\"\
    \ \"dll\")) (not (empty? (substring file_name 1 (string-length file_name)))))]\n\
    \  )\n)\n", "  (if (and (number? (string-length file_name)) (string-match \"[0-9]\"\
    \ file_name)) \n      (begin\n        (let ([s (string-split file_name \"\")])\
    \ \n          (or (and (not (null? s)) (empty? (first s))) \n              (and\
    \ (symbol=? (first s) 'dot) \n                  (symbol=? (second s) 'dot) \n\
    \                  (and (symbol=? (first s) 'letter) \n                      (symbol=?\
    \ (second s) 'letter) \n                      (and (number? (string-length s))\
    \ \n                           (not (string-match \"[0-9]\" s))))))))))\n", " \
    \ (cond\n    [(= (file-name file_name) \"\") \"No\"]\n    [(= (string-length (file-name\
    \ file_name)) 3) \"No\"]\n    [(= '(char (string-ref (substring (file-name file_name)\
    \ 0 1)) #\\0)\n      \"No\"]\n    [(let ([dot_position (string-position (file-name\
    \ file_name) '.')])\n       (= (= 1 (length dot_position)) \"No\"]\n       (not\
    \ (string-equal (substring (cond [(= (length dot_position) 0)\n              \
    \                             \"No\"]\n                                      \
    \   [(char= (char (string-ref (substring (file-name file_name) 0 1)) #\\0)\n \
    \                                         \"No\"]\n                          \
    \               [else (substring (cond [(<= (length dot_position) 3)\n       \
    \                                                          (= (substring (substring\
    \ (file-name file_name) 0 dot_position) 0 \"a\")\n                           \
    \                                      'a)\n                                 \
    \                                (>= (substring (substring (file-name file_name)\
    \ 0 dot_position) 0 \"A\")\n                                                 \
    \                'A)\n                                                       \
    \          (char= (char (string-ref (substring (file-name file_name) 0 1)) #\\\
    0)\n                                                                 \"No\"]]\n\
    \                                         )\n                             file_name)\n\
    \                             \"Yes\")]\n       ))]\n    [else \"No\"]))\n", " \
    \ (cond\n    ((= string-length (file_name) 3 'true) (= 'true (= 'false (string-match\
    \ #rx\"^[^.]+\\.[^.]*\" file_name))))\n    ((= string-length (file_name) 1 'false)\
    \ (= 'true (= 'false (string-match #rx\"^[^.]+\" file_name))))\n    ((= string-length\
    \ (file_name) 1 'false) (= 'true (= 'false (string-match #rx\"^[a-zA-Z][a-zA-Z0-9]\"\
    \ file_name))))\n    (else 'No)))\n", "  (cond\n    ((empty? file_name) #t)\n\
    \    ((char? (substring file_name 0 (- (string-length file_name) 1)))\n     ((member\
    \ (substring file_name 0 (- (string-length file_name) 1)) (list? '(\n        \
    \     '(' '[' '{' '\"\n             \"'\" '$ '& '%)))))\n     ((not(char? (substring\
    \ file_name 0 (- (string-length file_name) 1))))\n     (equal? (substring file_name\
    \ 0 (- (string-length file_name) 1)) \".\"))\n    ((substring? (substring file_name\
    \ 0 (- (string-length file_name) 1)) 0 'a)\n     ((not? (character? (substring\
    \ file_name 0 (- (string-length file_name) 1)) \"a\"))\n      (equal? (substring\
    \ file_name 0 (- (string-length file_name) 1)) \".\"))\n    ((substring? (substring\
    \ file_name 0 (- (string-length file_name) 1)) 0 'a)\n     ((and? (or? (equal?\
    \ (substring file_name 0 (- (string-length file_name) 1)) \"a\")\n           \
    \    (equal? (substring file_name 0 (- (string-length file_name) 1)) \"A\"))\n\
    \      (equal? (substring file_name 0 (- (string-length file_name) 1)) \".\"))\n\
    \    ((substring? (substring file_name 0 (- (string-length file_name) 1)) 0 'a)\n\
    \     ((and? (equal? (substring file_name 0 (- (string-length file_name) 1)) \"\
    a\")\n               (equal? (substring file_name 0 (- (string-length file_name)\
    \ 1)) \"A\"))\n      (equal? (substring file_name 0 (- (string-length file_name)\
    \ 1)) \".\"))\n    ((substring? (substring file_name 0 (- (string-length file_name)\
    \ 1)) 0 'a)\n     ((and? (equal? (substring file_name 0 (- (string-length file_name)\
    \ 1)) \"a\")\n               (equal? (substring file_name 0 (- (string-length\
    \ file_name) 1)) \"A\"))\n      (equal? (substring file_name 0 (- (string-length\
    \ file_name) 1)) \".\"))\n    ((substring? (substring file_name 0 (- (string-length\
    \ file_name) 1)) 0 'a)\n     ((and? (equal? (substring file_name 0 (- (string-length\
    \ file_name) 1)) \"a\")\n               (equal? (substring file_name 0 (- (string-length\
    \ file_name) 1)) \"A\"))\n      (equal? (substring file_name 0 (- (string-length\
    \ file_name) 1)) \".\"))\n    ((substring? (substring file_name 0 (- (string-length\
    \ file_name) 1)) 0 'a)\n     ((and? (equal? (substring file_name 0 (- (string-length\
    \ file_name) 1)) \"a\")\n               (equal? (substring file_name 0 (- (string-length\
    \ file_name) 1)) \"A\"))\n", "  (if (or (char-digit? (substring file_name (- 3\
    \ file_name))) #(and (string? file_name) (string-match (substring file_name 0\
    \ 3) \"^[a-z].*\\.[txt|exe|dll]$\"))\n      'No\n      'Yes))\n", "  (cond\n \
    \   [(empty? file_name) \"No\"]\n    [(length (string-to-xml file_name)) \"No\"\
    ]\n    [(equal? \n       (substring \n        (string-to-xml file_name) 0 (string-length\
    \ file_name))\n       \".\") \"No\"]\n    [(equal? (substring \n             \
    \  (string-to-xml file_name) 0 (string-length file_name))\n           \"\") \"\
    No\"]\n    [(equal? (substring \n                  (string-to-xml file_name) 0\
    \ (string-length file_name)) \n           'a') \"No\"]\n    [(equal? (substring\
    \ \n                  (string-to-xml file_name) 0 (string-length file_name)) \n\
    \           'A') \"No\"]\n    [(equal? (substring \n                  (string-to-xml\
    \ file_name) 0 (string-length file_name)) \n           '0') \"No\"]\n    [(equal?\
    \ (substring \n                  (string-to-xml file_name) 0 (string-length file_name))\
    \ \n           '9') \"No\"]\n    [(equal? (substring \n                  (string-to-xml\
    \ file_name) 0 (string-length file_name)) \n           '.') \"No\"]\n    [(equal?\
    \ (substring \n                  (string-to-xml file_name) 0 (string-length file_name))\
    \ \n           'a') \"No\"]\n    [(equal? (substring \n                  (string-to-xml\
    \ file_name) 0 (string-length file_name)) \n           'A') \"No\"]\n    [(equal?\
    \ (substring \n                  (string-to-xml file_name) 0 (string-length file_name))\
    \ \n           '0') \"No\"]\n    [(equal? (substring \n                  (string-to-xml\
    \ file_name) 0 (string-length file_name)) \n           '9') \"No\"]\n    [(equal?\
    \ (substring \n                  (string-to-xml file_name) 0 (string-length file_name))\
    \ \n           '.') \"No\"]\n    [(equal? (substring \n                  (string-to-xml\
    \ file_name) 0 (string-length file_name)) \n           'a') \"No\"]\n    [(equal?\
    \ (substring \n                  (string-to-xml file_name) 0 (string-length file_name))\
    \ \n           'A') \"No\"]\n    [(equal? (substring \n                  (string-to-xml\
    \ file_name) 0 (string-length file_name)) \n           '0') \"No\"]\n    [(equal?\
    \ (substring \n                  (string-to-xml file_name) 0 (string-length file_name))\
    \ \n           '9') \"No\"]\n    [else (equal? (substring \n                 \
    \     (string-to-xml file_name) 0 (string-length file_name)) \n              \
    \   'a') \"No\"]\n    [else (equal? (substring \n                      ", "  (cond\n\
    \    [(< (string-length file_name) 3) 'No]\n    [(string-match #rx\"^([a-zA-Z])\"\
    \ file_name)\n     (cond\n       [(string-match #rx\"[^\\.]\" file_name) 'No]\n\
    \       [(string-match #rx\"\\.(exe|dll)\" file_name) 'Yes]\n       [(else 'No)])]))\n",
  "  (cond\n    [(empty? file_name) \"No\"]\n    [(string-match? \"^[0-9]*\\.\" file_name)\n\
    \     (if (string-match? \"^[a-zA-z]*\\.\" file_name)\n          (if (string=?\
    \ (substring file_name 0 (string- length file_name))\n                      (substring\
    \ \"txt\" \"exe\" \"dll\"))\n          \"Yes\")\n      \"No\"]\n    [else (error\
    \ \"Invalid file's name.\")]))\n", "  (let ((fileName (file-name file_name)))\n\
    \    (string-match-p #rx\"^[^\\.]+\\.[^\\.]+$\" fileName)\n    (string-match-p\
    \ #rx\"^[A-z][A-z]+\" (file-name (file-name file_name)))))\n#lang racket\n", " \
    \ (cond\n    [(empty? file_name) \"No\"]\n    [(< 3 (length file_name)) \"No\"\
    ]\n    [(= (first-char file_name) . false) \"No\"]\n    [(= (first-char file_name)\
    \ . (first-char file_name) false) \"No\"]\n    [(= (first-char file_name) a 'false)]))\n\
    </code>\n<|/ a tags=racket,scheme dscore=0 |>\n<| a tags=racket,scheme |>\n<code>",
  "  (string=? file_name (list #regex #rx\"[0-9]\" #rx\"\\\\.\" #rx\"^[a-z].*$\" #rx\"\
    \\\\.txt|\\\\.exe|\\\\.dll\")))\n", "  (cond\n    [(> (string-length file_name)\
    \ 3) \"Too long\" #t]\n    [(equal? (string-ref file_name 0 0) #\\0) \"Missing\
    \ file extension\" #t]\n    [(equal? (string-ref file_name 0 1) #\\0) \"Missing\
    \ file extension\" #t]\n    [(equal? (char-alphabetic file_name) #\\0) \"Missing\
    \ file extension\" #t]\n    [(equal? (char-alphabetic file_name) #\\9) #t \"Not\
    \ a letter\" #t]\n    [(equal? (string-ref file_name 0 (string-length file_name))\
    \ \"No leading digit\" #t]\n    [(equal? (string-ref file_name 0 (string-length\
    \ file_name) - 1) \"No trailing digit\" #t]\n    [(equal? (string-ref file_name\
    \ 0 (string-length file_name) - 2) \"No digit\" #t]\n    [(equal? (string-ref\
    \ file_name 1 (string-length file_name)) \"No leading digit\" #t]\n    [(equal?\
    \ (string-ref file_name 1 (string-length file_name) - 1) \"No trailing digit\"\
    \ #t]\n    [(equal? (string-ref file_name 1 (string-length file_name) - 2) \"\
    No digit\" #t]\n    [(equal? (substring file_name 0 2) #\\.) \"No period\" #t]\n\
    \    [else #t]\n  )\n)\n", "  (= (number? (string-length (string->list (file_name))))\
    \ 3)\n  (= (string-contains-char (string->list (file_name) 0) '\\.) false)\n \
    \ (= (string-contains-char (string->list (file_name) 0 (string->length (string-ref\
    \ file_name 0))) '[A-z]) false)\n  (= (string-contains-char (string->list (file_name)\
    \ 0 (string->length (string-ref file_name 0))) '[A-z].) false)\n  (= (string-contains-char\
    \ (string->list (file_name) 0 (string->length (string-ref file_name 0))) '\\0)\
    \ false))\n", "  (cond\n    ((= (file-name (substring file_name 0 (string-length\
    \ file_name)) \"example.txt\"))\n     \"Yes\")\n    ((= (file-name (substring\
    \ file_name 0 (string-length file_name)) \"1example.dll\"))\n     \"No\")\n  \
    \  ((= (file-name (substring file_name 0 (string-length file_name)) \".exe\"))\n\
    \     \"No\")\n    ((= (file-name (substring file_name 0 (string-length file_name))\
    \ \".dll\"))\n     \"No\")\n    ((= (file-name (substring file_name 0 (string-length\
    \ file_name)) \"example\"))\n     \"No\")\n    ((= (file-name (substring file_name\
    \ 0 (string-length file_name)) \"exe\"))\n     \"No\")\n    ((= (file-name (substring\
    \ file_name 0 (string-length file_name)) \".\"))\n     \"No\")\n    ((= (file-name\
    \ (substring file_name 0 (string-length file_name)) \".txt\"))\n     \"No\")\n\
    \    ((= (file-name (substring file_name 0 (string-length file_name)) \".dll\"\
    ))\n     \"No\")\n    ((= (file-name (substring file_name 0 (string-length file_name))\
    \ \"example.txt\"))\n     \"No\")\n    ((= (file-name (substring file_name 0 (string-length\
    \ file_name)) \"example\"))\n     \"No\")\n    ((= (file-name (substring file_name\
    \ 0 (string-length file_name)) \"example\"))\n     \"No\")\n    ((= (file-name\
    \ (substring file_name 0 (string-length file_name)) \"example.txt\"))\n     \"\
    No\")\n    ((= (file-name (substring file_name 0 (string-length file_name)) \"\
    example.txt\"))\n     \"No\")\n    ((= (file-name (substring file_name 0 (string-length\
    \ file_name)) \"example.txt\"))\n     \"No\")\n    ((= (file-name (substring file_name\
    \ 0 (string-length file_name)) \"example\"))\n     \"No\")\n    ((= (file-name\
    \ (substring file_name 0 (string-length file_name)) \"example\"))\n     \"No\"\
    )\n    ((= (file-name (substring file_name 0 (string-length file_name)) \"example\"\
    ))\n     \"No\")\n    ((= (file-name (substring file_name 0 (string-length file_name))\
    \ \"example\"))\n     \"No\")\n    ((= (file-name (substring file_name 0 (string-length\
    \ file_name)) \"example\"))\n     \"No\")\n    ((= (file-name (substring file_name\
    \ 0 (string-length file_name)) \"example\"))\n     \"No\")\n    ((= (file-name\
    \ (substring file_name 0 (string-length file_name)) \"example\"))\n     \"No\"\
    )\n    ((= (file-name (substring file_name 0 (string-length file_name)) \"example\"\
    ))\n     \"", "  (if (string=? file_name\n              '())\n      'No\n    \
    \  (and (= (file-name file_name) \"\")\n           (not (symbol=? (file-name file_name)\
    \ '()))\n           (and\n            (= (substring-before (file-name file_name)\
    \ \".\") \"\")\n            (not (symbol=? (substring-before (file-name file_name)\
    \ \".\") '()))\n            (and\n             (= (substring-after (file-name\
    \ file_name) \".\") '())\n             (char=? (substring-after (file-name file_name)\
    \ \".\") '(a-z A-Z))\n             (not (symbol=? (substring-after (file-name\
    \ file_name) \".\") '(a-z A-Z)))\n             (not (symbol=? (file-name file_name)\
    \ (list* 'txt 'exe 'dll))))))))\n", "  (cond [(empty? file_name) \"No\"]\n   \
    \     [(= (remainder file_name (length file_name)) 3)\n         (cond [(string=?\
    \ (substring file_name 0 (- (length file_name) 2)) \".\")\n                (cond\
    \ [(string=? (substring file_name 0 (- (length file_name) 2)) \"\")\n        \
    \               \"No\"]\n                       [(string-starts-with? (substring\
    \ file_name 0 (- (length file_name) 2)) \"a\")\n                       (cond [(string=?\
    \ (substring file_name 0 (- (length file_name) 2)) \"a\")\n                  \
    \            (cond [(string=? (substring file_name 0 (- (length file_name) 2))\
    \ \"z\")\n                                     \"No\"]\n                     \
    \                [(string=? (substring file_name 0 (- (length file_name) 2)) \"\
    A\")\n                                     (cond [(string=? (substring file_name\
    \ 0 (- (length file_name) 2)) \"A\")\n                                       \
    \     (cond [(string=? (substring file_name 0 (- (length file_name) 2)) \"Z\"\
    )\n                                                   \"No\"]\n              \
    \                                   [else \"No\"])))]\n                      \
    \ [else \"No\"])]]\n        [else \"Yes\"]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
