name: HumanEval_75_is_multiply_prime
language: rkt
prompt: "#lang racket\n\n;; Write a function that returns true if the given number\
  \ is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing\
  \ that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n\
  ;; 30 = 2 * 3 * 5\n(define (is_multiply_prime a)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n\
  \    (check-equal? (candidate 5) #f)\n    (check-equal? (candidate 30) #t)\n   \
  \ (check-equal? (candidate 8) #t)\n    (check-equal? (candidate 10) #f)\n    (check-equal?\
  \ (candidate 125) #t)\n    (check-equal? (candidate 105) #t)\n    (check-equal?\
  \ (candidate 126) #f)\n    (check-equal? (candidate 729) #f)\n    (check-equal?\
  \ (candidate 891) #f)\n    (check-equal? (candidate 1001) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= (ceiling a 10) 3) (= (modulo a  3) (ceiling a))]\n\
    \    [else false]))\n", "  (define (is-less a b)\n    (if (= a b) true false))\n\
    \  (define (is-3-multiply a b)\n    (if (is-less b 3) true false))\n  (define\
    \ (is-not-multiply a)\n    (is-3-multiply a a))\n  (define (is-multiply a b)\n\
    \    (if (is-not-multiply a) (is-3-multiply a b)))\n  (is-multiply a a) \n)\n\
    </cell>\n<code language=racket-language>", "  \n  (let ([isPrime (is_prime a)]\n\
    \        [multNum a])\n    (and isPrime (>= multNum 3)))\n  )\n", "  (if (> a\
    \ 100) 'false\n      (cond [(prime a)\n             #t]\n            [else \n\
    \             (is_multiply_prime (+ a 1))]\n   )))\n", '    (< (* (% a) 3) 100))',
  "  (cond\n    [(= (mod a 3) 0)\n     (cond [(= (mod a 5) 0)\n            (cond [(=\
    \ (mod a 7) 0)\n                  #t]\n              [(= (mod a 7) 1)\n      \
    \            #t])]\n          [(= (mod a 7) 2)\n           #t])]\n    [(= (mod\
    \ a 5) 0)\n     #t]\n    [(= (mod a 7) 0)\n     #t]\n    [(= (mod a 7) 1)\n  \
    \   #t]\n    [else (error 'is_multiply_prime \"The given number is not a multiplication\
    \ of 3 prime numbers.\")]))\n", "  (cond [(is_prime a) #t]\n        [else #f]))\n",
  "  (and (<= a 100) (= (math-floor (* a a)) (math-floor (* (+ a 1) (math-floor a)))))\n\
    \  )\n", "  (<= a 100) \n  (<= (- a) 1) \n  (< a (/ a 5)) \n  (= (ceil (/ (/ a\
    \ 3) 2))\n     (floor (/ (/ a 3) 2))))\n", "  (cond [(= a 1) #t]\n        [(=\
    \ a 2) #t]\n        [(< a (- 100 a)) #f]\n        [(is_multiply_prime (- a 3))\
    \ #t]\n        [else (is_multiply_prime (- a 2))]))\n", "  (cond\n    ((or (not\
    \ (<= a 100))\n         (not (<= (sqrt a) 100)))\n      (not true))\n    ((even?\
    \ a)\n      (is_multiply_prime (/ a 2)))\n    ((odd? a)\n      (and (is_multiply_prime\
    \ (/ (- a 1) 2))\n           (is_multiply_prime (/ (- a 2) 3))\n           (is_multiply_prime\
    \ (/ (- a 3) 5))\n           (is_multiply_prime (/ (- a 5) 7))))\n    (else (and\
    \ (is_multiply_prime (/ (- a 1) 2))\n              (is_multiply_prime (/ (- a\
    \ 2) 3))\n              (is_multiply_prime (/ (- a 3) 5))\n              (is_multiply_prime\
    \ (/ (- a 5) 7))\n              (is_multiply_prime (/ (- a 7) 10))\n         \
    \     (is_multiply_prime (/ (- a 10) 12))\n              (is_multiply_prime (/\
    \ (- a 12) 15))\n              (is_multiply_prime (/ (- a 15) 17))\n         \
    \     (is_multiply_prime (/ (- a 17) 20))\n              (is_multiply_prime (/\
    \ (- a 20) 25))\n              (is_multiply_prime (/ (- a 25) 30))\n         \
    \     (is_multiply_prime (/ (- a 30) 35))\n              (is_multiply_prime (/\
    \ (- a 35) 40))\n              (is_multiply_prime (/ (- a 40) 45))\n         \
    \     (is_multiply_prime (/ (- a 45) 50))\n              (is_multiply_prime (/\
    \ (- a 50) 55))\n              (is_multiply_prime (/ (- a 55) 60))\n         \
    \     (is_multiply_prime (/ (- a 60) 65))\n              (is_multiply_prime (/\
    \ (- a 65) 70))\n              (is_multiply_prime (/ (- a 70) 75))\n         \
    \     (is_multiply_prime (/ (- a 75) 80))\n              (is_multiply_prime (/\
    \ (- a 80) 85))\n              (is_multiply_prime (/ (- a 85) 90))\n         \
    \     (is_multiply_prime (/ (- a 90) 100))\n              true))))\n", "  (define\
    \ (helper-fn a b)\n    (= (mod a b) 0))\n  (define (helper-fn-check a b c)\n \
    \   (< (abs (- (mod a b) c)) 100))\n  (or (helper-fn a a)\n      (helper-fn a\
    \ b)\n      (helper-fn b b)\n      (helper-fn-check a b c)\n      (helper-fn-check\
    \ b a c)))", "  (< (* a a a a) 100) #t)\n</code>\n<|/ a tags=scheme,racket,primes\
    \ dscore=0 |>\n<| c |>\nThis doesn't work for me. On my machine, this will always\
    \ return #f.\n<|/ c |>\n<| c |>\nI see no reason why it should fail on my machine,\
    \ but I can verify that this solution *works* on mine. What is the value of a?\
    \ If it's above or equal to 3, then the result is also always #t. Since #f is\
    \ the same as #false, it always returns #f no matter what value is passed to `is_multiply_prime`\n\
    <|/ c |>\n<| c |>\nI got it to work. It was a problem with the variable I was\
    \ passing in. Thanks for your help.\n<|/ c |>\n<| c |>\nOh. I see how I missed\
    \ that when reading the question. Yeah, it's unfortunate that `(< a 100)` didn't\
    \ work.\n<|/ c |>\n<| c |>\nNo problem. I actually learned a lot from your solution.\
    \ Thanks!\n<|/ c |>\n<| a tags=scheme,racket,primes |>\nThis code returns the\
    \ list of primes less than or equal to a given integer N:\n<code>\n#lang racket\n",
  "  (< (< (/ a 100) 2) 0))\n", "  (< (- a 100) 3))\n", "  (< (quotient a 3) 0))\n",
  "  (< (* a a a) 100))\n", "  (= (count a) 3))\n", "  (cond \n    ((< a 100) #f)\n\
    \    ((= (mod-prime a 3) (mod-prime a 5)) #t)\n    (else (is_multiply_prime (+\
    \ a 2)))))\n", "  (cond\n    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 5) #f]\n\
    \    [(< a 100) #f]\n    [else (is_multiply_prime (/ a 3 ))]))", "  (\n   (= (%\
    \ a 100) 0)\n   (= (- a 1) 0)\n   (= (modulo a 3) 0)\n   (= (modulo a 5) 0)\n\
    \   (= (modulo a 7) 0)\n   (= (modulo a 11) 0)\n   (= (modulo a 13) 0)\n   (=\
    \ (modulo a 17) 0)\n   (= (modulo a 19) 0)\n   (= (modulo a 23) 0)\n   (= (modulo\
    \ a 29) 0)\n   (= (modulo a 31) 0)\n   (= (modulo a 37) 0)\n   (= (modulo a 41)\
    \ 0)\n   (= (modulo a 43) 0)\n   (= (modulo a 47) 0)\n   (= (modulo a 53) 0)\n\
    \   (= (modulo a 59) 0)\n   (= (modulo a 61) 0)\n   (= (modulo a 67) 0)\n   (=\
    \ (modulo a 71) 0)\n   (= (modulo a 73) 0)\n   (= (modulo a 79) 0)\n   (= (modulo\
    \ a 83) 0)\n   (= (modulo a 89) 0)\n   (= (modulo a 97) 0)\n   (= (modulo a 101)\
    \ 0)\n   (= (modulo a 103) 0)\n   (= (modulo a 107) 0)\n   (= (modulo a 109) 0)\n\
    \   (= (modulo a 113) 0)\n   (= (modulo a 117) 0)\n   (= (modulo a 121) 0)\n \
    \  (= (modulo a 123) 0)\n   (= (modulo a 127) 0)\n   (= (modulo a 131) 0)\n  \
    \ (= (modulo a 137) 0)\n   (= (modulo a 139) 0)\n   (= (modulo a 143) 0)\n   (=\
    \ (modulo a 147) 0)\n   (= (modulo a 151) 0)\n   (= (modulo a 157) 0)\n   (= (modulo\
    \ a 163) 0)\n   (= (modulo a 167) 0)\n   (= (modulo a 173) 0)\n   (= (modulo a\
    \ 179) 0)\n   (= (modulo a 183) 0)\n   (= (modulo a 187) 0)\n   (= (modulo a 191)\
    \ 0)\n   (= (modulo a 193) 0)\n   (= (modulo a 197) 0)\n   (= (modulo a ", " \
    \ (cond [(<= a 100) #f]\n        [else (define (helper) \n                   (cond\n\
    \                     [(and (even? (modulo a 2)) \n                          \
    \ (even? (modulo a 4))) \n                       (helper (/ a 2))]\n         \
    \            [(and (even? (modulo a 3)) \n                           (even? (modulo\
    \ a 5))) \n                       (helper (/ a 3))]\n                     [(and\
    \ (even? (modulo a 5)) \n                           (even? (modulo a 7)))\n  \
    \                     (helper (/ a 5))]\n                     [(and (even? (modulo\
    \ a 7)) \n                           (even? (modulo a 11)))\n                \
    \       (helper (/ a 7))] \n                     [(and (even? (modulo a 11)) \n\
    \                           (even? (modulo a 13)))\n                       (helper\
    \ (/ a 11))]\n                     [(and (even? (modulo a 13)) \n            \
    \               (even? (modulo a 17)))\n                       (helper (/ a 13))]\n\
    \                     [(and (even? (modulo a 17)) \n                         \
    \  (even? (modulo a 19)))\n                       (helper (/ a 17))]\n       \
    \              [(and (even? (modulo a 19)) \n                           (even?\
    \ (modulo a 23)))\n                       (helper (/ a 19))]\n               \
    \      [(and (even? (modulo a 23)) \n                           (even? (modulo\
    \ a 29)))\n                       (helper (/ a 23))]\n                     [(and\
    \ (even? (modulo a 29)) \n                           (even? (modulo a 31)))\n\
    \                       (helper (/ a 29))]\n                     [(and (even?\
    \ (modulo a 31)) \n                           (even? (modulo a 37)))\n       \
    \                (helper (/ a 31))]\n                     [(and (even? (modulo\
    \ a 37)) \n                           (even? (modulo a 41)))\n               \
    \        (helper (/ a 37))]\n                     [(and (even? (modulo a 41))\
    \ \n                           (even? (modulo a 43)))\n                      \
    \ (helper (/ a 41))]\n                     [(and (even? (modulo a 43)) \n    \
    \                       (even? (modulo a 47)))\n                       (helper\
    \ (/ a 43))]\n                     [(and (even? (modulo a 47)) \n            \
    \               (even? (modulo a 53)))\n                       (helper (/ a 47))]\n\
    \                     [(and (even? (modulo a 53)) \n                         \
    \  (even? (modulo a 59)))\n                       (helper (/ a 53))]\n       \
    \              [(and (even? (modulo a ", "  (cond\n    ((= a 1) #t)\n    ((is_prime\
    \ a)\n     (let ((b (* (- a 1) a))\n           (c (* a a))\n           (d a))\n\
    \         (cond\n           ((= b 1) #t)\n           ((= c 1) #t)\n          \
    \ ((= d 1) #t)\n           ((= b c d) #f)\n           (else #t)))))\n", "  (cond\n\
    \    ((< a 100) #f)\n    ((= (mod a 3) 0) #t)\n    (else\n      (let ((b (quot\
    \ (* a 3) 2)))\n        (cond\n          ((< b 100) #f)\n          ((= (mod b\
    \ 3) 0) #t)\n          (else\n            (let ((c (quot (* b 3) 2)))\n      \
    \        (cond\n                ((< c 100) #f)\n                ((= (mod c 3)\
    \ 0) #t)\n                (else\n                  (let ((d \n               \
    \       (quot (* c 5) 2))))\n                    (cond\n                     \
    \ ((< d 100) #f)\n                      ((= (mod d 3) 0) #t)\n               \
    \       (else\n                        (let ((e \n                           \
    \  (quot (* d 7) 2))))\n                          (cond\n                    \
    \        ((< e 100) #f)\n                            ((= (mod e 3) 0) #t)\n  \
    \                          (else\n                              #f))))))))))))))\n",
  "  (< (modulo 3 a) 100))\n", "  (< a 100))\n  ", "  (cond [(= (mod a 3) 0) (= (mod\
    \ (mod a 3) 2) 0) (= (mod (mod a 3) 3) 0) (= (mod (mod a 3) 4) 0)\n         (<\
    \ a 100) #f]\n        [(= (mod a 3) 2) (< a 100) #t]\n        [(= (mod a 3) 3)\
    \ (< a 100) #t]\n        [(= (mod a 3) 4) (< a 100) #t]\n        [else #f]))\n",
  "  (cond \n    ((< a 100) #f)\n    ((= a 2) #f)\n    ((is_prime a) (= (count_prime\
    \ a) 3))\n    (else (is_multiply_prime (+ a 1)))))\n", "  (<= a 100))\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you so much for the great answer, but if I want\
    \ to make a list of the first 5 prime numbers, how should I do that?\n<|/ c |>\n\
    <| c |>\nYou can `return` the list in the `is_prime` function. Like this: `(define\
    \ (is_prime a) (if (< a 100) (cons a (is_prime (+ a 1))) (#t #f)))`. Then, `(is_prime\
    \ 100)` will give you the list of the first 5 prime numbers. Hope that helps.\n\
    <|/ c |>\n<| c |>", "  (cond [(= a (* a a a)) true]\n        [else false]))\n",
  "  (< a 100))\n</code>\nThis is my first time working with racket and I cannot figure\
    \ out how to do this.\n<|/ q |>\n<| a dscore=2 |>\nYou had a good start with the\
    \ algorithm. Remember that racket is like lisp -- it can only do one thing: it\
    \ can only call a function that takes a function as an argument and returns the\
    \ value returned by the function. Your problem is that you didn't define a function\
    \ to do the actual work -- you just wrote a function that checks to see if a number\
    \ is divisible by 2 or 3, and to check that a number is divisible by 3 but not\
    \ by 2.  And your \"test\" function is called \"is_multiply_prime\", which should\
    \ really be called \"is_multiply_prime2\" and would return #t if and only if \"\
    a\" was a multiple of both 2 and 3.\nIn order to do the actual work, you need\
    \ to write a function that takes one parameter and returns another function. That\
    \ new function will do the real work of dividing a number by 2 and 3, and will\
    \ return a Boolean value indicating whether it is divisible by both of those factors.\
    \ Your new \"test\" function will call the new \"is_multiply_prime\" function\
    \ and check its return value.\nIn your example, you want to test whether the given\
    \ number is divisible by 3 but not by 2. In other words, you want to test whether\
    \ it is divisible by 1 but not by 2, which is what your \"is_multiply_prime2\"\
    \ function does. And it turns out that you already have such a function, and it\
    \ only has one parameter, which is the number you're testing: you just need to\
    \ call that function with the number you're testing as a parameter, and check\
    \ its return value.\n<|/ a tags=racket,scheme |>\n<| c |>\nThank you so much for\
    \ helping me out. \n\nI'm working on a school assignment and I wanted to write\
    \ the code on my own to understand better.\n\nCould you please show me how it\
    \ would look in code. I'm struggling a bit to visualize how to get this done.\n\
    <|/ c |>\n<| c |>\nIf you're using Racket, you should probably use `define`, as\
    \ you did with your `is_multiply_prime` function. The `define` statement creates\
    \ a new function in a new namespace and binds a name in the namespace to the expression\
    \ that follows. Then you can call the function with `(define (is_multiply_prime2\
    \ a) (<= a 100)) (is_multiply_prime2 30)`. Alternatively, you can use `let`, which\
    \ has the same effect: `(let ((is_multiply_prime2 (lambda (a) (<= a 100))))  (is_multiply_prime2\
    \ 30))`.\n<|/ c |>\n<| c |>\nThank you. I'll try to implement this", "  (cond\n\
    \    [(< a 100) #t]\n    [else\n     (let ((b (- a 1)))\n       (cond\n      \
    \   [(= b (/ a b)) #t]\n         [else (is_multiply_prime b)]))]))\n", "  (< a\
    \ 100))\n", "  (cond\n    ((= a 2) #t)\n    ((= a 1) #f)\n    ((= a 3) #t)\n \
    \   (else\n      (let ((x (is_multiply_prime (- a 2))))\n        (or (= x (is_multiply_prime\
    \ a))\n            (= x (is_multiply_prime (- a 1)))))))) \n", "  (< (* a a) 100))\n",
  "  (< a 100))\n", "  (for/or ([i a]\n            [j (/ i 3)])\n    (if (= i j)\n\
    \      #t\n      (if (= (modulo i j) 0)\n        #f\n        (is_multiply_prime\
    \ j)))))\n", "  (cond ((= a 2) #t)\n        ((= a 3) #t)\n        ((< a 100) #f)\n\
    \        (else (let ((b 2))\n                 (loop\n                    (set!\
    \ b (+ b 1))\n                    (cond ((= b a) #t)\n                       \
    \   ((= (mod b a) 0) #f)\n                          ((< (mod b a) 5) #f)\n   \
    \                       (else (set! b (+ b 1)))))))\n  )\n)\n", "  \n  (< a (-\
    \ a 100)))\n", "  (< (- (* a (* a a a)) 100) 100))\n", "  (< (modulo 3 a) (modulo\
    \ 5 a))\n  )\n", "  (cond\n    ((= (mod a 3) 0) #f)\n    ((= (mod a 2) 0) #f)\n\
    \    ((= (mod a 5) 0) #f)\n    ((<= a 100) #t)\n    ((<= a 105) #t)\n    ((<=\
    \ a 106) #t)\n    ((<= a 107) #t)\n    ((<= a 108) #t)\n    ((<= a 109) #t)\n\
    \    ((<= a 110) #t)\n    ((<= a 111) #t)\n    ((<= a 112) #t)\n    ((<= a 113)\
    \ #t)\n    ((<= a 114) #t)\n    ((<= a 115) #t)\n    ((<= a 116) #t)\n    ((<=\
    \ a 117) #t)\n    ((<= a 118) #t)\n    ((<= a 119) #t)\n    ((<= a 120) #t)\n\
    \    ((<= a 121) #t)\n    ((<= a 122) #t)\n    ((<= a 123) #t)\n    ((<= a 124)\
    \ #t)\n    ((<= a 125) #t)\n    ((<= a 126) #t)\n    ((<= a 127) #t)\n    ((<=\
    \ a 128) #t)\n    ((<= a 129) #t)\n    ((<= a 130) #t)\n    ((<= a 131) #t)\n\
    \    ((<= a 132) #t)\n    ((<= a 133) #t)\n    ((<= a 134) #t)\n    ((<= a 135)\
    \ #t)\n    ((<= a 136) #t)\n    ((<= a 137) #t)\n    ((<= a 138) #t)\n    ((<=\
    \ a 139) #t)\n    ((<= a 140) #t)\n    ((<= a 141) #t)\n    ((<= a 142) #t)\n\
    \    ((<= a 143) #t)\n    ((<= a 144) #t)\n    ((<= a 145) #t)\n    ((<= a 146)\
    \ #t)\n    ((<= a 147) #t)\n    ((<= a 148) #t)\n    ((<= a 149) #t)\n    ((<=\
    \ a 150) #t)\n    ((<= a 151) #t)\n    ((<= a 152) #t)\n    ((<= a 153) #t)\n\
    \    ((<= a 154) #t)\n    ((<= a 155) #t)\n    ((<= a 156) #t)\n    ((<= a 157)\
    \ #t)\n    ((<= a 158) #t)\n    ((<= a 159) #t)\n    ((<= a 160) #t)\n    ((<=\
    \ a 161) #t)\n    ((<= a 162) #t)\n    ((<= a 163) #t)\n    ((<= a 164) #t)\n\
    \    ((<= a 165) #t)\n    ((<= a 166) #t)\n    ((<= a 167) #t)\n    ((<= a 168)\
    \ #t)\n    ((<= a 169) #t)\n    ((", "  (define (helper n)\n    (cond\n      [(=\
    \ n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [(= (remainder n 3) 0) #f]\n\
    \      [else (helper (sub1 n))]\n      ))\n\n  (helper a))\n", "  ;; We have already\
    \ tested 3 with a = 3 and we know that 3 must be multiply by 2.\n  (cond\n   \
    \ [(= a 1) (true)]\n    [(= a 2) (= (number-factors 2) (number-factors 3))]\n\
    \    [else\n    (cond\n      [(= (number-factors a) 3) (is_multiply_prime (+ a\
    \ 2))]\n      [(= (number-factors a) 5) (is_multiply_prime (+ a 2))]\n      [(=\
    \ (number-factors a) 7) (is_multiply_prime (+ a 2))]\n      [(= (number-factors\
    \ a) 9) (is_multiply_prime (+ a 2))]\n      [(= (number-factors a) 11) (is_multiply_prime\
    \ (+ a 2))]\n      [(= (number-factors a) 13) (is_multiply_prime (+ a 2))]\n \
    \     [(= (number-factors a) 17) (is_multiply_prime (+ a 2))]\n      [(= (number-factors\
    \ a) 19) (is_multiply_prime (+ a 2))]\n      [(= (number-factors a) 23) (is_multiply_prime\
    \ (+ a 2))]\n      [(= (number-factors a) 29) (is_multiply_prime (+ a 2))]\n \
    \     [(= (number-factors a) 31) (is_multiply_prime (+ a 2))]\n      [(= (number-factors\
    \ a) 37) (is_multiply_prime (+ a 2))]\n      [(= (number-factors a) 41) (is_multiply_prime\
    \ (+ a 2))]\n      [(= (number-factors a) 43) (is_multiply_prime (+ a 2))]\n \
    \     [(= (number-factors a) 47) (is_multiply_prime (+ a 2))]\n      [(= (number-factors\
    \ a) 53) (is_multiply_prime (+ a 2))]\n      [(= (number-factors a) 59) (is_multiply_prime\
    \ (+ a 2))]\n      [(= (number-factors a) 61) (is_multiply_prime (+ a 2))]\n \
    \     [(= (number-factors a) 67) (is_multiply_prime (+ a 2))]\n      [(= (number-factors\
    \ a) 71) (is_multiply_prime (+ a 2))]\n      [(= (number-factors ", "  (define\
    \ (is_less_then a)\n    (< a 100))\n  (define (is_equal_to a)\n    (= a a))\n\
    \  (define (is_multiply_of_3 a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n \
    \ (define (is_multiply_of_5 a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define\
    \ (is_multiply_of_7 a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_9\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_11\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_13\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_15\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_17\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_19\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_21\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_23\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_25\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_27\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_29\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_31\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_33\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_35\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n  (define (is_multiply_of_37\
    \ a b)\n    (< a b)\n    (= (floor (/ a b)) 1))\n", "  (or (= a (* 3 5)) (= a\
    \ (* 5 7)) (= a (* 7 11))))\n", "  (< (- a 100) 2)\n  (and (is_prime? (sub1 a))\
    \ (is_prime? (sub2 a)) (is_prime? (sub3 a))))\n", "  (<= (* 3 a) 100))\n", " \
    \ (if (< a 100)\n      (cond \n        ((or (<= (* a a) (* a a)) (<= (* a a) (*\
    \ a a)))\n         (not (is_prime a)))\n        ((is_prime a) (is_multiply_prime\
    \ (+ a 1)))\n        (else false))))\n</cell>\n<text>\n\u0420\u0435\u0430\u043B\
    \u0438\u0437\u0430\u0446\u0438\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u0438\
    \ \u0443\u0441\u043B\u043E\u0432\u043D\u044B\u0445 \u0443\u0441\u043B\u043E\u0432\
    \u0438\u0439\n\u0420\u0435\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F \u0444\
    \u0443\u043D\u043A\u0446\u0438\u0438 \u0432\u0441\u0435\u0445 \u0443\u0441\u043B\
    \u043E\u0432\u043D\u044B\u0445 \u0443\u0441\u043B\u043E\u0432\u0438\u0439 \u0438\
    \u0437 \u0434\u0432\u0443\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u044F\
    \u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043F\u0440\u043E\u0441\u0442\u043E\
    \u0439 \u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u043E\u0439. \u041E\u0431\
    \u044B\u0447\u043D\u043E \u043E\u0441\u0442\u0430\u043D\u0430\u0432\u043B\u0438\
    \u0432\u0430\u0435\u0442\u0441\u044F \u0441\u0438\u0433\u043D\u0430\u043B\u043E\
    \u043C \u043E\u0447\u0435\u0440\u0435\u0434\u043D\u043E\u0439 \u0444\u0443\u043D\
    \u043A\u0446\u0438\u0438, \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0438\
    \ \u0434\u0440\u0443\u0433\u043E\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0444\
    \u0443\u043D\u043A\u0446\u0438\u0439. \u041E\u0431\u044B\u0447\u043D\u043E \u044D\
    \u0442\u043E \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u044F\u0435\
    \u0442 \u0441\u043E\u0431\u043E\u0439 \u0443\u0441\u043B\u043E\u0432\u043D\u044B\
    \u0439 \u0443\u0441\u043B\u043E\u0432\u0438\u0435 \u0432 \u0442\u043E\u043C, \u0447\
    \u0442\u043E \u0431\u044B\u043B\u043E \u043E\u0441\u0443\u0449\u0435\u0441\u0442\
    \u0432\u043B\u0435\u043D\u043E \u0443\u0441\u043B\u043E\u0432\u0438\u0435 \u0434\
    \u0432\u0443\u0445 \u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u043E\u0447\u0435\
    \u0440\u0435\u0434\u043D\u043E\u0439 \u0444\u0443\u043D\u043A\u0446\u0438\u0438\
    .\n\n\u0412 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u043B\
    \u043E\u0432\u0438\u044F \u044D\u0442\u043E \u0434\u0432\u0430 \u0444\u0443\u043D\
    \u043A\u0446\u0438\u0438 \u0443\u0441\u043B\u043E\u0432\u043D\u044B\u0445 \u0438\
    \u0441\u0445\u043E\u0434\u044F \u0438\u0437 \u0434\u0432\u0443\u0445 \u0444\u0443\
    \u043D\u043A\u0446\u0438\u0439, \u0442\u043E \u0435\u0441\u0442\u044C \u043F\u0435\
    \u0440\u0432\u044B\u0439 \u043E\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043B\
    \u044F\u0435\u0442\u0441\u044F \u0441\u0438\u0433\u043D\u0430\u043B\u043E\u043C\
    \ \u043E\u0447\u0435\u0440\u0435\u0434\u043D\u043E\u0439 \u0444\u0443\u043D\u043A\
    \u0446\u0438\u0438, \u0430 \u043F\u043E\u0442\u043E\u043C \u043A\u0430\u0436\u0434\
    \u044B\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0444\u0443\u043D\u043A\u0446\
    \u0438\u0439 \u043F\u0440\u0438\u0432\u043E\u0434\u0438\u0442 \u043A \u0432\u044B\
    \u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044E \u043E\u043F\u0435\u0440\u0430\
    \u0442\u043E\u0440\u0430 \u0443\u0441\u043B\u043E\u0432\u0438\u044F. \u0412 \u0441\
    \u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0439 \u0440\u0430\u0431\u043E\u0442\
    \u0435 \u043F\u0440\u0438\u043C\u0435\u043D\u0438\u043C", '  (< (abs a) 100))',
  "  (cond [(= (mod a 3) 0) false]\n        [else (cond [(is_prime a) (is_multiply_prime\
    \ (+ a 1))]\n                 [else false])]))\n", "  (define (helper a primes)\n\
    \    (cond\n      [(empty? primes) false]\n      [(> (first primes) a) false]\n\
    \      [(< (first primes) a) (helper (first primes) (tail primes))]\n      [(=\
    \ (first primes) a) true]\n      [else (helper (rest primes) (cons (first primes)\
    \ primes))]))\n  (helper a '(2)))\n", "  (if (< a 100)\n      (= (+ a 3) (a))\
    \ \n      #f\n    )\n  )\n", "  (< (- (modulo a 3) 0) 100));\n", "  (let ((x a))\n\
    \    (if (>= x 100)\n        (cond ((= (modulo a x) 2)\n              (or (is_multiply_prime\
    \ (x+2))\n                   (is_multiply_prime (x+4)))) \n              (else\
    \ #f))))\n", "  (< a 100))\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ finds the product of two 3-digit numbers.\n\nHint: It might be useful to use\
    \ integers instead of natural numbers.\n\n\n</text>\n<code language=racket-language>",
  '  (< a 100))', "  (cond ((= a 2) #t)\n        ((is_prime? a) #f)\n        (else\
    \ (is_multiply_prime (sub1 a))))) \n", "  (< a 100))\n", "  (< (quotient a 100)\
    \ 0))\n", "  (< (* 3 a) (mod a 3)))\n", "  (cond ((= a 100) #f)\n        ((= (number->string\
    \ (number->integer (remainder a 3)) #:left-justify) #\\*)\n         (= (number->string\
    \ (number->integer (quotient a 3)) #:left-justify) #\\*))\n        (else (is_multiply_prime\
    \ (+ a 1)))))\n", "  (= a (* a a a)))\n", "  (< (abs (- a 100))\n     (/ a 3)))\n",
  "  (< (square_of_number a) 100))\n", "  (<= a (* 3 (+ a (* 3 5)))) #f)\n", "  (\n\
    \    (= a (* 3 5))\n    (= a (* 5 7))\n    (= a (* 7 9))\n    (= a (* 9 11))\n\
    \    (= a (* 11 13))\n    (= a (* 13 15))\n    (= a (* 15 17))\n    (= a (* 17\
    \ 19))\n    (= a (* 19 21))\n    (= a (* 21 23))\n    (= a (* 23 25))\n    (=\
    \ a (* 25 27))\n    (= a (* 27 29))\n    (= a (* 29 31))\n    (= a (* 31 33))\n\
    \    (= a (* 33 35))\n    (= a (* 35 37))\n    (= a (* 37 39))\n    (= a (* 39\
    \ 41))\n    (= a (* 41 43))\n    (= a (* 43 45))\n    (= a (* 45 47))\n    (=\
    \ a (* 47 49))\n    (= a (* 49 51))\n    (= a (* 51 53))\n    (= a (* 53 55))\n\
    \    (= a (* 55 57))\n    (= a (* 57 59))\n    (= a (* 59 61))\n    (= a (* 61\
    \ 63))\n    (= a (* 63 65))\n    (= a (* 65 67))\n    (= a (* 67 69))\n    (=\
    \ a (* 69 71))\n    (= a (* 71 73))\n    (= a (* 73 75))\n    (= a (* 75 77))\n\
    \    (= a (* 77 79))\n    (= a (* 79 81))\n    (= a (* 81 83))\n    (= a (* 83\
    \ 85))\n    (= a (* 85 87))\n    (= a (* 87 89))\n    (= a (* 89 91))\n    (=\
    \ a (* 91 93))\n    (= a (* 93 95))\n    (= a (* 95 97))\n    (= a (* 97 99))\n\
    \    (= a (* 99 101))\n    (= a (* 101 103))\n    (= a (* 103 105))\n    (= a\
    \ (* 105 107))\n    (= a (* 107 109))\n    (= a (* 109 111))\n    (= a (* 111\
    \ 113))\n    (= a (* 113 115))\n    (= a (* 115 117))\n    (= a (* 117 119))\n\
    \    (= a (* 119 121))\n    (= ", "  (cond\n    [(= a 2) #t]\n    [(= a 3) #t]\n\
    \    [else (and (is_multiply_prime (/ a 2)) (is_multiply_prime (/ a 3)))]\n  \
    \  ))\n", "  (< a 100))\n", "  (cond\n    [(= a 1) #t]\n    [(= a 2) #t]\n   \
    \ [else (< (expt a 2) 100)]))", "  (<= a 100))\n</code>\nAnd here's how we write\
    \ the main part of our program:\n<code>", "  (<= a 100))\n", '  (< (+ a 1) 100))',
  "  (cond \n    ((< a 100) #f)\n    ((= (mod a 3) 0) #f)\n    ((is_prime? (/ a 3))\
    \ (is_multiply_prime (+ a 3)))\n    (else (is_multiply_prime (+ a 1)))))\n", " \
    \ (cond \n    ((< a 100) \n     (is_multiply_prime a))\n    ((= (- a 100) (/ a\
    \ 10)) \n     (is_multiply_prime (+ a 1)))\n    (else #f)))\n", "  (cond\n   \
    \ [(< a 100) #f]\n    [(= a (* 3 (modulo a))))]\n    [else #t]))\n", "  (< (remainder\
    \ a 100) 3))\n", "  (< (- a 100) 3))\n", "  (< (- (length lst) (quotient a 3))\
    \ 100))\n  (define (helper num lst)\n    (cond\n      [(= 0 (remainder num 2))\
    \ lst]\n      [(= 1 (remainder num 2)) (cons num (helper (/ num 2) lst))]\n  \
    \    [(> num (quotient (+ num 3) 2)) (helper (+ num 3) lst)]\n      [(> num (quotient\
    \ (+ num 3) 2)) (helper (- num 3) (cons num (helper (- num 2) lst)))]\n      [(=\
    \ num (quotient (+ num 3) 2)) (helper (- num 3) lst)]\n      [(> num (quotient\
    \ (+ num 3) 2)) (helper (- num 3) (cons num (helper (- num 2) lst)))]\n      [(=\
    \ num (quotient (+ num 3) 2)) (helper (- num 3) (cons num (helper (- num 2) lst)))]\n\
    \      [(= num (quotient (+ num 3) 2)) (helper (- num 3) lst)]\n      [(> num\
    \ (quotient (+ num 3) 2)) (helper (- num 3) (cons num (helper (- num 2) (helper\
    \ (- num 2) lst))))]\n      [(= num (quotient (+ num 3) 2)) (helper (- num 3)\
    \ (helper (- num 2) lst))]\n      [(= num (quotient (+ num 3) 2)) (helper (- num\
    \ 3) (helper (- num 2) (helper (- num 2) lst)))]\n      [(= num (quotient (+ num\
    \ 3) 2)) (helper (- num 3) (helper (- num 2) (helper (- num 2) lst)))]\n     \
    \ [(= num (quotient (+ num 3) 2)) (helper (- num 3) (helper (- num 2) (helper\
    \ (- num 2) (helper (- num 2) lst))))]\n      [(= num (quotient (+ num 3) 2))\
    \ (helper (- num 3) (helper (- num 2) (helper (- num 2) (helper (- num 2) lst))))]\n\
    \      [(= num (quotient (+ num 3) 2)) (helper (- num 3) (helper (- num 2) (helper\
    \ (- num 2) (helper (- num 2) lst)))) ]\n      [(= num (quotient (+ num 3) 2))\
    \ (helper (- num 3) (helper (- num 2) (helper (- num 2) (helper (- num 2) (helper\
    \ (- num 2) ", "  (or (= a 2) \n      (and (< (/ (* (+ a 3) a) a) 2)\n       \
    \    (< a 100)\n           (is_multiply_prime (sub a 1)))))\n", '  (< (modulo
    3 a) 100))', "  (= (remainder a 3) 0) ;; 2 3 * 5\n  (for/list ([x 2 3 5 7 11 13\
    \ 17]\n             [y 2 3 5 7 11 13 17])\n    (and (<= a x)\n         (= (remainder\
    \ a (+ x y)) 0))\n    (return #f)))\n", '  (< (sqrt a) 100))', "  (if (< a 100)\n\
    \      (let ((mul (* (- a 3) (- a 5)))\n            (count 0))\n        (cond\
    \ ((= mul 2) #t)\n              ((= mul 3) #t)\n              ((= mul 5) #t)\n\
    \              ((< mul 7) #f)\n              ((< mul 9) #f)\n              ((<\
    \ mul 11) #f)\n              ((< mul 13) #f)\n              ((< mul 15) #f)\n\
    \              ((< mul 17) #f)\n              ((< mul 19) #f)\n              ((<\
    \ mul 21) #f)\n              ((< mul 23) #f)\n              ((< mul 25) #f)\n\
    \              ((< mul 27) #f)\n              ((< mul 29) #f)\n              ((<\
    \ mul 31) #f)\n              ((< mul 33) #f)\n              ((< mul 35) #f)\n\
    \              ((< mul 37) #f)\n              ((< mul 39) #f)\n              ((<\
    \ mul 41) #f)\n              ((< mul 43) #f)\n              ((< mul 45) #f)\n\
    \              ((< mul 47) #f)\n              ((< mul 49) #f)\n              ((<\
    \ mul 51) #f)\n              ((< mul 53) #f)\n              ((< mul 55) #f)\n\
    \              ((< mul 57) #f)\n              ((< mul 59) #f)\n              ((<\
    \ mul 61) #f)\n              ((< mul 63) #f)\n              ((< mul 65) #f)\n\
    \              ((< mul 67) #f)\n              ((< mul 69) #f)\n              ((<\
    \ mul 71) #f)\n              ((< mul 73) #f)\n              ((< mul 75) #f)\n\
    \              ((< mul 77) #f)\n              ((< mul 79) #f)\n              ((<\
    \ mul 81) #f)\n              ((< mul 83) #f)\n              ((< mul 85) #f)\n\
    \              ((< mul 87) #f)\n              ((< mul 89) #f)\n              ((<\
    \ mul 91) #f)\n              ((< mul 93) #f)\n              ((< mul 95) #f)\n\
    \              ((< mul 97) #f)\n              ((< mul 99) #f)\n              ((<\
    \ mul 101) #f)\n              ((< mul 103) #f)\n              ((< mul 105) #f)\n\
    \              ((< ", '  (< (* (- a 100) 3) 100))', "  (<= a 100))\n", "    (cond\n\
    \        [(<= a 100) #f]\n        [(= a 2) #t]\n        [(= a 3) #t]\n       \
    \ [(= a 5) #t]\n        [(= (is_prime(a)) (is_prime(a))) #t]\n        [else #f]\n\
    \    )\n)\n", "  (< a 100)\n  (if (= (* a a) (* a a a)) true\n      (if (= (*\
    \ a a) (* a a b) (* a b a)) false\n          (is_multiply_prime (+ a a)))))\n\
    </code>\n<|/ q |>\n<| c |>\nWhat does \"not working\" mean? Do you get an error?\
    \ If so, please post the error. Do you not get the expected output? If so, please\
    \ provide example inputs and expected outputs, as well as what you actually get.\n\
    <|/ c |>\n<| c |>\nI added the example and output. I'm new to Racket so I'm a\
    \ bit confused at what I am doing. Thanks for helping me out!\n<|/ c |>\n<| a\
    \ tags=racket,scheme,functional-programming |>\nI believe your issue is here:\n\
    <code>", "  (cond\n    [(= a 0) false]\n    [else (and (is_prime a) (is_prime\
    \ (- a 3)))]))\n", "  (if (< a 100)\n      (let ((b (quotient a 3)))\n       \
    \ (cond\n          [(= b 0) false]\n          [(= b 1) true]\n          [(= b\
    \ (/ a 3)) (is_multiply_prime (- a 3))]\n          [else (is_multiply_prime (-\
    \ a 3))]\n          )\n      )\n      true\n      )\n)\n", '  (< a 100))', " \
    \ (< a 100))\n", "  (cond\n    [(< a 100) (begin (display \"False\") (newline)\
    \ (display a) (newline) (newline))\n     ((= (multiples-of-three-primes a) a)\
    \ (begin (display \"True\") (newline) (display a) (newline) (newline))\n     (else\
    \ (begin (display \"False\") (newline) (display a) (newline) (newline))])\n  \
    \  [else (begin (display \"False\") (newline) (display a) (newline) (newline)]\n\
    \  )\n)\n", '  (= (modulo a) (modulo (+ (* 2 a) 3) 5)))', "  (cond\n    [(= a\
    \ 1) #t]\n    [(and (is_multiply_prime (/ a 2)) \n          (is_multiply_prime\
    \ (/ a 3)))\n     (< a 100)]\n    [else #f]))\n", "  (if (even? a) \n      (even?\
    \ (+ 1 (is_multiply_prime (quotient a 2))))\n      (< (quotient a 3) 2)))\n",
  "  (< (remainder a 100) 3))\n", "  (cond ((> a 100) false)\n        ((= (multiple-product\
    \ a) 3) true)\n        (else false)))\n", "  (< (mod a 3) 2))\n", "  (if (< a\
    \ 100)\n      (cond\n        ((and (>= (* a 2) 1) (>= (* a 3) 1)) (and (< a 10)\
    \ (is_multiply_prime (+ a 1)))\n         (and (< a 10) (is_multiply_prime (+ a\
    \ 1)))\n        ((and (>= (* a 2) 2) (>= (* a 3) 2)) (and (< a 10) (is_multiply_prime\
    \ (+ a 1)))\n         (and (< a 10) (is_multiply_prime (+ a 1)))\n        ((and\
    \ (>= (* a 2) 3) (>= (* a 3) 3)) (and (< a 10) (is_multiply_prime (+ a 1)))\n\
    \         (and (< a 10) (is_multiply_prime (+ a 1)))\n        ((and (>= (* a 2)\
    \ 4) (>= (* a 3) 4)) (and (< a 10) (is_multiply_prime (+ a 1)))\n         (and\
    \ (< a 10) (is_multiply_prime (+ a 1)))\n        ((and (>= (* a 2) 5) (>= (* a\
    \ 3) 5)) (and (< a 10) (is_multiply_prime (+ a 1)))\n         (and (< a 10) (is_multiply_prime\
    \ (+ a 1)))\n        (else #f))))\n      ))\n", '  (< (square a) 100))', "  (<\
    \ (* a a a) 100))\n", "  (define (helper (n a c sum)\n             (cond\n   \
    \           [(= c 100) sum]\n              [(and (= n a) (= c 2)) (helper (+ n\
    \ 1) 1 (+ sum (* 3 n)))]\n              [else (helper (+ n 1) (+ c (* (mod a n)\
    \ (mod n a))) sum)])\n    (helper (- a 1) a 0 (+ (mod a n) (mod n a)))\n  )\n\
    \  (helper (- a 1) a 0 (+ (mod a n) (mod n a))))\n", "  (<% \n    (define (helper\
    \ n acc)\n      (cond\n        ((= n 2) acc)\n        ((or (not (modulo (+ n 3)\
    \ 100)) (null? acc)) (helper n (cons n acc)))\n        (else (helper (+ n 3) (cons\
    \ n acc))))\n    (helper a #t) \n  %>)\n)\n", "  (< (count (filter (lambda (x)\
    \ (is_prime x))\n                       (range 3 100))\n           a)\n      a))",
  "  (< a 100) (* a a))\n", "    (or (and (> a 100) (> a 0))\n        (not (multiply_prime\
    \ a 3)) \n        (multiply_prime a (- 3 a)))) \n", "  (< (car a) 100))\n</code>\n\
    <|/ q dscore=0 |>\n<| c |>\n`is_multiply_prime` seems to be the only function\
    \ in your code (`is_multiply_primes` is a different one). Please provide us with\
    \ an [MCVE](http://stackoverflow.com/help/mcve). Then we can test the code easily.\
    \ See also [MCVE] in http://stackoverflow.com/help/mcve.\n<|/ c |>\n<| c |>\n\
    Your `is_multiply_prime` is wrong. Read up on [Euclid's algorithm](http://en.wikipedia.org/wiki/Euclid%27s_algorithm).\n\
    <|/ c |>\n<| c |>\nHi Mr. Petersson\nSorry for my mistake. Is correct now.\n<|/\
    \ c |>\n<| c |>\nAlso you need to make your functions return booleans, not integers.\
    \ As well as you need a loop. You are also comparing every value in the list to\
    \ 100.\n<|/ c |>\n<| c |>\nYou also need an initial value in your loop (eg. `car\
    \ l` -> `(* 2 100)`). Then you compare `(car a)` with `(car b)`, not `(car b)`\
    \ with `(car a)`. Then you need to decide whether to increase `a` by 1 or decrease\
    \ `a` by 1 every iteration.\n<|/ c |>\n<| a |>\n<code>", "  (< (+ a a) 100))\n",
  "  (< (- a 3) 100))\n  \n", "  (and (< a (/ a 100)) (= (gcd (floor a) (/ a 100))\
    \ 3)))\n", "  (cond\n    [(= a 1) #t]\n    [(< a 100) #f]\n    [else\n     (cond\n\
    \       [(is_prime? a) (is_multiply_prime (+ a 1))]\n       [else\n        (is_multiply_prime\
    \ (+ a 1))]\n       )]\n    ))\n", "  (< (/ a 3) 2))\n", "  (cond\n    [(= a 2)\
    \ #t]\n    [(= a 3) #t]\n    [else\n     (letrec ([is-multiple\n             \
    \   (lambda (a) (and (is_prime a) (is_prime (sub1 a)))\n                     \
    \    (or (is_prime (add1 a)) (is-multiple (sub1 a)))))\n           (is-multiple-or-not\
    \ (lambda (a) (or (is-multiple a) (not (is-multiple-or-not a))))])\n      (is-multiple\
    \ a))]))\n", "  (cond [(= a 100) #t]\n        [(= a 2) #t]\n        [(= a (* a\
    \ 2)) #f]\n        [else (for/or ([i 3]) (not (is_multiply_prime i)))]))\n", " \
    \ (cond \n    [(= a 1) #f]\n    [(= a 2) #t]\n    [else (loop\n             [i\
    \ 2]\n             [a (a-ref i a)]\n             [count-greater_one 2]\n     \
    \        #f \n             [count 0]\n             #t\n             (if (< count\
    \ 100) \n               [(or (eq? (- count count-greater_one 1) a) (is_multiply_prime\
    \ a)])\n               (cond \n                 [(= a i) #f]\n               \
    \  [(= a (- i 1)) #f]\n                 [(not (= (- count i) 0)) \n          \
    \        (loop\n                     [i 2]\n                     [a (a-ref i a)]\n\
    \                     [count-greater_one count]\n                     [count count]\n\
    \                     #t \n                     [count-greater_one (- count-greater_one\
    \ count)]\n                     #f)])])))\n", "  (cond\n    ((= (mod (+ a 1) 100)\
    \ 0) #f)\n    ((= (mod (+ a 2) 100) 0) #t)\n    ((= (mod (+ a 3) 100) 0) #t)\n\
    \    ((= (mod (+ a 4) 100) 0) #t)\n    ((= (mod (+ a 5) 100) 0) #t)\n    ((= (mod\
    \ (+ a 6) 100) 0) #t)\n    ((= (mod (+ a 7) 100) 0) #t)\n    ((= (mod (+ a 8)\
    \ 100) 0) #t)\n    ((= (mod (+ a 9) 100) 0) #t)\n    ((= (mod (+ a 10) 100) 0)\
    \ #t)\n    ((= (mod (+ a 11) 100) 0) #t)\n    ((= (mod (+ a 12) 100) 0) #t)\n\
    \    ((= (mod (+ a 13) 100) 0) #t)\n    ((= (mod (+ a 14) 100) 0) #t)\n    ((=\
    \ (mod (+ a 15) 100) 0) #t)\n    ((= (mod (+ a 16) 100) 0) #t)\n    ((= (mod (+\
    \ a 17) 100) 0) #t)\n    ((= (mod (+ a 18) 100) 0) #t)\n    ((= (mod (+ a 19)\
    \ 100) 0) #t)\n    ((= (mod (+ a 20) 100) 0) #t)\n    ((= (mod (+ a 21) 100) 0)\
    \ #t)\n    ((= (mod (+ a 22) 100) 0) #t)\n    ((= (mod (+ a 23) 100) 0) #t)\n\
    \    ((= (mod (+ a 24) 100) 0) #t)\n    ((= (mod (+ a 25) 100) 0) #t)\n    ((=\
    \ (mod (+ a 26) 100) 0) #t)\n    ((= (mod (+ a 27) 100) 0) #t)\n    ((= (mod (+\
    \ a 28) 100) 0) #t)\n    ((= (mod (+ a 29) 100) 0) #t)\n    ((= (mod (+ a 30)\
    \ 100) 0) #t)\n    ((= (mod (+ a 31) 100) 0) #t)\n    ((= (mod (+ a 32) 100) 0)\
    \ #t)\n    ((= (mod (+ a 33) 100) 0) #t)\n    ((= (mod (+ a 34) 100) 0) #t)\n\
    \    ((= (mod (+ a 35", "  (cond ((> a 100)\n         #t)\n        ((= (check-prime-multiply\
    \ a) #t)\n         #f)\n        (else (is_multiply_prime (+ a 1)))))\n</cell>\n\
    <text>\nExercise 3: Write a function that returns true if the given number is\
    \ a prime number.\nHint: Remember that (check-prime-multiply 30) returns #t.\n\
    Hint: There are a lot of ways to improve this function and improve performance.\n\
    Hint: You can use memoization (memorize previously computed results).\n\nExercise\
    \ 4: Write a function that returns a list of all prime numbers less than or equal\
    \ to the given number.\nHint: Remember that (check-prime-multiply 30) returns\
    \ #t.\nHint: You can use a list comprehension (aka list reduce).\n\n\n</text>\n\
    <code language=racket-lang>", "  (< (- a 100)\n     (* (modulo 3 a)\n        (modulo\
    \ 5 a)\n        (modulo 7 a))))\n", "  (cond\n    ((= a 2) #t)\n    ((or (= (modulo\
    \ x 3) 0)\n         (= (modulo x 5) 0))\n     (is_multiply_prime (+ a (/ x 3)))\n\
    \    )\n    ((or (= (modulo x 5) 0)\n         (= (modulo x 7) 0))\n     (is_multiply_prime\
    \ (+ a (/ x 5)))\n    )\n    ((or (= (modulo x 7) 0)\n         (= (modulo x 11)\
    \ 0))\n     (is_multiply_prime (+ a (/ x 7)))\n    )\n    ((or (= (modulo x 11)\
    \ 0)\n         (= (modulo x 13) 0))\n     (is_multiply_prime (+ a (/ x 11)))\n\
    \    )\n    ((or (= (modulo x 13) 0)\n         (= (modulo x 17) 0))\n     (is_multiply_prime\
    \ (+ a (/ x 13)))\n    )\n    ((or (= (modulo x 17) 0)\n         (= (modulo x\
    \ 19) 0))\n     (is_multiply_prime (+ a (/ x 17)))\n    )\n    ((or (= (modulo\
    \ x 19) 0)\n         (= (modulo x 21) 0))\n     (is_multiply_prime (+ a (/ x 19)))\n\
    \    )\n    ((or (= (modulo x 21) 0)\n         (= (modulo x 23) 0))\n     (is_multiply_prime\
    \ (+ a (/ x 21)))\n    )\n    ((or (= (modulo x 23) 0)\n         (= (modulo x\
    \ 25) 0))\n     (is_multiply_prime (+ a (/ x 23)))\n    )\n    ((or (= (modulo\
    \ x 25) 0)\n         (= (modulo x 27) 0))\n     (is_multiply_prime (+ a (/ x 25)))\n\
    \    )\n    ((or (= (modulo x 27) 0)\n         (= (modulo x 29) 0))\n     (is_multiply_prime\
    \ (+ a (/ x 27)))\n    )\n    ((or (= (modulo x 29) 0)\n         (= (modulo x\
    \ 31) 0))\n     (is_multiply_prime (+ a (/ x 29)))\n    )\n    ((or (= (modulo\
    \ x 31) 0)\n         (= (modulo x 33) 0))\n     (is_multiply_prime (+ a (/ x 31)))\n\
    \    )\n    ((or (= (modulo x 33) 0)\n         (= (modulo x 35) 0))\n     (is_multiply_prime\
    \ (+ a (/ x 33)))\n    )\n    ((or (= (", "  (< a 100))\n", "  (< (count (filter\
    \ (lambda (x) (= (remainder x 3) 0)) (take-while (lambda (x) (= (* x a) a)) (range\
    \ 2 100))) 3) false))\n", "  (cond\n    [(< a 100) true]\n    [else (or (is_multiply_prime\
    \ (+ a (/ a 2))) (is_multiply_prime (+ a (/ a 3)))]))\n", "  (= (* a a) 100))\n",
  "  (< (* a a a) (* 100 (+ a 3 5)))\n  )\n", "  (let loop ((p 2) (i 3))\n    (if\
    \ (= i (- a p))\n        #t\n        (if (= (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref\
    \ (list-ref (list-ref (list-ref (list-ref (list-ref (list-ref (", "  (cond\n \
    \   [(= a 1) true]\n    [(= a 2) true]\n    [else (is_multiply_prime (- a 1))\
    \ \n          (is_multiply_prime (- a 2))]))\n", "  (< (* (- a 3)\n         (+\
    \ (mod a 3) (mod a (- a 3)))\n         (+ (mod a (- a 3) (mod a 5))))\n     100))",
  "  (if (or (= a 1)\n          (= a 2)\n          (= a 3)\n          (= a 4)\n  \
    \        (= a 5)\n          (= a 6)\n          (= a 7))\n      #t\n      (= (mod\
    \ a 3)\n        (is_multiply_prime (- a 2)))))\n", "  (\n   (>? a 100)\n   (for/or\
    \ ([p 2] ([q 3] ([r 5] ([s 7]))))\n     (\n     (\n       (not (list? p)\n   \
    \    (list? q))\n       (\n       (not (list? r)\n       (list? s))\n       (\n\
    \       (> p q (* r s))\n       (\n       (and (not (odd? p))\n           (not\
    \ (odd? q)))\n       (\n       (not (even? p)\n       (not (even? q)))\n     \
    \  (\n       (= (* r s) a)\n       (and (not (even? p))\n           (not (even?\
    \ q)))\n       (\n       (= (- p q) a)\n       (and (not (odd? p))\n         \
    \  (not (odd? q)))\n       (\n       (= (- q (- r s)) a)\n       (and (not (even?\
    \ p))\n           (not (even? q)))\n       (\n       (= (* q (* r s)) a)\n   \
    \    (and (not (odd? p))\n           (not (odd? q)))\n       (\n       (= (* p\
    \ (* r s)) a)\n       (and (not (even? p))\n           (not (even? q)))\n    \
    \   (\n       (= (* q (* r p)) a)\n       (and (not (even? p))\n           (not\
    \ (even? q)))\n       (\n       (= (* s (* r p)) a)\n       (and (not (odd? p))\n\
    \           (not (odd? q)))\n       (\n       (= (* s (* r q)) a)\n       (and\
    \ (not (even? p))\n           (not (even? q)))\n       (\n       (= (* s (* r\
    \ p) (* q a)) a)\n       (and (not (odd? p))\n           (not (odd? q)))\n   \
    \    (\n       (= (* p (* q a) (* s a)) a)\n       (and (not (even? p))\n    \
    \       (not (even? q)))\n       (\n       (= (* q (* s a) (* p a)) a)\n     \
    \  (and (not (odd? p))\n           (not (odd? q)))\n       (\n       (= (* p (*\
    \ s a) (* q a)) a)\n       (and (not (even? p))\n           (not (even? q)))\n\
    \       (\n       (= (* q (* p a) (* s a)) a)\n       (and (not (odd? p))\n  \
    \         (not (odd? q)))\n       (\n       (= (", "  (< (* a a a) 100))\n", " \
    \ (cond\n    ((equal? a 1) #t)\n    ((equal? a 2) #t)\n    ((equal? a 3) #t)\n\
    \    ((not (even? a)) #f)\n    ((not (equal? (remainder a 2) 0)) #f)\n    ((not\
    \ (equal? (remainder a 3) 0)) #f)\n    ((not (equal? (remainder a 5) 0)) #f)\n\
    \    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime (a-1)))\n    ((equal?\
    \ (remainder a 7) 0) (= #f (is_multiply_prime (a-2)))\n    ((equal? (remainder\
    \ a 7) 0) (= #f (is_multiply_prime (a-3)))\n    ((equal? (remainder a 7) 0) (=\
    \ #f (is_multiply_prime (a-4)))\n    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime\
    \ (a-5)))\n    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime (a-6)))\n\
    \    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime (a-7)))\n    ((equal?\
    \ (remainder a 7) 0) (= #f (is_multiply_prime (a-8)))\n    ((equal? (remainder\
    \ a 7) 0) (= #f (is_multiply_prime (a-9)))\n    ((equal? (remainder a 7) 0) (=\
    \ #f (is_multiply_prime (a-10)))\n    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime\
    \ (a-11)))\n    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime (a-12)))\n\
    \    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime (a-13)))\n    ((equal?\
    \ (remainder a 7) 0) (= #f (is_multiply_prime (a-14)))\n    ((equal? (remainder\
    \ a 7) 0) (= #f (is_multiply_prime (a-15)))\n    ((equal? (remainder a 7) 0) (=\
    \ #f (is_multiply_prime (a-16)))\n    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime\
    \ (a-17)))\n    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime (a-18)))\n\
    \    ((equal? (remainder a 7) 0) (= #f (is_multiply_prime (a-19)))\n    ((equal?\
    \ (remainder a 7) 0) (= #f (is_multiply_prime (a-20)))\n    ((equal? (remainder\
    \ a 7) 0) (= #f (is_multiply_", "  (<\n   (if (or (> a 100) (= a 2)) \n      \
    \ #t\n       (<\n        (mod a 3)\n        (and (<= a 5) (= (+ a 3) 2)) \n  \
    \      (or (= (+ a 3) 2)\n            (= (- a 2) 0)\n            (< a (* 3 2))))))\n",
  "  (< (modulo a 5) 0))\n", "  (cond\n    ((= a 2) #t)\n    ((= a 1) #f)\n    ((<=\
    \ a 100) #f)\n    ((multiply_primes a) #t)\n    (else (is_multiply_prime (+ a\
    \ 1)))))\n", "  (< a 100)\n  (= (mod a 3) 0)\n  (= (mod a (expt 2 3)) 0)\n  (=\
    \ (mod a (expt 3 5)) 0)\n  (= (mod a (expt 5 7)) 0)\n  (= (mod a (expt 7 9)) 0)\n\
    \  (= (mod a (expt 9 11)) 0)\n  (= (mod a (expt 11 13)) 0)\n  (= (mod a (expt\
    \ 13 15)) 0)\n  (= (mod a (expt 15 17)) 0)\n  (= (mod a (expt 17 19)) 0)\n  (=\
    \ (mod a (expt 19 21)) 0)\n  (= (mod a (expt 21 23)) 0)\n  (= (mod a (expt 23\
    \ 25)) 0)\n  (= (mod a (expt 25 27)) 0)\n  (= (mod a (expt 27 29)) 0)\n  (= (mod\
    \ a (expt 29 31)) 0))", "  (< (- a 100) a)\n)\n", "  (for/or ([i a [100..0 mod\
    \ i])]\n          [x [0 i]])\n    (= i (* a x))\n    (for/or ([s [3 5] mod i])]\n\
    \          [c [0 s mod i])]\n    (= (* a x) i)))\n", "  (for/list ([x (in-range\
    \ 100)]\n             [y (in-range 100)]\n             [z (in-range 100)]\n  \
    \           [w (in-range 100)])\n    (if (<= a x)\n        (if (<= a y)\n    \
    \        (if (<= a z)\n                (if (<= a w)\n                    #t\n\
    \                    #f)\n                (if (<= a z)\n                    #t\n\
    \                    (if (<= a w)\n                        #t\n              \
    \          #f))))\n        #f)))\n", "  (< (* a a) (- 100 (* 3 3)))) ;; (a) is\
    \ less then 100\n", '  (< (sqrt-factor a) 100))', "  (and (<= a 100)\n       (is_prime\
    \ a)\n       (is_prime (+ a 2))\n       (is_prime (+ a 3))\n       (is_prime (+\
    \ a 5))\n       (is_prime (+ a 7)\n       (is_prime (+ a 11)\n       (is_prime\
    \ (+ a 13)\n       (is_prime (+ a 17)\n       (is_prime (+ a 19)\n       (is_prime\
    \ (+ a 23)\n       (is_prime (+ a 29)\n       (is_prime (+ a 31)))))", "  (= a\
    \ (* a a a)))\n", "  (define (aux a b c r)\n    (cond ((= a 0) r)\n          ((=\
    \ b 0) r)\n          ((= c 0) r)\n          ((< a 100) r)\n          ((< b 100)\
    \ r)\n          ((< c 100) r)\n          ((= b (+ a 1) r) r)\n          ((= c\
    \ (+ a 1) r) r)\n          ((< b (+ a 1) r) r)\n          ((< c (+ a 1) r) r)\n\
    \          ((not (= (aux a (+ a 1) b (+ b 1) c (+ c 1))\n                   (*\
    \ a (* b c (- r 1)))\n                   (* b (* a c (- r 1)))\n             \
    \      (* c (* a b (- r 1))))\n           (aux a (+ a 1) b (+ b 1) c (+ c 1)))))\n\
    \  (aux a 1 1 1 0))", "  (cond\n    [(> a 100)#false]\n    [(= a (/ a 3))#t]\n\
    \    [else\n     (begin\n       (cond\n         [(= (modulo a 3) 0)\n        \
    \  (if (and (is_multiply_prime (+ a 2)) (is_multiply_prime (+ a 3)))\n       \
    \       (is_multiply_prime (+ a 2))\n              #false)\n          [(= (modulo\
    \ a 3) 1)\n           (if (and (is_multiply_prime (+ a 2)) (is_multiply_prime\
    \ (+ a 3)))\n               (is_multiply_prime (+ a 2))\n               #false)\n\
    \          [(= (modulo a 3) 2)\n           (if (and (is_multiply_prime (+ a 2))\
    \ (is_multiply_prime (+ a 3)))\n               (is_multiply_prime (+ a 2))\n \
    \              #false)]\n         [(= (modulo a 3) 3)\n          (if (and (is_multiply_prime\
    \ (+ a 2)) (is_multiply_prime (+ a 3)))\n              (is_multiply_prime (+ a\
    \ 2))\n              #false)]\n         [(= (modulo a 3) 4)\n          (if (and\
    \ (is_multiply_prime (+ a 2)) (is_multiply_prime (+ a 3)))\n               (is_multiply_prime\
    \ (+ a 2))\n               #false)]\n         [(= (modulo a 3) 5)\n          (if\
    \ (and (is_multiply_prime (+ a 2)) (is_multiply_prime (+ a 3)))\n            \
    \   (is_multiply_prime (+ a 2))\n               #false)]))]))])\n", "  (= a 2))\n",
  "  (< (* a a) 100)\n  (let ((b (floor (/ a 3))))\n    (cond\n      (\n        ((=\
    \ b 0) #t)\n        (#t (is_multiply_prime b)))\n      ))\n  )\n", "  (cond [(=\
    \ a 100) (true)]\n        [(= (floor (sqrt a)) 2) true]\n        [(= (floor (sqrt\
    \ a)) 3) (is_multiply_prime (+ a (floor (sqrt a))))]\n        [else false]))\n",
  '  (< (expt a 3) 100))', "  (define (aux a b c d)\n    (if (= a b) \n        (if\
    \ (= a c) \n            #t\n            #f)\n        (if (= a d) \n          \
    \  #t\n            (aux a b (+ c 1) d))\n        )\n      )\n  (aux 2 a 0 3))\n",
  "  (cond ((= a 2) #t)\n        ((= a (floor (/ a 2))) \n           (is_multiply_prime\
    \ (/ a 2))) \n        (else (= a (floor (* 3 a)))\n           (and (is_multiply_prime\
    \ (* a 3)) \n                (is_multiply_prime (* a 5))\n                (is_multiply_prime\
    \ (* a 7))\n                (is_multiply_prime (* a 9))))))\n    ", "  (cond\n\
    \    ((= a 1) #t)\n    ((even? a) (is_multiply_prime (a/2)))\n    ((odd? a) (is_multiply_prime\
    \ (a/2)))\n    ((= (mod a 3) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 2)\
    \ 0) (is_multiply_prime (a/2)))\n    ((= (mod a 5) 0) (is_multiply_prime (a/2)))\n\
    \    ((= (mod a 7) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 9) 0) (is_multiply_prime\
    \ (a/2)))\n    ((= (mod a 11) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 13)\
    \ 0) (is_multiply_prime (a/2)))\n    ((= (mod a 17) 0) (is_multiply_prime (a/2)))\n\
    \    ((= (mod a 19) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 23) 0) (is_multiply_prime\
    \ (a/2)))\n    ((= (mod a 29) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 31)\
    \ 0) (is_multiply_prime (a/2)))\n    ((= (mod a 37) 0) (is_multiply_prime (a/2)))\n\
    \    ((= (mod a 41) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 43) 0) (is_multiply_prime\
    \ (a/2)))\n    ((= (mod a 47) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 53)\
    \ 0) (is_multiply_prime (a/2)))\n    ((= (mod a 59) 0) (is_multiply_prime (a/2)))\n\
    \    ((= (mod a 61) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 67) 0) (is_multiply_prime\
    \ (a/2)))\n    ((= (mod a 71) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 73)\
    \ 0) (is_multiply_prime (a/2)))\n    ((= (mod a 79) 0) (is_multiply_prime (a/2)))\n\
    \    ((= (mod a 83) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 89) 0) (is_multiply_prime\
    \ (a/2)))\n    ((= (mod a 93) 0) (is_multiply_prime (a/2)))\n    ((= (mod a 97)\
    \ 0) (is_multiply_prime (a/2)))\n    ((= (mod a 101) 0) (is_multiply_prime (a/2)))\n\
    \    ((= (mod ", "  (cond\n    ((= a 0) #f)\n    ((or (= a 1) (= a 100)) #f)\n\
    \    ((is_prime a)\n     (< (add1 a) (mul (mod a 3) (mod a 5)))\n     (is_multiply_prime\
    \ (sub1 a)))\n    (else #f)))\n", "  (cond [(= a 0) #f]\n        [(= a (- a 100))\
    \ #t]\n        [(= (math-sqrt-prime a) 3) #t]\n        [(is_multiply_prime (/\
    \ a 3)) (or (is_multiply_prime (* a 3)) (is_multiply_prime (* a (/ a 3))))]\n\
    \        [else #f]))\n", '  (< (+ 1 (sqrt)) a))', "  (cond\n    [(< a 100) #t]\n\
    \    [else\n     (let ([primes1 \n            (filter is_prime \n            \
    \        (map number-to-list (range (a) 1)))])\n       (cond\n         [(empty?\
    \ primes1) #t]\n         [else (and (< a (first primes1)) \n                 \
    \  (is_multiply_prime (first primes1))\n                   (is_multiply_prime\
    \ (first primes1))\n                   (is_multiply_prime (first primes1)))]\n\
    \       )\n     ]\n   ))\n", "  (< a 100) \n  (cond\n    ((< a 3) (or (is_prime\
    \ a) (is_prime (- a 3) (+ a 2))))\n    (else (is_prime a))\n    ))\n", "  (<=\
    \ a 100)\n  (= (mod a 3) 0))", "  (< (abs (- a 100))\n     (* 2 (/ (+ a 1) 2))))\
    \ \n", "  (cond ((= a (/ a 3 0)) #t)\n        ((= a (/ a 5 0)) #t)\n        ((=\
    \ a (/ a 7 0)) #t)\n        ((= a (/ a 9 0)) #t)\n        (else (is_multiply_prime\
    \ (+ a 3)) \n    )\n  )\n", "  (< (mod a 100) 1))\n", "  (if (<= a 100)\n    \
    \  #t\n      (let ((prime (prime-number-for-multiplication a)))\n        (if (number?\
    \ prime)\n            (equal? (is_multiply_prime prime) a)\n            #f))))\n",
  "  (< a 100))\n", "  (cond\n    [(= a (* 3 5)) #t]\n    [else #f]\n  )\n)\n", '  (<
    (square (mod a 3)) 100))', '  (< (mod a 100) 100))', "  (<= a 100)\n  (<= (modulo\
    \ a 3) 2)\n  (<= (modulo (modulo a 3) 2) 2)\n  (<= (modulo (modulo (modulo a 3)\
    \ 2) 2) 2))\n    ", "  (cond ((< a 100) 'false)\n        ((prime? a) (is_multiply_prime\
    \ (a+1))\n        ((not(prime? a)) 'false)\n        (else 'true)))\n", "  (< a\
    \ 100))\n", '  (< (remainder a 3) 1))', "  (< (% a 100) 100))\n", "  (or (is_prime?\
    \ a)\n      (and (is_prime? (sub1 a))\n           (is_multiply_prime (sub1 a)))))\
    \ \n", "  (let ((p (map (lambda (x) (is_prime? x)) '(2 3 5)))\n        (l (length\
    \ (filter is_prime? p))))\n    (<= a (* 3 l))\n  )\n)\n", "    (cond\n       \
    \ ((= a 1) #t)\n        ((= a 2) #t)\n        ((= a 3) #f)\n        (else\n  \
    \          (let ((b (- a 1))\n                  (c (- a 2)))\n               \
    \ (cond\n                    ((< b 100) #t)\n                    (else\n     \
    \                   (cond\n                            ((<= c 3) #t)\n       \
    \                     (else\n                                (is_multiply_prime\
    \ b)))))))) ; <--- error here\n", "  (cdr (assoc a prime-numbers)))\n", "  (<\
    \ a 100))\n", "  (define (loop a result)\n    (if (< a 100)\n        (if (and\
    \ (< (* a a) 3)\n                 (= (mod* (+ a 1) 2) a))\n            (if (=\
    \ (mod* (+ a 1) 2) a)\n                (loop (+ a 1) (cons a result))\n      \
    \          (loop (+ a 1) result))\n            (loop (+ a 1) result))\n      \
    \  result))\n  (loop a '()))\n", "  (if (= a (* a a a) (- 100 a)))\n      #t\n\
    \      #f))\n", "  (or (or (= (expt a 2) 3) (= (expt a 3) 5)) (= (expt a 5) 7)\
    \ \n      (is_multiply_prime (- a 1))))\n", "  (<= a 100))\n", "  (cond [(= a\
    \ 1) #t]\n        [(= a 2) #f]\n        [(is_multiple_of_three? a) #t]\n     \
    \   [else #f]))\n", "  (cond\n    [(= (* a a) a)\n     (= (/ a 3) 1)\n     (=\
    \ (mod a 3) 0)]\n    [else\n     (not (= (mod a 3) 0))]))\n", "  (cond\n    [(=\
    \ a 1) #f]\n    [(<= a 100) #t]\n    [else (let ([b (quotient a 3)]\n        \
    \       [(is_multiply_prime b)]\n               [(is_multiply_prime (- a b))]\n\
    \               [(is_multiply_prime (- b a))]\n               [(is_multiply_prime\
    \ (- b a))]\n               [(is_multiply_prime (- b a))])\n          (if b\n\
    \            (and b (not (is_multiply_prime c)))\n            #f)]))]))\n", " \
    \ (<= a 100)\n  (prime? (- a 2))))\n", "  (< (* a a) (* 3 100)))\n", '  (< (*
    a 3) 100))', "  (cond [(= a 100) #t]\n        [(< a 100) #f]\n        [(= 0 (remainder\
    \ a 2)) #f]\n        [(= (quotient a 2) 3) #f]\n        [(= (quotient a 2) 5)\
    \ #f]\n        [else (is_multiply_prime (+ a 1))]))\n", "  (cond\n    [(= a 1)\
    \ #t]\n    [(= a 100) #f]\n    [(= (modulo a 3) 0)\n    (is_multiply_prime (sub\
    \ a 3))\n    (is_multiply_prime (div a 3))]\n    [else #f]))\n", "  (< (expt a\
    \ 3) 100))\n  \n", "  (= (/ a 3) 2))\n  ;; Knowing that (a) is less then 100.\
    \ \n  ;; Example:\n  ;; >>> (is_multiply_prime 30)\n  ;; #t\n", "  (let ([x (+\
    \ a a)]\n        [y (a)]\n        [z (+ a a a)]\n        [k (+ a a a a a a)]\n\
    \        [xc (mod x 3)]\n        [yc (mod y 3)]\n        [zc (mod z 3)])\n   \
    \ (if (eq? k 0) (> a 100) false)))\n", "  (cond\n    ((= a 2) #t)\n    ((= a (/\
    \ a 2)) #f)\n    ((is_prime? a) (is_multiply_prime (/ a 3)))))\n", "  (if (> a\
    \ 100)\n      (= (* a 2) (* a 3) (* a 5)) #f)\n      #t))\n", "  (cond\n    [(>\
    \ a 100) #f]\n    [(modulo a 3 = 0) [true]]\n    [else (multiple-three-numbers?\
    \ (+ a 3))]))\n", "  (if (= a 2) #t\n      (let ((b (car a)))\n        (if (is_multiply_prime\
    \ b)\n            (is_multiply_prime (cdr a))\n            (is_multiply_prime\
    \ a))))) \n", "  (< (+ a 1 3) 100))\n</code>\nSo I assume you got this far. \n\
    Next thing you do is write a program that iterates through all numbers from 2\
    \ to 99 until the number produced by the previous function is false.\nThis can\
    \ be done with the following code\n<code>", "  (cond\n    [(= a 100) #t]\n   \
    \ [else \n      (cond\n        [(= (is_mult_of_3_primes a b) #t) (cons a b)] \n\
    \        [else #f])]))\n", "  (cond\n    ((< a 100) (and (is_prime a) (is_prime\
    \ (* a a a)))\n    ((= a 100) #f)))\n", "  (let ((b 0))\n    (define (inner-loop\
    \ a b c)\n      (cond ((= b 100) #f)\n            ((= a (mod b c)) #t)\n     \
    \       (else (inner-loop (+ a b) (b + 1) c)))))\n    (inner-loop 1 b a)\n  )\
    \ \n", "  (define (check-for-prime number)\n    (cond\n      [(= (modulo number\
    \ 3) 0) (return false)]\n      [(= (modulo number 5) 0) (return false)]\n    \
    \  [(= (modulo number 7) 0) (return false)]\n      [else (return true)]\n    ))\n\
    \    (for ([i (in-range 100)])\n      (if (check-for-prime (* a i)) true)\n  \
    \  )\n  )\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
