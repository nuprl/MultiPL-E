name: HumanEval_132_is_nested
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes a string as input which contains\
  \ only square brackets.\n;; The function should return #t if and only if there is\
  \ a valid subsequence of brackets \n;; where at least one bracket in the subsequence\
  \ is nested.\n;; >>> (is_nested \"[[]]\")\n;; #t\n;; >>> (is_nested \"[]]]]]]][[[[[]\"\
  )\n;; #f\n;; >>> (is_nested \"[][]\")\n;; #f\n;; >>> (is_nested \"[]\")\n;; #f\n\
  ;; >>> (is_nested \"[[][]]\")\n;; #t\n;; >>> (is_nested \"[[]][[\")\n;; #t\n(define\
  \ (is_nested string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n\
  \    (check-equal? (candidate \"[[]]\") #t)\n    (check-equal? (candidate \"[]]]]]]][[[[[]\"\
  ) #f)\n    (check-equal? (candidate \"[][]\") #f)\n    (check-equal? (candidate\
  \ \"[]\") #f)\n    (check-equal? (candidate \"[[[[]]]]\") #t)\n    (check-equal?\
  \ (candidate \"[]]]]]]]]]]\") #f)\n    (check-equal? (candidate \"[][][[]]\") #t)\n\
  \    (check-equal? (candidate \"[[]\") #f)\n    (check-equal? (candidate \"[]]\"\
  ) #f)\n    (check-equal? (candidate \"[[]][[\") #t)\n    (check-equal? (candidate\
  \ \"[[][]]\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate\
  \ \"[[[[[[[[\") #f)\n    (check-equal? (candidate \"]]]]]]]]\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? string)\n     #f]\n    [(equal? string '[])\n\
    \     #f]\n    [else\n     (cond\n       [(equal? (rest string) '[')\n       \
    \ (and (equal? (rest string) '[) (equal? (rest string) '['))\n       #f]\n   \
    \    [(equal? (rest string) '(')\n        (and (equal? (rest string) '(') (equal?\
    \ (rest string) '['))\n       #f]\n       [(equal? (rest string) '(')\n      \
    \  (and (equal? (rest string) '(') (equal? (rest string) '('))\n       #f]\n \
    \      [(equal? (rest string) '[')\n        (and (equal? (rest string) '[) (equal?\
    \ (rest string) '('))\n       #f]\n       [(equal? (rest string) '(')\n      \
    \  (and (equal? (rest string) '(') (equal? (rest string) '('))\n       #f]\n \
    \      [(equal? (rest string) '[')\n        (and (equal? (rest string) '[) (equal?\
    \ (rest string) '[))\n       #f]\n       [(equal? (rest string) '(')\n       \
    \ (and (equal? (rest string) '(') (equal? (rest string) '('))\n       #f]\n  \
    \     [(equal? (rest string) '(')\n        (and (equal? (rest string) '(') (equal?\
    \ (rest string) '[)))\n       #f]\n       [(equal? (rest string) '[')\n      \
    \  (and (equal? (rest string) '[) (equal? (rest string) '('))\n       #f]\n  \
    \     [(equal? (rest string) '(')\n        (and (equal? (rest string) '(') (equal?\
    \ (rest string) '('))\n       #f]\n       [(equal? (rest string) '[')\n      \
    \  (and (equal? (rest string) '[) (equal? (rest string) '[))\n       #f]\n   \
    \    [(equal? (rest string) '(')\n        (and (equal? (rest string) '(') (equal?\
    \ (rest string) '('))\n       #f]\n       [(equal? (rest string) '(')\n      \
    \  (and (equal? (rest string) '(') (equal? (rest string) '['))\n       #f]\n \
    \      [(equal? (rest string) '[')\n        (and (equal? (rest string) '[) (equal?\
    \ (rest string) '[))\n       #f]\n       [(equal? (rest ", "  (and (equal? (count-open-brackets\
    \ string) 2)\n       (equal? (count-close-brackets string) 1)\n       (equal?\
    \ (count-close-brackets (substring string 1 -2))\n         (count-open-brackets\
    \ (substring string 1 -2))))) ; \"[[]]\" has two open brackets and one closed\
    \ bracket.\n</code>\n<|/ a |>\n<| c |>\nHi, i don't understand how to solve the\
    \ problem with regexp. I used the pattern \"((?!\\]\\]).)+\". but it is not working\
    \ and i don't know why. thank you for your help.\n<|/ c |>\n<| c |>\nI used `(is-nested?\
    \ '\"[[]]\" '[(count-open-brackets '\"[][]]]]]]]]][[[[[])))`. That should do it.\n\
    <|/ c |>\n<| c |>\nThe first problem is that `(count-open-brackets '\"[[]]]]]]]]][[[[[])))`\
    \ is evaluating to `(count-open-brackets '\"[[]])` because it is counting the\
    \ `(` as the number of open brackets.\n<|/ c |>\n<| c |>\nThanks, this helped\
    \ me understand how to solve the problem.\n<|/ c |>\n<| a |>\nThe problem with\
    \ the code you posted is that you count the open brackets twice for every close\
    \ bracket, and your condition isn't quite right.  Try this:\n<code>", "  (if (=\
    \ 0 (string-length (string-join string \"\")))\n      #t\n      (begin \n    \
    \    (define (inner x y)\n          (let ((v (car x))\n                (t (car\
    \ y)))\n            (cond\n              [(char= (char-code v) '[)\n         \
    \      (begin \n                 (define (inner x y)\n                   (let\
    \ ((v (car x))\n                        (t (car y)))\n                   (cond\n\
    \                     [(char= (char-code v) '[)\n                       (begin\
    \ \n                         (define (inner x y)\n                           (let\
    \ ((v (car x))\n                                (t (car y)))\n               \
    \            (cond\n                             [(char= (char-code v) '[)\n \
    \                              (begin \n                                 (define\
    \ (inner x y)\n                                   (let ((v (car x))\n        \
    \                                 (t (car y)))\n                             \
    \      (cond\n                                     [(char= (char-code t) ']')\n\
    \                                       (begin\n                             \
    \            (define (outer x y)\n                                           (let\
    \ ((v (car x))\n                                                 (t (car y)))\n\
    \                                           (cond\n                          \
    \                 [(char= (char-code t) '[)\n                                \
    \            (begin\n                                               (define (outer\
    \ x y)\n                                                 (let ((v (car x))\n \
    \                                                     (t (car y)))\n         \
    \                                      (cond\n                               \
    \                  [(char= (char-code t) '[)\n                               \
    \                    (begin\n                                                \
    \     (define (outer x y)\n                                                  \
    \     (let ((v (car x))\n                                                    \
    \        (t (car y)))\n                                                     (cond\n\
    \                                                       [(char= (char-code t)\
    \ '[)\n                                                         (begin\n     \
    \                                                     (define (outer x y)\n  \
    \                                                          (let ((v (car x))\n\
    \                                                                  (t (car y)))\n\
    \                                                          (cond\n           \
    \                                                 [(char= (char-code t) '[)\n\
    \                                                             (begin\n       \
    \                                                       (define (outer x y)\n\
    \                                                                (let ((v (car\
    \ x))\n                                                                    (t\
    \ (car y)))\n                                                              (cond\n\
    \                                                                [(char= (char-code\
    \ t) '[)\n                                                                 (begin\n\
    \                                                                  (define (outer\
    \ x y)\n                                                                  (let\
    \ ((v (car x))\n                                                             \
    \               (t (car y)))\n                                               \
    \                   (cond\n                                                  \
    \                  [(char= (char-code t) '[)\n                               \
    \                                      (begin\n                              \
    \                                        (define (outer x y)\n               \
    \                                                         (let ((v (car x))\n\
    \                                                                            \
    \   (t (car y", "  (cond ((or (string-length string) (string-length string))\n\
    \         #t)\n        (else\n         (equal? (string->list (string->symbol string))\
    \ '(')\n         (equal? (string->list (string->symbol string)) '[')\n       \
    \  (equal? (string->list (string->symbol string)) '[)\n         (equal? (string->list\
    \ (string->symbol string)) '<)\n         (equal? (string->list (string->symbol\
    \ string)) '<)\n         (equal? (string->list (string->symbol string)) '=)\n\
    \         (equal? (string->list (string->symbol string)) '>)\n         (equal?\
    \ (string->list (string->symbol string)) '>)\n         (equal? (string->list (string->symbol\
    \ string)) '|)\n         (equal? (string->list (string->symbol string)) '|)\n\
    \         (equal? (string->list (string->symbol string)) '||)\n         (equal?\
    \ (string->list (string->symbol string)) '||)\n         (equal? (string->list\
    \ (string->symbol string)) '|-))))\n", "  (cond\n    [(equal? string \"[]\") \
    \         #t]\n    [(equal? string \"[][]\")        #f]\n    [(equal? string \"\
    [[][]]\")       #t]\n    [(equal? string \"[[][[]][]\") #f]\n    [else       \
    \                 #f]))\n", "  (letfn [(is-nested-loop [chars char-count]\n  \
    \         (cond [(empty? chars) #t]\n                 [(equal? (first chars) (first\
    \ chars)) (is-nested-loop (rest chars) (add1 char-count))])])\n    (is-nested-loop\
    \ string (add1 string)))\n</code>\nThe function below creates a string with each\
    \ pair of brackets placed one after another in an arbitrary order. \n<code>",
  "  (cond ((string=? (string-ref string 0) \"]\")\n         #t)\n        ((string=?\
    \ (string-ref string 0) \"[[\")\n         #t)\n        (else (is_nested (string-ref\
    \ string 0)))))\n</code>\nThe above function checks for brackets starting with\
    \ left angle bracket. If there is none, starting with right angle bracket, returns\
    \ #t.\n<|/ a tags=racket,scheme,lisp |>\n<| a |>\nHere's a simple recursive solution:\n\
    <code>\n#lang racket\n", "  (cond\n    [(string= string \"\")    #f]\n    [(string=\
    \ string \"[]\")   #t]\n    [else              (cond\n                       \
    \   [(string= (string-ref string 0) \"[\")    #t]\n                          [(string=\
    \ (string-ref string 0) \"{\") #t]\n                          [(string= (string-ref\
    \ string 0) \"(\")   #t]\n                          [(string= (string-ref string\
    \ 0) \"}\")   #f]\n                          [else                   #f]\n   \
    \                       )]))\n", "  ; Use regex to find patterns with brackets:\n\
    \  (let ([pattern (regexp-new \"\\\\[|\\\\]\")]) ; [ and ] as pattern\n    (let\
    \ ([matches (regexp-all-strings (regexp-replace-all string pattern \"\") pattern)])\
    \ ; get all matches\n      (cond [(empty? matches) #f ] \n            [(= 1 (count-substrings\
    \ matches #f #t)) #t] ; count the ones that are nested\n            [else #f]))))\
    \ ; other strings are not nested\n</code>\n<|/ a |>\n<| c |>\nThis won't work\
    \ at all if there are two brackets on the same level. For example, this will report\
    \ `#t` for `'[[[][]]]'`, when it should be `#f`.\n<|/ c |>\n<| c |>\nIndeed, I\
    \ modified the answer to allow nesting two brackets on the same level\n<|/ c |>\n\
    <| a tags=racket,string,regex,lisp |>\nHere's a version that works with Racket\
    \ regex:\n<code>\n#lang racket\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (first string) '(') (is_nested (subseq string 1 string)))\n         (and (equal?\
    \ (first string) '(') (is_nested (subseq string 2 string)))]\n        [(equal?\
    \ (first string) '[) (is_nested (subseq string 1 string))\n         (and (equal?\
    \ (first string) '[) (is_nested (subseq string 2 string)))]\n        [else\n \
    \        (is_nested (subseq string 1 string))]))\n", "  (match string\n    [\"\
    []\" #t]\n    [\"[[]\" #t]\n    [\"[[[]\" #t]\n    [\"[[[[]\" #f]\n    [\"[[[\"\
    \ #f]\n    [\"[[]]\" #f]\n    [\"[[]][[\" #f]\n    [\"[[]][[[]\" #f]\n    [\"\
    [[]][[\" #f]\n    [\"[[]]\" #f]\n    [\"[[]][]\" #f]\n    [\"[[]]\" #f]\n    [\"\
    [[]][][\" #f]\n    [\"[[]][]\" #f]\n    [\"[[]][][[]\" #f]\n    [\"[[]][][\" #f]\n\
    \    [\"[[]][]]\" #t]\n    [\"[[]]\" #t]\n    [\"[[[]]\" #t]\n    [\"[[[[]]\"\
    \ #t]\n    [\"[[[[]]\" #t]\n    [\"[[[[]][]\" #t]\n    [\"[[[[]][]]\" #t]\n  \
    \  [\"[[[[]][]][]\" #t]\n    [\"[[[[]][]][]]\" #f]\n    [\"[[[[]][]][]][]\" #f]\n\
    \    [\"[[[[]][]][]][]]\" #f]\n    [\"[[[[]][]][]][]][]\" #t]\n    [\"[[[[]][]][]][]]\"\
    \ #t]\n    [\"[[[[]][]][]][]][]\" #t]\n    [\"[[[[]][]][]][]][]]\" #t]\n    [\"\
    [[[[]][]][]][]][]][]\" #t]\n    [\"[[[[]][]][]][]][]][]\" #t]\n    [\"[[[[]][]][]][]][]][]]\"\
    \ #t]\n    [\"[[[[]][]][]][]][]][]][]\" #t]\n    [\"[[[[]][]][]][]][]][]][]\"\
    \ #t]\n    [\"[[[[]][]][]][]][]][]][]]\" #t]\n    [\"[[[[]][]][]][]][]][]][]][]]\"\
    \ #t]\n    [\"[[[[]][]][]][]][]][]][]][]][]]\" #t]\n    [\"[[", "  (define (loop\
    \ i s)\n    (cond [(null? s) #t]\n          [(char=? s #\\]) (loop (+ i 1) (substring\
    \ s 0 (- i 1)))]\n          [(char=? s #\\[) (loop (+ i 1) (substring s i (length\
    \ s)))]\n          [(char=? (car s) #\\]) \n           (and (loop (+ i 1) (substring\
    \ s 0 (- i 1)))\n                (loop (+ i 1) (substring s i (length s))))\n\
    \          [(char=? (car s) #\\[)\n           (and (loop (+ i 1) (substring s\
    \ 0 (- i 1)))\n                (loop (+ i 1) (substring s i (length s))))\n  \
    \         (loop (+ i 1) (substring s i (length s)))]\n          [else (loop (+\
    \ i 1) (substring s i (length s)))]))\n  (loop 0 string))\n", "  (let ((start\
    \ 0)\n        (end 0)\n        (stack '())\n        (valid #t))\n    (set! start\
    \ (position '[[]])\n          end (position '[]]]))\n    (cond\n      [(< start\
    \ end)\n       (return valid)\n       ;; Found a nested bracket\n       (cond\
    \ [(char? (substring string start end))\n             (set! end (+ start 1))\n\
    \             (set! valid #f)\n             (push (substring string start end)\
    \ stack)\n             (set! start (+ end 2))\n             (cond\n          \
    \     [(char? (substring string start end))\n                (set! end (+ start\
    \ 1))\n                (set! valid #t)\n                (push (substring string\
    \ start end) stack)\n                (set! start (+ end 2))]\n               [else\
    \ (set! valid #f)]\n               )]\n          [else\n           (push (substring\
    \ string start end) stack)\n           (set! start (+ end 2))]\n          )]\n\
    \      [else\n       (set! valid #f)]\n      )))\n", "  (let ([opening-stack (make-stack)])\
    \ \n    (loop\n       for i from 0\n       until (empty? opening-stack)\n    \
    \   do\n         (let ([opening-char (stack-ref opening-stack i)]\n          \
    \     [closing-char (stack-ref opening-stack i -1)])\n           (when (char=\
    \ opening-char closing-char)\n             (return-value? opening-char closing-char)\n\
    \             (cond [(char= opening-char '[)\n                     ;; If the closing\
    \ character is ']' then push the opening bracket \n                     ;; to\
    \ the stack and stop\n                     (push opening-char opening-stack)\n\
    \                     (return-value? false false)\n                     (return-value?\
    \ true true)\n                     (else\n                       (push closing-char\
    \ opening-stack)\n                       (return-value? false false)\n       \
    \                (return-value? false true)))]\n             (else\n         \
    \      (push opening-char opening-stack)\n               (return-value? false\
    \ false))))))\n", "  (cond [(empty? string) #f]\n        [(equal? (char string\
    \ 0) \"[\")\n         (equal? (char string 1) \"[\")\n         (equal? (char string\
    \ 2) \"[\")\n         (equal? (char string 3) \"[\")\n         (equal? (char string\
    \ 4) \"[\")\n         (equal? (char string 5) #t]\n        [else #f]))\n", " \
    \ (or (string=? string \"]\")\n      (or (string=? string \"][]\")\n         \
    \ (string=? string \"[][]]\")))\n", "  (let ([stack '([])])\n    (define (is-nested-loop\
    \ i)\n      (if (< i 0)\n          (if (equal? string (caar stack))\n        \
    \      #t\n              #f)\n          (if (equal? (caar stack) '()) (is-nested-loop\
    \ (- i 1)) \n              (is-nested-loop (- i 1))))\n    (is-nested-loop 0)\n\
    \    (is-nested-loop 0)))\n", "  (let ((pos 0) (char 0))\n    (while (< pos (string-length\
    \ string))\n      (if (= pos (string-length string))\n          (= char '[])\n\
    \          (if (string-ref string pos)\n              (if (string-ref string pos\
    \ '[])\n                  #f\n                  (is-nested (string-ref string\
    \ pos)))))\n      (set! pos (+ pos 1))\n      (set! char (char (string-ref string\
    \ pos))))))\n", "  (= (count string \"[]\") (count string \"[[]\")))\n", "  (cond\
    \ ((null? string)\n         #f)\n        ((char= (first string) '[)\n        \
    \ (substring (second string)\n                  (substring (first string) 0 1)\n\
    \                  (substring (first string) 1 -1)))\n        (else (is_nested\
    \ (string) (second string)))\n      )\n)\n</cell>\n<cell>\n#lang racket", "  (or\
    \ (string=? (reverse string) (string-ref string 0))\n      (let loop ((string-rest\
    \ (reverse string))\n                 (string-n (string->list  string))\n    \
    \             (count 0))\n        (cond\n          ((null? string-rest)\n    \
    \       (equal? count (string-n 1)))\n          ((string=? (string-rest (- count\
    \ 1)) (string-rest (+ count 2)))\n           (loop (string-rest string)\n    \
    \             (string-n (string->list string-rest))\n                 (+ count\
    \ 1)))\n          (else\n           (loop (string-rest string)\n             \
    \    (string-n (string->list string-rest))\n                 count))))))\n", " \
    \ (cond\n    ((empty? string) #f)\n    ((equal? (car string) '[)\n     (cond\n\
    \       ((empty? (cdr string)) #t)\n       ((equal? (car string) '[)\n       \
    \ (is_nested (cdr string)))\n       ((equal? (car string) ']')\n        (is_nested\
    \ (cdr string)))\n       ((equal? (car string) '(')\n        (is_nested (cdr string)))\n\
    \       ((equal? (car string) '(')\n        (is_nested (cdr string)))\n      \
    \ ((equal? (car string) '[') \n        (is_nested (cdr string)))\n       ((equal?\
    \ (car string) '[)\n        (is_nested (cdr string)))\n       (else #f))))\n \
    \   ((equal? (car string) '[)\n     (cond\n       ((empty? (cdr string)) #f)\n\
    \       ((equal? (car string) '[)\n        (is_nested (cdr string)))\n       ((equal?\
    \ (car string) ']')\n        (is_nested (cdr string)))\n       ((equal? (car string)\
    \ '(')\n        (is_nested (cdr string)))\n       ((equal? (car string) '(')\n\
    \        (is_nested (cdr string)))\n       ((equal? (car string) '[') \n     \
    \   (is_nested (cdr string)))\n       ((equal? (car string) '[)\n        (is_nested\
    \ (cdr string)))\n       (else #f))))\n    ((equal? (car string) ']')\n     (cond\n\
    \       ((empty? (cdr string)) #f)\n       ((equal? (car string) '[)\n       \
    \ (is_nested (cdr string)))\n       ((equal? (car string) '[)\n        (is_nested\
    \ (cdr string)))\n       ((equal? (car string) '[)\n        (is_nested (cdr string)))\n\
    \       ((equal? (car string) '[') \n        (is_nested (cdr string)))\n     \
    \  ((equal? (car string) '[)\n        (is_nested (cdr string)))\n       ((equal?\
    \ (car string) '[)\n        (is_nested (cdr string)))\n       ((equal? (car string)\
    \ '[)\n        (is_nested (cdr string)))\n       ((equal? (car string) ']') \n\
    \        (is_nested (cdr string)))\n       (", "  (let loop ((index 0)\n     \
    \        (open (char->int #\\[)\n                  (closed (char->int #\\])))\n\
    \    (cond\n      [(empty? string)\n       #f]\n      [else\n       (cond [(char->int\
    \ (string-ref string index)) (= index string-length string)\n               (char->int\
    \ (string-ref string index)) (= index 0)\n               (char->int (string-ref\
    \ string index)) (< index (string-length string))]\n             [else #f]\n \
    \            [(not (= open closed)\n                (and (= index (- index 1))\n\
    \                     (= (char->int (string-ref string index)) open)\n       \
    \              (= (char->int (string-ref string index)) closed))\n           \
    \    (loop (+ index 1) open closed)]))]))\n", "  ;; (define (is_nested string\
    \ found)\n  ;;   (if (string= string '())\n  ;;       found\n  ;;       (is_nested\
    \ (substring string 0 2) #t)))\n  ;; if (string=string '())\n  (if (string= string\
    \ '())\n      #t\n      (is_nested (substring string 0 2) #t)))\n", "  (and (<\
    \ 1 (string-length string))\n       (= (string-index (substring string 0 1) \"\
    [\") (string-index (substring string 1 1) \"[\"))\n       (= (string-index (substring\
    \ string 0 1) \"]\") (string-index (substring string 1 1) \"]\"))))\n", "  (define\
    \ (nest-helper substring index)\n    (cond [(and (character? substring)\n    \
    \          (and (number? index)\n                   (= index (length substring)))\n\
    \           #f]\n          [(character? substring)\n           (not (and (number?\
    \ index)\n                     (= index (length substring))))]\n          [(and\
    \ (number? index)\n               (= index (length substring)))\n           (not\
    \ (character? substring))]\n          [(number? index)\n           (not (character?\
    \ substring))]))\n  (cond [(or (string=? string \"[]]\")\n           string=?\
    \ string \"[]][[\")\n         #f]\n        [(or (string=? string \"[[]]\")\n \
    \           (string=? string \"[]]]]]]][[[[[]\"))\n         #f]\n        [(or\
    \ (string=? string \"[][]\"))\n         #f]\n        [(or (string=? string \"\
    []\"))\n         #f]\n        [(or (string=? string \"[[][]]\")\n            (string=?\
    \ string \"[[]][[\")\n            (string=? string \"[[]]][[[]\")\n          \
    \  (string=? string \"[[][]][[[]\")\n            (string=? string \"[[][]][[\"\
    )\n            (string=? string \"[[]]][[[]\")\n            (string=? string \"\
    [[][]][[[]\")\n            (string=? string \"[][]][[[]\")\n            (string=?\
    \ string \"[][]][[\")\n            (string=? string \"[]][[[]\"))\n         #f]\n\
    \        [(or (string=? string \"[[]]][[[]\")\n            (string=? string \"\
    [[]][[\")\n            (string=? string \"[[]]][[[]\"))\n         #f]\n      \
    \  [(string=? string \"[[][]][[[]\")\n         #f]\n        [(string=? string\
    \ \"[][]][[\")\n         #f]\n        [(string=? string \"[][]][[]\")\n      \
    \   #f]\n        [(string=? string \"[][]][\")\n         #f]\n        [(string=?\
    \ string \"[][]][[]\")\n         #f]\n        [(string=? string \"[][]][\")\n\
    \         #f]\n        [(string=? string \"[][]][[]\")\n         #f]\n       \
    \ [(string=? string \"[]][[\")\n         #f]\n        [(string=? string \"[]][[]\"\
    )", "  (let loop ((s string) (result #f))\n    (cond\n      [(empty? s) result]\n\
    \      [(char= (first s) #\\[ ) (loop (rest s) (or (not result) (equal? (first\
    \ s) #\\])))]\n      [else\n       (loop (rest s) (or (not result) (equal? (first\
    \ s) #\\])))])))\n", "  (cond ((empty? string) #f)\n        (else (and (char-set?\
    \ (first string))\n                  (or (is_nested (substring string 0 (char-index\
    \ string 0))) \n                       (is_nested (substring string 1 (char-index\
    \ string 0)))))\n           )\n        )\n      )\n", "  (local ((define (count\
    \ start length)\n           (define (nested start length)\n             (if (=\
    \ start length)\n                 (if (equal? start 0)\n                     (if\
    \ (equal? (substring string start (+ start length))\n                        \
    \         '[')\n                       (if (equal? (substring string start (+\
    \ start length))\n                                 ']')\n                    \
    \     (if (equal? (substring string start (+ start length))\n                \
    \                 '(')\n                         (if (equal? (substring string\
    \ start (+ start length))\n                                 ')')\n           \
    \              (if (equal? (substring string start (+ start length))\n       \
    \                          '{')\n                         (if (equal? (substring\
    \ string start (+ start length))\n                                 '}')\n    \
    \                     (if (equal? (substring string start (+ start length))\n\
    \                                 '(')\n                         (if (equal? (substring\
    \ string start (+ start length))\n                                 ')')\n    \
    \                     (if (equal? (substring string start (+ start length))\n\
    \                                 '[')\n                         (if (equal? (substring\
    \ string start (+ start length))\n                                 ']')\n    \
    \                     #f))))))\n                 (if (equal? length 0)\n     \
    \                (if (equal? (substring string start (+ start length))\n     \
    \                            '[')\n                       (if (equal? (substring\
    \ string start (+ start length))\n                                 ']')\n    \
    \                     (if (equal? (substring string start (+ start length))\n\
    \                                 '(')\n                         (if (equal? (substring\
    \ string start (+ start length))\n                                 ')')\n    \
    \                     (if (equal? (substring string start (+ start length))\n\
    \                                 '{')\n                         (if (equal? (substring\
    \ string start (+ start length))\n                                 '}')\n    \
    \                     (if (equal? (substring string start (+ start length))\n\
    \                                 '(')\n                         (if (equal? (substring\
    \ string start (+ start length))\n                                 ')')\n    \
    \                     (if (equal? (substring string start (+ start length))\n\
    \                                 '[')\n                         (if (equal? (substring\
    \ string start (+ start length))\n                                 ']')\n    \
    \                     #f))))))))))))))\n      (define (loop start length)\n  \
    \      (let ((result #f))\n          (if (= start length)\n              (set!\
    \ result #t)\n              (if (equal? length 0)\n                  (set! result\
    \ #f)\n                  (loop (+ start 1) length)))))\n      (loop (length string)\
    \ 0))))\n", "  (and (char=? (car string) '[')\n       (char=? (cadr string) ']')\n\
    \       (not (null? (cdr string)))))\n", "  (cond [(null? string) #f]\n      \
    \  [(equal? (car string) '[)\n         (cond [(equal? (car string) '[) (is_nested\
    \ (cdr string))] \n               [(equal? (car string) ']) (is_nested (cdr string))]\n\
    \               [else #f])]\n        [else #f]))\n</code>\n<|/ a dscore=2 tags=racket,recursion\
    \ |>\n<| a dscore=2 |>\nThis is another solution:\n<code>", "  (if (or (null?\
    \ string) (char? string) (string-length string) (string-ref string 0))\n     \
    \ ;; Empty string or null?\n      #f\n      (match string\n          [(#\\[) (#t)]\n\
    \          [(#\\]) (#t)]\n          [(#\\]\\[) (#t)]\n          [(#\\]\\]) (#t)]\n\
    \          [(#\\]\\]\\[) (#t)]\n          [(#\\]\\]\\]) (#t)]\n          [(#\\\
    ]\\]\\]\\[) (#t)]\n          [(#\\]\\]\\]\\]) #f))))\n", "  (cond [(equal? (count-brackets\
    \ string) 0) #f]\n        [(equal? (count-brackets string) 1) #t]\n        [(equal?\
    \ (count-brackets string) 2)\n         (equal? (count-brackets (string 1))\n \
    \                 (count-brackets (string 2)))]\n        [else\n         (equal?\
    \ (count-brackets string) (count-brackets (string 0))\n                  (count-brackets\
    \ (string 1)))]))\n", "  (match string\n    ([()#t])\n    ((#\\[[#\\]]])\n   \
    \  (match (substring (string 2 string) 1 2)\n         ([()#t])\n         ([()#f])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#t])\n         ([()#t])\n\
    \         ([()#t])\n         ([()#t])\n         ([()#", "  (or (equal? (count\
    \ string \"[]\") 0)\n      (equal? (count string \"(]\") 0)\n      (equal? (count\
    \ string \"([]\") 0)\n      (equal? (count string \"[]]\") 0)\n      (equal? (count\
    \ string \"(][]\") 0)\n      (equal? (count string \"()\") 0)\n      (equal? (count\
    \ string \"(()\") 0)\n      (equal? (count string \"[[]\") 0)\n      (equal? (count\
    \ string \"[][\") 0)\n      (equal? (count string \"[())\") 0)\n      (equal?\
    \ (count string \"([]()\") 0)\n      (equal? (count string \"(()[]\") 0)\n   \
    \   (equal? (count string \"([]]\") 0)\n      (equal? (count string \"([]][]\"\
    ) 0)\n      (equal? (count string \"[[][]]\") 0)\n      (equal? (count string\
    \ \"()[]\") 0)\n      (equal? (count string \"[[][]]\") 0)\n      (equal? (count\
    \ string \"[[][]][\") 0)\n      (equal? (count string \"[[]()[]\") 0)\n      (equal?\
    \ (count string \"(()[][]\") 0)\n      (equal? (count string \"[[][]][]\") 0)\n\
    \      (equal? (count string \"([][()\") 0)\n      (equal? (count string \"(()[][()\"\
    ) 0)\n      (equal? (count string \"[[]()[][]\") 0)\n      (equal? (count string\
    \ \"[[][()[]\") 0)\n      (equal? (count string \"[[][]][]\") 0)\n      (equal?\
    \ (count string \"()[][]\") 0)\n      (equal? (count string \"()[[][]\") 0)\n\
    \      (equal? (count string \"()[][()\") 0)\n      (equal? (count string \"([][][]\"\
    ) 0)\n      (equal? (count string \"([][()[]\") 0)\n      (equal? (count string\
    \ \"()[][][]\") 0)\n      (equal? (count string \"()[][()[]\") 0)\n      (equal?\
    \ (count string \"([][][]\") 0)\n      (equal? (count string \"[[][][][]\") 0)\n\
    \      (equal? (count string \"([][()[][]\") 0)\n      (equal? (count string \"\
    ([][][][]\") 0)\n      (equal? (count string \"([][][())\") 0)\n      (equal?\
    \ (count string \"[][()[][]\") 0)\n      (equal? (count string \"[][][][]\") 0)\n\
    \      (equal? (count string ", "  (define (loop start end)\n    (cond ((or (<\
    \ end start) (= end start)) #t)\n          ((eq? end start) #f)\n          ((char=?\
    \ (substring string start end) \"[\") (loop 0 (add1 end))) ; Skip leading brackets\n\
    \          (else (loop (add1 start) (add1 end))))) ;; If end >= start, then we\
    \ have a valid subsequence\n  (loop (length string) 0))\n", "  (cond\n    [(or\
    \ (eq? string \"\")\n          (eq? string \"[]\"))\n     (lambda (x) (eq? x '#t))\n\
    \    (lambda (x) (eq? (is-nested x) '#t))]\n    [else\n     (lambda (x) (eq? (is-nested\
    \ x) '#f))]\n  ))\n", "  (cond\n    [(empty? string)\n     (display \"~A\" empty?\
    \ string)\n     true]\n    [(= \"[[]]\" string)\n     (display \"~A\" [[]]] string)\n\
    \     true]\n    [(= '[]]] string)\n     (display \"~A\" []] string)\n     true]\n\
    \    [else (= (substring string 0 (string-length string) string) \"[]]\") ; last\
    \ ] not nested\n     (display \"~A\" string \" ]\") ; last ] not nested\n    \
    \ true]\n    ))\n", '  ', "  (cond ((eq? string #\\[]) #t)\n        ((eq? string\
    \ #\\()) #f)\n        ((eq? string #\\])) #f)\n        ((eq? string #\\}) #f)\n\
    \        ((eq? string #\\;) #f)\n        (else (is_nested (string-append string\
    \ #\\])) #t)))\n", "  (cond\n    [(string-ref string 0) #t]\n    [(and (not (string-ref\
    \ string 0)) (char= (string-ref string 0) #\\[))\n    (cond\n      [(or (char=\
    \ (string-ref string 1) #\\])\n            (char= (string-ref string 1) #\\}))]\n\
    \    [else #f]\n    [else (is_nested (string-ref string 1))]))])\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(starts-with? \"[\" string) #t]\n    [else (and\
    \ (contains? \"[\" (substring string 0 -1)) #t)]))\n", "  (cond (empty? string)\
    \ #f)\n  (cond ((or (char=? (first string) '[')\n             (char=? (first string)\
    \ '{'))\n         (is_nested (string-rest (substring string 1)))\n         (is_nested\
    \ (string-rest (substring string 2)))\n         (is_nested (string-rest (substring\
    \ string 3)))\n         (is_nested (string-rest (substring string 4)))\n     \
    \    (is_nested (string-rest (substring string 5)))\n         (is_nested (string-rest\
    \ (substring string 6)))\n         (is_nested (string-rest (substring string 7)))\n\
    \         (is_nested (string-rest (substring string 8)))\n         (is_nested\
    \ (string-rest (substring string 9))))\n        ((char=? (first string) '[') (is_nested\
    \ (string-rest (substring string 1))))\n        ((char=? (first string) '{') (is_nested\
    \ (string-rest (substring string 1))))\n        (else #t)))\n", "  (cond\n   \
    \ [(empty? string) #f]\n    [(equal? (car string) '[') (is_nested (cdr string))]\n\
    \    [else (is_nested (cdr string))]))\n", "  (cond [(empty? string)\n       \
    \  #f]\n        [(equal? (car string) '[)\n         (is_nested (cdr string))]\n\
    \        [else\n         (equal? (car string) '[)\n         (or (is_nested (cdr\
    \ string))\n             (equal? (cdr string) ']')))]))\n", "  (define (helper\
    \ curr str)\n    (cond\n      [(null? str) true]\n      [else (or (equal? (car\
    \ str) curr)\n                (helper (cdr curr) (cdr str)))]))\n  (if (not (string-empty?\
    \ string))\n      (helper (car string) (cdr string))\n      true))\n", "  (cond\n\
    \    [(equal? string (substring string 0 0)) #f]\n    [(equal? (substring string\
    \ 0 1) (substring string 1 0)) #f]\n    [else (equal? (substring string 0 1)\n\
    \      (and (equal? (substring string 1 0)\n        (equal? (substring string\
    \ 0 2)\n          (substring string 2 0)))\n        (equal? (substring string\
    \ 1 1)\n          (substring string 0 2))))))]))\n\n", "  (cond ((empty? string)\
    \ #f)\n        ((char-subset? (first (car string)) '[')\n         (and (is_nested\
    \ (cdr string))\n               (char-subset? (first (car string)) '[')\n    \
    \           (char-subset? (first (car string)) ']')\n               (char-subset?\
    \ (first (car string)) '[')\n               (char-subset? (first (car string))\
    \ '[')))\n         ((empty? (cdr string)) #t)\n        (else (is_nested (cdr string)))))\n",
  "  (and (equal? (length string) 1)\n       (equal? (first string) '[')))\n", " \
    \ (let ([opens (count-open-brackets string)]\n        [closes (count-close-brackets\
    \ string)]\n        [result (= closes (- opens closes)])]\n        [stack (make-stack)]\n\
    \        [found (list)])\n    (cond [(= opens closes)\n           (or (null? stack)\n\
    \               (null? (cdr stack)))]\n          [(= 0 (rem opens 2))\n      \
    \     (= 0 (rem closes 2))\n           ((eq? (car stack) (car found))\n      \
    \      (if (= 0 (rem closes 2))\n                (if (null? (cdr stack))\n   \
    \                 result\n                    (push result (car stack)))))]\n\
    \          [(> opens closes)\n           (if (null? (cdr stack))\n           \
    \    result\n               (push result (car stack))\n               (push result\
    \ (pop-stack)))]\n          [(null? stack)\n           (if (eq? found '())\n \
    \              result\n               (push result (car found))\n            \
    \   (push result (pop-stack)))]\n          [(not (null? (cdr stack))\n       \
    \       (push result (car stack))\n              (push result (pop-stack)))]\n\
    \          [(null? (cdr stack))\n           (if (= 1 (length found))\n       \
    \        result\n               (push result (car found))\n               (push\
    \ result (pop-stack)))]\n          [else\n           (push result (car stack))\n\
    \           (push result (pop-stack))\n           (set! found (cdr found))]))))\n",
  "  (let loop ((string-length (length string)))\n    (cond ((= string-length 0)\n\
    \           #f)\n          ((equal? (string-ref string 0) \"[\")\n           (loop\
    \ (sub1 string-length))\n           (equal? (string-ref string (string-length\
    \ string)) \"]\"))\n          ((equal? (string-ref string 0) \"[\")\n        \
    \   (loop (sub1 string-length))\n           (equal? (string-ref string (string-length\
    \ string)) \"]\")\n           (loop (sub1 string-length))\n           (equal?\
    \ (string-ref string (string-length string)) \"[\")\n           (loop (sub1 string-length))\n\
    \           (equal? (string-ref string (string-length string)) \"]\"))\n     \
    \     (else\n           (loop (sub1 string-length))))))\n", "  (cond\n    [(string-match\
    \ #rx\"\\[([\\[]*\\[)*\\]\\]\" string)\n     (string->boolean (string->list string))]\n\
    \    [else #f]))\n", "  (cond\n    [(or (eq? (position \"]\" string) -1)\n   \
    \      (eq? (position \"]\" string) (string-length string)))\n     (eq? (subseq\
    \ string 0 -1) #\\])]\n    [(or (eq? (position \"[\" string) -1)\n         (eq?\
    \ (position \"[\" string) (string-length string)))\n     (eq? (subseq string 0\
    \ -1) #\\[)]]\n    [else\n     (eq? (subseq string 0 -1) #\\])\n     (eq? (subseq\
    \ string 0 -1) #\\[)\n     (is_nested (string-append \"(\" string \")\"))]))\n",
  "  (define (helper start end current result)\n    (cond ((and (eq? end 0)\n    \
    \            (or (eq? current '[)\n                    (eq? current '('))))\n\
    \          (cons start (cons end result))\n          (else (helper (+ start 1)\n\
    \                         (- end 1)\n                         current\n      \
    \                   (cons current result)))))\n  (helper 1 0 (string->list string)\
    \ '()))\n", "  ; Check for valid nesting.\n  (define nested (subseq? string \"\
    [\" \"]\"))\n  ; Check for valid subsequences.\n  (define valid (subseq? string\
    \ \"[\" \"]\"))\n  (or nested valid))\n", "  (= #t \n     (string->symbol\n  \
    \    (string-count\n       (lambda (s) (or (string=? (symbol->string s) \"[\"\
    )\n                      (string=? (symbol->string s) \"{\")))\n       string))))\n",
  "  (letrec ([check (lambda (s e result)\n                (cond [(= e 0) result]\n\
    \                      [(equal? (char-after (subseq s 0 e) \"[\")\n          \
    \             (check s (subseq e 1) #t)]\n                      [(equal? (char-after\
    \ (subseq s e \"[\")\n                                       (char-after (subseq\
    \ s e \"[\") \"[\")\n                                     result)]))])])\n   \
    \ (check string 0 #f)))\n", "  (define (next-nested cur-nest)\n    (cond ((equal?\
    \ (peek-char string) '[')\n           (if (equal? (peek-char string) '[') (next-nested\
    \ cur-nest)\n               (next-nested cur-nest)))\n          ((equal? (peek-char\
    \ string) ']') (if (equal? (peek-char string) '[') cur-nest\n                \
    \                                  cur-nest))\n          ((equal? (peek-char string)\
    \ ']') cur-nest)\n          (else cur-nest)))\n  (equal? (peek-char string) '[)\
    \ (next-nested #f))\n</code>\n<|/ a dscore=1 tags=racket,lisp,scheme |>\n<| a\
    \ |>\nI feel like this is an exercise on recursion. I am not going to do the exercises,\
    \ but here are some notes.\n\nYou don't need any global variables, because you\
    \ have closures. Just have them in the function. You also don't need to pass any\
    \ parameters, since you can just use locals.\nIt's okay to pass the whole string,\
    \ because you are only using the first character. You can just use that to get\
    \ the next character.\n\nHere are some notes on recursion:\nFirst, note that \"\
    recursion\" can be very useful, but I wouldn't use it in this case. If you're\
    \ really set on doing recursion, consider using it to find all pairs of square\
    \ brackets in a string (in other words, just finding two pairs).\nSecond, if you\
    \ do use recursion, you have to remember that recursion is like a loop. Your recursion\
    \ will end up looking something like this:\n<code>", "  (cond [(empty? string)\
    \ #f]\n        [(equal? (first (first string)) '[) (is_nested (substring (first\
    \ string) 2))]\n        [else #f]))\n", "  (match string\n    ['[] (-> #f #t)]\n\
    \    ['() (-> #f #t)]\n    [char (-> #f #t)\n      ;; If the character is a square\
    \ bracket (either '[ or '{') then \n      ;; check that it is followed by a '['\
    \ that is not followed by another '['.\n      ;; If so, then remove the '[' from\
    \ both sides of the bracket, \n      ;; then check that the resulting string is\
    \ empty.\n      ;; If not then return #f.\n      (if (eq? char ']') (-> #t (and\n\
    \                              (is_nested (substring string 1 (match (rest string)\
    \ '[])))\n                              (is_nested (substring string 0 (match\
    \ (rest string) '['))))\n              #f))]))\n", "  (match string\n    [(list\
    \ [] string) #f]\n    [(cons char string) #t]\n    [else (is_nested string)]))\n",
  "  (let* ((brackets '())\n         (found (count-nesting string \"[\" '])))\n  \
    \  (and (= found 0)\n         (empty? brackets)\n         (eq? (first (reverse\
    \ brackets)) '())\n         (eq? (last (reverse brackets)) string)\n         found)))\n",
  "  (cond ((not (string-length string))\n         #t)\n        ((not (match (string\
    \ 1) #{\\[(\\[]}))\n         #t)\n        ((not (match (string 1) #{\\[(\\[]\\\
    ]}))\n         #f)\n        ((not (match (string 1) #{\\[(\\[]\\]]))\n       \
    \  #f)\n        (else\n         (is_nested (substring (string 1) 0 string-length\
    \ (string 1)))\n         )\n        )\n      )\n", "  (match (string) \n    [(\"\
    []\" #t)\n     (\"()[]\" #t)\n     (\"(][\")\n     (\"(][\")]\" #f)\n     (\"\
    [[]]]\" #t)\n     (\"[[]]]]]\" #t)\n     (\"[[]]]]]]]]]]\" #f)]))\n", "  ;; This\
    \ pattern matches square brackets:\n  (define (match-square [_i _j]\n    (if (=\
    \ _i _j)\n        #t\n        #f))\n  (define (match-nested-brackets [_i _j]\n\
    \    (if (and (< _i _j)\n            (equal? (match-square _i _j) #t))\n     \
    \   #t\n        #f))\n  (define (match-nested-brackets-or-square [_i _j]\n   \
    \ (if (or (= _i _j)\n            (equal? (match-square _i _j) #t))\n        #t\n\
    \        #f))\n  (define (match-nested-brackets-or-square-or-square [_i _j]\n\
    \    (if (or (or (= _i _j)\n             (equal? (match-square _i _j) #t))\n \
    \           (equal? (match-nested-brackets _i _j) #t))\n        #t\n        #f))\n\
    \n  (let loop ((i 0)\n             (result #f))\n    (if (or (= i #(string-length\
    \ string))\n            (= i #0)\n            (equal? (match-square i #(string-length\
    \ string))\n                    result))\n        result\n        (loop (+ i 1)\n\
    \              (match-nested-brackets-or-square i #(string-length string))))))\n",
  "  (cond\n    [(empty? string)                         ; if no input string, return\
    \ #f\n     #f]\n\n    [(eq? (car string) #\\]) (is_nested (cdr string))  ;  if\
    \ first symbol is \"]\", then test rest\n    [else                           \
    \      ; if anything else, return #t\n     (is_nested (cdr string))]))\n", " \
    \ (if (string-match? string \"[(]\") #t\n      #f))\n", "  (cond ((or (equal?\
    \ (string-ref string 0) '(#\\)) (string-ref string 0))\n         #f)\n       \
    \ (else (equal? (string-ref string 0) '(#\\))\n               (or (equal? (string-ref\
    \ (string-ref string 0) 0) '(#\\))\n                   (equal? (string-ref (string-ref\
    \ (string-ref string 0) 0) 0) '(#\\))\n                   (equal? (string-ref\
    \ (string-ref (string-ref (string-ref string 0) 0) 0) 0) '(#\\))\n           \
    \        (equal? (string-ref (string-ref (string-ref (string-ref (string-ref string\
    \ 0) 0) 0) 0) 0) '(#\\))\n                   (equal? (string-ref (string-ref (string-ref\
    \ (string-ref (string-ref string 0) 0) 0) 0) 0) '(#\\))\n                   (equal?\
    \ (string-ref (string-ref (string-ref (string-ref (string-ref (string-ref string\
    \ 0) 0) 0) 0) 0) 0) '(#\\))\n                   (equal? (string-ref (string-ref\
    \ (string-ref (string-ref (string-ref (string-ref string 0) 0) 0) 0) 0) 0) '(#\\\
    ))\n                   (equal? (string-ref (string-ref (string-ref (string-ref\
    \ (string-ref (string-ref string 0) 0) 0) 0) 0) 0) '(#\\))\n                 \
    \  (equal? (string-ref (string-ref (string-ref (string-ref (string-ref (string-ref\
    \ (string-ref string 0) 0) 0) 0) 0) 0) 0) '(#\\))\n                   (equal?\
    \ (string-ref (string-ref (string-ref (string-ref (string-ref (string-ref (string-ref\
    \ string 0) 0) 0) 0) 0) 0) 0) '(#\\))\n                   (equal? (string-ref\
    \ (string-ref (string-ref (string-ref (string-ref (string-ref string 0) 0) 0)\
    \ 0) 0) 0) 0) '(#\\))\n                   (equal? (string-ref (string-ref (string-ref\
    \ (string-ref (string-ref (string-ref (string-ref string 0) 0) 0) 0) 0) 0) 0)\
    \ '(#\\))\n                   (equal? (string-ref (string-ref (string-ref (string-ref\
    \ (string-ref (string-ref (string-ref string 0) 0) 0) 0) 0) 0) 0) '(#\\))\n  \
    \                 (equal? (string-ref (string-ref (string-ref (string-ref (string-ref\
    \ (string-ref (string-ref string 0) 0) 0) 0) 0) 0) 0) '(#\\))\n              \
    \     (equal? (string-ref (string-ref (string-ref (string-ref (string-", "  (cond\
    \ \n    [(empty? string) #f]\n    [(equal? (first string) '[) (is_nested (rest\
    \ string))]\n    [else (is_nested (rest string))]))\n", "  (cond\n    [(or (not\
    \ (string? string))\n         (empty? string))\n     #t]\n    [(symbol=? (car\
    \ string) '(()))\n     #t]\n    [(symbol=? (car string) '(#()))\n     #t]\n  \
    \  [else\n     (and (symbol=? (car string) '(#(#())) (is_nested (cdr string)))\n\
    \          (is_nested (cdr string)))]))\n", "  (cond ((string? string) #f)\n \
    \       ((string-match \"(?<open>\\\\[\\\\[)(?<close>\\\\]\\\\])\" string)\n \
    \        (and (is_nested (string-replace \"(?<open>\\\\[\\\\[)(?<close>\\\\]\\\
    \\])\" string \"0\"))\n               (is_nested (string-replace \"(?<open>\\\\\
    [\\\\[)(?<close>\\\\]\\\\])\" string \"1\"))\n               (is_nested (string-replace\
    \ \"(?<open>\\\\[\\\\[)(?<close>\\\\]\\\\])\" string \"2\"))\n               (is_nested\
    \ (string-replace \"(?<open>\\\\[\\\\[)(?<close>\\\\]\\\\])\" string \"3\"))\n\
    \               (is_nested (string-replace \"(?<open>\\\\[\\\\[)(?<close>\\\\\
    ]\\\\])\" string \"4\"))\n               (is_nested (string-replace \"(?<open>\\\
    \\[\\\\[)(?<close>\\\\]\\\\])\" string \"5\"))\n               (is_nested (string-replace\
    \ \"(?<open>\\\\[\\\\[)(?<close>\\\\]\\\\])\" string \"6\"))\n               (is_nested\
    \ (string-replace \"(?<open>\\\\[\\\\[)(?<close>\\\\]\\\\])\" string \"7\"))\n\
    \               (is_nested (string-replace \"(?<open>\\\\[\\\\[)(?<close>\\\\\
    ]\\\\])\" string \"8\"))\n               (is_nested (string-replace \"(?<open>\\\
    \\[\\\\[)(?<close>\\\\]\\\\])\" string \"9\")))\n        (else #f)))\n", "  (or\
    \ (or (char-equal? (string-ref string 0) '[')\n          (char-equal? (string-ref\
    \ string 0) ']'))\n      (or (char-equal? (string-ref string 0) '(')\n       \
    \   (char-equal? (string-ref string 0) ')'))))\n", "  (cond ( (string=? (substring\
    \ string 0 1) \"[\")\n         (string=? (substring string 1 1) \"]\")\n     \
    \    (string=? (substring string 2 2) \"[\")\n         (string=? (substring string\
    \ 2 1) \"])\")\n        (else #f) ))\n", "  (let ((last-bracket #f)\n        (stack\
    \ (new stack))\n        (idx (string-length string)))\n    (cond\n      [(string-ref\
    \ string 0) #t]\n      [(null? stack) #f]\n      [(char? (peek-char stack)) #t]\n\
    \      [(char? (peek-char stack)) #f]\n      [(char? (peek-char stack))\n    \
    \  (let ((new-idx (string-length string)))\n        (set! stack (new stack))\n\
    \        (set! last-bracket #f)\n        (set! idx (+ idx 1)))\n      (set! idx\
    \ (+ idx 1))]\n      [(equal? last-bracket #f)\n      (set! last-bracket #t)]\n\
    \      [(equal? last-bracket #t)\n      (set! idx (+ idx 1))]\n      (else\n \
    \     (let ((new-idx (string-length string)))\n        (cond\n          [(char?\
    \ (peek-char stack))\n          (set! stack (new stack))\n          (set! last-bracket\
    \ #f)\n          (set! idx (+ idx 1))]\n          [(equal? last-bracket #f)\n\
    \          (set! last-bracket #t)]\n          [(equal? last-bracket #t)\n    \
    \      (set! idx (+ idx 1))]\n          [(char? (peek-char stack))\n         \
    \ (let ((new-idx (string-length string)))\n            (set! stack (new stack))\n\
    \            (set! last-bracket #f)\n            (set! idx (+ idx 1)))\n     \
    \     (set! idx (+ idx 1))]\n          [else\n          (set! idx (+ idx 1))]\n\
    \          [(not (= idx new-idx))\n          (set! idx (+ idx 1))]\n         \
    \ [(not (= idx new-idx))\n          (set! idx (+ idx 1))]\n          [(not (=\
    \ idx new-idx))\n          (set! idx (+ idx 1))]\n          [(not (= idx new-idx))\n\
    \          (set! idx (+ idx 1))]\n          [(not (= idx new-idx))\n         \
    \ (set! idx (+ idx 1))]\n          [(not (= idx new-idx))\n          (set! idx\
    \ (+ idx 1))]\n          [(not (= idx new-idx))\n          (set! idx (+ idx 1))]\n\
    \          [(not (= idx new-idx))\n", "  (cond [(empty? string) #f]\n        [(equal?\
    \ (car string) '(#l)) #t]\n        [(equal? (car string) '(#r)) #t]\n        [else\
    \ (is_nested (rest (cdr string)))]))\n", "  (cond\n    ((null? string) #f)\n \
    \   ((equal? (car string) '[') #t)\n    ((equal? (car string) '(') #t)\n    (else\
    \ (is_nested (cdr string)))))\n", "  (and (count-nested (string-char-brackets\
    \ string) string) \n       (= (string-char-brackets (substring string (string-length\
    \ string) 0))\n           string)))\n", "  (let loop ((i 0))\n    (cond ((empty?\
    \ string) #f)\n          ((eq? (car string) '(') (loop (+ i 1)))\n          ((eq?\
    \ (car string) '[') (loop (+ i 1)))\n          (else (loop (+ i 1))))))\n", " \
    \ (cond\n    [(string-match \"[][]\" (string-ref string 0))\n     (= 1 (string-ref\
    \ string 0))]\n    [(string-match \"[[]\" string)\n     (= 1 (string-ref string\
    \ 0))]\n    [(string-match \"[[[\" string)\n     (= 1 (string-ref string 0))]\n\
    \    [(string-match \"[]]]]]]\" string)\n     (= 1 (string-ref string 0))]\n \
    \   [(string-match \"[][][]\" string)\n     (= 1 (string-ref string 0))]\n   \
    \ [else #f])))\n", "  (cond ((or (char-equal? (car string) #\\])\n           (char-equal?\
    \ (car string) #\\]]))\n        ((or (char-equal? (car string) #\\])\n       \
    \    (char-equal? (car string) #\\]))\n         #t)\n        ((or (char-equal?\
    \ (car string) #\\])\n           (char-equal? (car string) #\\]]))\n        (else\
    \ (is_nested\n                 (substring (string 1) 0 (char-index (car string)\
    \ #\\]))\n                 (substring (string 1) (char-index (car string) #\\\
    ]) (length (string)))))))\n", "  (string-match \"\\\\[(\\\\[)*\\\\]\\\\]\" string))\n",
  "  (cond ((string? string) #t)\n        ((char? string) #f)\n        ((or (string=\
    \ string \"\")\n             (char= string (caar string)))\n         #f)\n   \
    \     ((= (length string) 2)\n         (let ([head (caar string)]\n          \
    \     [tail (cdr string)])\n           (and (equal? (char= head (caar tail)) '[)\n\
    \                (equal? (char= head (cadr tail)) '])))\n         (if (or (equal?\
    \ (char= head '[) '[)\n                 (equal? (char= head ']) '])))\n      \
    \   (and (equal? (char= head '[) '[)\n               (equal? (char= head ']) '])))\n\
    \        ((equal? (string= string \"\")\n                  (cond ((char= (caar\
    \ string) '[)\n                         (char= (cadr string) '[)\n           \
    \              (char= (caar string) '(')\n                         (char= (cadr\
    \ string) '(')\n                         (char= (caar string) '{)\n          \
    \               (char= (cadr string) '{'))\n                     ((char= (caar\
    \ string) '[)\n                         (char= (cadr string) '[)\n           \
    \              (char= (caar string) '(')\n                         (char= (cadr\
    \ string) '(')\n                         (char= (caar string) '{)\n          \
    \               (char= (cadr string) '{'))\n                     ((char= (caar\
    \ string) '[)\n                         (char= (cadr string) '[)\n           \
    \              (char= (caar string) '(')\n                         (char= (cadr\
    \ string) '(')\n                         (char= (caar string) '{)\n          \
    \               (char= (cadr string) '{'))\n                     ((char= (caar\
    \ string) '[)\n                         (char= (cadr string) '[)\n           \
    \              (char= (caar string) '(')\n                         (char= (cadr\
    \ string) '(')\n                         (char= (caar string) '{'))\n        \
    \             ((char= (caar string) '[)\n                         (char= (cadr\
    \ string) '[)\n                         (char= (caar string) '(')\n          \
    \               (char= (cadr string) '(')\n                         (char= ",
  "  (cond\n    ((empty? string) #f)\n    ((not (equal? (car (car string)) '['))\n\
    \     (or (equal? (cadr (car string)) '[') (equal? (cadr (cadr string)) '[')))\n\
    \    (else (or (equal? (car string) '[')\n               (equal? (cadr string)\
    \ '[')\n               (equal? (cadr (car string)) '[')\n               (equal?\
    \ (caddr string) '[')\n               (is_nested (string (cdr string))))))) ;;\
    \ end cond\n  ) ;; end cond\n)  ;; end define\n", "  (and\n    (string-match \"\
    \\\\[\\\\[\\\\[\" string)\n    (string-match \"\\\\]\\\\]\\\\]\\\\]\\\\[\" string)))\n",
  "  (cond [(empty? string) #f]\n        [(string-char? (car string)) (and (= 1 (square-bracket?\
    \ (car string))) (is_nested (cdr string)))]\n        [else #f]))\n", "  (= (position\
    \ (char->symbol ']) string) -1))\n", "  (cond ((or (not (list? string))\n    \
    \         (string-length (string-downcase string)) (string-length (string-downcase\
    \ (string-upcase string)))) \n         #t)\n        (else \n         (equal? (string-downcase\
    \ (string-downcase string)) (string-downcase (string-upcase (string-downcase string)))\n\
    \                (string-downcase (string-upcase (string-downcase string))\n \
    \               (string-upcase (string-upcase (string-downcase string)))))))\n",
  "  (= (length string)\n     (= (length string) (substring (string (+ (car string)\
    \ 1) (+ (cdr string) 1) string)))))\n", "  (let loop ((strings string))\n    (cond\
    \ [(string= '() (cons string #t))\n          (null? strings)\n          #t]\n\
    \          [(equal? (car strings) (string))\n           (cons string #t)]\n  \
    \        [else\n           (loop (rest strings))]))) ;; #lang racket\n", "  (cond\n\
    \    ((or (string=? \"[]]\" string)\n         (string=? \"[]][]\" string)\n  \
    \       (string=? \"[][][]\" string)\n         (string=? \"[][][\" string)\n \
    \        (string=? \"[[][]\" string)\n         (string=? \"[[]]\" string))\n \
    \    (string=? \"[[]]\" string))\n    ((string=? \"[]]\" string)\n     (string=?\
    \ \"[][]\" string)\n     (string=? \"[][][]\" string)\n     (string=? \"[][][\"\
    \ string)\n     (string=? \"[[][]\" string)\n     (string=? \"[[]]\" string)\n\
    \     (string=? \"[][\" string)\n     (string=? \"[[]][]\" string))\n    ((string=?\
    \ \"[][]\" string)\n     (string=? \"[][][]\" string)\n     (string=? \"[][][\"\
    \ string)\n     (string=? \"[][\" string)\n     (string=? \"[][[]\" string)\n\
    \     (string=? \"[][]]\" string)\n     (string=? \"[][[]\" string)\n     (string=?\
    \ \"[][]]\" string)\n     (string=? \"[][][]\" string))\n    ((string=? \"[][\"\
    \ string)\n     (string=? \"[][]\" string)\n     (string=? \"[][][]\" string)\n\
    \     (string=? \"[][][\" string)\n     (string=? \"[][[]\" string)\n     (string=?\
    \ \"[][[]\" string)\n     (string=? \"[][[]\" string)\n     (string=? \"[][][]\"\
    \ string))\n    ((string=? \"[][][\" string)\n     (string=? \"[][][]\" string)\n\
    \     (string=? \"[][][\" string)\n     (string=? \"[][[]\" string)\n     (string=?\
    \ \"[][[]\" string)\n     (string=? \"[][[]\" string)\n     (string=? \"[][]]\"\
    \ string)\n     (string=? \"[][[]\" string)\n     (string=? \"[][]]\" string)\n\
    \     (string=? \"[][][]\" string))\n    ((string=? \"[][[]\" string)\n     (string=?\
    \ \"[][]\" string)\n     (string=? \"[][][]\" string)\n     (string=? \"[][][\"\
    \ string)\n     (string=? \"[][[]\" string)\n     (string=? \"[][[]\" string)\n\
    \     (string=? \"[][[]\" string)\n     (string=? \"[][]]\" string)\n     (string=?\
    \ \"[][[]\" string)\n", "  (= (count string #\\[) #\\[]))\n", "  \n  (cond\n \
    \   ((null? string) string)\n    ((eq? (first string) '[') (is_nested\n      \
    \     (drop 1 (split string #{\\[}\\])))\n           (second string))\n    ((eq?\
    \ (first string) '(') (is_nested\n           (drop 1 (split string #{\\(}\\)))\n\
    \           (second string))\n    ((eq? (first string) '#) (is_nested\n      \
    \     (drop 1 (split string #{\\#}\\)))\n           (second string))\n    ((eq?\
    \ (first string) '~) (is_nested\n           (drop 1 (split string #{\\~}\\)))\n\
    \           (second string))\n    ((eq? (first string) '[') (is_nested\n     \
    \      (drop 1 (split string #{\\[}\\)))\n           (second string))\n    ((eq?\
    \ (first string) '#) (is_nested\n           (drop 1 (split string #{\\#}\\)))\n\
    \           (second string))\n    ((eq? (first string) '~) (is_nested\n      \
    \     (drop 1 (split string #{\\~}\\)))\n           (second string))\n    ((eq?\
    \ (first string) '[') (is_nested\n           (drop 1 (split string #{\\[}\\)))\n\
    \           (second string))\n    ((eq? (first string) '#) (is_nested\n      \
    \     (drop 1 (split string #{\\#}\\)))\n           (second string))\n    ((eq?\
    \ (first string) '~) (is_nested\n           (drop 1 (split string #{\\~}\\)))\n\
    \           (second string))\n    ((eq? (first string) ']) (is_nested\n      \
    \     (drop 1 (split string #{\\]}\\)))\n           (second string))\n    ((eq?\
    \ (first string) '(') (is_nested\n           (drop 1 (split string #{\\(}\\)))\n\
    \           (second string))\n    ((eq? (first string) '#) (is_nested\n      \
    \     (drop 1 (split string #{\\#}\\)))\n           (second string))\n    ((eq?\
    \ (first string) '~) (is_nested\n           (drop 1 (split string #{\\~}\\)))\n\
    \           (second string))\n    ((eq? (first string) ')') (string))\n    ((eq?\
    \ (first string) ']') (string))\n    ((eq? (first string) '(') (is_nested\n  \
    \         (drop 1 (split string #{\\(}\\)))\n           (second string))\n   \
    \ ((eq? (first string) '#) (is_nested\n           (drop 1 (split string #{\\#}\\\
    )))\n           (second string))\n    ((eq? (first string) '~) (is_nested\n  \
    \         (drop 1 (split string #{\\~}\\)))\n           (second string))\n   \
    \ ((eq? (", "  (cond\n    [(string= string \"\")\n     #t]\n    [(string=? (string-ref\
    \ string 0) \"[\")\n     (and (or (string=? (string-ref string 1) \"[\")\n   \
    \          (string=? (string-ref string 1) \"{\"))\n          (or (string=? (string-ref\
    \ string 2) \"]\")\n               (string=? (string-ref string 2) \"}\"))\n \
    \    #t]\n    [else\n     (string=? (string-ref string 0) \"[\")\n     (string=?\
    \ (string-ref string 1) \"[\")\n     (string=? (string-ref string 1) \"{\"\n \
    \               (string=? (string-ref string 2) \"]\")\n                (string=?\
    \ (string-ref string 2) \"}\"))\n     #t]\n    [else #f]\n  ))\n", "  (cond [(string?\
    \ string) #f]\n        [(equal? (char-alphabetic? string #\\] #\\]) #t) (string-ref\
    \ string 1)]\n        [else (is_nested (string-ref string 1))]))\n", "  (define\
    \ (helper str n)\n    (cond ((empty? str) #f)\n          ((char= (recf str n)\
    \ '[) (helper (cdr str) (incf n)))\n          (else #f)))\n  (helper string 0))\n",
  "  (< (length (string-ref-index (string-to-list string) 2))\n      (length (string-ref-index\
    \ (string-to-list string) 1))))\n", "  (or (char=? (string-ref string 0)\n   \
    \           '[']) \n      (char=? (string-ref string 0)\n              ']')\n\
    \      (char=? (string-ref string 0)\n              '[')\n      (char=? (string-ref\
    \ string 0)\n              ']'))) ; ]]]]]]]]]]]]]]]]]]]]]]]]]]]\n", "  (cond ((ends?\
    \ string \"]\")) #t\n        ((ends? string \"[\")) #t\n        ((subseq? string\
    \ \"[[]]\") #t)\n        (else #f)))\n", "  (and (substring string 0 (string-length\
    \ string))\n       (= (string-length string) 2)\n       (= (string-ref string\
    \ 1) (quote [))))\n", "  (let ([st (subseq string 0 -1)]\n        [last (subseq\
    \ string 0 -1)])\n    (cond\n      [(empty? st) #t]\n      [(empty? (cdr st))\
    \ #t]\n      [(empty? (car st)) #f]\n      [(empty? (caddr st)) #t]\n      [else\
    \ (= (length (remove-brackets st)) #t)\n           (and (pair? (remove-brackets\
    \ (subseq string 1 -1)))\n                (or (is_nested st) (is_nested last))\n\
    \                (is_nested (remove-brackets (subseq string 1 -1))))]\n    )\n\
    \  )\n)\n", "  (cond\n    [(string-length string = 0)\n     #f]\n    [(string-append\
    \ string \"\" \"[[]]\" = string \"[]]\") #t]\n    [else #f]))\n", "  (or (string=?\
    \ string \"[]\")\n      (string=? string \"[[]\"))\n  )\n</code>", "  (cond [(equal?\
    \ (length string) 0)\n         #f]\n        [(equal? (car string) '[)\n      \
    \   (cond\n           [(in-list (cdr string) '[)]) \n           #f]\n        \
    \   [else \n           (is_nested (cdr string))]\n         ))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (first string) '(#)) #t]\n        [(equal? (first\
    \ string) '(#) '(#)) #t]\n        [(equal? (first string) '[#) #f]\n         (char-index\
    \ (first string) '#) '#(#)]\n        [(equal? (first string) '#(#)) #t]\n    \
    \    [else (is_nested (substring string 1 (char-index string (first string) '#)))\
    \ (substring string (char-index string (first string) '#) (string-length string))]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (first string) '[)\n         (is_nested\
    \ (substring string 1 string))\n         #t]\n        [(equal? (first string)\
    \ '[)\n         (is_nested (substring string 2 string))\n         #f]\n      \
    \  [(equal? (first string) ']) \n         (is_nested (substring string 1 string))\n\
    \         #t]\n        [(equal? (first string) ']) \n         (is_nested (substring\
    \ string 2 string))\n         #f]\n        [(equal? (first string) '[)]) \n  \
    \       (is_nested (substring string 1 string))\n         #t]\n        [(equal?\
    \ (first string) '[)]) \n         (is_nested (substring string 2 string))\n  \
    \       #f]\n        [(equal? (first string) '[])]) \n         (is_nested (substring\
    \ string 1 string))\n         #t]\n        [(equal? (first string) '[])]) \n \
    \        (is_nested (substring string 2 string))\n         #f]\n        [else\
    \ #f]))\n", "  (let ((start 0))\n    (for/or (chars '(#\\[ #\\]) #\\space)\n \
    \     (if (or (< start (length string)) (> (length string) start))\n         \
    \ (return #f)\n          (if (or (char-equal? (string- char string start) #\\\
    ])\n                   (char-equal? (string- char string start) #\\]]))\n    \
    \          (return #t))))))\n", "  (if (null? string)\n      #f\n      (cond ((string=?\
    \ string \"[]\")\n             #t) \n            ((string=? string \"[[]\")\n\
    \             #t)\n            ((string=? string \"[[][]\")\n             #t)\n\
    \            (else (is_nested (resto string \"[]\")))))\n", "  (cond\n    [(equal?\
    \ (string-length string) 0)\n     #t]\n    [(equal? (string-match \"[][]\" string)\n\
    \              (substring string 0 1))\n     #t]\n    [else\n     #f]\n    ))\n",
  "  (let loop ((string (make-string-node string))\n             (start 0))\n    (cond\n\
    \      [(char= string '[]) true]\n      [(char= string '[())] true]\n      [(char=\
    \ string '((())][]()) true]\n      [(char= string '()[]()) true]\n      [(char=\
    \ string '[(())]())] true]\n      [(char= string '()()()()) true]\n      [(char=\
    \ string '()[(())]()] true]\n      [(char= string '((())]())[()') true]\n    \
    \  [(char= string '()()()()[(())]()') true]\n      [(char= string '()[(())]()[]()')\
    \ true]\n      [(char= string '(()())()()[()()()()()') true]\n      [(char= string\
    \ '()()()()[(())]()()') true]\n      [(char= string '()[(())]()()[]()') true]\n\
    \      [(char= string '(()())()()[()()()()()[()') true]\n      [(char= string\
    \ '()()()()[(())]()()()') true]\n      [(char= string '()[(())]()()[]()()') true]\n\
    \      [(char= string '(()())()()[()()()()[()()[()') true]\n      [(char= string\
    \ '()()()()[(())]()()()()') true]\n      [(char= string '()[(())]()()[]()()()')\
    \ true]\n      [(char= string '(()())()()[()()()()[()()[()()') true]\n      [(char=\
    \ string '()()()()[(())]()()()()') true]\n      [(char= string '()[(())]()()[]()()()')\
    \ true]\n      [(char= string '(()())()()[()()()()[()()[()()') true]\n      [(char=\
    \ string '()()()()[(())]()()()()') true]\n      [(char= string '()[(())]()()[]()()()()')\
    \ true]\n      [(char= string '(()())()()[()()()()[()()[()()') true]\n      ",
  "  (cond\n    ((empty? string) #f)\n    ((char=? (car string) '[') #f)\n    (else\
    \ (and (char=? (car string) '[')\n               (is_nested (cdr string)))))\n\
    \  )\n)", "  (cond ((null? string) #f)\n        ((equal? (car string) '[) #t)\n\
    \        (else (or (equal? (car string) '[) (equal? (cdr string) '[) (equal? (car\
    \ string) '(') (equal? (cdr string) '(') (is_nested (cdr string)))))))\n", " \
    \ (define (count start end)\n    (if (<= start end)\n        (+ 1 (count (+ 1\
    \ start) (+ 1 end)))\n        #f))\n  (if (string=? string \"[]\")\n      #t\n\
    \      (count 0 (string-length string))))\n", "  (and (empty? string)\n      \
    \ (= '() (string->list string))))\n", "  (cond\n    [(and (list? string) (eq?\
    \ (car string) '['))\n     (let\n       ((stack '(#f #f #f))\n         (count\
    \ 0)\n         (result #f))\n      (cond\n        [(empty? stack)\n         (set!\
    \ result #t)]\n        [(= 0 (length stack))\n         (set! result #t)]\n   \
    \     [else\n         (cond\n           [(eq? (car stack) '[)\n            (push!\
    \ stack (car string)))]\n           [else\n            (push! stack (car string))\n\
    \            (set! count (+ count 1))]\n           [else\n            (cond\n\
    \              [(empty? stack)\n               (set! result #f)]\n           \
    \   [else\n               (cond\n                 [(eq? (pop! stack) '[)\n   \
    \                (pop! stack)\n                   (push! stack (car string))]\n\
    \                 [else\n                   (pop! stack)\n                   (push!\
    \ stack (car string))\n                   (set! count (+ count 1))]\n        \
    \         [else\n                   (cond\n                     [(empty? stack)\n\
    \                       (set! result #f)]\n                     [else\n      \
    \                 (set! result #t)]\n                     [else (error \"Error\
    \ - unbalanced brackets in input string.\")])])])]\n    [(and (list? string) (eq?\
    \ (car string) '#\\))\n     (let\n       ((stack '(#f #f #f))\n         (count\
    \ 0)\n         (result #f))\n      (cond\n        [(empty? stack)\n         (set!\
    \ result #t)]\n        [(= 0 (length stack))\n         (set! result #t)]\n   \
    \     [else\n         (cond\n           [(eq? (car stack) '#\\)\n            (push!\
    \ stack (car string)))]\n           [else\n            (push! stack (car string))\n\
    \            (set! count (+ count 1))]\n           [else\n            (cond\n\
    \              [(empty? stack)\n               (set! result #f)]\n           \
    \   [else\n               (cond\n                 [(eq? (pop! stack) '#\\)\n \
    \                  (pop! stack)\n                   (push! stack (car string))]\n\
    \                 [else\n                   (pop! stack)\n                   (push!\
    \ stack (car string))\n                   (set! count (+ count 1))]\n        \
    \         [else\n                   (cond\n                     [(empty", "  (cond\
    \ ((and (eq? (length string) 0) (eq? (substring string 0) '[))\n         (not\
    \ (= (length string) 2)))\n        (else (and (>= (string-length string) 2) (string=?\
    \ (substring string 1) '[))))))\n", "  (cond\n    [(or (char=? (string-ref string\
    \ 0) '[) (char=? (string-ref string 0) '('))\n      (equal? string \"\") #f]\n\
    \    [(equal? (string-ref string 0) '[') (char=? (string-ref string 1) '[') (char=?\
    \ (string-ref string 2) '[)]) #t]\n    [(equal? (string-ref string 0) '(') (char=?\
    \ (string-ref string 1) '(') #t) #t]\n    [else (equal? string \"\") #f])))\n\
    </cell>\n<code language=ocaml-jupyter>\n#lang racket\n", "  (define (helper index\
    \ string)\n    (cond\n      [(empty? string) #t]\n      [else (or (char= (chars-ahead\
    \ string) '[)\n                (char= (chars-ahead string) '{'))\n           (helper\
    \ (+ index 1) (chars-ahead string))]))\n  (if (null? string) #f\n      (helper\
    \ 0 string)))\n", "  (cond ((string-ref string 0) #f)\n        ((equal? (string-ref\
    \ string 0) #\\])) (check-nested string 1)\n        (else (check-nested string\
    \ 0))))\n", "  (match string\n      [\"[]\"] #t\n      [\"[]]]]]]][[[[[]\"\n \
    \     [\"[][]\"] #t\n      [\"[][]]\"  #t\n      [\"[]]\"    #t\n      [\"[[][]\"\
    \  #t\n      [\"[[]]\"]  #t\n      [\"[[]\"    #t\n      [\"[][][]\"] #t\n   \
    \   [\"[]]\"    #t\n      [\"[][][]\"#t\n      [\"[]]]\"] #t\n      [\"[]]]]]\
    \ #t\n
  "  (define (helper start end)\n    (cond ((or (char= start '[) (char= end '[))\n\
    \           (and\n            (char= (string-ref string end) '[)\n           \
    \ (helper (add1 end) end)))\n          ((or (char= start '() (char= end ')'))\n\
    \           (and\n            (char= (string-ref string end) '(')\n          \
    \  (helper (add1 end) end)))\n          (else #f))))\n\n  (helper (string-length\
    \ string) 0))\n", "  (and (= (length string) 2)\n       (char= string \"[\")\n\
    \       (char= string (substring string 1)))\n  )\n", "  (cond \n    [(empty?\
    \ string) #f]\n    [(equal? (first string) '[') (is_nested (string-tail (rest\
    \ string)))]\n    [else #t]))\n", "  (cond [(equal? (string-ref string 0) '[)\
    \ (equal? (string-ref string 1) '[) (string-ref string 2)] \n        [else (equal?\
    \ (string-ref string 0) '(#\\]) (equal? (string-ref string 1) '(#\\]) (equal?\
    \ (string-ref string 2) '(#\\]))) \n        (string=? (string-ref string 0) '(#\\\
    ]) (equal? (string-ref string 1) '(#\\]) (equal? (string-ref string 2) '(#\\])))\
    \ (equal? (string-ref string 0) '(#\\[) (equal? (string-ref string 1) '(#\\[)\
    \ (equal? (string-ref string 2) '(#\\[)))\n        [else (string=? (string-ref\
    \ string 0) '(#\\]) (equal? (string-ref string 1) '(#\\]) (equal? (string-ref\
    \ string 2) '(#\\])) (equal? (string-ref string 0) '(#\\)) (equal? (string-ref\
    \ string 1) '(#\\) (equal? (string-ref string 2) '(#\\))) (equal? (string-ref\
    \ string 0) '(#\\[) (equal? (string-ref string 1) '(#\\[) (equal? (string-ref\
    \ string 2) '(#\\[)))\n        (string=? (string-ref string 0) '(#\\]) (equal?\
    \ (string-ref string 1) '(#\\]) (equal? (string-ref string 2) '(#\\])) (equal?\
    \ (string-ref string 0) '(#\\)) (equal? (string-ref string 1) '(#\\) (equal? (string-ref\
    \ string 2) '(#\\))) (equal? (string-ref string 0) '(#\\[) (equal? (string-ref\
    \ string 1) '(#\\[) (equal? (string-ref string 2) '(#\\[)))]\n        [else (string=?\
    \ (string-ref string 0) '(#\\]) (equal? (string-ref string 1) '(#\\]) (equal?\
    \ (string-ref string 2) '(#\\])) (equal? (string-ref string 0) '(#\\)) (equal?\
    \ (string-ref string 1) '(#\\) (equal? (string-ref string 2) '(#\\))) (equal?\
    \ (string-ref string 0) '(#\\[) (equal? (string-ref string 1) '(#\\[) (equal?\
    \ (string-ref string 2) '(#\\[)))]\n        [else (string=? (string-ref string\
    \ 0) '(#\\]) (equal? (string-ref string 1) '(#\\]) (equal? (string-ref string\
    \ 2) '(#\\])) (equal? (string-ref string 0) '", "  (let loop ((left #t) (right\
    \ #t) (result #t))\n    (if (or (= 0 (length string) left) (= 0 (length string)\
    \ right))\n        result\n        (loop (car string)\n              (cadr string)\n\
    \              (or (and (= 0 (length string) left) (= 1 (length string) right))\n\
    \                  result))))\n</code>\n<|/ a |>\n<| c |>\nThanks so much!\n\n\
    I have an extra question: How would you do this in scheme without a loop? I am\
    \ doing my coding in racket and I thought there was a built in function to do\
    \ this type of thing.\n<|/ c |>\n<| c |>\nA loop isn't necessary in Racket either.\
    \ It would be possible to use `assoc`, `member`, etc. but that would be a pretty\
    \ unreadable solution. An alternative would be to use `(define (is-nested s) (member\
    \ s [\"[\"#t] [\"]\"#t]))`. That would work fine in Racket as well. Using `assoc`\
    \ is also possible. `(define (is-nested s) (or (assoc s [\"[\"#t] [\"]\"#t]) #t))`\
    \ but I would advise against that, because it involves making a hash table which\
    \ is fairly inefficient for large input sizes.\n<|/ c |>\n<| c |>\nOkay, thanks!\
    \ I will try using that instead. Thank you very much for the help!\n<|/ c |>\n\
    <| a tags=scheme,racket,functional-programming,lisp,lisp-type |>\nThe problem\
    \ is easy to solve using a helper function in Lisp, with recursive calls:\n<code>",
  "  (cond [(string=? string \"[][]\")]\n        [(string=? string \"[]\")]\n    \
    \    [(string=? string \"[[][]\")]\n        [(string=? string \"[[]\")]))\n",
  "  (mem-mem? string '[')\n  (mem-mem? string ']'))\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (car string) '[') #t]\n    [else (is_nested (cdr string))]))\n",
  "  (not (string-char-match? (string->char-sequence string)\n                   \
    \       #(#\\[ (#\\] #\\]))\n                          :start1 0\n           \
    \               :start2 1\n                          :start3 2\n             \
    \             :start4 3\n                          :start5 4\n               \
    \           :start6 5\n                          :start7 6\n                 \
    \         :start8 7)))\n", "  (cond (string? string)\n\t(memv #\\[ string (memv\
    \ #\\[ string #\\] #\\))\n\t#f\n\t(string? #\\[])\n\t#t\n\t#f\n\t(t? #\\)))\n",
  "  (cond\n    ((null? string) #f)\n    ((equal? (char string 0) #\\[ )\n      (and\
    \ (equal? (char string 1) #\\])\n           (equal? (char string 2) #\\])))\n\
    \    ((equal? (char string 0) #\\] )\n      (and (equal? (char string 1) #\\])\n\
    \           (equal? (char string 2) #\\])))\n    ((equal? (char string 0) #\\\
    ] )\n      (and (equal? (char string 1) #\\]\n               (equal? (char string\
    \ 2) #\\])))\n    ((equal? (char string 0) #\\[ )\n      (and (equal? (char string\
    \ 1) #\\]\n               (equal? (char string 2) #\\]\n                     \
    \  (equal? (char string 3) #\\]))\n           (equal? (char string 4) #\\]\n \
    \                      (equal? (char string 5) #\\])))))\n</code>\n<|/ a |>\n\
    <| c |>\nI like the idea of the nested structure and the simplicity of code, but\
    \ would you mind explaining why your code is simpler than mine? I am interested\
    \ to know whether you think yours is simpler than mine, or the other way around.\
    \ Thanks.\n<|/ c |>\n<| c |>\n: mine is much more idiomatic, simpler to read,\
    \ maintain, and understand.  It just looks a lot like the code in your question,\
    \ except that `cond` has three arguments and is much more compact. I used `char`\
    \ instead of `string?` to make it clear that we're just checking the character\
    \ at `string`, rather than trying to compare `string` to each of the characters\
    \ within the string.\n<|/ c |>\n<| c |>\nThanks! I'll keep this in mind for future\
    \ use. But I still find it difficult to understand why yours is simpler. Since\
    \ I haven't used any `begin`, `end`, `else`, `or`, `and` etc. I've always used\
    \ conditional and boolean operators in the same way. I still find that your code\
    \ is simpler to read and understand. Even if I'm just thinking about this one\
    \ time or two, I'll definitely try to understand your code eventually.\n<|/ c\
    \ |>\n<| c |>\n: I updated my answer to include some commentary about where I\
    \ might have gone wrong in my initial attempt.\n<|/ c |>\n<| a |>\nYou could do\
    \ something like this instead:\n<code>", "  (local\n    [(define (loop string)\n\
    \      (cond [(empty? string) #f]\n            [(equal? (first string) '[)\n \
    \            (loop (substring (second string) (length (first string))))]\n   \
    \         [else\n             (loop (substring string 1))])]\n    [(loop (make-string\
    \ 1 string))]\n    [else #f]))]\n", "  (cond ((string=? (car string) #\\])\n \
    \        (or (string=? (car string) #\\[)\n             (string=? (cdr string)\
    \ #\\])\n             (string=? (cdr string) #\\[)\n             (string=? (cdr\
    \ string) #\\]))\n        ((string=? (car string) #\\])\n         (or (string=?\
    \ (car string) #\\[[)\n             (string=? (cdr string) #\\])\n           \
    \  (string=? (cdr string) #\\[[)\n             (string=? (cdr string) #\\])))\n\
    \        (else #f)))", "  (cond [(null? string)#t]\n        [(eq? (char-type (car\
    \ string)) '[')\n         (is_nested (cdr string))]\n        [else\n         (false)]))\n",
  "  (cond [(empty? string) #f]\n        [(equal? (car string) '[) (is_nested (cdr\
    \ string))]\n        [else #t]))\n", "  (cond\n    [(or (string=? '[]' (string-ref\
    \ string 0))) (eq? string \"\") #f]\n    [(or (string=? '[[]' (string-ref string\
    \ 0))) (eq? string \"\") #f]\n    [(or (string=? '[][]' (string-ref string 0)))\
    \ (eq? string \"\") #f]\n    [else (eq? (string-ref string 0)\n              \
    \ (lambda (x)\n                 (is_nested (string-ref string 1))))]))\n", " \
    \ (< (length string) 2)\n  (or (equal? (char-code string) open-curly)\n      (equal?\
    \ (char-code string) close-curly)\n      (equal? (char-code string) open-square)\n\
    \      (equal? (char-code string) close-square)\n      (equal? (char-code string)\
    \ open-angle\n           (or (equal? (char-code (sub-string string 0 2)) open-curly)\n\
    \               (equal? (char-code (sub-string string 0 2)) close-curly)\n   \
    \            (equal? (char-code (sub-string string 0 2)) open-square)\n      \
    \         (equal? (char-code (sub-string string 0 2)) close-square)\n        \
    \       (equal? (char-code (sub-string string 0 2)) open-angle)))))\n", '  (equal?
    (count (lambda (s) (match s "[][][][" 0 "[][" 1 "[][]" 2 "[]" 3 "[[]" 4 "[][]]"
    5 "[[][]" 6 "[][]]" 7 "[]]" 8 "[]]" 9 "[][]]" 10 "[][][]" 11 "[][][" 12 "[[][]]"
    13 "[[][" 14 "[][]]" 15 "[][]]" 16 "[]]" 17 "[][][]" 18 "[][][" 19 "[[][]]" 20
    "[[][" 21 "[][]]" 22 "[][]]" 23 "[]]" 24 "[][][]" 25 "[][][" 26 "[[][]]" 27 "[[]["
    28 "[][]]" 29 "[][]]" 30 "[]]" 31 "[][][]" 32 "[][][" 33 "[[][]]" 34 "[[][" 35
    "[][]]" 36 "[][]]" 37 "[]]" 38 "[][][]" 39 "[][][" 40 "[[][]]" 41 "[[][" 42 "[][]]"
    43 "[][]]" 44 "[]]" 45 "[][][]" 46 "[][][" 47 "[[][]]" 48 "[[][" 49 "[][]]" 50
    "[][]]" 51 "[]]" 52 "[][][]" 53 "[][][" 54 "[[][]]" 55 "[[][" 56 "[][]]" 57 "[][]]"
    58 "[]]" 59 "[][][]" 60 "[][][" 61 "[[][]]" 62 "[[][" 63 "[][]]" 64 "[][]]" 65
    "[]]" 66 "[][][]" 67 "[][][" 68 "[[][]]" 69 "[[][" 70 "[][]]" 71 "[][]]" 72 "[]]"
    73 "[][][]" 74 "[][][" 75 "[[][]]" 76 "[[][" 77 "[][]]" 78 "[][]]" 79 "[]]" 80
    "[][][]" 81 "[][]', "  (memq '([] ) string))\n", "  (let ((stack '()))\n    (cond\n\
    \      [(or (string=? \"[\" string)\n          (string=? \"]\" string))\n    \
    \   (equal? string \"\")]\n      [(string=? \"[\" string)\n       (equal? (string=?\
    \ (substring string 0 1) \"[\")\n            (string=? (substring string 1 1)\
    \ \"[\"))\n       (equal? (string=? (substring string 0 2) \"[[\")\n         \
    \   (string=? (substring string 1 2) \"[[\"))\n       (equal? (string=? (substring\
    \ string 0 3) \"[[]\")\n            (string=? (substring string 1 3) \"[[]\"))\n\
    \       (equal? (string=? (substring string 0 4) \"[]]\")\n            (string=?\
    \ (substring string 1 4) \"[]]\"))\n       (equal? (string=? (substring string\
    \ 0 5) \"[[[]\")\n            (string=? (substring string 1 5) \"[[[]\"))\n  \
    \     (equal? (string=? (substring string 0 6) \"[[][]\")\n            (string=?\
    \ (substring string 1 6) \"[[][]\"))\n       (equal? (string=? (substring string\
    \ 0 7) \"[[]][[\")\n            (string=? (substring string 1 7) \"[[]][[\"))\n\
    \       (equal? (string=? (substring string 0 8) \"[[[[]\")\n            (string=?\
    \ (substring string 1 8) \"[[[[]\"))\n       (equal? (string=? (substring string\
    \ 0 9) \"[][]]][[\")\n            (string=? (substring string 1 9) \"[][]]][[\"\
    ))\n       (equal? (string=? (substring string 0 10) \"[]]][[[]\")\n         \
    \   (string=? (substring string 1 10) \"[]]][[[]\"))\n       (equal? (string=?\
    \ (substring string 0 11) \"[[[[][]\")\n            (string=? (substring string\
    \ 1 11) \"[[[[][]\"))\n       (equal? (string=? (substring string 0 12) \"[[][]][[\"\
    )\n            (string=? (substring string 1 12) \"[[][]][[\"))\n       (equal?\
    \ (string=? (substring string 0 13) \"[[[[][][]\")\n            (string=? (substring\
    \ string 1 13) \"[[[[][][]\"))\n       (equal? (string=? (substring string 0 14)\
    \ \"[][][]][[\")\n            (string=? (substring string 1 14) \"[][][]][[\"\
    ))\n       (equal? (string=? (substring string 0 ", "  (cond\n    [(= 0 (string-length\
    \ string)) #t]\n    [(member (char-ref string 0) [#\\[#\\]]))\n    #f]))\n", " \
    \ (let loop ((n 0) (string string))\n    (cond ((equal? n 0)\n           (eqv?\
    \ (char string 0) '[))\n          ((char= (char (cdr string) n) ']'))\n      \
    \    ((equal? (char (cdr string) n) '[))\n          ((equal? (char (cdr string)\
    \ n) ']'))\n          (else\n           (loop (add1 n) (concat (char string 0)\n\
    \                                 (loop (add1 n) (concat (cdr string)\n      \
    \                                                   '[)))))\n          (else\n\
    \           (loop (add1 n) (concat (char string 0)\n                         \
    \        (loop (add1 n) (concat (cdr string) ']')))))\n    (char= (char (cdr string)\
    \ n) ']'))\n  )\n)\n", "  (match string\n      [(_ x) (substring (substring x\
    \ 0) 1)\n       (_ _)  #f]\n      ))\n", "  (not (member string (map (lambda (x)\
    \ (append (subseq x 0 (string-length x))) '() '[[]])))))\n", "  (< (length string)\
    \ 2)\n  (equal? (first string) '[))\n  (equal? (rest string) '])))\n", "  (or\
    \ (= (string-length string)\n         (string-length string))\n      (let ((i\
    \ 0) (j 0))\n        (loop\n           (cond ((char=? string '[) (set! i 0))\n\
    \                  ((char=? (string-ref string i) '[) (set! j 0))\n          \
    \        ((char=? (string-ref string j) '[) (set! i (+ i 1)))\n              \
    \    ((char=? (string-ref string j) '[) (set! j (+ j 1)))\n                  ((char=?\
    \ (string-ref string i) '[) (set! i (+ i 1)))\n                  ((char=? (string-ref\
    \ string j) '[) (set! j (+ j 1)))\n                  ((char=? (string-ref string\
    \ i) '[) (set! i (+ i 1)))\n                  ((char=? (string-ref string j) '[)\
    \ (set! j (+ j 1)))\n                  ((char=? (string-ref string i) '[) (set!\
    \ i (+ i 1)))\n                  ((char=? (string-ref string j) '[) (set! j (+\
    \ j 1)))\n                  ((char=? (string-ref string i) '[) (set! i (+ i 1)))\n\
    \                  ((char=? (string-ref string j) '[) (set! j (+ j 1)))\n    \
    \              ((char=? string '^) (set! i 0))\n                  ((char=? (string-ref\
    \ string i) '^) (set! j 0))\n                  ((char=? (string-ref string j)\
    \ '^) (set! i (+ i 1)))\n                  ((char=? (string-ref string j) '^)\
    \ (set! j (+ j 1)))\n                  ((char=? (string-ref string i) '^) (set!\
    \ i (+ i 1)))\n                  ((char=? (string-ref string j) '^) (set! j (+\
    \ j 1)))\n                  ((char=? (string-ref string i) '^) (set! i (+ i 1)))\n\
    \                  ((char=? (string-ref string j) '^) (set! j (+ j 1)))\n    \
    \              ((char=? (string-ref string i) '^) (set! i (+ i 1)))\n        \
    \          ((char=? (string-ref string j) '^) (set! j (+ j 1)))\n            \
    \      ((char=? (string-ref string i) '^) (set! i (+ i 1)))\n                \
    \  ((char=? (string-ref string j) '^) (set! j (+ j 1)))\n                  ((char=?\
    \ (string-ref string i) '^) (set! i (+ i 1)))\n                  ", "  (cond [(string?\
    \ (subseq string 0 0)) (subseq string 0 1)\n         ((equal? (string->list string)\
    \ '(#\\[ #\\[)\n           (subseq (string->list string) 1 0)\n           (equal?\
    \ (car string) '#\\[ )\n           (equal? (car string) '#\\]) #t\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f\n          #f\n          #f\n          #f\n      \
    \    #f\n          #f\n          #f\n          #f\n          #f\n          #f\n\
    \          #f\n          #f", "  (memq '#\\[ string\n        (memq '#\\] string\n\
    \               (memq '#\\] string\n                     (memq '#\\] string\n\
    \                           (memq '#\\] string\n                             \
    \   (memq '#\\] string\n                                       (memq '#\\] string\n\
    \                                          (memq '#\\] string\n              \
    \                                #f)\n                                       \
    \   #f)\n                                  #f)\n                             \
    \ #f)\n                      #f)\n                  #f)\n              #f)\n \
    \         #f)\n      #f)\n#lang racket\n", "  (let loop ((pos 0) (string string))\n\
    \    (cond ((eqv? pos 0) (string-equal? string \"[]\"))\n          ((eqv? pos\
    \ string) (not (subseq? string)))\n          (else (loop (+ pos 1)\n         \
    \              (subseq string 0 pos)\n                       (subseq string pos\
    \ (length string)))))))\n", "  (and\n   (string-contains? string \"[]\")\n   (string-contains?\
    \ string \"()\")\n   (string-contains? string \"[[]\")\n   (string-contains? string\
    \ \"[\")\n   (string-contains? string \"[]]\") \n   (string-contains? string \"\
    ]\")\n   (string-contains? string \"[]]\") \n   (string-contains? string \"]]\"\
    )))\n", "  (cond ((empty? string)\n         #f)\n        ((equal? (char string\
    \ 0) \"[\")\n         (and (not (equal? (char string 0) \"]\"))\n            \
    \  (equal? (char string (+ 1 0)) \"]\")))\n        (else (begin (is_nested (substring\
    \ string 1 (- (length string) (length string))))))))\n", "  (= (string-length\
    \ string) (/ string-length #\\[)))\n", "  (define (helper str i)\n    (cond [(char=?\
    \ str '[) (helper (str (substring str i 1) (+ i 1)))]\n          [(char=? str\
    \ '{) (helper (str (substring str i 1) (+ i 1)))]\n          [(char=? str '(')\
    \ (helper (str (substring str i 1) (+ i 1)))]\n          [(char=? str '{') (helper\
    \ (str (substring str i 1) (+ i 1)))]\n          [(char=? str '[') (helper (str\
    \ (substring str i 1) (+ i 1)))]\n          [(char=? str ']) (helper (str (substring\
    \ str i 1) (+ i 1)))]\n          [(char=? str '(') (helper (str (substring str\
    \ i 1) (+ i 1)))]\n          [(char=? str '{') (helper (str (substring str i 1)\
    \ (+ i 1)))]\n          [(char=? str '[') (helper (str (substring str i 1) (+\
    \ i 1)))]\n          [(char=? str ']) (helper (str (substring str i 1) (+ i 1)))]\n\
    \          [(char=? str '}) (helper (str (substring str i 1) (+ i 1)))]\n    \
    \      [(char=? str '}) (helper (str (substring str i 1) (+ i 1)))]\n        \
    \  [(char=? str '[') (helper (str (substring str i 1) (+ i 1)))]\n          [(char=?\
    \ str ']) (helper (str (substring str i 1) (+ i 1)))]\n          [else #f])))\n\
    \  (helper string 0))\n</code>\n<|/ a tags=racket,scheme,lisp dscore=2 |>\n<|\
    \ a |>\n<code>", "  (if (string-length(string) 0)\n      #f\n      (let ((stack\
    \ '())\n            (opens '()))\n        (loop\n           (if (string-length(string)\
    \ 0)\n               #f\n               (if (char=? string '[')\n            \
    \       (begin (push string stack)\n                         (push string opens))\n\
    \                   (begin\n                    (if (string-match #rx\"^\\[.*\\\
    ]$\"\n                                   stack)\n                        (set!\
    \ stack '())\n                        true)\n                    (begin\n    \
    \                  (set! stack (cons (string->list (string-downcase string))\n\
    \                                      stack))\n                      (set! opens\
    \ '())\n                      true)))\n              (if (char=? string ']')\n\
    \                  (begin\n                    (cdr stack)\n                 \
    \   (set! opens (cons (string->list (string-downcase string))\n              \
    \                      opens))\n                    true)\n                  (begin\n\
    \                    (cdr opens)\n                    (set! stack '())\n     \
    \               true)\n                  (begin\n                    (set! opens\
    \ (cons (string->list (string-downcase string))\n                            \
    \        opens))\n                    true)))\n           (if (not (null? stack))\n\
    \               (if (not (null? opens))\n                   (if (null? opens)\n\
    \                       (null? (string-match (list #rx\"\\[.*\\]$\") (cons (string->list\
    \ (string-downcase string))\n                                                \
    \                    stack)))\n                       (null? (string-match (list\
    \ #rx\"\\[.*\\]$\") (cons (string->list (string-downcase string))\n          \
    \                                                          opens)))\n        \
    \           (null? (string-match (list #rx\"\\[.*\\]$\") (cons (string->list (string-downcase\
    \ string))\n                                                                 \
    \   (append opens (list (string->list (string-downcase string))))))))\n      \
    \         (if (null? stack)\n                   (not (null? opens))\n        \
    \           (not (null? (string-match (list #rx\"\\[.*\\]$\") (list (string->list\
    \ (string-downcase string))\n                                                \
    \                       (append opens (list (string->list (string-downcase string)))))))))\n\
    \           (set! string (pop stack)))))\n", "  (cond ( (empty? string) #f)\n\
    \        ((char=? (car string) '[) (is_nested (substring string 1 (car string)))\
    \ #f)\n        (else (is_nested (substring string (car string))) #t)))\n", " \
    \ (let loop ((depth 0)\n             (brackets '()))\n    (if (empty? string)\n\
    \        depth\n        (if (= (length (first string)) 2)\n            (loop (+\
    \ depth 1) (cons (first (first string)) brackets))\n            (loop (+ depth\
    \ 1) (cons (first (first string)) (cons (second string) (first brackets))))))))\n\
    </code>\n<|/ a dscore=1 tags=string,racket,string |>\n<| a |>\n<code>", "  (and\
    \ (string? string) (equal? (car string) '[') (equal? (car string) ']')))\n</code>\n\
    <|/ a dscore=2 tags=racket,subsequence,string |>\n<| c |>\nI tested this and it\
    \ is incorrect. For example, `(check-expect (is_nested \"[[]]\") true)` should\
    \ return true, but `(check-expect (is_nested \"[[]]\") false)` returns true.\n\
    <|/ c |>\n<| c |>\nYou're absolutely right - I must have copied the code wrong.\
    \ Thanks for pointing that out. I've updated the code accordingly.\n<|/ c |>\n\
    <| c |>\nThank you very much! I think I understand your answer, but I'm still\
    \ not sure how to implement it... Could you give me an example of the function\
    \ you implemented?\n<|/ c |>\n<| a tags=racket,subsequence,string |>\n<code>",
  "  (define (find-nested-brackets string)\n    (if (null? string) \n        #f\n\
    \        (if (char? (car string))\n            (or (char? (car string))\n    \
    \            (find-nested-brackets (cdr string)))\n            (if (or (char?\
    \ (car string))\n                    (char? (car string))\n                  \
    \  (or (char? (car string))\n                        (char? (car string)))\n \
    \               #t\n                (find-nested-brackets (cdr string))))))\n\
    \    (find-nested-brackets string))\n", "  (define stack '())\n  (define valid\
    \ #f) \n  (for-each [(char? string) string]\n          [(in-char char string #\\\
    [])\n           (if (eq? char #\\]) (valid #t)\n           (begin (push! stack\
    \ [char]) (valid #f)]))])\n  (not valid))\n", "  (cond\n    ((empty? string) #f)\n\
    \    ((string=? (string- string \"[]\") \"[]\") #t)\n    (else (is_nested (string-\
    \ string \"[[]\")))))\n", "  (cond\n    ((null? string) #f)\n    ((string=? (string-upcase\
    \ (car string))\n              (string-upcase (substring (string 0) (string-length\
    \ string) string))) #t)\n    (else (is_nested (string-downcase string)))))\n",
  "  (cond [(empty? string)#t]\n        [(equal? (char-set->list (string->list string))\
    \ (list \"[]\"))]\n        [(equal? (substring (string 1) 1) (substring string\
    \ 2 1))(is_nested (rest string))]\n        [(equal? (substring (string 1) 1) (substring\
    \ string 2 2))(is_nested (rest string))]\n        [else #f]))\n", "  (cond [(empty?\
    \ string) #f]\n        [(equal? (car string) '[') (is_nested\n               \
    \                        (cdr string))]\n        [(equal? (car string) ']') (is_nested\n\
    \                                       (cdr string))]\n        [else (is_nested\
    \ (cdr string))]))\n", "  (cond \n    ((not (member (char-code string) '[({)}]))\n\
    \     #f) \n    ((or (is_nested (string-ref string 0))\n         (is_nested (string-ref\
    \ string 1)))\n     #t))", "  (fold-left (\u03BB (l) (and (char= (string-ref l\
    \ 0) '[') (char= (string-ref l 1) '['))) #f\n            string \n           \
    \ (string->list string)))\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>", "  (match\
    \ (string #\\[]) #t\n    (#\\[] #t\n     (#\\] #t\n      (#\\(\\[) #t\n      \
    \ (#\\(\\]) #t\n        (#\\(\\(\\[) #t\n         (#\\(\\(\\]) #t\n          (#\\\
    (\\(\\(\\[) #t\n           (#\\(\\(\\(\\]) #t\n            (#\\(\\(\\(\\(\\[)\
    \ #t\n             (#\\(\\(\\(\\(\\(\\]) #t\n              (#\\(\\(\\(\\(\\(\\\
    (\\[) #f)))))))))))))\n       (#\\(\\[) #t\n        (#\\(\\]) #t\n        (#\\\
    (\\(\\[) #t\n         (#\\(\\(\\]) #t\n          (#\\(\\(\\(\\[) #t\n        \
    \   (#\\(\\(\\(\\]) #t\n            (#\\(\\(\\(\\(\\[) #t\n             (#\\(\\\
    (\\(\\(\\]) #t\n              (#\\(\\(\\(\\(\\[) #f)))))))))))))\n      (#\\(\\\
    [) #t\n       (#\\(\\]) #t\n       (#\\(\\(\\[) #t\n        (#\\(\\(\\]) #t\n\
    \        (#\\(\\(\\(\\[) #t\n         (#\\(\\(\\(\\]) #t\n          (#\\(\\(\\\
    (\\(\\[) #t\n           (#\\(\\(\\(\\(\\]) #t\n            (#\\(\\(\\(\\(\\[)\
    \ #t\n             (#\\(\\(\\(\\(\\]) #t\n              (#\\(\\(\\(\\(\\[) #f)))))))))))))\n\
    \      (#\\(\\[) #t\n       (#\\(\\]) #t\n       (#\\(\\(\\[) #t\n        (#\\\
    (\\(\\]) #t\n        (#\\(\\(\\(\\[) #t\n         (#\\(\\(\\(\\]) #t\n       \
    \   (#\\(\\(\\(\\(\\[) #t\n           (#\\(\\(\\(\\(\\]) #t\n            (#\\\
    (\\(\\(\\(\\[) #t\n             (#\\(\\(\\(\\(\\]) #t\n              (#\\(\\(\\\
    (\\(\\[) #f)))))))))))))\n      (#\\(\\[) #t\n       (#\\(\\]) #t\n       (#\\\
    (\\(\\[) #t\n        (#\\(\\(\\]) #t\n        (#\\(\\(\\(\\[) #t\n         (#\\\
    (\\(\\(\\]) #t\n          (#\\(\\(\\(\\(\\[) #t\n           (#\\", "  (cond\n\
    \    [(string-match \"^\\\\[.*\\\\]$\" string) #t]\n    [else #f]))\n", "  (equal?\
    \ (pos\n             (match\n               (\u03BB (m) (equal? (match (\u03BB\
    \ (s) (equal? (char-code s) (square-bracket))) m)) string)\n               #\\\
    [])))\n  (equal? (pos\n             (match\n               (\u03BB (m) (equal?\
    \ (match (\u03BB (s) (equal? (char-code s) (square-bracket))) m)) string)\n  \
    \             #\\)))\n  (equal? (pos\n             (match\n               (\u03BB\
    \ (m) (equal? (match (\u03BB (s) (equal? (char-code s) (square-bracket))) m))\
    \ string)\n               #\\[)))\n  (equal? (pos\n             (match\n     \
    \          (\u03BB (m) (equal? (match (\u03BB (s) (equal? (char-code s) (square-bracket)))\
    \ m)) string)\n               #\\])))\n  (equal? (pos\n             (match\n \
    \              (\u03BB (m) (equal? (match (\u03BB (s) (equal? (char-code s) (square-bracket)))\
    \ m)) string)\n               #\\))))\n  ; ...\n", "  (cond\n    [(empty? string)\
    \ #f]\n    [(equal? (car string) '[) (is_nested (cdr string))]\n    [else #f]))\n",
  "  ;; Check for an empty string\n  (and (empty? string)\n       (empty? (rest string))\n\
    \       (if (subsequence? string) '#t '#f)))\n", "  (define (loop i s)\n    (cond\
    \ [(null? s) #t]\n          [(char= (car s) '[)]) \n           (loop (+ i 1) (cdr\
    \ s))]\n          [else (loop (+ i 1) (cdr s))]))\n  (loop '() string))\n", " \
    \ (match string\n    ['(#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n    \
    \                      (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]] (#\\[(#\\]])\n                \
    \          (#\\[(", "  (cond ((and (or (= (string-length string) 1) (string-ref\
    \ string 0))\n            (= (string-ref string 0) '('))\n         (or (char=\
    \ (string-ref string 0) '[')\n             (char= (string-ref string 0) '{'))\n\
    \         (or (char= (string-ref string 0) '[')\n             (char= (string-ref\
    \ string 0) '{'))\n         (or (char= (string-ref string 0) '(')\n          \
    \   (char= (string-ref string 0) '{'))\n         (char= (string-ref string 0)\
    \ '('))\n         (char= (string-ref string 0) '('))\n         (char= (string-ref\
    \ string 0) '('))\n         (char= (string-ref string 0) '('))\n         (char=\
    \ (string-ref string 0) '('))\n         (char= (string-ref string 0) '('))\n \
    \        (char= (string-ref string 0) '('))\n         (char= (string-ref string\
    \ 0) '('))\n         (char= (string-ref string 0) '('))\n         (char= (string-ref\
    \ string 0) '('))\n         (char= (string-ref string 0) '('))\n         (char=\
    \ (string-ref string 0) '('))\n         (char= (string-ref string 0) '('))\n \
    \        (char= (string-ref string 0) '('))\n         (char= (string-ref string\
    \ 0) '('))\n         (char= (string-ref string 0) '('))\n         (char= (string-ref\
    \ string 0) '('))\n         (char= (string-ref string 0) '('))\n         (char=\
    \ (string-ref string 0) '('))\n         (char= (string-ref string 0) '('))\n \
    \        (char= (string-ref string 0) '('))\n         (char= (string-ref string\
    \ 0) '('))\n         (char= (string-ref string 0) '('))\n         (char= (string-ref\
    \ string 0) '('))\n         (char= (string-ref string 0) '('))\n         (char=\
    \ (string-ref string 0) '('))\n         (char= (string-ref string 0) '('))\n \
    \        (char= (string-ref string 0) '('))\n         (char= (string-ref string\
    \ 0) '('))\n         (char= (string-ref string 0) '('))\n         (char= (string-ref\
    \ string 0) '('))\n         (char= (string-ref string 0) '('))\n         (char=\
    \ (string-ref string 0) '('))\n         (char= (string-ref string 0) '('))", " \
    \ (cond\n    [(string-match \"(?<open>\\\\[(?<close>\\\\])*)\\\\[(?<close>\\\\\
    ])*\" string)\n     (and (substring (string 0)\n                 #$1\n       \
    \          (string-index string #$open))\n          (substring (string 1)\n  \
    \               #$1\n                 (string-index string #$close)))]\n    [(string-match\
    \ \"(?<open>\\\\[(?<close>\\\\])*)\\\\[\" string)\n     (and (substring (string\
    \ 0)\n                 #$1\n                 (string-index string #$open))\n \
    \         (substring (string 1)\n                 #$1\n                 (string-index\
    \ string #$close)))]\n    [(string-match \"(?<open>\\\\[(?<close>\\\\])*)\" string)\n\
    \     (and (substring (string 0)\n                 #$1\n                 (string-index\
    \ string #$open))\n          (substring (string 1)\n                 #$1\n   \
    \              (string-index string #$close)))]\n    [else (error \"is_nested:\
    \ invalid input\")]))\n", "  (cond ((and (= 0 (string-length (string 0))) (= 1\
    \ (string-length (string 1))))\n         (string-ref string 0))\n        ((equal?\
    \ (string-ref string 0) (string-ref string 1))\n         (if (or (equal? (string-ref\
    \ string 0) (string-ref string 2))\n                 (equal? (string-ref string\
    \ 1) (string-ref string 2)))\n             #f\n             #t))\n        ((equal?\
    \ (string-ref string 0) (string-ref string 2))\n         (if (or (equal? (string-ref\
    \ string 0) (string-ref string 1))\n                 (equal? (string-ref string\
    \ 2) (string-ref string 2)))\n             #f\n             #t))\n        (else\n\
    \         #f)))\n", "  (or (not (= string-length (string-ref string 0))) #t\n\
    \      (= (string-ref string 0) \"[\")\n      (= (string-ref string (string-length\
    \ (string-ref string 0) - 1L)) \"]\")\n      (or (= (string-ref string 0L) \"\
    [\")\n          (= (string-ref string (string-length (string-ref string 0L) -\
    \ 1L)) \"]\")\n      (or (= (string-ref string 0L) \"]\")\n          (= (string-ref\
    \ string (string-length (string-ref string 0L) - 1L)) \"[\")\n          (is_nested\
    \ (string-ref string (1L (+ 1L (string-length (string-ref string 0L))))))))\n",
  "  (cond\n    [(= 1 (length string))\n     (cond \n       [(string->list (substring\
    \ string 0 (string->length (substring string 0 1)))) \n        (equal? (string->list\
    \ (substring string 0 (string->length (substring string 0 1))))\n            \
    \    (list (first string))]\n       [else #f]\n       )]\n    [else #f]\n    )\n\
    \    )\n", "  (memq '[[]]\n         (scan\n           string\n           (lambda\
    \ (c)\n             (cond\n               ((memq c '()]) #t)\n               (else\
    \ (scan\n                         (string (cdr string))\n                    \
    \     (lambda (c)\n                           (cond\n                        \
    \     ((memq c '()]) #f)\n                             (else #f)))))\n       \
    \        (else #f))))))\n", "  (or (char=? #\\[ string) (char=? #\\] string) (char=?\
    \ #\\( string) (char=? #\\) string)))\n", "  (cond\n    [(string-empty? string)\n\
    \     #f]\n    [else\n     (string=? string (substring string 0 (string-length\
    \ string)))\n     (let ([length (string-length string)])\n       (cond \n    \
    \     [(< length 2)\n          (equal? (char-alphabetic? (substring string 0 1))\
    \ \n                    (string-alphabetic? (substring string 1 length))) \n \
    \         (equal? (char-alphabetic? (substring string 0 length)) \n          \
    \          (string-alphabetic? (substring string 1 1)))]\n         [else\n   \
    \       (equal? (char-alphabetic? (substring string 0 1)) \n                 \
    \   (string-alphabetic? (substring string 1 length)))]\n        [else\n      \
    \    (equal? (char-alphabetic? (substring string 0 length)) \n               \
    \     (string-alphabetic? (substring string 1 1)))]\n        )\n       )])\n \
    \   ))", "  (or (equal? (string-ref string 0) \"]\")\n      (equal? (string-ref\
    \ string 0) \"[\"))\n)\n", "  (< (string-length string) 0))\n", "  (cond ((empty?\
    \ string) #f)\n        ((equal? (char-value (string-ref string 0)) #\\[)\n   \
    \      (cond ((equal? (char-value (string-ref string 1)) #\\])\n             \
    \   (is_nested (string-append string \"[[]]]]]]][[[[[]\"))\n               (else\
    \ (is_nested (string-append string \"[][\"))))\n         (else (is_nested (string-append\
    \ string \"[]\")))))\n</cell>\n<cell>", "  (cond\n    ((null? string) #f)\n  \
    \  ((char=? (string-ref string 0) #\\[) #t)\n    (else (is_nested (string-append\
    \ \"[\" string)))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThis answer\
    \ isn't very helpful in its current form. First off, it's in Racket, and secondly,\
    \ it doesn't explain anything.\n<|/ c |>\n<| c |>\nThanks for your answer. I just\
    \ have one question: why is there a need for two procedures to solve this problem?\n\
    <|/ c |>\n<| c |>\nI believe the OP intended this to be a straightforward implementation,\
    \ but he had it mostly right already. I will edit the answer to add a bit of explanation.\n\
    <|/ c |>\n<| c |>\nThe code above is meant to be straightforward. I am not trying\
    \ to be rude, I just don't understand your comment. Are you saying that my code\
    \ could be improved in any way?\n<|/ c |>\n<| c |>\nI believe that this code could\
    \ be made a lot more efficient by not creating a new string every time it needs\
    \ to find a new bracket. But it also could be made more efficient, or not much\
    \ more efficient, by only traversing strings and checking if the next character\
    \ is a bracket.\n<|/ c |>\n<| a dscore=0 |>\nThis is another take that uses only\
    \ racket's list processing primitives, namely char=?, string-ref, list-ref and\
    \ append:\n<code>", "  (let loop ((i 0))\n    (cond\n      [(empty? string) #f]\n\
    \      [(equal? (first string) #\\]) (equal? (second string) #\\])]\n      [(equal?\
    \ (first string) #\\[) (equal? (second string) #\\])]\n      [else\n       (let\
    \ ((end (+ 1 (length string)))\n             (substring (make-string (equal? (length\
    \ string) 1) #\\)))\n         (if (equal? (first string) #\\])\n           (begin\n\
    \             (display \"[\")\n             (loop i))\n           (if (equal?\
    \ (first string) #\\])\n             (loop (+ i 1))\n             (begin\n   \
    \            (if (equal? (first string) #\\])\n                 (loop (+ i 1))\n\
    \                 (loop (+ i 2))\n                 (begin\n                  \
    \ (if (equal? (first string) #\\])\n                     (loop (+ i 1))\n    \
    \                 (loop end)))))))]\n      (else (loop i))))))\n", "  (cond [(or\
    \ (string=? string \"[]\") (string=? string \"()\") (string=? string \"{}\")\n\
    \          (string=? string \"()[]\"))\n         #t]\n        [(string=? string\
    \ \"[][[]\")\n         #t]\n        [(string=? string \"[][]]\")]\n        [(string=?\
    \ string \"()[][]\")\n         #t]\n        [(string=? string \"[][]\")\n    \
    \     #t]\n        [(string=? string \"[[][][]\")\n         #t]\n        [(string=?\
    \ string \"[][][]\")\n         #t]\n        [(string=? string \"[][[][]\")\n \
    \        #t]\n        [(string=? string \"[][]][]\")\n         #t]\n        [(string=?\
    \ string \"[[]][][]\")\n         #t]\n        [(string=? string \"[][]][]\")\n\
    \         #t]\n        [(string=? string \"[[]][][[]\")\n         #t]\n      \
    \  [(string=? string \"[[]][][][]\")\n         #t]\n        [(string=? string\
    \ \"[][[][][]\")\n         #t]\n        [(string=? string \"[][]][][]\")\n   \
    \      #t]\n        [(string=? string \"[][]][][]\")\n         #t]\n        [(string=?\
    \ string \"[][[][][][]\")\n         #t]\n        [(string=? string \"[][]][][][]\"\
    )\n         #t]\n        [(string=? string \"[][]][][][]\")\n         #t]\n  \
    \      [(string=? string \"[[][[][][][][]\")\n         #t]\n        [(string=?\
    \ string \"[][]][][][][]\")\n         #t]\n        [(string=? string \"[][]][][][][]\"\
    )\n         #t]\n        [(string=? string \"[][[][][][][][]\")\n         #t]\n\
    \        [(string=? string \"[][]][][][][][]\")\n         #t]\n        [(string=?\
    \ string \"[][]][][][][][]\")\n         #t]\n        [(string=? string \"[][][][][][][][]\"\
    )\n         #t]\n        [(string=? string \"[][[][][][][][][]\")", "  (lambda\
    \ ()\n    (string=? (string=? string \"[[[]\")\n              (string=? string\
    \ \"[]]]]]]][[[[[]\")\n      #t)))\n", "  (or ((empty? string) (symbol=? string\
    \ \"[]\"))\n      (or (char=? (car string) '(') (string=? (cdr string) \"[]\"\
    ))\n      (or (char=? (car string) '[') (string=? (cdr string) \"[[]\")))\n  )\n\
    )\n", "  (let ((stack '())\n        (index '())\n        (stack-length '()))\n\
    \    (for-each (lambda (c)\n                (cond\n                 ((equal c\
    \ '[) \n                   (push (c) index)))\n                 ((equal c '#\\\
    ]) \n                   (check-stack-length stack))))\n    (if (eqv? (count stack)\
    \ stack-length)\n        #t\n        (for-each (lambda (c)\n                 \
    \   (cond\n                     ((equal c '[) \n                       (push (c)\
    \ index)))\n                     ((equal c '#\\]) \n                       (check-stack-length\
    \ stack))))\n        #f)))\n", "  (or (char-type (car string))\n      (= 0 (char-type\
    \ (car (cdr string)))) ; nested square brackets\n      (let ((acc (list-of #t\
    \ #t #f #f #f #f #t #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #", "  (cond\n    [(empty? string)\n     #f]\n    [(eq? (car string) (cadr\
    \ string))\n     (is_nested (caddr string))]\n    [else (is_nested (caddr string))]))\n",
  "  (local ((define (helper pos string)\n            (cond\n              [(null?\
    \ string) #f]\n              [(eq? string (substring string pos (add1 pos))) #t]\n\
    \              [else (helper (add1 pos) (substring string pos (add1 pos)))]\n\
    \            )))\n    (helper 0 string)))\n", "  (= (length string) 3)\n  (member\
    \ (chars string 0) (member (chars string 1) (member (chars string 2) \"[[[\"))))\n",
  "  (or (char= (char string 0) '[') (char= (char string 1) '[')\n      (char= (char\
    \ string 2) '[')\n      (char= (char string 3) '[')\n      (char= (char string\
    \ 4) '[')\n      (char= (char string 5) '[')\n      (char= (char string 6) '[')\n\
    \      (char= (char string 7) ']')\n      (char= (char string 8) ']')\n      (char=\
    \ (char string 9) ']')\n      (char= (char string 10) ']')\n      (char= (char\
    \ string 11) ']')\n      (char= (char string 12) ']')\n      (char= (char string\
    \ 13) ']')\n      (char= (char string 14) ']')\n      (char= (char string 15)\
    \ ']')\n      (char= (char string 16) ']')\n      (char= (char string 17) ']')\n\
    \      (char= (char string 18) ']')\n      (char= (char string 19) ']')\n    \
    \  (char= (char string 20) ']')\n      (char= (char string 21) ']')\n      (char=\
    \ (char string 22) ']')\n      (char= (char string 23) ']')\n      (char= (char\
    \ string 24) ']')\n      (char= (char string 25) ']')\n      (char= (char string\
    \ 26) ']')\n      (char= (char string 27) ']')\n      (char= (char string 28)\
    \ ']')\n      (char= (char string 29) ']')\n      (char= (char string 30) ']')\n\
    \      (char= (char string 31) ']')\n      (char= (char string 32) ']')\n    \
    \  (char= (char string 33) ']')\n      (char= (char string 34) ']')\n      (char=\
    \ (char string 35) ']')\n      (char= (char string 36) ']')\n      (char= (char\
    \ string 37) ']')\n      (char= (char string 38) ']')\n      (char= (char string\
    \ 39) ']')\n      (char= (char string 40) ']')\n      (char= (char string 41)\
    \ ']')\n      (char= (char string 42) ']')\n      (char= (char string 43) ']')\n\
    \      (char= (char string 44) ']')\n      (char= (char string 45) ']')\n    \
    \  (char= (char string 46) ']')", "  (= (string-length string)\n     (string->list\
    \ (string->string string))\n     (string->list (string->string (string-append\
    \ string \"[\"]))))\n", "  (cond [(empty? string) #f]\n        [(eq? (car string)\
    \ '[') (is_nested (cdr string))]))\n", "  (cond\n    [(and (>= (string-length\
    \ string) 1) (= (string-ref string 0)? '[)) #f]\n    [else (or (and (>= (string-length\
    \ string) 2) (string-ref string 0)? '[)\n               (and (>= (string-length\
    \ string) 3) (string-ref string 0)? '[)\n               (and (>= (string-length\
    \ string) 4) (string-ref string 0)? '[)))]))\n", "  (let loop ((stack '())\n \
    \            (string string))\n    (if (null? string)\n        (= (length stack)\
    \ 0)\n        (if (= (substring string 0 1) \"[\")\n            (if (= (substring\
    \ string -1 1) \"]\")\n                (push (substring string 1 -1)\n       \
    \               stack)\n                nil))))))\n</code>\nIn order to check\
    \ that the input string is nested, a recursive function loop has to be created.\
    \ Inside this function, we take a string and a stack. The stack contains the brackets\
    \ already traversed, so that if the stack has only 1 element, this is indeed a\
    \ nested bracket. \nThe function loop recursively calls itself for both strings\
    \ with only one nested bracket, and for strings with two nested brackets, and\
    \ we exit the recursion when the stack contains 0 elements. \nIn case of strings\
    \ with only 1 nested bracket, the loop function just adds the substring to the\
    \ stack and returns #t or nil, depending on whether there is a valid subsequence\
    \ of brackets.\nIn case of strings with 2 or more nested brackets, the loop function\
    \ tests for nested brackets in the substring and recursively calls itself with\
    \ a new string, the substring without the first and last brackets, and the new\
    \ stack. The result is that if we call loop recursively, the substring will always\
    \ be tested for brackets and if the substring is valid, the new stack will always\
    \ contain the substring without the first and last brackets.\nTo make it a bit\
    \ more efficient, we could keep a stack of only the last two brackets parsed and\
    \ remove them when parsing the string. This would save us a lot of time in the\
    \ beginning for the recursive calls to loop. \nWe could also use a map instead\
    \ of an array for the stack, and just append the new brackets to the end of the\
    \ stack if they're not already in the map.\nHere's a version using the map technique:\n\
    <code>\n#lang racket\n", "  (cond\n    [(equal? string \"\")\n     #t]\n    [(equal?\
    \ (char-set->string \\])\n           (char-set->string (subseq (string->char-set\
    \ string) 0 string->length string)))\n     (equal? string \"[]\")]\n    [else\n\
    \     (equal? string \"[][]\")]\n    [else\n     (equal? string \"[[[[]\")\n \
    \    #t]\n    [else\n     (equal? string \"[[[][]]]\")\n     #t]\n    [else\n\
    \     (equal? string \"[][][]\")\n     #t]\n    [else\n     (equal? string \"\
    [][]\")\n     #f]\n    [else\n     (equal? string \"[[][]]\")\n     #t]\n    [else\n\
    \     (equal? string \"[[]]\")\n     #f]\n    [else\n     (equal? string \"[[[[][]]]]\"\
    )\n     #t]\n    [else\n     (equal? string \"[[[][]]]]][[\")\n     #t]\n    [else\n\
    \     (equal? string \"[[[][]]]]][\")\n     #f]\n    [else\n     (equal? string\
    \ \"[[[[][]]]]\")\n     #f]\n    [else\n     (equal? string \"[[[][]]]]][[[]\"\
    )\n     #f]\n    [else\n     (equal? string \"[[[][]]]]][\")\n     #f]\n    [else\n\
    \     (equal? string \"[[[[][]]]]][[[][]\")\n     #t]\n    [else\n     (equal?\
    \ string \"[[[][]]]]][[[][][]\")\n     #f]\n    [else\n     (equal? string \"\
    [[[][]]]]][[[][][]]][[\")\n     #t]\n    [else\n     (equal? string \"[[[][]]]]][[[][][]]][\"\
    )\n     #f]\n    [else\n     (equal? string \"[[[][]]]]][[[][][]]][[[]\")\n  \
    \   #t]\n    [else\n     (equal? string \"[[[][]]]]][[[][][]]][[[][]\")\n    \
    \ #f]\n    [else\n     (equal? string \"[[[][]]]]][[[][][]]][[[][][]\")\n    \
    \ #t]\n    [else\n     (equal? string \"[[[][]]]]][[[][][]]][[[]", "  (if (or\
    \ (string? string) (list? string))\n      (match ((nested? string) #t)(nested?\
    \ #f)\n          ((#\\[ #\\]) (#t)\n          ((#\\( #\\) ()) (#t))))\n    (lambda\
    \ (x)\n      (if (or (string? x) (list? x))\n          (match ((nested? x) #t)(nested?\
    \ #f)\n              ((#\\[ #\\]) (#t)\n              ((#\\( #\\) ()) (#t))))\n\
    \      #f)))\n</cell>\n<cell>\n#lang racket\n", "  (cond [(empty? string) #f]\n\
    \        [(eq? (first string) '[') (is_nested (substring (second string) 1 -1))]\n\
    \        [(eq? (first string) '(') (is_nested (substring (second string) 1 -1))]\n\
    \        [else\n         (is_nested (string-append string '(')))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
