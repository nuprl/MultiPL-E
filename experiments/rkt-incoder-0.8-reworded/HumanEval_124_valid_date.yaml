name: HumanEval_124_valid_date
language: rkt
prompt: "#lang racket\n\n;; You have to write a function which validates a given date\
  \ string and\n;; returns #t if the date is valid otherwise #f.\n;; The date is valid\
  \ if all of the following rules are satisfied:\n;; 1. The date string is not empty.\n\
  ;; 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  ;; 3. The months should not be less than 1 or higher than 12.\n;; 4. The date should\
  \ be in the format: mm-dd-yyyy\n;; >>> (valid_date \"03-11-2000\")\n;; #t\n;; >>>\
  \ (valid_date \"15-01-2012\")\n;; #f\n;; >>> (valid_date \"04-0-2040\")\n;; #f\n\
  ;; >>> (valid_date \"06-04-2020\")\n;; #t\n;; >>> (valid_date \"06/04/2020\")\n\
  ;; #f\n(define (valid_date date)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n\
  \    (check-equal? (candidate \"03-11-2000\") #t)\n    (check-equal? (candidate\
  \ \"15-01-2012\") #f)\n    (check-equal? (candidate \"04-0-2040\") #f)\n    (check-equal?\
  \ (candidate \"06-04-2020\") #t)\n    (check-equal? (candidate \"01-01-2007\") #t)\n\
  \    (check-equal? (candidate \"03-32-2011\") #f)\n    (check-equal? (candidate\
  \ \"\") #f)\n    (check-equal? (candidate \"04-31-3000\") #f)\n    (check-equal?\
  \ (candidate \"06-06-2005\") #t)\n    (check-equal? (candidate \"21-31-2000\") #f)\n\
  \    (check-equal? (candidate \"04-12-2003\") #t)\n    (check-equal? (candidate\
  \ \"04122003\") #f)\n    (check-equal? (candidate \"20030412\") #f)\n    (check-equal?\
  \ (candidate \"2003-04\") #f)\n    (check-equal? (candidate \"2003-04-12\") #f)\n\
  \    (check-equal? (candidate \"04-2003\") #f)\n))\n\n(test-humaneval)"
completions: ["  (and (not (empty? date))\n       (not (< 1 (length date)))\n    \
    \   (not (< 1 (length (substring date 0 2)))) ; Months not less than 1 or higher\
    \ than 12\n       (not (< 1 (length (substring date 2 2)))) ; Months not less\
    \ than 1 or higher than 12\n       (not (< 1 (length (substring date 4 2)))) ;\
    \ Months not less than 1 or higher than 12\n       (not (< 1 (length (substring\
    \ date 6 2)))) ; Months not less than 1 or higher than 12\n       (not (< 1 (length\
    \ (substring date 8 2)))) ; Months not less than 1 or higher than 12\n       (not\
    \ (< 1 (length (substring date 10 2)))) ; Months not less than 1 or higher than\
    \ 12\n       (not (< 1 (length (substring date 12 2)))) ; Months not less than\
    \ 1 or higher than 12\n       (equal? (substring date 0 2) \"-\")\n       (equal?\
    \ (substring date 2 2) \"-\")\n       (equal? (substring date 4 2) \"-\")\n  \
    \     (equal? (substring date 6 2) \"-\")\n       (equal? (substring date 8 2)\
    \ \"-\")\n       (equal? (substring date 10 2) \"-\")\n       (equal? (substring\
    \ date 12 2) \"-\")\n       (equal? (substring date 2 1) \"-\")\n       (equal?\
    \ (substring date 4 1) \"-\")\n       (equal? (substring date 6 1) \"-\")\n  \
    \     (equal? (substring date 8 1) \"-\")\n       (equal? (substring date 10 1)\
    \ \"-\")\n       (equal? (substring date 12 1) \"-\")\n       (equal? (substring\
    \ date 1 1) \"-\")\n       (equal? (substring date 3 1) \"-\")\n       (equal?\
    \ (substring date 5 1) \"-\")\n       (equal? (substring date 7 1) \"-\")\n  \
    \     (equal? (substring date 9 1) \"-\")\n       (equal? (substring date 11 1)\
    \ \"-\")\n       (equal? (substring date 13 1) \"-\")\n       (equal? (substring\
    \ date 15 1) \"-\")\n       (equal? (substring date 17 1) \"-\")\n       (equal?\
    \ (substring date 19 1) \"-\")\n       (equal? (substring date 21 1) \"-\")\n\
    \       (equal? (substring date 23 1) \"-\")\n       (equal? (substring date 25\
    \ 1) \"-\")\n       (equal? (substring date 27 1) \"-\")\n       (equal? (substring\
    \ date 29 1) \"-\")\n       (equal? (substring date 31 1) \"-\")\n       (equal?\
    \ (substring date 1 3) \"-\")\n       (equal? (substring date 3 3) \"-\")", " \
    \ (cond\n    [(and (not (empty? date)) (< 1 (length date)) (> 31 (length date))\
    \ (< 1 (length date) (length date) (length date))) false]\n    [(and (not (empty?\
    \ date)) (< 1 (length date)) (> 30 (length date)) (< 1 (length date) (length date)\
    \ (length date))) false]\n    [(and (not (empty? date)) (< 1 (length date)) (>\
    \ 29 (length date)) (< 1 (length date) (length date) (length date))) false]\n\
    \    [(and (not (empty? date)) (< 1 (length date)) (> 12 (length date)) (< 1 (length\
    \ date) (length date) (length date))) false]\n    [else (and (match date (format\
    \ \"%m-%d-%Y\") #t) true)]\n))\n", "  (cond [(empty? date) #t]\n        [(< 1\
    \ (length date)) #f]\n        [(< (length date) (* 2 2)) #f]\n        [(< (length\
    \ date) (* 4 4)) #f]\n        [(< (length date) (* 6 6)) #t]\n        [(< (length\
    \ date) (* 9 9)) #t]\n        [(< (length date) (* 11 11)) #t]\n        [(< (length\
    \ date) (* 12 12)) #t]\n        [else #f]))\n", "  (let ([month-day-pair (split-string\
    \ date #\"[\\-\\/]\")])\n    (cond [(null? month-day-pair) #f]\n          [(<\
    \ 1 (length (first month-day-pair)) #f)\n           (< (length (first month-day-pair))\
    \ (length (first month-day-pair))) #f]\n          [(< 1 (length (first month-day-pair))\
    \ (length (first month-day-pair))) #t]\n          [else (and (> (length (first\
    \ month-day-pair)) 1) (< (length (first month-day-pair)) 31)\n               \
    \     (< (length (first month-day-pair)) 30) (< (length (first month-day-pair))\
    \ 29))]))\n", "  (cond [(or (empty? date) #f)\n         (error \"Invalid date\"\
    )\n         #t]\n        [(< (length (string-ref\n                      date 0\
    \ 2)) 2)\n         (error \"Date should be in the format: mm-dd-yyyy\")\n    \
    \     #t]\n        [(< (length (string-ref\n                      date 0 1)) 0)\n\
    \         (error \"Date should have at least a day in month.\")\n         #t]\n\
    \        [(< 1 (string-length (string-ref date 0 1)))\n         (error \"Month\
    \ should not be less than or equal to 12.\")\n         #t]\n        [(< 1 (string-length\
    \ (string-ref date 0 2)))\n         (error \"Date should have at least 2 digits\
    \ for month.\")\n         #t]\n        [(< 1 (string-length (string-ref date 0\
    \ 3)))\n         (error \"Date should have at least 3 digits for day.\")\n   \
    \      #t]\n        [(< 1 (string-length (string-ref date 0 4)))\n         (error\
    \ \"Date should have at least 4 digits for year.\")\n         #t]\n        [else\
    \ #t]))\n", "  (cond\n    [(empty? date) #t]\n    [(and (integer? (string->number\
    \ (substring date 0 (string-length date) )))\n          (< 1 (string->number (substring\
    \ date 0 (string-length date)))\n               (string->number (substring date\
    \ 1 (string-length date))))\n     (and (integer? (string->number (substring date\
    \ 0 (string-length date) )))\n          (< 1 (string->number (substring date 0\
    \ (string-length date)))\n               (string->number (substring date 1 (string-length\
    \ date))))\n     (and (integer? (string->number (substring date 0 (string-length\
    \ date) )))\n          (< 1 (string->number (substring date 0 (string-length date)))\n\
    \               (string->number (substring date 1 (string-length date))))\n  \
    \   (and (integer? (string->number (substring date 0 (string-length date) )))\n\
    \          (< 1 (string->number (substring date 0 (string-length date)))\n   \
    \            (string->number (substring date 1 (string-length date))))\n     (and\
    \ (integer? (string->number (substring date 0 (string-length date) )))\n     \
    \     (< 1 (string->number (substring date 0 (string-length date)))\n        \
    \       (string->number (substring date 1 (string-length date))))\n     (and (integer?\
    \ (string->number (substring date 0 (string-length date) )))\n          (< 1 (string->number\
    \ (substring date 0 (string-length date)))\n               (string->number (substring\
    \ date 1 (string-length date))))\n     (and (integer? (string->number (substring\
    \ date 0 (string-length date) )))\n          (< 1 (string->number (substring date\
    \ 0 (string-length date)))\n               (string->number (substring date 1 (string-length\
    \ date))))\n     (and (integer? (string->number (substring date 0 (string-length\
    \ date) )))\n          (< 1 (string->number (substring date 0 (string-length date)))\n\
    \               (string->number (substring date 1 (string-length date))))\n  \
    \   (and (integer? (string->number (substring date 0 (string-length date) )))\n\
    \          (< 1 (string->number (substring date 0 (string-length date)))\n   \
    \            (string->number (substring date 1 (string-length date))))\n     (and\
    \ (integer? (string->number (substring date 0 (string-length date) )))\n     \
    \     (< 1 (string->number (substring date 0 (string-length date)))\n        \
    \       (string->number (substring date 1 (string-length date))))\n     (and (integer?\
    \ (string->number (substring date 0 (string-length date) )))\n          (< 1 (string->number\
    \ (substring date 0 (string-", "  (cond\n    ((string? date) #t)\n    ((< (length\
    \ date) 4)\n     (cond\n       ((equal? (substring date 0 2) \"01\")\n       \
    \ (and (equal? (substring date 0 1) \"02\")\n             (equal? (substring date\
    \ 0 3) \"12\"))\n        (#t (#f)))\n       ((equal? (substring date 0 2) \"03\"\
    )\n        (and (equal? (substring date 0 1) \"02\")\n             (equal? (substring\
    \ date 0 3) \"11\")\n             (equal? (substring date 0 4) \"12\"))\n    \
    \    (#t (#f)))\n       ((equal? (substring date 0 2) \"05\")\n        (and (equal?\
    \ (substring date 0 1) \"02\")\n             (equal? (substring date 0 3) \"06\"\
    )\n             (equal? (substring date 0 4) \"12\"))\n        (#t (#f)))\n  \
    \     ((equal? (substring date 0 2) \"07\")\n        (and (equal? (substring date\
    \ 0 1) \"02\")\n             (equal? (substring date 0 3) \"09\")\n          \
    \   (equal? (substring date 0 4) \"12\"))\n        (#t (#f)))\n       ((equal?\
    \ (substring date 0 2) \"08\")\n        (and (equal? (substring date 0 1) \"02\"\
    )\n             (equal? (substring date 0 3) \"10\")\n             (equal? (substring\
    \ date 0 4) \"12\"))\n        (#t (#f)))\n       ((equal? (substring date 0 2)\
    \ \"10\")\n        (and (equal? (substring date 0 1) \"02\")\n             (equal?\
    \ (substring date 0 3) \"11\")\n             (equal? (substring date 0 4) \"12\"\
    ))\n        (#t (#f)))\n       ((equal? (substring date 0 2) \"12\")\n       \
    \ (and (equal? (substring date 0 1) \"02\")\n             (equal? (substring date\
    \ 0 3) \"01\")\n             (equal? (substring date 0 4) \"01\"))\n        (#t\
    \ (#f)))))\n    ((< (< (length date) 2) 1)\n     (cond\n       ((equal? (substring\
    \ date 0 1) \"-\")\n        (#t (#f)))\n       ((equal? (substring date 0 2) \"\
    -\")\n        (#t (#f)))\n       ((equal? (substring date 0 2) \"0\")\n      \
    \  (#t (#f)))\n       ((equal? (substring date 0 2) \"1\")\n        (#t (#f)))\n\
    \       ((equal? (substring date 0 2) \"2\")\n        (#t (#f)))\n       ((equal?\
    \ (substring date 0 2) ", "  (if (or (string-empty? date) (< 1 (string-length\
    \ date)) (> 31 (string-length date)) (< 1 (string-length date)) (> 30 (string-length\
    \ date)) (string-length date) (< 1 (string-length date)) (> 29 (string-length\
    \ date)) (string-length date) (< 1 (string-length date)) (> 12 (string-length\
    \ date)))\n      (error \"Invalid Date\" date)\n      #t\n      #f\n  )\n", " \
    \ (cond\n    [(string-empty? date) #f]\n    [(string-equal? date \"Invalid date\"\
    ) #f]\n    [(or (integer-equal? 0 (string-length date)) (integer-equal? 1 (string-length\
    \ date)))\n     (or (integer-equal? 0 (string-length date)) (integer-equal? 1\
    \ (string-length date)))]\n    [(or (integer-equal? (string-length (string-split\
    \ date #\"-\" 0))\n                  (number->string (length date)))\n     (or\
    \ (integer-equal? (string-length (string-split date #\"-\" 1))\n             \
    \     (number->string (length date)))\n     (or (integer-equal? (string-length\
    \ (string-split date #\"-\" 2))\n                  (number->string (length date)))\n\
    \     (or (integer-equal? (string-length (string-split date #\"-\" 3))\n     \
    \             (number->string (length date)))\n     (or (integer-equal? (string-length\
    \ (string-split date #\"-\" 4))\n                  (number->string (length date)))\n\
    \     (or (integer-equal? (string-length (string-split date #\"-\" 5))\n     \
    \             (number->string (length date)))\n     (or (integer-equal? (string-length\
    \ (string-split date #\"-\" 6))\n                  (number->string (length date)))\n\
    \     (or (integer-equal? (string-length (string-split date #\"-\" 7))\n     \
    \             (number->string (length date)))\n     (or (integer-equal? (string-length\
    \ (string-split date #\"-\" 8))\n                  (number->string (length date)))\n\
    \     (or (integer-equal? (string-length (string-split date #\"-\" 9))\n     \
    \             (number->string (length date)))\n     (or (integer-equal? (string-length\
    \ (string-split date #\"-\" 10))\n                  (number->string (length date)))\n\
    \     (or (integer-equal? (string-length (string-split date #\"-\" 11))\n    \
    \              (number->string (length date)))\n     (or (integer-equal? (string-length\
    \ (string-split date #\"-\" 12))\n                  (number->string (length date)))\n\
    \     (or (integer-equal? (string-length (string-split date #\"-\" 13))\n    \
    \              (number->string (length date)))\n     (or (integer-equal? (string-length\
    \ (string-split date #\"-\" 14))\n                  (number->string (length date)))\n\
    \     (or (integer-equal? (string-length (string-split date #\"-\" 15))\n    \
    \              (number->string (length date)))\n     (or (integer-equal? (string-length\
    \ (string-split date #\"-\" 16))\n", "  (cond\n    [(string? date) #t]\n    [(and\
    \ (number? (string->number (substring date 0 2)))\n          (< 1 31 (string->number\
    \ (substring date 0 2)))\n          (< 1 30 (string->number (substring date 0\
    \ 2)))\n          (< 1 29 (string->number (substring date 0 2)))\n          (<\
    \ 1 12 (string->number (substring date 0 2)))\n          (< 1 11 (string->number\
    \ (substring date 0 2))))\n     (and (number? (string->number (substring date\
    \ 1 2)))\n          (< 1 31 (string->number (substring date 1 2)))\n         \
    \ (< 1 30 (string->number (substring date 1 2)))\n          (< 1 29 (string->number\
    \ (substring date 1 2)))\n          (< 1 12 (string->number (substring date 1\
    \ 2)))\n          (< 1 11 (string->number (substring date 1 2)))\n          (<\
    \ 1 10 (string->number (substring date 1 2)))\n          (< 1 9 (string->number\
    \ (substring date 1 2)))\n          (< 1 8 (string->number (substring date 1 2)))\n\
    \          (< 1 7 (string->number (substring date 1 2)))\n          (< 1 6 (string->number\
    \ (substring date 1 2)))\n          (< 1 5 (string->number (substring date 1 2)))\n\
    \          (< 1 4 (string->number (substring date 1 2)))\n          (< 1 3 (string->number\
    \ (substring date 1 2))))]\n    [(and (number? (string->number (substring date\
    \ 3 2)))\n          (< 1 31 (string->number (substring date 3 2)))\n         \
    \ (< 1 30 (string->number (substring date 3 2)))\n          (< 1 29 (string->number\
    \ (substring date 3 2)))\n          (< 1 12 (string->number (substring date 3\
    \ 2)))\n          (< 1 11 (string->number (substring date 3 2)))\n          (<\
    \ 1 10 (string->number (substring date 3 2)))\n          (< 1 9 (string->number\
    \ (substring date 3 2)))\n          (< 1 8 (string->number (substring date 3 2)))\n\
    \          (< 1 7 (string->number (substring date 3 2)))\n          (< 1 6 (string->number\
    \ (substring date 3 2)))\n          (< 1 5 (string->number (substring date 3 2)))\n\
    \          (< 1 4 (string->number (substring date 3 2)))\n          (< 1 3 (string->number\
    \ (sub", "  (and (empty? date)\n       (not (< (length (substring date 0 2)) 2)\n\
    \            (< (length (substring date 0 1)) 2)\n            (< (length (substring\
    \ date 2 2)) 2)\n            (< (length (substring date 2 1)) 2)\n           \
    \ (< (length (substring date 1 2)) 2)\n            (< (length (substring date\
    \ 1 1)) 2)\n            (< (length (substring date 3 2)) 2)\n            (< (length\
    \ (substring date 3 1)) 2)\n            (< (length (substring date 5 2)) 2)\n\
    \            (< (length (substring date 5 1)) 2)\n            (< (length (substring\
    \ date 7 2)) 2)\n            (< (length (substring date 7 1)) 2)\n           \
    \ (< (length (substring date 8 2)) 2)\n            (< (length (substring date\
    \ 8 1)) 2)\n            (< (length (substring date 10 2)) 2)\n            (< (length\
    \ (substring date 10 1)) 2)\n            (< (length (substring date 12 2)) 2)\n\
    \            (< (length (substring date 12 1)) 2)\n            (< (length (substring\
    \ date 4 2)) 2)\n            (< (length (substring date 4 1)) 2)\n           \
    \ (< (length (substring date 6 2)) 2)\n            (< (length (substring date\
    \ 6 1)) 2)\n            (< (length (substring date 9 2)) 2)\n            (< (length\
    \ (substring date 9 1)) 2)\n            (< (length (substring date 11 2)) 2)\n\
    \            (< (length (substring date 11 1)) 2)\n            (< (length (substring\
    \ date 1 2)) 2)\n            (< (length (substring date 1 1)) 2)\n           \
    \ (< (length (substring date 2 2)) 2)\n            (< (length (substring date\
    \ 2 1)) 2)\n            (< (length (substring date 3 2)) 2)\n            (< (length\
    \ (substring date 3 1)) 2)\n            (< (length (substring date 5 2)) 2)\n\
    \            (< (length (substring date 5 1)) 2)\n            (< (length (substring\
    \ date 7 2)) 2)\n            (< (length (substring date 7 1)) 2)\n           \
    \ (< (length (substring date 8 2)) 2)\n            (< (length (substring date\
    \ 8 1)) 2)\n            (< (length (substring date 10 2)) 2)\n            (< (length\
    \ (substring date 10 1)) 2)\n            (< (length (substring date 12 2)) 2)\n\
    \            (< (length (substring date 12 1)) 2)\n", "  (cond\n    ((null? date)\
    \ #f)\n    ((string-length date) < 3 #f)\n    ((string-length (string-ref date\
    \ 0 2)) < 1 #f)\n    ((string-length (string-ref date 0 2)) > 2 #f)\n    ((string-length\
    \ (string-ref date 2 2)) < 1 #f)\n    ((string-length (string-ref date 2 2)) >\
    \ 2 #f)\n    ((string-length (string-ref date 0 3)) < 1 #f)\n    ((string-length\
    \ (string-ref date 0 3)) > 2 #f)\n    ((string-length (string-ref date 2 3)) <\
    \ 1 #f)\n    ((string-length (string-ref date 2 3)) > 2 #f)\n    ((string->integer\
    \ (string-ref date 0 2)) < (string->integer \"01\") #f)\n    ((string->integer\
    \ (string-ref date 0 2)) > (string->integer \"12\") #f)\n    ((string->integer\
    \ (string-ref date 2 2)) < (string->integer \"01\") #f)\n    ((string->integer\
    \ (string-ref date 2 2)) > (string->integer \"12\") #f)\n    ((string->integer\
    \ (string-ref date 0 3)) < (string->integer \"01\") #f)\n    ((string->integer\
    \ (string-ref date 0 3)) > (string->integer \"12\") #f)\n    ((string->integer\
    \ (string-ref date 2 3)) < (string->integer \"01\") #f)\n    ((string->integer\
    \ (string-ref date 2 3)) > (string->integer \"12\") #f)\n    ((string->integer\
    \ (string-ref date 0 4)) < (string->integer \"01\") #f)\n    ((string->integer\
    \ (string-ref date 0 4)) > (string->integer \"12\") #f)\n    ((string->integer\
    \ (string-ref date 2 4)) < (string->integer \"01\") #f)\n    ((string->integer\
    \ (string-ref date 2 4)) > (string->integer \"12\") #f)\n    ((string->integer\
    \ (string-ref date 0 5)) < (string->integer \"01\") #f)\n    ((string->integer\
    \ (string-ref date 0 5)) > (string->integer \"12\") #f)\n    ((string->integer\
    \ (string-ref date 2 5)) < (string->integer \"01\") #f)\n    ((string->integer\
    \ (string-ref date 2 5)) > (string->integer \"12\") #f)\n    ((string->integer\
    \ (string-ref date 0 6)) < (string->integer \"01\") #f)\n    ((string->integer\
    \ (string-ref date 0 6)) > (string->integer \"12\") #f)", "  (cond\n    [(string?\
    \ date) #t]\n    [(< (string-length date) 1) #f]\n    [(< (string-length date)\
    \ 3) #f]\n    [(< (string-length date) 5) #f]\n    [(< (string-length date) 7)\
    \ #f]\n    [(< (string-length date) 9) #f]\n    [(< (string-length date) 11) #f]\n\
    \    [(< (string-length date) 13) #f]\n    [(< (string-length date) 15) #f]\n\
    \    [(< (string-length date) 17) #f]\n    [(< (string-length date) 19) #f]\n\
    \    [(< (string-length date) 21) #f]\n    [(< (string-length date) 23) #f]\n\
    \    [(< (string-length date) 25) #f]\n    [(< (string-length date) 27) #f]\n\
    \    [(< (string-length date) 29) #f]\n    [(< (string-length date) 31) #f]\n\
    \    [(< (string-length date) 33) #f]\n    [(< (string-length date) 35) #f]\n\
    \    [(< (string-length date) 37) #f]\n    [(< (string-length date) 39) #f]\n\
    \    [(< (string-length date) 41) #f]\n    [(< (string-length date) 43) #f]\n\
    \    [(< (string-length date) 45) #f]\n    [(< (string-length date) 47) #f]\n\
    \    [(< (string-length date) 49) #f]\n    [(< (string-length date) 51) #f]\n\
    \    [(< (string-length date) 53) #f]\n    [(< (string-length date) 55) #f]\n\
    \    [(< (string-length date) 57) #f]\n    [(< (string-length date) 59) #f]\n\
    \    [(< (string-length date) 61) #f]\n    [(< (string-length date) 63) #f]\n\
    \    [(< (string-length date) 65) #f]\n    [(< (string-length date) 67) #f]\n\
    \    [(< (string-length date) 69) #f]\n    [(< (string-length date) 71) #f]\n\
    \    [(< (string-length date) 73) #f]\n    [(< (string-length date) 75) #f]\n\
    \    [(< (string-length date) 77) #f]\n    [(< (string-length date) 79) #f]\n\
    \    [(< (string-length date) 81) #f]\n    [(< (", "  (cond\n    [(empty? date)\
    \ #f]\n    [(< 1 (string->number (car (string->list date))))\n     (#f \"Number\
    \ of days should be 1 through 31\")\n     (cond [(< 1 (string->number (car (string->list\
    \ (cdr (string->list date)))))\n          (#f \"Number of days should be 1 through\
    \ 30\")\n          (cond [(< 1 (string->number (car (string->list (cdr (string->list\
    \ (cdr (string->list date)))))))\n               (#f \"Number of days should be\
    \ 1 through 29\")\n               (cond [(< 1 (string->number (car (string->list\
    \ (cdr (string->list (cdr (string->list date)))))))\n                     (#f\
    \ \"Number of days should be 1 through 28\")\n                     (#f \"Number\
    \ of days should be less than or equal to 28\")]\n                    [else (#f\
    \ \"Number of days should be less than or equal to 29\")]\n               )]\n\
    \    [(< 1 (string->number (car (string->list (cdr (string->list (cdr (string->list\
    \ date)))))))\n     (#f \"Number of days should be 1 through 30\")\n     (cond\
    \ [(< 1 (string->number (car (string->list (cdr (string->list (cdr (string->list\
    \ (cdr (string->list date)))))))\n          (#f \"Number of days should be 1 through\
    \ 29\")\n          (#f \"Number of days should be less than or equal to 29\")]\n\
    \                    [else (#f \"Number of days should be less than or equal to\
    \ 30\")]\n               )]\n    [(< 1 (string->number (car (string->list (cdr\
    \ (string->list (cdr (string->list (cdr (string->list date))))))))\n     (#f \"\
    Number of days should be 1 through 31\")\n     (cond [(< 1 (string->number (car\
    \ (string->list (cdr (string->list (cdr (string->list (cdr (string->list (cdr\
    \ (string->list date))))))))\n          (#f \"Number of days should be 1 through\
    \ 30\")\n          (#f \"Number of days should be less than or equal to 30\")]\n\
    \                    [else (#f \"Number of days should be less than or equal to\
    \ 31\")]\n               )]\n    [(< 1 (string->number (car (string->list (cdr\
    \ (string->list (cdr (string->list (cdr (string->list (cdr (string->list date)))))))))))\n\
    \     (#f \"Number of days should be 1 through 30\")\n     (cond [(< 1 (string->number\
    \ (car (", "  (cond\n    ((not (or (char=? date #\\Space) (char=? date #\\Newline)))\
    \ #f)\n    ((or (char=? date #\\m) (char=? date #\\M)) #f)\n    ((or (char=? date\
    \ #\\d) (char=? date #\\D)) #f)\n    ((or (char=? date #\\Y) (char=? date #\\\
    y)) #f)\n    ((or (char=? date #\\h) (char=? date #\\H)) #f)\n    ((or (char=?\
    \ date #\\m) (char=? date #\\M)) #f)\n    ((or (char=? date #\\s) (char=? date\
    \ #\\S)) #f)\n    ((or (char=? date #\\a) (char=? date #\\A)) #f)\n    ((or (char=?\
    \ date #\\a) (char=? date #\\a)) #t)\n    ((or (char=? date #\\D) (char=? date\
    \ #\\d)) #t)\n    ((or (char=? date #\\m) (char=? date #\\m)) #t)\n    ((or (char=?\
    \ date #\\y) (char=? date #\\Y)) #t)\n    ((or (char=? date #\\h) (char=? date\
    \ #\\h)) #t)\n    ((or (char=? date #\\Y) (char=? date #\\y)) #t)\n    ((or (char=?\
    \ date #\\W) (char=? date #\\w)) #t)\n    ((or (char=? date #\\W) (char=? date\
    \ #\\w)) #t)\n    ((or (char=? date #\\Z) (char=? date #\\z)) #t)\n    ((or (char=?\
    \ date #\\z) (char=? date #\\Z)) #t)\n    ((or (char=? date #\\z) (char=? date\
    \ #\\z)) #t)\n    ((or (char=? date #\\W) (char=? date #\\W)) #t)\n    ((or (char=?\
    \ date #\\w) (char=? date #\\W)) #t)\n    ((or (char=? date #\\W) (char=? date\
    \ #\\W)) #t)\n    ((or (char=? date #\\Z) (char=? date #\\Z)) #t)\n    ((or (char=?\
    \ date #\\z) (char=? date #\\z)) #t)\n    ((or (char=? date #\\Z) ", "  (cond\n\
    \    [(not (empty? date)) #t]\n    [(< (count date) 3) #f]\n    [(< (count date)\
    \ 31) (if (and (integer? (substring date 0 2))) (and (integer? (substring date\
    \ 1 2))) (and (integer? (substring date 2 2))) #f)]\n    [(< (count date) 30)\
    \ (if (and (integer? (substring date 0 2))) (and (integer? (substring date 1 2)))\
    \ (and (integer? (substring date 2 2))) (and (integer? (substring date 3 2)))\
    \ #f)]\n    [(< (count date) 29) (if (and (integer? (substring date 0 2))) (and\
    \ (integer? (substring date 1 2))) (and (integer? (substring date 2 2))) (and\
    \ (integer? (substring date 3 2))) (and (integer? (substring date 4 2))) (and\
    \ (integer? (substring date 5 2))) (and (integer? (substring date 6 2))) (and\
    \ (integer? (substring date 7 2))) #f)]\n    [(< (count date) 28) (if (and (integer?\
    \ (substring date 0 2))) (and (integer? (substring date 1 2))) (and (integer?\
    \ (substring date 2 2))) (and (integer? (substring date 3 2))) (and (integer?\
    \ (substring date 4 2))) (and (integer? (substring date 5 2))) (and (integer?\
    \ (substring date 6 2))) (and (integer? (substring date 7 2))) (and (integer?\
    \ (substring date 8 2))) (and (integer? (substring date 9 2))) (and (integer?\
    \ (substring date 10 2))) (and (integer? (substring date 11 2))) (and (integer?\
    \ (substring date 12 2))) #f)]\n    [else #f]\n  ))\n", "  (cond\n    [(empty?\
    \ date) #f]\n    [(< 1 (count date)) #f]\n    [(< 31 (count date '(1 3 5 7 8 10\
    \ 12)))\n     (< (count date '(4 6 9 11)) (count date '(1 3 5 7 8 10 12)))]\n\
    \    [(< 30 (count date '(4 6 9 11)))\n     (< (count date '(2 4 6 8))  (count\
    \ date '(1 3 5 7 8 10 12)))]\n    [(< 29 (count date '(2 4 6 8)))\n     (< (count\
    \ date '(1 2 4))  (count date '(1 3 5 7 8 10 12)))]\n    [else #t]\n  ))\n", " \
    \ (let loop ((date date)\n             (days_month #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f\
    \ #f #f #f #f #f #f #f ", "  (and (not (empty? date))\n       (not (< 1 day date))\n\
    \       (not (< 31 day (month-days date 1))\n           (month date) ; \"4\" and\
    \ \"6\"\n           (< 31 day (month-days date 4))\n           (< 30 day (month-days\
    \ date 6))\n           (< 29 day (month-days date 2))\n           (< 31 day (month-days\
    \ date 12))))\n</code>\n<|/ a tags=racket,functional-programming dscore=1 |>\n\
    <| a dscore=1 |>\nHere is an implementation of a date parsing function that should\
    \ help you get started. It is based on a rather simple pattern matching scheme.\
    \ The function expects a string and returns #t if the input matches the pattern\
    \ and #f otherwise.\n<code>\n#lang racket\n", "  (cond\n    [(empty? date) #f]\n\
    \    [(< (days-of-month (date)) 31) #f]\n    [(> (days-of-month (date)) 31) #f]\n\
    \    [(< (days-of-month (date)) 30) #f]\n    [(> (days-of-month (date)) 30) #f]\n\
    \    [(< (months-of-year (date)) 12) #f]\n    [(> (months-of-year (date)) 12)\
    \ #f]\n    [(< (months-of-year (date)) 11) #f]\n    [(> (months-of-year (date))\
    \ 11) #f]\n    [(< (months-of-year (date)) 10) #f]\n    [(> (months-of-year (date))\
    \ 10) #f]\n    [(< (months-of-year (date)) 9) #f]\n    [(> (months-of-year (date))\
    \ 9) #f]\n    [(< (months-of-year (date)) 8) #f]\n    [(> (months-of-year (date))\
    \ 8) #f]\n    [(< (months-of-year (date)) 7) #f]\n    [(> (months-of-year (date))\
    \ 7) #f]\n    [(< (months-of-year (date)) 6) #f]\n    [(> (months-of-year (date))\
    \ 6) #f]\n    [(< (months-of-year (date)) 5) #f]\n    [(> (months-of-year (date))\
    \ 5) #f]\n    [(< (months-of-year (date)) 4) #f]\n    [(> (months-of-year (date))\
    \ 4) #f]\n    [(< (months-of-year (date)) 3) #f]\n    [(> (months-of-year (date))\
    \ 3) #f]\n    [(< (months-of-year (date)) 2) #f]\n    [(> (months-of-year (date))\
    \ 2) #f]\n    [(< (months-of-year (date)) 1) #f]\n    [(> (months-of-year (date))\
    \ 1) #f]\n    [(< (months-of-year (date)) 0) #f]\n    [(> (months-of-year (date))\
    \ 0) #t]\n    [else #f]))\n", "  (cond\n    ((not (empty? date)) (not (< 1 (string->number\
    \ (car date)))) (not (< 1 (string->number (cdr date))))\n    ((not (< 1 (string->number\
    \ (car date)))) (not (< 1 (string->number (cdr date))))\n    ((not (< 1 (string->number\
    \ (car date))))\n      (not (< 1 (string->number (cdr date))))\n    ((not (< 1\
    \ (string->number (car date))))\n      (not (< 1 (string->number (cdr date))))\n\
    \    (else\n      (not (< 1 (string->number (car date)))) (not (< 1 (string->number\
    \ (cdr date))))\n    (not (< 1 (string->number (car date)))) (not (< 1 (string->number\
    \ (cdr date))))\n    (else\n      (not (< 1 (string->number (car date))))\n  \
    \    (not (< 1 (string->number (cdr date))))\n    (not (< 1 (string->number (car\
    \ date)))) (not (< 1 (string->number (cdr date))))\n    (else\n      (not (< 1\
    \ (string->number (car date))))\n      (not (< 1 (string->number (cdr date))))\n\
    \    (not (< 1 (string->number (car date)))) (not (< 1 (string->number (cdr date))))\n\
    \    (else\n      (not (< 1 (string->number (car date))))\n      (not (< 1 (string->number\
    \ (cdr date))))\n    (not (< 1 (string->number (car date)))) (not (< 1 (string->number\
    \ (cdr date))))\n    (else\n      (not (< 1 (string->number (car date))))\n  \
    \    (not (< 1 (string->number (cdr date))))\n    (not (< 1 (string->number (car\
    \ date)))) (not (< 1 (string->number (cdr date))))\n    (else\n      (not (< 1\
    \ (string->number (car date))))\n      (not (< 1 (string->number (cdr date))))\n\
    \    (not (< 1 (string->number (car date)))) (not (< 1 (string->number (cdr date))))\n\
    \    (else\n      (not (< 1 (string->number (car date))))\n      (not (< 1 (string->number\
    \ (cdr date))))\n    (not (< 1 (string->number (car date)))) (not (< 1 (string->number\
    \ (cdr date))))\n    (else\n      (not (< 1 (string->number (car date))))\n  \
    \    (not (< 1 (string->number (", "  (let ([months (string->list (date->string\
    \ (date->number (date))))\n\tdays (string->list (date->string (date->number (date))))])\n\
    \    (and (not (string=? \"\" date))\n\t(< 1 (length months))\n\t(< 1 (length\
    \ days))\n\t(< 1 (length months))\n\t(< 1 (length days))\n\t(< (first months)\
    \ (last months))\n\t(< (first days) (last days))\n\t(< (third months) (fourth\
    \ months))\n\t(< (third days) (fourth days))\n\t(< (third months) (last months))\n\
    \t(< (third days) (last days)))))\n", "  (and (not (null? (string-to-int (string-split\n\
    \                                     (string-trim date)\n                   \
    \                  #\\/)\n                                     '()\n         \
    \                            (char->integer (char-ref (first date) 3))))\n   \
    \      (not (< (length (first date)) 2)\n              (or (> (length (first date))\
    \ 4)\n                  (> (length (first date)) 5)))\n       (not (< (length\
    \ (first date)) 4) (length (first date)) 6)\n       (not (< (length (first date))\
    \ 5) (length (first date)) 7)\n       (not (< (length (first date)) 6) (length\
    \ (first date)) 9)\n       (not (< (length (first date)) 7) (length (first date))\
    \ 11)\n       (not (< (length (first date)) 8) (length (first date)) 12)\n   \
    \    (not (< (length (first date)) 9) (length (first date)) 13)\n       (not (<\
    \ (length (first date)) 11) (length (first date)) 14))))\n", "  ;; Your code here\n\
    \  (and (null? (length date))\n       (not (< 1 (length date)))\n       (not (<\
    \ 31 (length date)))\n       (not (< 30 (length date)))\n       (not (< 29 (length\
    \ date))))\n  (and (< 1 (length date))\n       (< 4 (length date))\n       (<\
    \ 6 (length date)))\n  (and (< 1 (length date))\n       (< 2 (length date)))\n\
    \  (and (< 1 (length date))\n       (< 3 (length date)))\n  (and (< 1 (length\
    \ date))\n       (< 5 (length date)))\n  (and (< 1 (length date))\n       (< 7\
    \ (length date)))\n  (and (< 1 (length date))\n       (< 8 (length date)))\n \
    \ (and (< 1 (length date))\n       (< 10 (length date)))\n  (and (< 1 (length\
    \ date))\n       (< 12 (length date))))", "  (cond\n    [(empty? date) #t]\n \
    \   [(< (length (substring date 0 2)) 2)\n    #f]\n    [(< (length (substring\
    \ date 0 2)) 4)\n    #f]\n    [(< (length (substring date 0 2)) 6)\n    #f]\n\
    \    [(< (length (substring date 0 2)) 9)\n    #f]\n    [(< (length (substring\
    \ date 0 2)) 10)\n    #f]\n    [(< (length (substring date 0 2)) 11)\n    #f]\n\
    \    [(< (length (substring date 0 2)) 12)\n    #t]\n    [(< (length (substring\
    \ date 0 2)) 2)\n    #f]\n    [(< (length (substring date 0 2)) 3)\n    #t]\n\
    \    [(< (length (substring date 0 2)) 5)\n    #t]\n    [(< (length (substring\
    \ date 0 2)) 7)\n    #t]\n    [(< (length (substring date 0 2)) 8)\n    #t]\n\
    \    [(< (length (substring date 0 2)) 10)\n    #t]\n    [(< (length (substring\
    \ date 0 2)) 12)\n    #t]\n    [(< (length (substring date 0 2)) 4)\n    #t]\n\
    \    [(< (length (substring date 0 2)) 6)\n    #t]\n    [(< (length (substring\
    \ date 0 2)) 9)\n    #t]\n    [(< (length (substring date 0 2)) 11)\n    #t]\n\
    \    [(< (length (substring date 0 2)) 12)\n    #t]\n    [else #t]\n    )\n  )\n",
  "  (< (length date) 4)\n  (< (length date) 6)\n  (let ([month-length (length months)]\n\
    \        [day-length (length days)]\n        [month-array (make-array month-length)]\n\
    \        [day-array (make-array day-length)]\n        [months (split date \"-\"\
    )]\n        [days (split date \"-\")])\n    (do ((i 0 (+ i 1))\n         (month\
    \ 0 (+ month 1))\n         (day 0 (+ day 1)))\n        ((> i month-length)\n \
    \        (and (>= month 0)\n               (<= month 12))\n         (and (> month\
    \ 1)\n               (< month 12)))\n        (do ((j 0 (+ j 1)))\n           \
    \ ((> j day-length)\n             (and (>= day 0)\n                  (<= day 31))\n\
    \             (and (> day 1)\n                  (< day 30))\n             (and\
    \ (> day 1)\n                  (< day 29)))\n          (do ((k 0 (+ k 1)))\n \
    \             ((> k month-length)\n               (and (>= month 0)\n        \
    \           (<= month 12))\n               (and (> month 4)\n                \
    \     (< month 12)))\n            (do ((l 0 (+ l 1)))\n                ((> l day-length)\n\
    \                 (and (>= day 0)\n                      (<= day 31))\n      \
    \           (and (> day 1)\n                      (< day 30))\n              \
    \   (and (> day 1)\n                      (< day 29)))\n              (cond (months\
    \ (string->int month)) (days (string->int day)) #f)))))\n", "  (match date\n \
    \   ([\"\"] (#t (list '#f '#t '#t))) ; 1\n    ([s@(\"-\")](string->list (string->symbol\
    \ (string->list s)))) ; 2\n    ([s@(\".\")](number->list (string->number (string->list\
    \ s)))) ; 3\n    ([s@(\"/\")](string->list (string->symbol (string->list s))))\
    \ ; 4\n    ([s@(\".\")](list->list (string->list (string->list s)))) ; 5\n   \
    \ ([s@(\".\")](#t (list '#f '#t '#f))) ; 6\n    (#t (list '#t '#t '#f))) ; 7\n\
    )\n", "  (if (string? date)\n      (if (and (number? (string->number date))\n\
    \               (not (< 1 (string->number date))\n                    (string->number\
    \ date) \n                    (not (< 1 (string->number date))))\n           \
    \    (not (< 1 (string->number date))\n                    (string->number date)\n\
    \                    (not (< 1 (string->number date))))\n               (not (<\
    \ 1 (string->number date))\n                    (string->number date))))\n   \
    \   #f))\n", "  (let ([month (parse-integer date #:default-base 10)]\n       \
    \ [day (parse-integer date #:default-base 10)]\n        [year (parse-integer date\
    \ #:default-base 10)]\n        [day (check-validity-date month day year)])\n \
    \   (and (not (= month 0))\n         (not (= day 0))\n         (not (= year 0))\n\
    \         (not (= month 12))\n         (not (= day 29))\n         (not (= month\
    \ (+ 1 month)))\n         (not (= year (+ 1 year)))\n         (not (= day 31))\n\
    \         (not (= day 30))\n         (not (= month (+ 1 month)))\n         (not\
    \ (= day (+ 1 day)))\n         (not (= day (+ 1 day))))))\n", "  (let ((months-in-the-year\
    \ '(1 3 5 7 8 10 12))\n        (months-in-the-year-months '(4 6 9 11))\n     \
    \   (months-in-the-year-days '(29 28 31 30 31 30 31 30 31))\n        (months-in-the-year-first-day\
    \ '(1 3 5 7 8 10 12 14 16 17 19 21 24 26 28 31 31 30 31 30 31 31 30 31 30 31))\n\
    \        (months-in-the-year-first-day-month '(4 6 9 11))\n        (months-in-the-year-first-day-month-days\
    \ '(29 28 31 30 31 30 31 30 31))\n        (months-in-the-year-first-day-month-days-not-less\
    \ '(1 3 5 7 8 10 12)))\n    (cond\n      [(empty? date) #t]\n      [(< (length\
    \ date) 7) #f]\n      [(< 1 (nth (substring (date 0 2) 1 3) months-in-the-year))\
    \ #f]\n      [(< 1 (nth (substring (date 0 2) 4 6) months-in-the-year)) #f]\n\
    \      [(< 1 (nth (substring (date 0 2) 8 10) months-in-the-year)) #f]\n     \
    \ [(< 1 (nth (substring (date 0 2) 12 14) months-in-the-year)) #f]\n      [(<\
    \ 1 (nth (substring (date 0 2) 16 18) months-in-the-year)) #f]\n      [(< 1 (nth\
    \ (substring (date 0 2) 20 22) months-in-the-year)) #f]\n      [(< 1 (nth (substring\
    \ (date 0 2) 24 26) months-in-the-year)) #f]\n      [(< 1 (nth (substring (date\
    \ 0 2) 28 30) months-in-the-year)) #f]\n      [(< 1 (length (nth (substring (date\
    \ 0 2) 3 6) months-in-the-year-months)) #f]\n      [(< 1 (length (nth (substring\
    \ (date 0 2) 7 9) months-in-the-year-months)) #f]\n      [(< 1 (length (nth (substring\
    \ (date 0 2) 11 13) months-in-the-year-months)) #f]\n      [(< 1 (length (nth\
    \ (substring (date 0 2) 15 17) months-in-the-year-months)) #f]\n      [(< 1 (length\
    \ (nth (substring (date 0 2) 19 21) months-in-the-year-months)) #f]\n      [(<\
    \ 1 (", "  ;; If the date string is empty, we return #f.\n  (cond [(empty? date)\
    \ #f]\n        [(< (length (string-split (string date) \"-\")) 3) #f]\n      \
    \  [(< (length (string-split (string date) \"-\")) 3) #f]\n        [(< (length\
    \ (string-split (string date) \"-\")) 3) #f]\n        [(< (length (string-split\
    \ (string date) \"-\")) 3) #f]\n        [(< (length (string-split (string date)\
    \ \"-\")) 3) #f]\n        [(< (length (string-split (string date) \"-\")) 3) #f]\n\
    \        [(< (length (string-split (string date) \"-\")) 3) #f]\n        [(< (length\
    \ (string-split (string date) \"-\")) 3) #f]\n        [(< (length (string-split\
    \ (string date) \"-\")) 3) #f]\n        [(< (length (string-split (string date)\
    \ \"-\")) 3) #f]\n        [(< (length (string-split (string date) \"-\")) 3) #f]\n\
    \        [(< (length (string-split (string date) \"-\")) 3) #f]\n        [(< (length\
    \ (string-split (string date) \"-\")) 3) #f]\n        [(< (length (string-split\
    \ (string date) \"-\")) 3) #f]\n        [(< (length (string-split (string date)\
    \ \"-\")) 3) #f]\n        [(< (length (string-split (string date) \"-\")) 3) #f]\n\
    \        [(< (length (string-split (string date) \"-\")) 3) #f]\n        [(< (length\
    \ (string-split (string date) \"-\")) 3) #f]\n        [(< (length (string-split\
    \ (string date) \"-\")) 3) #f]\n        [(< (length (string-split (string date)\
    \ \"-\")) 3) #f]\n        [(< (length (string-split (string date) \"-\")) 3) #f]\n\
    \        [(< (length (string-split (string date) \"-\")) 3) #f]\n        [(< (length\
    \ (string-split (string date) \"-\")) 3) #f]\n        [(< (length (string-split\
    \ (string date) \"-\")) 3) #f]\n        [(< (length (string-split (string date)\
    \ \"-\")) 3) #f]\n        [(< (length (string-split (string date) \"-\")) 3) #f]\n\
    \        [(< (length (string-split (string date) \"-\")) 3) #f]\n        [(< (length\
    \ (string-split (string date) \"-\")) 3) #f]\n        [(< (length (string-split\
    \ (string date) \"-\")) ", "  (cond\n    [(empty? date) #t]\n    [(months (read-string\
    \ date)) (<= 0 12)]\n    [(days (read-string date)) (<= 0 30)]\n    [(months (read-string\
    \ date)) (<= 0 12)]\n    [(days (read-string date)) (<= 0 29)]\n    [(months (read-string\
    \ date)) (<= 0 12)]\n    [(days (read-string date)) (<= 0 30)]\n    [(months (read-string\
    \ date)) (<= 0 12)]\n    [(days (read-string date)) (<= 0 31)]\n    [else #f]\n\
    \    )\n)\n", "  (cond\n    [(string? date) \n     (let ([splits (string-split\
    \ date \"-\")]\n           (year (caar splits))\n           (month (car splits))\n\
    \           (day (cadar splits)))\n       (cond [(> month 12) (error \"Invalid\
    \ month.\")]\n             [(< month) (error \"Invalid month.\")]\n          \
    \   [(< day) (error \"Invalid day.\")]\n             [year (= (number->string\
    \ year) \"0000\") (= (number->string month) \"00\") (= (number->string day) \"\
    00\")]))]\n    [else false]))\n", "  (cond [(empty? date) #f]\n        [(< 1 (length\
    \ date)) #f]\n        [(> (length date) 5) #f]\n        [(< (length date) 7) #f]\n\
    \        [(< (length date) 11) #f]\n        [(< (length date) 13) #f]\n      \
    \  [(< (length date) 16) #f]\n        [(< (length date) 19) #f]\n        [(< (length\
    \ date) 22) #f]\n        [(< (length date) 0) #f]\n        [(< (length date) 3)\
    \ #f]\n        [(> (length date) 2) #f]\n        [(< 3 (substring date 0 (index\
    \ (substring date 0 3) \"-\" (substring date 3 6)))) #f]\n        [(< 1 (substring\
    \ date 0 (index (substring date 0 3) \"-\" (substring date 3 6)))) #f]\n     \
    \   [(< 1 (substring date 0 (index (substring date 0 3) \"-\" (substring date\
    \ 3 5)))) #f]\n        [(< 1 (substring date 0 (index (substring date 0 3) \"\
    -\" (substring date 3 4)))) #f]\n        [(< 1 (substring date 0 (index (substring\
    \ date 0 3) \"-\" (substring date 3 3)))) #f]\n        [(< 1 (substring date 0\
    \ (index (substring date 0 3) \"-\" (substring date 3 2)))) #f]\n        [(< 1\
    \ (substring date 0 (index (substring date 0 3) \"-\" (substring date 3 1))))\
    \ #f]\n        [(< 1 (substring date 0 (index (substring date 0 3) \"-\" (substring\
    \ date 3 0)))) #f]\n        [(< 1 (substring date 0 (index (substring date 0 3)\
    \ \"-\" (substring date 3 -1)))) #f]\n        [(< 1 (substring date 0 (index (substring\
    \ date 0 3) \"-\" (substring date 3 -2)))) #f]\n        [(< 1 (substring date\
    \ 0 (index (substring date 0 3) \"-\" (substring date 3 -3)))) #f]\n        [(<\
    \ 1 (substring date 0 (index (substring date 0 3) \"-\" (substring date 3 -4))))\
    \ #f]\n        [(< 1 (substring date 0 (index (substring date 0 3) \"-\" (substring\
    \ date 3 -5)))) #f]\n        [(< 1 (substring date 0 (index (substring date 0\
    \ 3) \"-\" (substring date 3 -6)))) #", "  (cond ((empty? date) #f)\n        ((<\
    \ (length (split date \"-\")) 3) #f)\n        ((< (length (split date \"-\"))\
    \ 4) #f)\n        ((< (length (split date \"-\")) 5) #f)\n        ((> (length\
    \ (split date \"-\")) 5) #f)\n        ((< (length date) 7) #f)\n        ((< (length\
    \ date) 8) #f)\n        ((< (length date) 9) #f)\n        ((< (length date) 10)\
    \ #f)\n        ((< (length date) 11) #f)\n        ((< (length date) 12) #f)\n\
    \        ((< (length (split date \"/\")) 2) #f)\n        ((> (length (split date\
    \ \"/\")) 2) #f)\n        ((< (length (split date \"/\")) 3) #f)\n        ((>\
    \ (length (split date \"/\")) 3) #f)\n        ((< (length (split date \"/\"))\
    \ 4) #f)\n        ((> (length (split date \"/\")) 4) #f)\n        ((< (length\
    \ (split date \"/\")) 5) #f)\n        ((> (length (split date \"/\")) 5) #f)\n\
    \        ((= (length (split date \"/\")) 3) (< 10 (length (split date \"/\")))\
    \ #f)\n        (else\n         (begin\n          (let ((mm-dd-yyyy (split date\
    \ \"-\")))\n            (cond ((= length (split mm-dd-yyyy \"-\")) #f)\n     \
    \             ((= (length (split mm-dd-yyyy \"-\")) 2) (< 10 (length (split mm-dd-yyyy\
    \ \"-\"))) #f)\n                  ((= (length (split mm-dd-yyyy \"-\")) 3) (<\
    \ 10 (length (split mm-dd-yyyy \"-\"))) #f)\n                  ((= (length (split\
    \ mm-dd-yyyy \"-\")) 4) (< 10 (length (split mm-dd-yyyy \"-\"))) #f)\n       \
    \           ((= (length (split mm-dd-yyyy \"-\")) 5) (< 10 (length (split mm-dd-yyyy\
    \ \"-\"))) #f)\n                  ((= (length (split mm-dd-yyyy \"-\")) 6) (<\
    \ 10 (length (split mm-dd-yyyy \"-\"))) #f)\n                  ((= (length (split\
    \ mm-dd-yyyy \"-\")) 7) (< 10 (length (split mm-dd-yyyy \"-\"))) #f)\n       \
    \           ((= (length", "  (if (empty? date)\n      false\n      (> (days-in-month\
    \ date)\n          31\n          (months-in-year date)\n          31)\n      (>\
    \ (days-in-month date)\n          30\n          (months-in-year date)\n      \
    \    30)\n      (> (days-in-month date)\n          29\n          (months-in-year\
    \ date)\n          12)\n      (or (string=? (first date) 'mm-dd-yyyy)\n      \
    \    (string=? (first date) 'mm-dd-yy)\n          (string=? (first date) 'mm-dd-yyyyy)))",
  "  (and (not (empty? date))\n       (< (string->number (first date)) 1)\n      \
    \ (< (string->number (second date)) 31)\n       (< (string->number (third date))\
    \ 30)\n       (< (string->number (fourth date)) 29)\n       (< (string->number\
    \ (fifth date)) 12)\n       (and (>= (string->number (first date)) 1)\n      \
    \      (>= (string->number (second date)) 3)\n            (>= (string->number\
    \ (third date)) 5)\n            (>= (string->number (fourth date)) 7)\n      \
    \      (>= (string->number (fifth date)) 8)\n            (>= (string->number (sixth\
    \ date)) 10)\n            (>= (string->number (seventh date)) 11)\n          \
    \  (>= (string->number (eighth date)) 12)\n            (and (>= (string->number\
    \ (first date)) 4)\n                  (>= (string->number (second date)) 6)\n\
    \                  (>= (string->number (third date)) 9)\n                  (>=\
    \ (string->number (fourth date)) 11)\n                  (>= (string->number (fifth\
    \ date)) 12))))\n</code>\n<|/ a dscore=2 |>\n<| a |>\nHere is a simple solution\
    \ that is easily generalized to handle any language not just Racket (R7RS and\
    \ R6RS).\n<code>", "  (= (length date) 11)\n  (or (= (substring date 1 2) \"-\"\
    )\n      (= (substring date 3 2) \"/\")\n      (= (substring date 5 2) \"-\"))\n\
    \  (if (<= (substring date 6 2) \"-\")\n      (= (substring date 7 2) \"-\")\n\
    \      (= (substring date 8 2) \"/\")\n      (= (substring date 9 2) \"-\")\n\
    \      (= (substring date 10 2) \"-\")\n      (= (substring date 11 2) \"-\"))\n\
    \  (let ((month (substring date 6 2)))\n    (<= (and (< month 12) (not (= month\
    \ 1 3))) (= month 1 3))\n    (and (< month 12) (not (= month 4 6))) (= month 4\
    \ 6)\n    (and (< month 12) (not (= month 6 9))) (= month 6 9)\n    (and (< month\
    \ 12) (not (= month 2 4))) (= month 2 4)\n    #t))\n", "  (and (not (null? date))\n\
    \       (> (length date) 9)\n       (<= (length date) 12)\n       (or (month?\
    \ date) (day? date))\n       (= (string-char (substring date 0 2)) (substring\
    \ date 0 2 'lower-case))\n       (= (string-char (substring date 3 4)) (substring\
    \ date 3 4 'lower-case))\n       (= (string-char (substring date 6 4)) (substring\
    \ date 6 4 'lower-case))\n       (= (string-char (substring date 8 2)) (substring\
    \ date 8 'lower-case))\n       (= (string-char (substring date 10 4)) (substring\
    \ date 10 'lower-case))\n       (= (string-char (substring date 12 2)) (substring\
    \ date 12 'lower-case))))\n", "  (cond ((null? date) #f)\n        ((string-empty?\
    \ date) #f)\n        ((< 1 (string-length date))\n         (string-length date))\n\
    \        ((< 1 (substring (date 0 2) \"-\")\n         (substring (date 0 2) \"\
    -\"))\n         ((< 1 (substring (date 0 2) \"/\")\n           (substring (date\
    \ 0 2) \"/\"))\n         ((< 1 (substring (date 1 2) \"-\")\n           (substring\
    \ (date 1 2) \"-\"))\n         ((< 1 (substring (date 1 2) \"/\")\n          \
    \ (substring (date 1 2) \"/\"))\n         ((< 1 (substring (date 3 2) \"-\")\n\
    \           (substring (date 3 2) \"-\"))\n         ((< 1 (substring (date 3 2)\
    \ \"/\")\n           (substring (date 3 2) \"/\"))\n         ((< 1 (substring\
    \ (date 5 2) \"-\")\n           (substring (date 5 2) \"-\"))\n         ((< 1\
    \ (substring (date 5 2) \"/\")\n           (substring (date 5 2) \"/\"))\n   \
    \      ((< 1 (substring (date 7 2) \"-\")\n           (substring (date 7 2) \"\
    -\"))\n         ((< 1 (substring (date 7 2) \"/\")\n           (substring (date\
    \ 7 2) \"/\"))\n         ((< 1 (substring (date 8 2) \"-\")\n           (substring\
    \ (date 8 2) \"-\"))\n         ((< 1 (substring (date 8 2) \"/\")\n          \
    \ (substring (date 8 2) \"/\"))\n         ((< 1 (substring (date 10 2) \"-\")\n\
    \           (substring (date 10 2) \"-\"))\n         ((< 1 (substring (date 10\
    \ 2) \"/\")\n           (substring (date 10 2) \"/\"))\n         ((< 1 (substring\
    \ (date 12 2) \"-\")\n           (substring (date 12 2) \"-\"))\n         ((<\
    \ 1 (substring (date 12 2) \"/\")\n           (substring (date 12 2) \"/\"))\n\
    \         ((< 1 (substring (date 1 2) \"-\")\n           (substring (date 1 2)\
    \ \"-\"))\n         ((< 1 (substring (date 1 2) \"/\")\n           (substring\
    \ (date 1 2) \"/\"))\n         ((< 1 (substring (date 3 2) \"-\")\n          \
    \ (substring (date 3 2) \"-\"))\n         ((< 1 (substring (date 3 2) \"/\")\n\
    \           (substring (date 3 2) \"/\"))\n         ((< 1 (substring (date 5 2)\
    \ \"-\")\n           (substring (date 5 2) \"-\"))\n         ((< 1 (substring\
    \ (date 5 2) \"/\")\n           (substring (date 5 2) \"/\"))\n         ((< 1\
    \ (sub", "  (if (string-empty? date)\n      #f\n      (let ([days (parse-integer\
    \ date 'days)]\n            [months (parse-integer date 'months)]\n          \
    \  [years (parse-integer date 'years)]\n            [months (cond ((< 1 months)\
    \ #f)\n                         ((< 4 months) #f)\n                         ((<\
    \ 12 months) #t)\n                         (else\n                          (let*\
    \ ([m (modulo months 12)]\n                                [d ((mod1 months 12)\
    \ (inc m))]\n                                [year (modulo years 4)])\n      \
    \                      (and (< 1 year) #f)\n                            (and (<\
    \ 4 year) #f)\n                            (and (< 12 year) #t)))))]))\n", " \
    \ (< (- (length date) 3) 1)\n  (< (- (length date) 6) 1)\n  (< (- (length date)\
    \ 5) 1)\n  (< (- (length date) 7) 1)\n  (< (- (length date) 8) 1)\n  (< (- (length\
    \ date) 9) 1)\n  (< (- (length date) 10) 1)\n  (< (- (length date) 11) 1)\n  (<\
    \ (- (length date) 12) 1)\n  (< (- (length date) 2) 1)\n  (< (- (length date)\
    \ 13) 1)\n  (< (- (length date) 14) 1)\n  (< (- (length date) 15) 1)\n  (< (-\
    \ (length date) 16) 1)\n  (< (- (length date) 17) 1)\n  (< (- (length date) 18)\
    \ 1)\n  (< (- (length date) 19) 1)\n  (< (- (length date) 20) 1)\n  (< (- (length\
    \ date) 21) 1)\n  (< (- (length date) 22) 1)\n  (< (- (length date) 23) 1)\n \
    \ (< (- (length date) 24) 1)\n  (< (- (length date) 25) 1)\n  (< (- (length date)\
    \ 26) 1)\n  (< (- (length date) 27) 1)\n  (< (- (length date) 28) 1)\n  (< (-\
    \ (length date) 29) 1)\n  (< (- (length date) 30) 1)\n  (< (- (length date) 31)\
    \ 1)\n  (< (- (length date) 32) 1)\n  (< (- (length date) 33) 1)\n  (< (- (length\
    \ date) 34) 1)\n  (< (- (length date) 35) 1)\n  (< (- (length date) 36) 1)\n \
    \ (< (- (length date) 37) 1)\n  (< (- (length date) 38) 1)\n  (< (- (length date)\
    \ 39) 1)\n  (< (- (length date) 40) 1)\n  (< (- (length date) 41) 1)\n  (< (-\
    \ (length date) 42) 1)\n  (< (- (length date) 43) 1)\n  (< (- (length date) 44)\
    \ 1)\n  (< (- (length date) 45) 1)\n  (< (- (length date) 46) 1)\n  (< (- (length\
    \ date) 47) 1)\n  (< (- (length date) 48) 1)\n  (< (- (length date) 49) 1)\n \
    \ (< (- (length date) 50) 1)\n  (< (- (length date) 51) 1)\n  (< (- (length date)\
    \ 52) 1)\n  (< (- (length date) 53) 1)\n  (< (- (length date) 54) 1)", "  ;; Write\
    \ your definition of the function here.\n)\n", "  (cond\n    [(empty? date) #f]\n\
    \    [(< 1 (count date))\n     (and (<= (count date) 31) (<= (month (subseq date\
    \ 0 2)) 1 3 5 7 8 10 12))]\n    [(< 1 (count date))\n     (and (<= (count date)\
    \ 30) (<= (month (subseq date 0 2)) 4 6 9 11))]\n    [(< 1 (count date))\n   \
    \  (and (<= (count date) 29) (<= (month (subseq date 0 2)) 2))]\n    [else #f]))\n",
  "  (cond\n    [(empty? date) #f]\n    [(> (length (substring date 0 2)) 2) #f]\n\
    \    [(> (length (substring date 0 1)) 1) #f]\n    [(> (length (substring date\
    \ 0 4)) 4) #f]\n    [(> (length (substring date 0 6)) 6) #f]\n    [(< (substring\
    \ date 0 2) \"01\") #f]\n    [(< (substring date 0 2) \"03\") #t]\n    [(< (substring\
    \ date 0 2) \"05\") #t]\n    [(< (substring date 0 2) \"07\") #t]\n    [(< (substring\
    \ date 0 2) \"08\") #t]\n    [(< (substring date 0 2) \"10\") #t]\n    [(< (substring\
    \ date 0 2) \"12\") #t]\n    [(< (substring date 0 1) \"01\") #t]\n    [(< (substring\
    \ date 0 1) \"02\") #t]\n    [(< (substring date 0 1) \"03\") #t]\n    [(< (substring\
    \ date 0 1) \"04\") #t]\n    [(< (substring date 0 1) \"05\") #t]\n    [(< (substring\
    \ date 0 1) \"06\") #t]\n    [(< (substring date 0 1) \"07\") #t]\n    [(< (substring\
    \ date 0 1) \"08\") #t]\n    [(< (substring date 0 1) \"09\") #t]\n    [(< (substring\
    \ date 0 1) \"10\") #t]\n    [(< (substring date 0 1) \"11\") #t]\n    [(< (substring\
    \ date 0 1) \"12\") #t]\n    [(< (substring date 0 3) \"01\") #t]\n    [(< (substring\
    \ date 0 3) \"02\") #t]\n    [(< (substring date 0 3) \"03\") #t]\n    [(< (substring\
    \ date 0 3) \"04\") #t]\n    [(< (substring date 0 3) \"05\") #t]\n    [(< (substring\
    \ date 0 3) \"06\") #t]\n    [(< (substring date 0 3) \"07\") #t]\n    [(< (substring\
    \ date 0 3) \"08\") #t]\n    [(< (substring date 0 3) \"09\") #t]\n    [(< (substring\
    \ date 0 3) \"10\") #t]\n    [(", "  (cond\n    [(empty? date) #t]\n    [(< (length\
    \ date) 4) #f]\n    [(< 1 (length date)) #f]\n    [(< 3 (length date)) #f]\n \
    \   [(< 5 (length date)) #f]\n    [(< 7 (length date)) #f]\n    [(< 8 (length\
    \ date)) #f]\n    [(< 10 (length date)) #f]\n    [(< 12 (length date)) #f]\n \
    \   [(< 13 (length date)) #f]\n    [(< 14 (length date)) #f]\n    [(< 15 (length\
    \ date)) #t]\n    [(< 16 (length date)) #t]\n    [(< 17 (length date)) #t]\n \
    \   [(< 18 (length date)) #t]\n    [(< 19 (length date)) #t]\n    [(< 20 (length\
    \ date)) #t]\n    [(< 21 (length date)) #t]\n    [(< 22 (length date)) #t]\n \
    \   [(< 23 (length date)) #t]\n    [(< 24 (length date)) #t]\n    [(< 25 (length\
    \ date)) #t]\n    [(< 26 (length date)) #t]\n    [(< 27 (length date)) #t]\n \
    \   [(< 28 (length date)) #t]\n    [(< 29 (length date)) #t]\n    [(< 30 (length\
    \ date)) #t]\n    [(< 31 (length date)) #t]\n    [(< 32 (length date)) #t]\n \
    \   [(< 33 (length date)) #t]\n    [(< 34 (length date)) #t]\n    [(< 35 (length\
    \ date)) #t]\n    [(< 36 (length date)) #t]\n    [(< 37 (length date)) #t]\n \
    \   [(< 38 (length date)) #t]\n    [(< 39 (length date)) #t]\n    [(< 40 (length\
    \ date)) #t]\n    [(< 41 (length date)) #t]\n    [(< 42 (length date)) #t]\n \
    \   [(< 43 (length date)) #t]\n    [(< 44 (length date)) #t]\n    [(< 45 (length\
    \ date)) #t]\n    [(< 46 (length date)) #t]\n    [(< 47 (length date)) #", " \
    \ (if (string=? date \"\")\n      #f\n      (let ((months (cadr (rest date)))\
    \ \n        (days (caddr date)))\n        (let ((months (string->list (string->char\
    \ months))) \n          (days (string->list (string->char days))))\n         \
    \ (if (null? months)\n              #f\n              (if (or (and (<= 0 (length\
    \ months)) (<= 0 (length days)))\n                       (and (<= 0 (length months))\
    \ (<= 0 (length days))))\n                  #f\n                  (if (or (and\
    \ (<= 0 (length months)) (<= 0 (length days)))\n                           (and\
    \ (<= 0 (length months)) (<= 0 (length days))))\n                      #t\n  \
    \                    (let ((month (car months)) (day (car days)))\n          \
    \              (cond\n                        ((and (<= 0 (length months)) (<=\
    \ 0 (length days))) #f)\n                        ((and (<= 0 (length months))\
    \ (<= 0 (length days))) #t)\n                        ((and (<= 0 (length months))\
    \ (<= 0 (length days))) (= month (substring date 0 1))) #t)\n                \
    \        ((and (<= 0 (length months)) (<= 0 (length days))) (= month (substring\
    \ date 0 2))) #t)\n                        ((and (<= 0 (length months)) (<= 0\
    \ (length days))) (= month (substring date 0 3))) #t)\n                      \
    \  ((and (<= 0 (length months)) (<= 0 (length days))) (= month (substring date\
    \ 0 4))) #t)\n                        ((and (<= 0 (length months)) (<= 0 (length\
    \ days))) (= month (substring date 0 5))) #t)\n                        ((and (<=\
    \ 0 (length months)) (<= 0 (length days))) (= month (substring date 0 6))) #t)\n\
    \                        ((and (<= 0 (length months)) (<= 0 (length days))) (=\
    \ month (substring date 0 7))) #t)\n                        ((and (<= 0 (length\
    \ months)) (<= 0 (length days))) (= month (substring date 0 8))) #t)\n       \
    \                 ((and (<= 0 (length months)) (<= 0 (length days))) (= month\
    \ (substring date 0 9))) #t)\n                        ((and (<= 0 (length months))\
    \ (<= 0 (length days))) (= month (substring date 0 10))) #t)\n               \
    \         ((and (<= 0 (length months)) (<= 0 (length days))) (= month (substring\
    \ date 0 11))) #t)\n                        ((and (<= 0 (length months)) (<= 0\
    \ (length days))) (= month (substring date 0 12))", "  (cond\n    [(empty? date)\
    \ #t]\n    [(< (length (trim date)) 7) #f]\n    [(< (length (trim date)) 10) #f]\n\
    \    [(< (length (trim date)) 14) #f]\n    [(< (length (trim date)) 16) #f]\n\
    \    [(< (length (trim date)) 19) #f]\n    [(< (length (trim date)) 22) #f]\n\
    \    [(< (length (trim date)) 24) #t]\n    [(< (length (trim date)) 25) #t]\n\
    \    [(< (length (trim date)) 26) #f]\n    [(< (length (trim date)) 30) #f]\n\
    \    [(< (length (trim date)) 31) #f]\n    [(> (length (trim date)) 1) #f]\n \
    \   [(> (length (trim date)) 2) #f]\n    [(> (length (trim date)) 3) #t]\n   \
    \ [(> (length (trim date)) 4) #f]\n    [(> (length (trim date)) 5) #f]\n    [(>\
    \ (length (trim date)) 6) #f]\n    [(> (length (trim date)) 7) #f]\n    [(> (length\
    \ (trim date)) 8) #f]\n    [(> (length (trim date)) 9) #f]\n    [(> (length (trim\
    \ date)) 10) #f]\n    [(> (length (trim date)) 11) #f]\n    [(> (length (trim\
    \ date)) 12) #f]\n    [(> (length (trim date)) 13) #f]\n    [(> (length (trim\
    \ date)) 14) #f]\n    [(> (length (trim date)) 15) #f]\n    [(> (length (trim\
    \ date)) 16) #f]\n    [(> (length (trim date)) 17) #f]\n    [(> (length (trim\
    \ date)) 18) #f]\n    [(> (length (trim date)) 19) #f]\n    [(> (length (trim\
    \ date)) 20) #f]\n    [(> (length (trim date)) 21) #f]\n    [(> (length (trim\
    \ date)) 22) #f]\n    [(> (length (trim date)) 23) #f]\n    [(> (length (trim\
    \ date)) 24) #t]\n    [(> (length (trim date)) 25) #", "  (and (not (null? date))\n\
    \       (number? (string->number (string->symbol date)))\n       (> (number->string\
    \ (number->integer date)) \"30\")\n       (> (number->string (number->integer\
    \ date)) \"31\")\n       (= (number->string (number->integer date)) \"01\")\n\
    \       (= (number->string (number->integer date)) \"02\")\n       (= (number->string\
    \ (number->integer date)) \"03\")\n       (= (number->string (number->integer\
    \ date)) \"04\")\n       (= (number->string (number->integer date)) \"05\")\n\
    \       (= (number->string (number->integer date)) \"06\")\n       (= (number->string\
    \ (number->integer date)) \"07\")\n       (= (number->string (number->integer\
    \ date)) \"08\")\n       (= (number->string (number->integer date)) \"09\")\n\
    \       (= (number->string (number->integer date)) \"10\")\n       (= (number->string\
    \ (number->integer date)) \"11\")\n       (= (number->string (number->integer\
    \ date)) \"12\")\n       (= (number->string (number->integer date)) \"13\")\n\
    \       (= (number->string (number->integer date)) \"14\")\n       (= (number->string\
    \ (number->integer date)) \"15\")\n       (= (number->string (number->integer\
    \ date)) \"16\")\n       (= (number->string (number->integer date)) \"17\")\n\
    \       (= (number->string (number->integer date)) \"18\")\n       (= (number->string\
    \ (number->integer date)) \"19\")\n       (= (number->string (number->integer\
    \ date)) \"20\")\n       (= (number->string (number->integer date)) \"21\")\n\
    \       (= (number->string (number->integer date)) \"22\")\n       (= (number->string\
    \ (number->integer date)) \"23\")\n       (= (number->string (number->integer\
    \ date)) \"24\")\n       (= (number->string (number->integer date)) \"25\")\n\
    \       (= (number->string (number->integer date)) \"26\")\n       (= (number->string\
    \ (number->integer date)) \"27\")\n       (= (number->string (number->integer\
    \ date)) \"28\")\n       (= (number->string (number->integer date)) \"29\")\n\
    \       (= (number->string (number->integer date)) \"30\")\n       (= (number->string\
    \ (number->integer date)) \"31", "  (cond\n    [(empty? date) #t]\n    [(> (length\
    \ date) 3) #f]\n    [(< (length date) 3) #f]\n    [(< (length date) 4) #f]\n \
    \   [(< (length date) 6) #f]\n    [(< (length date) 8) #f]\n    [(< (length date)\
    \ 10) #f]\n    [(< (length date) 12) #f]\n    [(< (length date) 13) #f]\n    [(<\
    \ (length date) 14) #f]\n    [(< (length date) 15) #f]\n    [(< (length date)\
    \ 17) #f]\n    [(< (length date) 19) #f]\n    [(< (length date) 21) #f]\n    [(<\
    \ (length date) 24) #f]\n    [(< (length date) 25) #f]\n    [(< (length date)\
    \ 28) #f]\n    [(< (length date) 31) #f]\n    [(< (length date) 32) #f]\n    [(<\
    \ (length date) 33) #f]\n    [(< (length date) 34) #f]\n    [(< (length date)\
    \ 35) #f]\n    [(< (length date) 36) #f]\n    [(< (length date) 37) #f]\n    [(<\
    \ (length date) 38) #f]\n    [(< (length date) 39) #f]\n    [(< (length date)\
    \ 40) #f]\n    [(< (length date) 41) #f]\n    [(< (length date) 42) #f]\n    [(<\
    \ (length date) 43) #f]\n    [(< (length date) 44) #f]\n    [(< (length date)\
    \ 45) #f]\n    [(< (length date) 46) #f]\n    [(< (length date) 47) #f]\n    [(<\
    \ (length date) 48) #f]\n    [(< (length date) 49) #f]\n    [(< (length date)\
    \ 50) #f]\n    [(< (length date) 51) #f]\n    [(< (length date) 52) #f]\n    [(<\
    \ (length date) 53) #f]\n    [(< (length date) 54) #f]\n    [(< (length date)\
    \ 55) #f]\n    [(< (length date) 56) #f]\n    [(< (length date) 57) #f]\n    [(<\
    \ (length date) 58) #f]\n    [(< (length date) 59) #f]\n    [(< (length date)\
    \ 60) #f]\n", "  (if (not (empty? date))\n      (and (< (string-length date) 4)\n\
    \           (not (< (string-length date) 5)))\n      (and (< (string-length date)\
    \ 6)\n           (not (< (string-length date) 7)))\n      (and (< (string-length\
    \ date) 9)\n           (not (< (string-length date) 11)))\n      (and (< (string-length\
    \ date) 12)\n           (not (< (string-length date) 2)))\n      (and (< (string-length\
    \ date) 3)\n           (not (< (string-length date) 4)))\n      (and (< (string-length\
    \ date) 2)\n           (not (< (string-length date) 3)))\n      (= (string-index\
    \ (substring date 0 2) \"-\")\n         (string-index (substring date 1 2) \"\
    -\"))\n      (= (string-index (substring date 0 2) \"/\")\n         (string-index\
    \ (substring date 1 2) \"/\"))\n      (= (string-index (substring date 0 2) \"\
    -\")\n         (string-index (substring date 1 2) \"-\")\n         (= (string-index\
    \ (substring date 0 3) \"-\")\n            (string-index (substring date 1 3)\
    \ \"-\"))\n      (= (string-index (substring date 0 2) \"-\")\n         (string-index\
    \ (substring date 1 2) \"-\")\n         (= (string-index (substring date 0 3)\
    \ \"-\")\n            (string-index (substring date 1 3) \"-\")\n            (=\
    \ (string-index (substring date 0 4) \"-\")\n              (string-index (substring\
    \ date 1 4) \"-\"))\n          (= (string-index (substring date 0 2) \"-\")\n\
    \             (string-index (substring date 1 2) \"-\")\n             (= (string-index\
    \ (substring date 0 3) \"-\")\n                (string-index (substring date 1\
    \ 3) \"-\")\n                (= (string-index (substring date 0 4) \"-\")\n  \
    \                (string-index (substring date 1 4) \"-\")\n                 \
    \ (= (string-index (substring date 0 5) \"-\")\n                     (string-index\
    \ (substring date 1 5) \"-\"))))\n      (= (string-index (substring date 0 2)\
    \ \"-\")\n         (string-index (substring date 1 2) \"-\")\n         (= (string-index\
    \ (substring date 0 3) \"-\")\n            (string-index (substring date 1 3)\
    \ \"-\")\n            (= (string-index (substring date 0 4) \"-\")\n         \
    \     (string-index (substring date 1 4) \"-\")\n              (= (string-index\
    \ (", "  ;; Part 1 -- check that the date is not empty\n  (and (not (string? date))\n\
    \       (not (string-length date)))\n  ;; Part 2 -- check that the number of days\
    \ is between 1-31\n  (and (< (string->number (string-replace date \"-\" \" \"\
    \ 1)) (+ 1 (string->number (string-replace date \"-\" \" \" -1)))) #f)\n  ;; Part\
    \ 3 -- check that the number of days is between 1-30\n  (and (< (string->number\
    \ (string-replace date \"-\" \" \" 1)) (+ 1 (string->number (string-replace date\
    \ \"-\" \" \" -1)))) #t)\n  ;; Part 4 -- check that the number of days is between\
    \ 1-29\n  (and (< (string->number (string-replace date \"-\" \" \" 1)) (+ 1 (string->number\
    \ (string-replace date \"-\" \" \" -1)))) #f)\n  ;; Part 5 -- check that the month\
    \ is not less than 1 or higher than 12\n  (and (< (string->number (string-replace\
    \ date \"-\" \" \" 2)) (+ 1 (string->number (string-replace date \"-\" \" \" -3))))\
    \ #f)\n  ;; Part 6 -- check that the date is in the correct format\n  (and (<\
    \ (string->number (string-replace date \"-\" \" \" 2)) (+ 1 (string->number (string-replace\
    \ date \"-\" \" \" -3)))) #f)\n  ;; Part 7 -- check that all parts are true\n\
    \  (and (and (< (string->number (string-replace date \"-\" \" \" 2)) (+ 1 (string->number\
    \ (string-replace date \"-\" \" \" -3)))) #f)\n       (and (< (string->number\
    \ (string-replace date \"-\" \" \" 2)) (+ 1 (string->number (string-replace date\
    \ \"-\" \" \" -3)))) #f)\n       (and (< (string->number (string-replace date\
    \ \"-\" \" \" 2)) (+ 1 (string->number (string-replace date \"-\" \" \" -3))))\
    \ #f)\n       (and (< (string->number (string-replace date \"-\" \" \" 2)) (+\
    \ 1 (string->number (string-replace date \"-\" \" \" -3)))) #f)\n       (and (<\
    \ (string->number (string-replace date \"-\" \" \" 2)) (+ 1 (string->number (string-replace\
    \ date \"-\" \" \" -3)))) #f)\n       (and (< (string->number (string-replace\
    \ date \"-\" \" \" 2)) (+ 1 (string->number (string-replace date \"-\" \" \" -3))))\
    \ #f)\n       (and (< (string->number (string-replace date \"-\" \" \" 2)) (",
  "  (cond\n    [(empty? date) #f]\n    [(not (member (string->list (substring date\
    \ 0 2)) '(12 11 10 9 8 7 6 5 4 3 2 1))) #f]\n    [(not (member (string->list (substring\
    \ date 0 2)) '(10 9 8 7 6 5 4 3 2 1))) #f]\n    [(not (member (string->list (substring\
    \ date 0 2)) '(10 9 8 7 6 5 4 3 2 1))) #f]\n    [(< (string->list (substring date\
    \ 0 2)) '(1 2 3 4 5 6 7 8 9 10 11 12)) #f]\n    [(< (string->list (substring date\
    \ 0 2)) '(4 6 9 11)) #f]\n    [(< (string->list (substring date 0 2)) '(1 3 5\
    \ 7 8 10 12)) #f]\n    [(< (string->list (substring date 0 2)) '(2 4 6 8 10 12))\
    \ #f]\n    [(< (string->list (substring date 0 2)) '(2 3 4 6 8 10 12)) #f]\n \
    \   [(< (string->list (substring date 0 2)) '(1 3 5 7 8 10 12)) #f]\n    [(< (string->list\
    \ (substring date 0 2)) '(2 4 6 8 10 12)) #f]\n    [(< (string->list (substring\
    \ date 0 2)) '(2 3 4 6 8 10 12)) #f]\n    [(< (string->list (substring date 0\
    \ 2)) '(1 3 5 7 8 10 12)) #f]\n    [(< (string->list (substring date 0 2)) '(2\
    \ 4 6 8 10 12)) #f]\n    [(< (string->list (substring date 0 2)) '(2 3 4 6 8 10\
    \ 12)) #f]\n    [(> (string->list (substring date 0 2)) '(1 2 3 4 5 6 7 8 9 10\
    \ 11 12)) #f]\n    [(> (string->list (substring date 0 2)) '(4 6 9 11)) #f]\n\
    \    [(> (string->list (substring date 0 2)) '(1 3 5 7 8 10 12)) #f]\n    [(>\
    \ (string->list (substring date 0 2)) '(2 4 6 8 10 12)) #f]\n    [(> (string->list\
    \ (substring date 0 2)) '(2 3 4 6 8 10 12)) #f]\n    [(> (string->list (substring ",
  "  (let ([month (substring date 0 2)] [(substring date 0 1)])\n    (and (> month\
    \ 12) (< month (substring date 0 1)))\n    (and (> day 31) (< day (substring date\
    \ 2 2))) (and (> day 30) (< day (substring date 1 1))) (and (> day 29) (< day\
    \ (substring date 0 0))) (= (substring date 4 4) (substring date 3 3)))\n  )\n",
  "  (cond\n    [(empty? date) #t]\n    [(< (length date) 4) #f]\n    [(< (char-ref\
    \ date 0) '-' (length date)) #f]\n    [(< (char-ref date 1 '-') (length date))\
    \ #f]\n    [(< (char-ref date 2 '-') (length date)) #f]\n    [(< (char-ref date\
    \ 3 '-') (length date)) #f]\n    [(< (char-ref date 4 '-') (length date)) #f]\n\
    \    [(< (char-ref date 5 '-') (length date)) #f]\n    [(< (char-ref date 7 '-')\
    \ (length date)) #f]\n    [(< (char-ref date 8 '-') (length date)) #f]\n    [(<\
    \ (char-ref date 10 '-') (length date)) #f]\n    [(< (char-ref date 12 '-') (length\
    \ date)) #f]\n    [(< (char-ref date 13 '-') (length date)) #f]\n    [(< (char-ref\
    \ date 14 '-') (length date)) #f]\n    [(< (char-ref date 15 '-') (length date))\
    \ #f]\n    [(< (char-ref date 16 '-') (length date)) #f]\n    [(< (char-ref date\
    \ 17 '-') (length date)) #f]\n    [(< (char-ref date 18 '-') (length date)) #f]\n\
    \    [(< (char-ref date 19 '-') (length date)) #f]\n    [(< (char-ref date 20\
    \ '-') (length date)) #f]\n    [(< (char-ref date 2 '0' (length date)) #f]\n \
    \   [(< (char-ref date 2 '1' (length date)) #f]\n    [(< (char-ref date 2 '2'\
    \ (length date)) #f]\n    [(< (char-ref date 2 '3' (length date)) #f]\n    [(<\
    \ (char-ref date 2 '4' (length date)) #f]\n    [(< (char-ref date 2 '5' (length\
    \ date)) #f]\n    [(< (char-ref date 2 '6' (length date)) #f]\n    [(< (char-ref\
    \ date 2 '7' (length date)) #f]\n    [(< (char-ref date 2 '8' (length date)) #f]\n\
    \    [(< (char-ref date 2 '9' (length date)) ", "  (cond\n    [(empty? date) #t]\n\
    \    [(not (integer? date)) #f]\n    [(< 1 (cadr (cadr date)))\n     (not (< 1\
    \ (caddr date)))]\n    [(< 3 (caddr date))\n     (not (< 3 (cadr (cadr date))))]\n\
    \    [(< 3 (cadr (cadr date)))\n     (not (< 3 (caddr date)))]\n    [(< 30 (caddr\
    \ date))\n     (not (< 30 (cadr (cadr date))))]\n    [(< 30 (cadr (cadr date)))\n\
    \     (not (< 30 (caddr date)))]\n    [(< 29 (caddr date))\n     (not (< 29 (cadr\
    \ (cadr date))))]\n    [(< 29 (cadr (cadr date)))\n     (not (< 29 (caddr date)))]\n\
    \    [(< 12 (cadr (cadr date)))\n     (not (< 12 (caddr date)))]\n    [(< 12 (caddr\
    \ date))\n     (not (< 12 (cadr (cadr date))))]\n    [(< 12 (cadr (cadr date)))\n\
    \     (not (< 12 (caddr date)))]\n    [else\n     (not (= 2 (length (cadr (cadr\
    \ date))))\n           (length (cadr (cadr date))))]\n    [else\n     (not (=\
    \ 2 (length (caddr (cadr date))))\n           (length (caddr (cadr date))))]\n\
    \    [else\n     (not (= 2 (length (cadr (cadr date))))\n           (length (cadr\
    \ (cadr date))))]\n    [else\n     (not (= 2 (length (caddr (cadr date))))\n \
    \          (length (caddr (cadr date))))]\n    [else\n     (not (= 2 (length (cadr\
    \ (cadr date))))\n           (length (cadr (cadr date))))]\n    [else\n     (not\
    \ (= 2 (length (caddr (cadr date))))\n           (length (caddr (cadr date))))]\n\
    \    [else\n     (not (= 2 (length (cadr (cadr date))))\n           (length (cadr\
    \ (cadr date))))]\n    [else\n     (not (= 2 (length (caddr (cadr date))))\n \
    \          (", "  (cond ((empty? date) #t)\n        ((< (length (string-ref date\
    \ 0 2)) 2) #f)\n        ((< (length (string-ref date 0 2)) 2) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-ref date\
    \ 0 2)) ) #f)\n        ((< 1 (length (string-ref date 0 2)) ) #f)\n        ((<\
    \ 1 (length (string-ref date 0 2)) ) #f)\n        ((< 1 (length (string-", " \
    \ (= (string-length (string-trim date)) 10)\n  (< 1 (string-to-int (substring\
    \ date 1 4)))\n  (< 1 (string-to-int (substring date 5 6)))\n  (< 1 (string-to-int\
    \ (substring date 7 10)))\n  (< 1 (string-to-int (substring date 11 12)))\n  (<\
    \ (string-to-int (substring date 2 2)) 1)\n  (< (string-to-int (substring date\
    \ 3 2)) 3)\n  (< (string-to-int (substring date 4 2)) 3)\n  (< (string-to-int\
    \ (substring date 5 2)) 3)\n  (< (string-to-int (substring date 7 2)) 3)\n  (<\
    \ (string-to-int (substring date 8 2)) 3)\n  (< (string-to-int (substring date\
    \ 9 2)) 3)\n  (< (string-to-int (substring date 10 2)) 3)\n  (< (string-to-int\
    \ (substring date 11 2)) 3)\n  (< (string-to-int (substring date 12 2)) 2)\n \
    \ (< 1 (string-to-int (substring date 1 2)))\n  (< 1 (string-to-int (substring\
    \ date 3 2)))\n  (< 1 (string-to-int (substring date 5 2)))\n  (< 1 (string-to-int\
    \ (substring date 7 2)))\n  (< 1 (string-to-int (substring date 8 2)))\n  (< 1\
    \ (string-to-int (substring date 9 2)))\n  (< 1 (string-to-int (substring date\
    \ 10 2)))\n  (< 1 (string-to-int (substring date 11 2)))\n  (< 1 (string-to-int\
    \ (substring date 12 2)))\n  (< 1 (string-to-int (substring date 1 3)))\n  (<\
    \ 1 (string-to-int (substring date 3 3)))\n  (< 1 (string-to-int (substring date\
    \ 5 3)))\n  (< 1 (string-to-int (substring date 7 3)))\n  (< 1 (string-to-int\
    \ (substring date 8 3)))\n  (< 1 (string-to-int (substring date 9 3)))\n  (< 1\
    \ (string-to-int (substring date 10 3)))\n  (< 1 (string-to-int (substring date\
    \ 11 3)))\n  (< 1 (string-to-int (substring date 12 3)))\n  (< 1 (string-to-int\
    \ (substring date 1 4)))\n  (< 1 (string-to-int (substring date 3 4)))\n  (< 1\
    \ (string-to-int (substring date 5 4)))\n  (< 1 (string-to-int (substring date\
    \ 7 4)))\n  (< 1 (string-to-int (substring date 8 4)))", "  (string-length (string-downcase\
    \ date)) #t (date-check-rules date))\n", "  (cond ((null? date) #f)\n        ((>\
    \ (length (substring (date 0 2) -4) 2) 1) #f)\n        ((< (length date) 2) #f)\n\
    \        ((< (length (substring (date 0 2) -4) 2) 2) #f)\n        ((< (length\
    \ (substring (date 0 2) -5) 2) 2) #f)\n        ((< (length (substring (date 0\
    \ 2) -7) 2) 2) #f)\n        ((< (length (substring (date 0 2) -9) 2) 2) #f)\n\
    \        ((< (length (substring (date 0 2) -11) 2) 2) #f)\n        ((< (length\
    \ (substring (date 0 2) -13) 2) 2) #f)\n        ((< (length (substring (date 0\
    \ 2) -15) 2) 2) #f)\n        ((< 13 (month (substring (date 0 2) -2)) 2) #f)\n\
    \        ((< 12 (month (substring (date 0 2) -1)) 2) #f)\n        ((< 1 (month\
    \ (substring (date 0 2) 0)) 2) #f)\n        ((< 1 (month (substring (date 0 2)\
    \ 1)) 2) #f)\n        ((< 1 (month (substring (date 0 2) 2)) 2) #f)\n        ((<\
    \ 1 (month (substring (date 0 2) 3)) 2) #f)\n        ((< 1 (month (substring (date\
    \ 0 2) 4)) 2) #f)\n        ((< 1 (month (substring (date 0 2) 5)) 2) #f)\n   \
    \     ((< 1 (month (substring (date 0 2) 6)) 2) #f)\n        ((< 1 (month (substring\
    \ (date 0 2) 7)) 2) #f)\n        ((< 1 (month (substring (date 0 2) 8)) 2) #f)\n\
    \        ((< 1 (month (substring (date 0 2) 9)) 2) #f)\n        ((< 1 (month (substring\
    \ (date 0 2) 10)) 2) #f)\n        ((< 1 (month (substring (date 0 2) 11)) 2) #f)\n\
    \        ((< 1 (month (substring (date 0 2) 12)) 2) #f)\n        ((< 1 (month\
    \ (substring (date 0 2) 13)) 2) #f)\n        ((< 1 (month (substring (date 0 2)\
    \ 14)) 2) #f)\n        ((< 1 (month (substring (date 0 2) 15)) 2) #f)\n      \
    \  ((< 1 (month (substring (date 0 2) 16)) 2) #f)\n        ((< 1 (month (substring\
    \ (date 0 2) 17)) 2) #f)\n        ((< 1 (month (substring (date 0 2) 18)) 2) #",
  "  ;; 1. The date string is not empty.\n  (and (not (empty? (string-ref date 0)))\
    \ ; 1\n       (;; 2. The number of days is not less than 1 or higher than 31 days\
    \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n       (not (< (string-length (substring\
    \ date 0 2)) 31) (< 1 (string-length (substring date 0 2)) 30) (< 1 (string-length\
    \ (substring date 0 2)) 29) (< 1 (string-length (substring date 0 2)) 28) (< 1\
    \ (string-length (substring date 0 2)) 29) (< 1 (string-length (substring date\
    \ 0 2)) 28) (< 1 (string-length (substring date 0 2)) 29))\n       (;; 3. The\
    \ months should not be less than 1 or higher than 12.\n       (< (string-length\
    \ (substring date 0 2)) 2) (< 1 (string-length (substring date 0 2)) 12)))\n \
    \ ;; 4. The date should be in the format: mm-dd-yyyy\n  (or (string-equal (substring\
    \ date 0 2) \"01-\" (substring date 0 2)) ; 4\n      (string-equal (substring\
    \ date 0 2) \"01-\" (substring date 0 2)) (string-equal (substring date 0 2) \"\
    01-\" (substring date 0 2)) (string-equal (substring date 0 2) \"01-\" (substring\
    \ date 0 2)) (string-equal (substring date 0 2) \"01-\" (substring date 0 2))\
    \ (string-equal (substring date 0 2) \"01-\" (substring date 0 2)) (string-equal\
    \ (substring date 0 2) \"01-\" (substring date 0 2)) (string-equal (substring\
    \ date 0 2) \"01-\" (substring date 0 2)) (string-equal (substring date 0 2) \"\
    01-\" (substring date 0 2))))\n  ;; <<< (valid_date \"03-11-2000\")\n  ;;=> #t\n\
    \  ;; <<< (valid_date \"15-01-2012\")\n  ;;=> #f\n  ;; <<< (valid_date \"04-0-2040\"\
    )\n  ;;=> #f\n  ;; <<< (valid_date \"06-04-2020\")\n  ;;=> #t\n  ;; <<< (valid_date\
    \ \"06/04/2020\")\n  ;;=> #f\n</code>\n<|/ a dscore=2 |>\n<| a |>\n", "  (cond\n\
    \    [(null? date) #t]\n    [(< (string->integer date) #1) #t]\n    [(< (string->integer\
    \ date) #31) #t]\n    [(< (string->integer date) #30) #t]\n    [(< (string->integer\
    \ date) #29) #t]\n    [(string->integer date) (string->integer date)]))\n  ",
  "  (cond\n    [(empty? date) #f]\n    [(number? (first date)) #f]\n    [(< 1 (first\
    \ date)) #f]\n    [(> (first date) (second date)) #f]\n    [(> (first date) (third\
    \ date)) #f]\n    [(> (first date) (fourth date)) #f]\n    [(and (> 1 (first date))\
    \ (< 3 (second date)) (> 1 (third date)) (< 1 (fourth date))) #t]\n    [else (valid_date\
    \ (rest date))]))\n", "  (define (valid_date_parts\n           (year (rest parts))\
    \ (month (rest parts)) (day (rest parts)))\n    (cond\n      [(not (empty? parts))\n\
    \       (and [(month < 1)\n             (month > 12)]\n            [(day < 1)\n\
    \             (day > 31)]\n            [(day > 30)\n             (month != 2)])]\n\
    \      [(month < 1)\n       (and (day < 1)\n            (day > 31)]\n        [(day\
    \ > 30)\n         (month != 2)])]\n      [(month > 12)\n       (and (day < 1)\n\
    \            (day > 31)]\n        [(day > 30)\n         (month != 2)])]\n    \
    \  [else false]))\n  (cond\n    [(empty? date) false]\n    [(valid_date_parts\
    \ (string->number (substring (string date) 0 4)) (number->string (substring (string\
    \ date) 4 2)) (number->string (substring (string date) 6 2)))]\n    [else (valid_date_parts\
    \ (string->number (substring (string date) 0 4)) (number->string (substring (string\
    \ date) 4 2)) (number->string (substring (string date) 6 2)))]))\n</code>\n<|/\
    \ a dscore=0 tags=racket,datetime,scheme,date |>\n<| a |>\nHere's a solution using\
    \ only built-in procedures and no helpers:\n<code>", "  (and (not (empty? date))\n\
    \       (< (length (string->list (date)) 5)\n          4)\n       (< (length (string->list\
    \ (date)) 4)\n          4)\n       (< (length (string->list (date)) 3)\n     \
    \     3)\n       (> (length (string->list (date)) 2)\n          2)\n       (<\
    \ (string->list (date) 2)\n          12)\n       (< (string->list (date) 3)\n\
    \          1)\n       (< (string->list (date) 4)\n          3)\n       (> (string->list\
    \ (date) 4)\n          6)\n       (< (string->list (date) 5)\n          7)\n \
    \      (< (string->list (date) 6)\n          9)\n       (< (string->list (date)\
    \ 7)\n          11)\n       (< (string->list (date) 8)\n          12)\n      \
    \ (< (string->list (date) 9)\n          4)\n       (< (string->list (date) 10)\n\
    \          6)\n       (< (string->list (date) 11)\n          9)\n       (< (string->list\
    \ (date) 12)\n          11)\n       (> (string->list (date) 1)\n          1)\n\
    \       (> (string->list (date) 2)\n          2)\n       (> (string->list (date)\
    \ 3)\n          3)\n       (> (string->list (date) 4)\n          4)\n       (>\
    \ (string->list (date) 5)\n          5)\n       (> (string->list (date) 6)\n \
    \         6)\n       (> (string->list (date) 7)\n          7)\n       (> (string->list\
    \ (date) 8)\n          8)\n       (> (string->list (date) 9)\n          9)\n \
    \      (> (string->list (date) 10)\n          10)\n       (> (string->list (date)\
    \ 11)\n          11)\n       (> (string->list (date) 12)\n          12)))\n",
  "  (and (not (empty? date))\n       (<= (months-of-year (car date)) 12)\n      \
    \ (<= (days-of-month (car date)) 31)\n       (<= (days-of-month (cadr date)) 30)\n\
    \       (<= (days-of-month (caddr date)) 29)\n       (<= (months (cadr date))\
    \ 12)\n       (<= (months (caddr date)) 12)\n       (= (month (car date)) (car\
    \ date)))\n  )\n", "  (let ([month (string->char (substring (date 0 2) \"-\")\n\
    \                            (substring (date 0 2) \"-\")\n                  \
    \          (substring (date 0 4) \"-\")\n                            (substring\
    \ (date 0 4)))]\n        [year (substring (date 0 3) \"-\")\n           (substring\
    \ (date 0 4) \"-\")\n           (substring (date 0 4)))]\n        [months (number->string\
    \ 1 (substring (date 0 1) \"-\")\n                        (substring (date 0 1)\
    \ \"-\")\n                        (substring (date 0 1) \"-\")\n             \
    \           (substring (date 0 1) \"-\")\n                        (substring (date\
    \ 0 1) \"-\")\n                        (substring (date 0 1) \"-\"))]\n      \
    \  [days (number->string 1 (substring (date 0 2) \"-\")\n                    \
    \    \"\"\n                        (substring (date 0 2) \"-\")\n            \
    \            (substring (date 0 2) \"-\")\n                        (substring\
    \ (date 0 2) \"-\")\n                        (substring (date 0 2) \"-\")\n  \
    \                      (substring (date 0 2) \"-\"))]\n        [days (number->string\
    \ 1 (substring (date 0 2) \"-\")\n                        \"\"\n             \
    \           (substring (date 0 2) \"-\")\n                        (substring (date\
    \ 0 2) \"-\")\n                        (substring (date 0 2) \"-\")\n        \
    \                (substring (date 0 2) \"-\")\n                        (substring\
    \ (date 0 2) \"-\"))]\n        [days (number->string 1 (substring (date 0 2) \"\
    -\")\n                        \"\"\n                        (substring (date 0\
    \ 2) \"-\")\n                        (substring (date 0 2) \"-\")\n          \
    \              (substring (date 0 2) \"-\")\n                        (substring\
    \ (date 0 2) \"-\")\n                        (substring (date 0 2) \"-\"))]\n\
    \        [days (number->string 1 (substring (date 0 2) \"-\")\n              \
    \          \"\"\n                        (substring (date 0 2) \"-\")\n      \
    \                  (substring (date 0 2) \"-\")\n                        (substring\
    \ (date 0 2) \"-\")\n                        (substring (date 0 2) \"-\")\n  \
    \                      (substring (date 0 2) \"-\"))]\n        [days (number->string\
    \ 1 (substring (date 0 2) \"-\")\n                        \"\"\n             \
    \           (substring (date 0 2) \"-\")\n                        (substring (date\
    \ 0 2) \"-\")\n                        (substring (date 0 2) \"-\")\n        \
    \                (substring (date 0 2) \"-\")\n                        (substring\
    \ (date 0 2) \"-\"))]\n        [days (number->string 1 (substring (date 0 2) \"\
    -\")\n                        \"\"\n                        (substring (date 0\
    \ 2) \"-\")\n                        (substring (date 0 2) \"-\")\n          \
    \              (substring (date 0 2) \"-\")\n                        (substring\
    \ (date ", "  (string-length date)\n  (< 1 31 (string-length date))\n  (< 1 30\
    \ (string-length date))\n  (< 1 29 (string-length date))\n  (< 1 12 (string-length\
    \ date))\n  (< 1 (string-to-list (string-split date #\\-)))\n  (< 1 (string-to-list\
    \ (string->list date)))\n  (< (string->list (string->list date)) '(3 5 7 8 10\
    \ 12 4 6 9 11))\n  (< (string->list (string->list date)) '(2 4 6 9 11))\n  (<\
    \ (string->list (string->list date)) '(2 1))\n  (< '(3 5 7 8 10 12 4 6 9 11) (string->list\
    \ (string->list date)))\n  (< '(2 4 6 9 11) (string->list (string->list date))))\n\
    </code>\n<|/ a tags=racket,date,racket-student-languages dscore=1 |>\n<| a tags=racket,date,racket-student-languages\
    \ |>\nHere is a version using only standard Racket functions, without recursion:\n\
    <code>", "  (cond\n    [(empty? date) #t]\n    [(< 1 (length date)) #f]\n    [(<\
    \ 1 (length date) (length #(1 3 5 7 8 10 12 2)))\n     #f]\n    [(< 1 (length\
    \ date) (length #(4 6 9 11)))\n     #f]\n    [(< 1 (length date) (length #(2 )))\n\
    \     #f]\n    [(< 1 (length date) (length #(0 )))\n     #f]\n    [(< 1 (length\
    \ date) (length #(1 3 5 7 8 10 12)))\n     #t]\n    [(< 1 (length date) (length\
    \ #(4 6 9 11)))\n     #t]\n    [(< 1 (length date) (length #(2 )))\n     #t]\n\
    \    [(< 1 (length date) (length #(0 )))\n     #t]\n    [else #f]\n  )\n)\n",
  "  (and (not (empty? date))\n       (not (< 1 (string->number (substring date 0\
    \ 2)))\n           (< 1 (string->number (substring date 2 4)))\n           (<\
    \ 1 (string->number (substring date 4 6)))\n           (< 1 (string->number (substring\
    \ date 6 8)))\n           (< 1 (string->number (substring date 8 10)))\n     \
    \      (< 1 (string->number (substring date 10 12)))\n           (< 1 (string->number\
    \ (substring date 12 31)))\n           (< 1 (string->number (substring date 31\
    \ 30)))\n           (< 1 (string->number (substring date 30 29)))\n          \
    \ (< 1 (string->number (substring date 29 31))))\n       (not (< 1 (string->number\
    \ (substring date 0 2)))\n           (< 1 (string->number (substring date 2 4)))\n\
    \           (< 1 (string->number (substring date 4 6)))\n           (< 1 (string->number\
    \ (substring date 6 8)))\n           (< 1 (string->number (substring date 8 10)))\n\
    \           (< 1 (string->number (substring date 10 12)))\n           (< 1 (string->number\
    \ (substring date 12 31)))\n           (< 1 (string->number (substring date 31\
    \ 30)))\n           (< 1 (string->number (substring date 30 29)))\n          \
    \ (< 1 (string->number (substring date 29 31))))\n       (not (< 1 (string->number\
    \ (substring date 0 2)))\n           (< 1 (string->number (substring date 2 4)))\n\
    \           (< 1 (string->number (substring date 4 6)))\n           (< 1 (string->number\
    \ (substring date 6 8)))\n           (< 1 (string->number (substring date 8 10)))\n\
    \           (< 1 (string->number (substring date 10 12)))\n           (< 1 (string->number\
    \ (substring date 12 31)))\n           (< 1 (string->number (substring date 31\
    \ 30)))\n           (< 1 (string->number (substring date 30 29)))\n          \
    \ (< 1 (string->number (substring date 29 31))))\n       (not (< 1 (string->number\
    \ (substring date 0 2)))\n           (< 1 (string->number (substring date 2 4)))\n\
    \           (< 1 (string->number (substring date 4 6)))\n           (< 1 (string->number\
    \ (substring date 6 8)))\n           (< 1 (string->number (substring date 8 10)))\n\
    \           (< 1 (string->number (substring date 10 12)))\n           (< 1 (string->number\
    \ (substring date 12 31)))\n           (< 1 (string->number (substring date 31\
    \ 30)))\n           (< 1 (string->", "  (cond [(string-empty? date) #f]\n    \
    \    [(string-match \"^[1|3|5|7|8|10|12]-[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0-9]{4}$\"\
    \ date) #t]\n        [(string-match \"^[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0-9]{2}$\"\
    \ date) #t]\n        [(string-match \"^[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0-9]{2}$\"\
    \ date) #t]\n        [(string-match \"^[0|1|2|3|4|5|6|7|8|9|10|11|12]$\" date)\
    \ #t]\n        [(string-match \"^[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0-9]{2}$\"\
    \ date) #t]\n        [(string-match \"^[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0-9]{4}$\"\
    \ date) #t]\n        [(string-match \"^[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0-9]{2}$\"\
    \ date) #t]\n        [(string-match \"^[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0-9]{2}$\"\
    \ date) #t]\n        [(string-match \"^[0|1|2|3|4|5|6|7|8|9|10|11|12]-[0-9]{4}$\"\
    \ date) #t]\n        [(string-match \"^[0|1|2|3|4|5|6|", "  (cond\n    ((empty?\
    \ date) #f)\n    ((< 1 (length date)) #f)\n    ((< 1 (sub (string-length date)\
    \ 2))  #f)\n    ((< 1 (sub (string-length date) 2))  #f)\n    ((< 1 (sub (string-length\
    \ date) 3))  #f)\n    ((< 1 (sub (string-length date) 4))  #f)\n    ((< 1 (sub\
    \ (string-length date) 5))  #f)\n    ((< 1 (sub (string-length date) 6))  #f)\n\
    \    ((< 1 (sub (string-length date) 7))  #f)\n    ((< 1 (sub (string-length date)\
    \ 8))  #f)\n    ((< 1 (sub (string-length date) 9))  #f)\n    ((< 1 (sub (string-length\
    \ date) 10))  #f)\n    ((< 1 (sub (string-length date) 11))  #f)\n    ((< 1 (sub\
    \ (string-length date) 12))  #f)\n    ((< 1 (sub (string-length date) 13))  #f)\n\
    \    ((< 1 (sub (string-length date) 14))  #f)\n    ((< 1 (sub (string-length\
    \ date) 15))  #f)\n    ((< 1 (sub (string-length date) 16))  #f)\n    ((< 1 (sub\
    \ (string-length date) 17))  #f)\n    ((< 1 (sub (string-length date) 18))  #f)\n\
    \    ((< 1 (sub (string-length date) 19))  #f)\n    ((< 1 (sub (string-length\
    \ date) 20))  #f)\n    ((< 1 (sub (string-length date) 21))  #f)\n    ((< 1 (sub\
    \ (string-length date) 22))  #f)\n    ((< 1 (sub (string-length date) 23))  #f)\n\
    \    ((< 1 (sub (string-length date) 24))  #f)\n    ((< 1 (sub (string-length\
    \ date) 25))  #f)\n    ((< 1 (sub (string-length date) 26))  #f)\n    ((< 1 (sub\
    \ (string-length date) 27))  #f)\n    ((< 1 (sub (string-length date) 28))  #f)\n\
    \    ((< 1 (sub (string-length date) 29))  #f)\n    ((< 1 (sub (string-length\
    \ date) 30))  #f)\n    ((< 1 (sub (string-length date) 31))  #f)\n    ((< 1 (sub\
    \ (string-length date) 32))  #f)\n    ((< 1 (sub (string-length date) 33))  #f)\n\
    \    ((< 1 (sub (string-length date) 34))  #f)\n    ((< 1 (sub (string-length\
    \ date) 35))  #f)\n    ((< 1 (sub (string-length date) 36))  #f)\n", "  ;; The\
    \ date is valid if all of the following rules are satisfied:\n  ;; 1. The date\
    \ string is not empty.\n  (cond [(empty? date) #t]\n        [else (and (< (days-of-month\
    \ (string-ref date 0))) 31)\n                (and (< (months-of-year (string-ref\
    \ date 0))) 12)\n                (and (< (days-of-year (string-ref date 0))) 29)\n\
    \                (and (> (months-of-year (string-ref date 0))) 4)\n          \
    \      (and (string-equal? (string-ref date \"-\") \"\") \n                  \
    \   (string=? (substring (string (read-date-string date) 0 2) \"-\")\n       \
    \                          \"-\") #t)]))\n", "  (cond [(empty? date) #f]\n   \
    \     [(< (length (string->list date)) 3) #f]\n        [(< (length (string->list\
    \ date)) 12) #f]\n        [(< (length (string->list date)) 2) #f]\n        [(string->list\n\
    \          (string-append \"01-\"\n                        (string->list (string->list\
    \ date)))\n         #t]\n        [(> (string->list (string->list date)) \"02\"\
    ) #f]\n        [(> (string->list (string->list date)) \"12\") #f]\n        [(>\
    \ (string->list (string->list date)) \"01\") #f]\n        [(> (string->list (string->list\
    \ date)) \"31\") #f]\n        [(> (string->list (string->list date)) \"30\") #f]\n\
    \        [(> (string->list (string->list date)) \"29\") #f]\n        [(string->list\
    \ (string->list date)) #t]))\n</code>\nYou can try it out by typing this:\n<code>",
  "  (cond\n    [(empty? date) #t]\n    [(< (length (split date #\"-\")) (length 2))\n\
    \     (if (or (= (length (split date #\"-\")) 2)\n             (< 1 (length date)))\n\
    \         #f\n         #t)]\n    [(< (length (split date #\"-\")) (length 3))\n\
    \     (if (or (= (length (split date #\"-\")) 3)\n             (< 1 (length date)))\n\
    \         #f\n         #t)]\n    [(< (length (split date #\"-\")) (length 4))\n\
    \     (if (or (= (length (split date #\"-\")) 4)\n             (< 1 (length date)))\n\
    \         #f\n         #t)]\n    [(> (length (split date #\"-\")) 2)\n     (if\
    \ (or (= (length (split date #\"-\")) 2)\n             (< 1 (length date)))\n\
    \         #f\n         #t)]\n    [(> (length (split date #\"-\")) 3)\n     (if\
    \ (or (= (length (split date #\"-\")) 3)\n             (< 1 (length date)))\n\
    \         #f\n         #t)]\n    [(> (length (split date #\"-\")) 4)\n     (if\
    \ (or (= (length (split date #\"-\")) 4)\n             (< 1 (length date)))\n\
    \         #f\n         #t)]\n    [(= (length (split date #\"-\")) 3)\n     (if\
    \ (or (= (length (split date #\"-\")) 3)\n             (< 1 (length date)))\n\
    \         #f\n         #t)]\n    [(= (length (split date #\"-\")) 4)\n     (if\
    \ (or (= (length (split date #\"-\")) 4)\n             (< 1 (length date)))\n\
    \         #f\n         #t)]\n    [(= (length (split date #\"-\")) 2)\n     (if\
    \ (or (= (length (split date #\"-\")) 2)\n             (< 1 (length date)))\n\
    \         #f\n         #t)]\n    [(> (- 1 (length date)) 11)\n     (if (or (=\
    \ (length (split date #\"-\")) 2)\n             (< 1 (length date)))\n       \
    \  #f\n         #t)]\n    [(> (- 1 (length date)) 30)\n     (if (or (= (length\
    \ (split date #\"-\")) 2)\n             (< 1 (length date)))\n         #f\n  \
    \       #t)]\n    [(> (- 1 (length date)) 29)\n     (if (or (= (length (split\
    \ date #\"-\")) 2)\n             (< 1 (length date)))\n         #f\n         #t)]\n\
    \    [(< (- 1 (length date", "  (let ([m (substring date 0 2)])\n    (cond\n \
    \     [(empty? m) #f]\n      [(< m \"01\") #f]\n      [(< m \"03\") #f]\n    \
    \  [(< m \"05\") #f]\n      [(< m \"07\") #f]\n      [(< m \"08\") #f]\n     \
    \ [(< m \"10\") #f]\n      [(< m \"12\") #f]\n      [(< m \"14\") #f]\n      [(<\
    \ m \"16\") #f]\n      [(< m \"18\") #f]\n      [(< m \"20\") #f]\n      [(< m\
    \ \"21\") #f]\n      [(< m \"22\") #f]\n      [(< m \"24\") #f]\n      [(< m \"\
    25\") #f]\n      [(< m \"26\") #f]\n      [(< m \"27\") #f]\n      [(< m \"28\"\
    ) #f]\n      [(< m \"29\") #f]\n      [(< m \"30\") #f]\n      [(< m \"31\") #f]\n\
    \      [(< m \"32\") #f]\n      [(< m \"33\") #f]\n      [(< m \"34\") #f]\n \
    \     [(< m \"35\") #f]\n      [(< m \"36\") #f]\n      [(< m \"37\") #f]\n  \
    \    [(< m \"38\") #f]\n      [(< m \"39\") #f]\n      [(< m \"40\") #f]\n   \
    \   [(< m \"41\") #f]\n      [(< m \"42\") #f]\n      [(< m \"43\") #f]\n    \
    \  [(< m \"44\") #f]\n      [(< m \"45\") #f]\n      [(< m \"46\") #f]\n     \
    \ [(< m \"47\") #f]\n      [(< m \"48\") #f]\n      [(< m \"49\") #f]\n      [(<\
    \ m \"50\") #f]\n      [(< m \"51\") #f]\n      [(< m \"52\") #f]\n      [(< m\
    \ \"53\") #f]\n      [(< m \"54\") #f]\n      [(< m \"55\") #f]\n      [(< m \"\
    56\") #f]\n      [(< m \"57\") #f]\n      [(< m \"58\") #f]\n      [(< m \"59\"\
    ) #f", "  (cond [(empty? date) #f]\n        [(< 1 (string-length date)) #f]\n\
    \        [(< (string-length date) (length \"01-12\")) #f]\n        [(< (string-length\
    \ date) (length \"04-11\")) #f]\n        [(< (string-length date) (length \"01-31\"\
    )) #f]\n        [(< (string-length date) (length \"01-29\")) #f]\n        [(<\
    \ (string-length date) (length \"02-12\")) #t]\n        [(< (string-length date)\
    \ (length \"04-30\")) #t]\n        [(< (string-length date) (length \"06-29\"\
    )) #t]\n        [(< (string-length date) (length \"09-30\")) #t]\n        [(<\
    \ (string-length date) (length \"11-30\")) #t]\n        [(< (string-length date)\
    \ (length \"12-31\")) #t]\n        [(< (string-length date) (length \"01-12\"\
    )) #f]\n        [(< (string-length date) (length \"03-31\")) #t]\n        [(<\
    \ (string-length date) (length \"05-31\")) #t]\n        [(< (string-length date)\
    \ (length \"07-31\")) #t]\n        [(< (string-length date) (length \"08-31\"\
    )) #t]\n        [(< (string-length date) (length \"10-31\")) #t]\n        [(<\
    \ (string-length date) (length \"12-31\")) #t]\n        [(< (string-length date)\
    \ (length \"01-12\")) #f]\n        [(< (string-length date) (length \"04-31\"\
    )) #t]\n        [(< (string-length date) (length \"06-31\")) #t]\n        [(<\
    \ (string-length date) (length \"09-31\")) #t]\n        [(< (string-length date)\
    \ (length \"11-31\")) #t]\n        [(< (string-length date) (length \"12-31\"\
    )) #t]\n        [(< (string-length date) (length \"01-12\")) #f]\n        [(<\
    \ (string-length date) (length \"04-30\")) #t]\n        [(< (string-length date)\
    \ (length \"06-29\")) #t]\n        [(< (string-length date) (length \"09-30\"\
    )) #t]\n        [(< (string-length date) (length \"11-30\")) #t]\n        [(<\
    \ (string-length date) (length \"12-31\")) #t]\n        [(< (string-length date)\
    \ (length \"01", "  (cond\n    [(empty? date) #f]\n    [(< (length (substring\
    \ date 0 2)) 2)\n     (cond\n       [(equal? (substring date 0 1) \"01\")\n  \
    \      (cond\n         [(equal? (substring date 1 1) \"01\")\n          (cond\n\
    \            [(equal? (substring date 2 1) \"01\")\n             (cond\n     \
    \          [(equal? (substring date 3 1) \"01\")\n                (cond\n    \
    \             [(equal? (substring date 4 1) \"01\")\n                  (cond\n\
    \                   [(equal? (substring date 5 1) \"01\")\n                  \
    \  (cond\n                     [(equal? (substring date 6 1) \"01\")\n       \
    \               (cond\n                       [(equal? (substring date 7 1) \"\
    01\")\n                        (cond\n                         [(equal? (substring\
    \ date 8 1) \"01\")\n                          (cond\n                       \
    \     [(equal? (substring date 9 1) \"01\")\n                             (cond\n\
    \                              [(equal? (substring date 10 1) \"01\")\n      \
    \                         (cond\n                                 [(equal? (substring\
    \ date 11 1) \"01\")\n                                  (cond\n              \
    \                     [(equal? (substring date 12 1) \"01\")\n               \
    \                     #t]\n                                  [#f]))]\n       \
    \                        [#f])]\n                             [#f])]\n       \
    \                    [#f])]\n                       [#f])]\n                 \
    \   [#f])]\n                 [#f])]\n              [#f])]\n           [#f])]\n\
    \         [#f])]\n       [#f])]\n    [(< (length (substring date 0 2)) 4)\n  \
    \   (cond\n       [(equal? (substring date 0 1) \"01\")\n        (cond\n     \
    \    [(equal? (substring date 1 1) \"01\")\n          (cond\n            [(equal?\
    \ (substring date 2 1) \"01\")\n             (cond\n               [(equal? (substring\
    \ date 3 1) \"01\")\n                (cond\n                 [(equal? (substring\
    \ date 4 1) \"01\")\n                  (cond\n                   [(equal? (substring\
    \ date 5 1) \"01\")\n                    (cond\n                     [(equal?\
    \ (substring date 6 1) \"01\")\n                      (cond\n                \
    \       [(equal? (substring date 7 1) \"01\")\n                        (cond\n\
    \                         [(equal? (substring date 8 1) \"01\")\n            \
    \              (cond\n                            [(equal? (substring date 9 1)\
    \ \"01\")\n                             (cond\n                              [(equal?\
    \ (substring date 10 1) \"01", "  (and (not (string-empty? date))\n       (not\
    \ (< (string-length date) 1 day))\n       (not (< (string-length date) 31 days))\n\
    \       (not (< (string-length date) 30 days))\n       (not (< (string-length\
    \ date) 29 days))\n       (not (< (string-length date) 31 months))\n       (not\
    \ (< (string-length date) 12 months))\n       (= (string-length date) 6 (string-match\
    \ #\"\\-\" (substring date 0 (string-length date))))\n       (= (string-length\
    \ date) 5 (string-match #\"\\-\\-\" (substring date 0 (string-length date))))\n\
    \       (= (string-length date) 4 (string-match #\"\\-\\-\\-\" (substring date\
    \ 0 (string-length date))))\n       (= (string-length date) 3 (string-match #\"\
    \\-\\-\\-\\-\" (substring date 0 (string-length date))))\n       (= (string-length\
    \ date) 2 (string-match #\"\\-\\-\\-\\-\\-\" (substring date 0 (string-length\
    \ date))))\n       (= (string-length date) 1 (string-match #\"\\-\\-\\-\\-\\-\\\
    -\" (substring date 0 (string-length date))))\n       (= (string-length date)\
    \ 1 (string-match #\"\\-\\-\\-\\-\\-\\-\\-\" (substring date 0 (string-length\
    \ date))))\n       (= (string-length date) 1 (string-match #\"\\-\\-\\-\\-\\-\\\
    -\\-\\-\" (substring date 0 (string-length date))))\n       (= (string-length\
    \ date) 1 (string-match #\"\\-\\-\\-\\-\\-\\-\\-\\-\\-\" (substring date 0 (string-length\
    \ date))))\n       (= (string-length date) 1 (string-match #\"\\-\\-\\-\\-\\-\\\
    -\\-\\-\\-\\-\" (substring date 0 (string-length date))))\n       (= (string-length\
    \ date) 1 (string-match #\"\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\" (substring date\
    \ 0 (string-length date))))\n       (= (string-length date) 1 (string-match #\"\
    \\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\" (substring date 0 (string-length date))))\n\
    \       (= (string-length date) 1 (string-match #\"\\-\\-\\-\\-\\-\\-\\-\\-\\\
    -\\-\\-\\-\" (substring date 0 (string-length date))))\n       (= (string-length\
    \ date) 1 (string-match #\"\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\" (substring\
    \ date 0 (string-length date))))\n       (= (string-length date) 1 (string-match\
    \ #\"\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\" (substring date 0 (string-length ",
  "  (define year (substring date 0 -4))\n  (define month (substring date -3 -2))\n\
    \  (define day (substring date -1 -1))\n  (cond\n    [(string? date) #t]\n   \
    \ [(< (length day) 1) #f]\n    [(and (> day 31) (< month 2)) #f]\n    [(and (>\
    \ month 12) (> year 99)) #f]\n    [(< month (substring date 0 1)) #f]\n    [(<\
    \ month (substring date 0 2)) #f]\n    [(< month (substring date 0 3)) #f]\n \
    \   [(< month (substring date 0 4)) #f]\n    [(< month (substring date 0 5)) #f]\n\
    \    [(< month (substring date 0 6)) #f]\n    [(< month (substring date 0 7))\
    \ #f]\n    [(< month (substring date 0 8)) #f]\n    [(< month (substring date\
    \ 0 9)) #f]\n    [(< month (substring date 0 10)) #f]\n    [(< month (substring\
    \ date 0 11)) #f]\n    [(< month (substring date 0 12)) #f]\n    [else #t]\n \
    \ )\n)\n", "  (cond\n    [(empty? date) #t]\n    [(< 1 (string-length date))\n\
    \     (cond [(<= 3 (string-length date))\n            (< 1 (string-length date))]\n\
    \           [#t]\n           [#f])]\n    [(< 31 (string-length date))\n     (cond\n\
    \       [(<= 7 (string-length date))\n        (< 1 (string-length date))]\n  \
    \     [#t]\n       [#f])]\n    [(< 30 (string-length date))\n     (cond\n    \
    \   [(<= 9 (string-length date))\n        (< 1 (string-length date))]\n      \
    \ [#t]\n       [#f])]\n    [(< 29 (string-length date))\n     (cond\n       [(<=\
    \ 11 (string-length date))\n        (< 1 (string-length date))]\n       [#t]\n\
    \       [#f])]\n    [(< 12 (string-length date))\n     (cond\n       [(<= 12 (string-length\
    \ date))\n        (< 1 (string-length date))]\n       [#t]\n       [#f])]\n  \
    \  [(string-equal? (substring date 0 2) \"-\")\n     (cond\n       [(string-equal?\
    \ (substring date 2 1) \"-\")\n        (cond\n           [(string-equal? (substring\
    \ date 3 1) \"-\")\n            (cond\n               [(string-equal? (substring\
    \ date 5 1) \"-\")\n                (cond\n                   [(string-equal?\
    \ (substring date 7 1) \"-\")\n                    (cond\n                   \
    \    [(string-equal? (substring date 8 1) \"-\")\n                        (cond\n\
    \                           [(string-equal? (substring date 10 1) \"-\")\n   \
    \                         (cond\n                               [(string-equal?\
    \ (substring date 12 1) \"-\")\n                                (cond\n      \
    \                             [(string-equal? (substring date 14 1) \"-\")\n \
    \                                   (cond\n                                  \
    \     [(string-equal? (substring date 16 1) \"-\")\n                         \
    \               (cond\n                                           [(string-equal?\
    \ (substring date 18 1) \"-\")\n                                            (cond\n\
    \                                               [(string-equal? (substring date\
    \ 20 1) \"-\")\n                                                (cond\n      \
    \                                             [(string-equal? (substring date\
    \ 22 1) \"-\")\n                                                    (cond\n  \
    \                                                     [(string-equal? (substring\
    \ date 24 1) \"-\")\n                                                        (cond\n\
    \                                                           [#f]\n           \
    \                                                [#f])]\n                    \
    \                                   [#f])]\n                                 \
    \                  [#f])]\n                                               [#f])]\n\
    \                                           [#f])]\n                         \
    \              [#f])]\n                                   [#f])]\n           \
    \                    [#f])]\n                           [#f])]", "  (cond\n  \
    \  ((null? date) #f)\n    ((< (length (string-ref date 0 2)) 2) #f)\n    ((< (length\
    \ (string-ref date 0 1)) 2) #f)\n    ((< (length (string-ref date 2 2)) 2) #f)\n\
    \    ((< (length (string-ref date 1 1)) 2) #f)\n    ((< (length (string-ref date\
    \ 0 1)) 2) #f)\n    ((< (length (string-ref date 1 2)) 2) #f)\n    ((< (length\
    \ (string-ref date 2 1)) 2) #f)\n    ((< (length (string-ref date 2 2)) 2) #f)\n\
    \    ((< (length (string-ref date 2 3)) 2) #f)\n    ((< (length (string-ref date\
    \ 3 1)) 2) #f)\n    ((< (length (string-ref date 3 2)) 2) #f)\n    ((< (length\
    \ (string-ref date 3 3)) 2) #f)\n    ((< (length (string-ref date 4 1)) 2) #f)\n\
    \    ((< (length (string-ref date 4 2)) 2) #f)\n    ((< (length (string-ref date\
    \ 4 3)) 2) #f)\n    ((< (length (string-ref date 4 4)) 2) #f)\n    ((< (length\
    \ (string-ref date 4 5)) 2) #f)\n    ((< (length (string-ref date 4 6)) 2) #f)\n\
    \    ((< (length (string-ref date 4 7)) 2) #f)\n    ((< (length (string-ref date\
    \ 4 8)) 2) #f)\n    ((< (length (string-ref date 4 9)) 2) #f)\n    ((< (length\
    \ (string-ref date 4 10)) 2) #f)\n    ((< (length (string-ref date 4 11)) 2) #f)\n\
    \    ((< (length (string-ref date 4 12)) 2) #f)\n    ((< (length (string-ref date\
    \ 5 1)) 2) #f)\n    ((< (length (string-ref date 5 2)) 2) #f)\n    ((< (length\
    \ (string-ref date 5 3)) 2) #f)\n    ((< (length (string-ref date 5 4)) 2) #f)\n\
    \    ((< (length (string-ref date 5 5)) 2) #f)\n    ((< (length (string-ref date\
    \ 5 6)) 2) #f)\n    ((< (length (string-ref date 5 7)) 2) #f)\n    ((< (length\
    \ (string-ref date 5 8)) 2) #f)\n    ((< (length (string-ref date 5 9)) 2) #f)\n\
    \    ((< (length (string-ref date 5 10)) 2) #f)\n    ((< (length (string-ref date\
    \ 5 11)) 2) #f)\n    ((< (length (string-ref date 5 12)) 2) #f)\n    ((< (length\
    \ (string-", "  (if (string-empty? date)\n      #f\n      (if (string-equal? date\
    \ \"\")\n          #t\n          (and (> (string-length date) 5) (< string-length\
    \ date 10))\n          (and (> (string-length date) 10) (< string-length date\
    \ 14))\n          (and (> (string-length date) 15) (< string-length date 16))\n\
    \          (and (< string (substring date 0 (string-length date) 4)) (string-equal?\
    \ date \"01\")\n              (string-equal? date \"03\")\n              (string-equal?\
    \ date \"05\")\n              (string-equal? date \"07\")\n              (string-equal?\
    \ date \"08\")\n              (string-equal? date \"10\")\n              (string-equal?\
    \ date \"12\")\n              (string-equal? date \"02\")\n              (string-equal?\
    \ date \"04\")\n              (string-equal? date \"06\")\n              (string-equal?\
    \ date \"09\")\n              (string-equal? date \"11\")\n              (string-equal?\
    \ date \"13\")\n              (string-equal? date \"14\")\n              (string-equal?\
    \ date \"15\")\n              (string-equal? date \"16\")\n              (string-equal?\
    \ date \"20\")\n              (string-equal? date \"21\")\n              (string-equal?\
    \ date \"22\")\n              (string-equal? date \"23\")\n              (string-equal?\
    \ date \"24\")\n              (string-equal? date \"25\")\n              (string-equal?\
    \ date \"26\")\n              (string-equal? date \"27\")\n              (string-equal?\
    \ date \"28\")\n              (string-equal? date \"29\")\n              (string-equal?\
    \ date \"30\")\n              (string-equal? date \"31\")\n              (string-equal?\
    \ date \"00\")\n              (string-equal? date \"01\")\n              (string-equal?\
    \ date \"02\")\n              (string-equal? date \"03\")\n              (string-equal?\
    \ date \"04\")\n              (string-equal? date \"05\")\n              (string-equal?\
    \ date \"06\")\n              (string-equal? date \"07\")\n              (string-equal?\
    \ date \"08\")\n              (string-equal? date \"09\")\n              (string-equal?\
    \ date \"10\")\n              (string-equal? date \"11\")\n              (string-equal?\
    \ date \"12\")\n              (string-equal? date \"13\")\n              (string-equal?\
    \ date ", "  (cond ((null? date) #f)\n        ((< 1 (length date))\n         (cond\
    \ ((= (length date) 4) #t)\n              ((= (position 2 date) 1) #t)\n     \
    \         ((= (position 2 date) 3) #t)\n              ((= (position 2 date) 5)\
    \ #t)\n              ((= (position 2 date) 7) #t)\n              ((= (position\
    \ 2 date) 8) #t)\n              ((= (position 2 date) 10) #t)\n              ((=\
    \ (position 2 date) 12) #t)\n              ((= (length date) 5) #t)\n        \
    \      ((= (length date) 6) #t)\n              ((= (length date) 9) #t)\n    \
    \          ((= (length date) 11) #t)\n              ((= (length date) 13) #t)\n\
    \              ((= (length date) 14) #t)\n              ((= (length date) 15)\
    \ #t)\n              ((= (length date) 16) #t)\n              ((= (length date)\
    \ 18) #t)\n              ((= (length date) 19) #t)\n              ((= (length\
    \ date) 20) #t)\n              ((= (length date) 21) #t)\n              ((= (length\
    \ date) 23) #t)\n              ((= (length date) 24) #t)\n              ((= (length\
    \ date) 25) #t)\n              ((= (length date) 26) #t)\n              ((= (length\
    \ date) 27) #t)\n              ((= (length date) 28) #t)\n              ((= (length\
    \ date) 29) #t)\n              ((= (length date) 30) #t)\n              ((= (length\
    \ date) 31) #t)\n              ((= (length date) 32) #t)\n              ((= (length\
    \ date) 33) #t)\n              ((= (length date) 34) #t)\n              ((= (length\
    \ date) 35) #t)\n              ((= (length date) 36) #t)\n              ((= (length\
    \ date) 37) #t)\n              ((= (length date) 38) #t)\n              ((= (length\
    \ date) 39) #t)\n              ((= (length date) 40) #t)\n              ((= (length\
    \ date) 41) #t)\n              ((= (length date) 42) #t)\n              ((= (length\
    \ date) 43) #t)\n              ((= (length date) 44) #t)\n              ((= (length\
    \ date) 45) #t)\n              ((= (length date) 46) #t)", "  (cond\n    [(string-empty?\
    \ date) #t]\n    [(< (string-length date) 4) #f]\n    [(< (string-length date)\
    \ 10) #t]\n    [(< (string-length date) 13) #t]\n    [(< (string-length date)\
    \ 16) #t]\n    [(< (string-length date) 19) #t]\n    [(< (string-length date)\
    \ 22) #t]\n    [(< (string-length date) 25) #t]\n    [(< (string-length date)\
    \ 28) #t]\n    [(< (string-length date) 31) #t]\n    [(< (string-length date)\
    \ 32) #t]\n    [(< (string-length date) 33) #t]\n    [(< (string-length date)\
    \ 35) #t]\n    [(< (string-length date) 37) #t]\n    [(< (string-length date)\
    \ 40) #t]\n    [(< (string-length date) 41) #t]\n    [(< (string-length date)\
    \ 43) #t]\n    [(< (string-length date) 45) #t]\n    [(< (string-length date)\
    \ 47) #t]\n    [(< (string-length date) 49) #t]\n    [(< (string-length date)\
    \ 51) #t]\n    [(< (string-length date) 53) #t]\n    [(< (string-length date)\
    \ 55) #t]\n    [(< (string-length date) 57) #t]\n    [(< (string-length date)\
    \ 59) #t]\n    [(< (string-length date) 61) #t]\n    [(< (string-length date)\
    \ 63) #t]\n    [(< (string-length date) 65) #t]\n    [(< (string-length date)\
    \ 67) #t]\n    [(< (string-length date) 69) #t]\n    [(< (string-length date)\
    \ 71) #t]\n    [(< (string-length date) 73) #t]\n    [(< (string-length date)\
    \ 75) #t]\n    [(< (string-length date) 77) #t]\n    [(< (string-length date)\
    \ 79) #t]\n    [(< (string-length date) 81) #t]\n    [(< (string-length date)\
    \ 83) #t]\n    [(< (string-length date) 85) #t]\n    [(< (string-length date)\
    \ 87) #t]\n    [(< (string-length date) 89) #t]\n    [(< (string-length date)\
    \ 91) #t]\n    [(< (string-length date) 93) #t]\n    [", "  \n  (if (null? date)\
    \ #f\n  (let ((splits (split-string (substring date 0 4) #\\-)))\n    (and (equal?\
    \ 6 splits)\n         (<= (- 1 (cadr splits)) 31)\n         (<= (- 1 (caddr splits))\
    \ 30)\n         (<= (- 1 (cadddr splits)) 29)\n         (equal? (car splits) \"\
    01\")\n         (equal? (caddr splits) \"01\")\n         (equal? (cadddr splits)\
    \ \"01\")\n         (equal? (cadr splits) \"02\")\n         (equal? (caddr splits)\
    \ \"03\")\n         (equal? (cadddr splits) \"05\")\n         (equal? (cadr splits)\
    \ \"07\")\n         (equal? (caddr splits) \"08\")\n         (equal? (cadddr splits)\
    \ \"08\")\n         (equal? (cadr splits) \"09\")\n         (equal? (caddr splits)\
    \ \"11\")\n         (equal? (cadddr splits) \"12\")\n         (equal? (cadr splits)\
    \ \"12\")\n         (equal? (cadddr splits) \"12\")\n         (equal? (cadddr\
    \ splits) \"01\")))))\n", "  (cond ((empty? date) #f)\n        ((< 1 (string->number\
    \ (substring date 0 2)))\n         (and (< 1 (string->number (substring date 2\
    \ 1)))\n               (< 1 (string->number (substring date 3 2)))\n         \
    \      (< 1 (string->number (substring date 4 2)))\n               (< 1 (string->number\
    \ (substring date 6 2)))\n               (< 1 (string->number (substring date\
    \ 9 2)))\n               (< 1 (string->number (substring date 11 2)))\n      \
    \         (< 1 (string->number (substring date 12 2)))\n               (< 1 (string->number\
    \ (substring date 3 1)))\n               (< 1 (string->number (substring date\
    \ 5 1)))\n               (< 1 (string->number (substring date 7 1)))\n       \
    \        (< 1 (string->number (substring date 8 1)))\n               (< 1 (string->number\
    \ (substring date 10 1)))\n               (< 1 (string->number (substring date\
    \ 12 1)))\n               (< 1 (string->number (substring date 1 1)))\n      \
    \         (< 1 (string->number (substring date 4 1)))\n               (< 1 (string->number\
    \ (substring date 6 1)))\n               (< 1 (string->number (substring date\
    \ 9 1)))\n               (< 1 (string->number (substring date 11 1)))\n      \
    \         (< 1 (string->number (substring date 12 1)))\n               (< 1 (string->number\
    \ (substring date 2 1)))\n               (< 1 (string->number (substring date\
    \ 5 1)))\n               (< 1 (string->number (substring date 7 1)))\n       \
    \        (< 1 (string->number (substring date 8 1)))\n               (< 1 (string->number\
    \ (substring date 10 1)))\n               (< 1 (string->number (substring date\
    \ 12 1)))\n               (< 1 (string->number (substring date 3 2)))\n      \
    \         (< 1 (string->number (substring date 5 2)))\n               (< 1 (string->number\
    \ (substring date 7 2)))\n               (< 1 (string->number (substring date\
    \ 8 2)))\n               (< 1 (string->number (substring date 10 2)))\n      \
    \         (< 1 (string->number (substring date 12 2)))\n               (< 1 (string->number\
    \ (substring date 4 2)))\n               (< 1 (string->number (substring date\
    \ 6 2)))\n               (< 1 (string->number (substring date 9 2)))\n       \
    \        (< 1 (string->number (substring date 11 2)))\n               (< 1 (string->number\
    \ (substring date 12 2)))\n               (< 1 (string->number (substring date\
    \ 6 1)))\n               (< 1 (string->number (sub", "  (cond\n    ((empty? date)\
    \ #f)\n    ((< 1 (length (substring-no-case-match date \"^[\\\\S]+$\"))) #f)\n\
    \    ((< 1 (length (substring-no-case-match date \"^[1-9]|1[012]$\"))) #f)\n \
    \   ((< 1 (length (substring-no-case-match date \"^[0-3][0-9]$\"))) #f)\n    ((<\
    \ 1 (length (substring-no-case-match date \"^[0-3][0-9]|[12][0-9]|0[1-9]$\")))\
    \ #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]$\"))) #f)\n\
    \    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]|3[01]$\"))) #f)\n\
    \    ((< 1 (length (substring-no-case-match date \"^0[1-9]|1[012]-[12][0-9]|3[01]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-3][0-9]-[0-2][0-9]-[0-9][0-9][0-9][0-9]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-3][0-9]-[0-2][0-9]-[0-9][0-9][0-9][0-9][0-9]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]-[1-9]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]-[1-9]-[0-2][0-9]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]-[1-9]-[0-2][0-9]-[0-9][0-9][0-9][0-9]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]-[1-9]-[0-2][0-9]-[0-9][0-9][0-9][0-9][0-9]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]-[1-9]-[0-2][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]-[1-9]-[0-2][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]-[1-9]-[0-2][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\"\
    ))) #f)\n    ((< 1 (length (substring-no-case-match date \"^[0-2][0-9]-[1-9]-[0-2][0-9",
  "  (let-values (((m n) (tokenize (date) \"/\" \"-\" \"-\"))\n              (valid-months\
    \ #{\"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\"}\n                      \
    \       (lambda (month day)\n                                 (and (>= month 12)\n\
    \                                        (= day 31)))))\n    (valid-days\n   \
    \  (lambda (month day)\n       (and (>= month 12)\n            (= day 30)))))\n\
    \  (let-values (((day1 month1 year1) (tokenize (date) \"/\" \"-\" \"-\"))\n  \
    \            (valid-days (lambda (month1 day1)\n                            (and\
    \ (>= month1 12)\n                                (= day1 31)))))\n    (valid-years\n\
    \     (lambda (year1 month1 day1)\n       (and (>= month1 12)\n            (=\
    \ day1 30)))))\n  (let-values (((year2 month2) (tokenize (date) \"/\" \"-\" \"\
    -\"))\n              (valid-years #{\"04\" \"06\" \"09\" \"11\"}\n           \
    \                 (lambda (month2 day2)\n                                (and\
    \ (>= month2 12)\n                                    (= day2 29)))))\n    (valid-months\n\
    \     (lambda (month2 day2)\n       (and (>= month2 12)\n            (= day2 29)))))\n\
    \  (let-values (((day3 month3) (tokenize (date) \"/\" \"-\" \"-\"))\n        \
    \      (valid-days (lambda (month3 day3)\n                            (and (>=\
    \ month3 12)\n                                (= day3 31)))))\n    (valid-months\n\
    \     (lambda (month3 day3)\n       (and (>= month3 12)\n            (= day3 31)))))\n\
    \  (= (* m n) (* 31 31))\n  (= (* m n) (* 30 31))\n  (= (* m n) (* 29 30))\n \
    \ (< n 0))\n", "  (cond [(empty? date) #t]\n        [(< 1 (length (date #:d))\
    \ #f)\n         (< 1 (length (date #:m)) #f)\n         (< 1 (length (date #:y))\
    \ #f)\n         (< 1 (length (date #:a)) #f)\n         (< 1 (length (date #:b))\
    \ #f)\n         (< 1 (length (date #:c)) #f)\n         (< 1 (length (date #:d))\
    \ #f)\n         (< 1 (length (date #:e)) #f)\n         (< 1 (length (date #:f))\
    \ #f)\n         (< 1 (length (date #:g)) #f)\n         (< 1 (length (date #:h))\
    \ #f)\n         (< 1 (length (date #:i)) #f)\n         (< 1 (length (date #:j))\
    \ #f)\n         (< 1 (length (date #:k)) #f)\n         (< 1 (length (date #:l))\
    \ #f)\n         (< 1 (length (date #:m)) #f)\n         (< 1 (length (date #:n))\
    \ #f)\n         (< 1 (length (date #:o)) #f)\n         (< 1 (length (date #:p))\
    \ #f)\n         (< 1 (length (date #:q)) #f)\n         (< 1 (length (date #:r))\
    \ #f)\n         (< 1 (length (date #:s)) #f)\n         (< 1 (length (date #:t))\
    \ #f)\n         (< 1 (length (date #:u)) #f)\n         (< 1 (length (date #:v))\
    \ #f)\n         (< 1 (length (date #:w)) #f)\n         (< 1 (length (date #:x))\
    \ #f)\n         (< 1 (length (date #:y)) #f)\n         (< 1 (length (date #:z))\
    \ #f)\n         (< 1 (length (date #:A)) #f)\n         (< 1 (length (date #:B))\
    \ #f)\n         (< 1 (length (date #:C)) #f)\n         (< 1 (length (date #:D))\
    \ #f)\n         (< 1 (length (date #:E)) #f)\n         (< 1 (length (date #:F))\
    \ #f)\n         (< 1 (length (date #:G)) #f)\n         (< 1 (length (date #:H))\
    \ #f)\n         (< 1 (length (date #:I)) #f)\n         (< 1 (length (date #",
  "  (cond\n    [(or (empty? date)\n          (< (length date) 4))\n     #f]\n   \
    \ [(< (length date) 4)\n     #f]\n    [(< (length date) 6)\n     #f]\n    [(<\
    \ 1 (sub (sub (sub (reverse (sub (reverse date))) 4) 4) 2) date)\n     #f]\n \
    \   [(< 1 (sub (sub (reverse (sub (reverse date))) 5) 5) date)\n     #f]\n   \
    \ [(< 1 (sub (sub (reverse (sub (reverse date))) 7) 7) date)\n     #f]\n    [(<\
    \ 1 (sub (sub (reverse (sub (reverse date))) 8) 8) date)\n     #f]\n    [(< 1\
    \ (sub (sub (reverse (sub (reverse date))) 9) 9) date)\n     #f]\n    [(< 1 (sub\
    \ (sub (reverse (sub (reverse date))) 10) 10) date)\n     #f]\n    [(< 1 (sub\
    \ (sub (reverse (sub (reverse date))) 11) 11) date)\n     #f]\n    [(< (sub (reverse\
    \ (sub (reverse date)) 2) 1) date)\n     #f]\n    [(< 1 (sub (sub (reverse (sub\
    \ (reverse date))) 3) 3) date)\n     #f]\n    [(< 1 (sub (sub (reverse (sub (reverse\
    \ date))) 4) 4) date)\n     #f]\n    [(< (sub (reverse (sub (reverse date)) 3)\
    \ 3) date)\n     #f]\n    [(< 1 (sub (sub (reverse (sub (reverse date))) 5) 5)\
    \ date)\n     #f]\n    [(< 1 (sub (sub (reverse (sub (reverse date))) 6) 6) date)\n\
    \     #f]\n    [(< 1 (sub (sub (reverse (sub (reverse date))) 7) 7) date)\n  \
    \   #f]\n    [(< 1 (sub (sub (reverse (sub (reverse date))) 8) 8) date)\n    \
    \ #f]\n    [(< 1 (sub (sub (reverse (sub (reverse date))) 9) 9) date)\n     #f]\n\
    \    [(< 1 (sub (sub (reverse (sub (reverse date))) 10) 10) date)\n     #f]\n\
    \    [(< 1 (sub (sub (reverse (sub (reverse date))) 11) 11) date)\n     #f]\n\
    \    [(< (sub (reverse (sub (reverse date)) 2) 1) date)\n     #f]\n    [(< 1 (sub\
    \ (sub (reverse (sub", "  (cond\n    [(string-length date) '#f]\n    [(< (string-length\
    \ date) 7) '#f]\n    [(< (string-length date) 9) '#f]\n    [(< (string-length\
    \ date) 11) '#f]\n    [(< (string-length date) 14) '#f]\n    [(< (string-length\
    \ date) 16) '#f]\n    [(< (string-length date) 19) '#f]\n    [(< (string-length\
    \ date) 21) '#f]\n    [(< (string-length date) 24) '#f]\n    [(< (string-length\
    \ date) 27) '#f]\n    [(< (string-length date) 30) '#f]\n    [(> (string-length\
    \ date) 31) '#f]\n    [(< (substring (date 0 2) 0 1) '#f)\n     (< (substring\
    \ (date 0 2) 0 3) '#f)\n     (> (substring (date 0 2) 0 2) '#f)\n     '#f]\n \
    \   [(< (substring (date 2 4) 2 1) '#f)\n     (< (substring (date 2 4) 2 3) '#f)\n\
    \     (> (substring (date 2 4) 2 2) '#f)\n     '#f]\n    [(< (substring (date\
    \ 4 6) 4 1) '#f)\n     (< (substring (date 4 6) 4 3) '#f)\n     (> (substring\
    \ (date 4 6) 4 2) '#f)\n     '#f]\n    [(< (substring (date 6 8) 6 1) '#f)\n \
    \    (< (substring (date 6 8) 6 3) '#f)\n     (> (substring (date 6 8) 6 2) '#f)\n\
    \     '#f]\n    [(< (substring (date 8 10) 8 1) '#f)\n     (< (substring (date\
    \ 8 10) 8 3) '#f)\n     (> (substring (date 8 10) 8 2) '#f)\n     '#f]\n    [(<\
    \ (substring (date 10 12) 10 1) '#f)\n     (< (substring (date 10 12) 10 3) '#f)\n\
    \     (> (substring (date 10 12) 10 2) '#f)\n     '#f]\n    [(< (substring (date\
    \ 12 13) 12 1) '#f)\n     (< (substring (date 12 13) 12 3) '#f)\n     (> (substring\
    \ (date 12 13) 12 2) '#f)\n     '#f]\n    [(< (substring (date 13 14) 13 1) '#f)\n\
    \     (< (substring (date 13 14) 13 3) '#f)\n     (> (substring (date 13 14) 13\
    \ 2) '#f)\n", "  (cond\n    [(or (not (empty? date))\n         (< (length (date))\
    \ 8) (raise-invalid-date-string (date))])\n     (check-date date)]\n    [(or (not\
    \ (empty? date))\n         (and (< (length (date)) 9) (= (length (substring date\
    \ 0 2)) 2) (= (length (substring date 3 4)) 2) (= (length (substring date 7 4))\
    \ 2) (= (length (substring date 8 4)) 2) (= (length (substring date 10 4)) 2))\
    \ (raise-invalid-date-string (date))])\n     (check-date date)]\n    [(or (not\
    \ (empty? date))\n         (and (< (length (date)) 10) (= (length (substring date\
    \ 0 2)) 2) (= (length (substring date 3 4)) 2) (= (length (substring date 7 4))\
    \ 2) (= (length (substring date 8 4)) 2) (= (length (substring date 10 4)) 2))\
    \ (raise-invalid-date-string (date))])\n     (check-date date)]\n    [(or (not\
    \ (empty? date))\n         (and (< (length (date)) 11) (= (length (substring date\
    \ 0 2)) 2) (= (length (substring date 3 4)) 2) (= (length (substring date 7 4))\
    \ 2) (= (length (substring date 8 4)) 2) (= (length (substring date 10 4)) 2)\
    \ (= (length (substring date 11 4)) 2)) (raise-invalid-date-string (date))])\n\
    \     (check-date date)]\n    [(or (not (empty? date))\n         (and (< (length\
    \ (date)) 12) (= (length (substring date 0 2)) 2) (= (length (substring date 3\
    \ 4)) 2) (= (length (substring date 7 4)) 2) (= (length (substring date 8 4))\
    \ 2) (= (length (substring date 10 4)) 2) (= (length (substring date 11 4)) 2)\
    \ (= (length (substring date 12 4)) 2)) (raise-invalid-date-string (date))])\n\
    \     (check-date date)]\n    [(or (not (empty? date))\n         (and (< (length\
    \ (date)) 1) (= (length (substring date 0 2)) 1) (= (length (substring date 3\
    \ 4)) 1) (= (length (substring date 7 4)) 1) ", "  (if (or (not (empty? date))\n\
    \          (not (<= 1 (string->number (string-ref date 0 (string->length (string-ref\
    \ date 1 5)))))\n          (not (<= 31 (string->number (string-ref date 0 (string->length\
    \ (string-ref date 1 5)))))\n          (not (<= 30 (string->number (string-ref\
    \ date 0 (string->length (string-ref date 1 5)))))\n          (not (<= 29 (string->number\
    \ (string-ref date 0 (string->length (string-ref date 1 5)))))\n          (not\
    \ (string->char (string-ref date 0 1)) (string->char (string-ref date 0 1)))\n\
    \          (not (string->char (string-ref date 0 (string->length (string-ref date\
    \ 1 5)))) (string->char (string-ref date 0 (string->length (string-ref date 1\
    \ 5))))))\n      #f))\n", "  ;; 1. Validate that date is not empty\n  (when (not\
    \ (null? date))\n    ;; 2. Validate that the number of days is less than or equal\
    \ to 31 days for months 1,3,5,7,8,10,12. And the number of days is less than or\
    \ equal to 30 days for months 4,6,9,11. And, the number of days is less than or\
    \ equal to 29 for the month 2\n    (and (<= 0 (string-length date))\n        \
    \ (<= 0 (string-length (substring date 0 1)))\n         (<= 0 (string-length (substring\
    \ date 1 3)))\n         (<= 0 (string-length (substring date 2 2)))\n        \
    \ (<= 0 (string-length (substring date 3 2)))\n         (<= 0 (string-length (substring\
    \ date 4 1)))\n         (<= 0 (string-length (substring date 5 3)))\n        \
    \ (<= 0 (string-length (substring date 6 2)))\n         (<= 0 (string-length (substring\
    \ date 7 2)))\n         (<= 0 (string-length (substring date 8 2)))\n        \
    \ (<= 0 (string-length (substring date 9 2)))\n         (<= 0 (string-length (substring\
    \ date 10 2)))\n         (<= 0 (string-length (substring date 11 2)))\n      \
    \   (<= 0 (string-length (substring date 12 2)))\n         (<= 0 (string-length\
    \ (substring date 13 2)))\n         (<= 0 (string-length (substring date 14 2)))\n\
    \         (<= 0 (string-length (substring date 15 2)))\n         (<= 0 (string-length\
    \ (substring date 16 2)))\n         (<= 0 (string-length (substring date 17 2)))\n\
    \         (<= 0 (string-length (substring date 18 2)))\n         (<= 0 (string-length\
    \ (substring date 19 2)))\n         (<= 0 (string-length (substring date 20 2)))\n\
    \         (<= 0 (string-length (substring date 21 2)))\n         (<= 0 (string-length\
    \ (substring date 22 2)))\n         (<= 0 (string-length (substring date 23 2)))\n\
    \         (<= 0 (string-length (substring date 24 2)))\n         (<= 0 (string-length\
    \ (substring date 25 2)))\n         (<= 0 (string-length (substring date 26 2)))\n\
    \         (<= 0 (string-length (substring date 27 2)))\n         (<= 0 (string-length\
    \ (substring date 28 2)))\n         (<= 0 (string-length (substring date 29 2)))\n\
    \         (<= 0 (string-length (substring date 30 2)))\n         (<= 0 (string-length\
    \ (substring date 31 2))\n         (<= 0 (string-length (substring date 32 2)))\n\
    \         (<= 0 (string-length (substring date 33 2)))\n         (<= 0 (string-length\
    \ (substring date 34 2)))\n         (<= 0 (string-length (substring ", "  (cond\n\
    \    [(empty? date) #f]\n    [(<= (length? date) 5) #f]\n    [(< 1 (string-to-int\
    \ (string-ref date 0 1)) #f]\n    [(< 1 (string-to-int (string-ref date 0 2))\
    \ #f]\n    [(< 1 (string-to-int (string-ref date 0 3)) #f]\n    [(< 1 (string-to-int\
    \ (string-ref date 0 4)) #f]\n    [(< 1 (string-to-int (string-ref date 0 5))\
    \ #f]\n    [(< 1 (string-to-int (string-ref date 0 6)) #f]\n    [(< 1 (string-to-int\
    \ (string-ref date 0 7)) #f]\n    [(< 1 (string-to-int (string-ref date 0 8))\
    \ #f]\n    [(< 1 (string-to-int (string-ref date 0 9)) #f]\n    [(< 1 (string-to-int\
    \ (string-ref date 0 10)) #f]\n    [(< 1 (string-to-int (string-ref date 0 11))\
    \ #f]\n    [(< 1 (string-to-int (string-ref date 0 12)) #f]\n    [(< 1 (string-to-int\
    \ (string-ref date 0 13)) #f]\n    [(< 1 (string-to-int (string-ref date 0 14))\
    \ #f]\n    [(< 1 (string-to-int (string-ref date 0 15)) #f]\n    [(< 1 (string-to-int\
    \ (string-ref date 0 16)) #f]\n    [(< 1 (string-to-int (string-ref date 0 17))\
    \ #f]\n    [(< 1 (string-to-int (string-ref date 0 18)) #f]\n    [(< 1 (string-to-int\
    \ (string-ref date 0 19)) #f]\n    [(< 1 (string-to-int (string-ref date 0 20))\
    \ #f]\n    [(< 1 (string-to-int (string-ref date 0 21)) #f]\n    [(< 1 (string-to-int\
    \ (string-ref date 0 22)) #f]\n    [(< 1 (string-to-int (string-ref date 0 23))\
    \ #f]\n    [(< 1 (string-to-int (string-ref date 0 24)) #f]\n    [(< 1 (string-to-int\
    \ (string-ref date 0 25)) #f]\n    [(< 1 (string-to-int (string-ref date 0 26))\
    \ #f]\n    [(< 1 (string-to-int (string-ref date 0 27)) #f]\n    [(< 1 (", " \
    \ (cond ((or (string-empty? date)\n             (number? date))\n         #f)\n\
    \        ((< (length date) 5)\n         #f)\n        ((< (char (nth (string-length\
    \ date) 2) #\\- ) 0)\n         #f)\n        ((< (char (nth (string-length date)\
    \ 3) #\\- ) 0)\n         #f)\n        ((< (char (nth (string-length date) 4) #\\\
    - ) 0)\n         #f)\n        ((< (char (nth (string-length date) 5) #\\- ) 0)\n\
    \         #f)\n        ((< (char (nth (string-length date) 7) #\\- ) 0)\n    \
    \     #f)\n        ((< (char (nth (string-length date) 8) #\\- ) 0)\n        \
    \ #f)\n        ((< (char (nth (string-length date) 9) #\\- ) 0)\n         #f)\n\
    \        ((< (char (nth (string-length date) 10) #\\- ) 0)\n         #f)\n   \
    \     ((< (char (nth (string-length date) 11) #\\- ) 0)\n         #f)\n      \
    \  ((< (char (nth (string-length date) 12) #\\- ) 0)\n         #f)\n        ((<\
    \ (char (nth (string-length date) 13) #\\- ) 0)\n         #f)\n        ((< (char\
    \ (nth (string-length date) 14) #\\- ) 0)\n         #f)\n        ((< (char (nth\
    \ (string-length date) 15) #\\- ) 0)\n         #f)\n        ((< (char (nth (string-length\
    \ date) 16) #\\- ) 0)\n         #f)\n        ((< (char (nth (string-length date)\
    \ 17) #\\- ) 0)\n         #f)\n        ((< (char (nth (string-length date) 18)\
    \ #\\- ) 0)\n         #f)\n        ((< (char (nth (string-length date) 19) #\\\
    - ) 0)\n         #f)\n        ((< (char (nth (string-length date) 20) #\\- ) 0)\n\
    \         #f)\n        ((< (char (nth (string-length date) 21) #\\- ) 0)\n   \
    \      #f)\n        ((< (char (nth (string-length date) 22) #\\- ) 0)\n      \
    \   #f)\n        ((< (char (nth (string-length date) 23) #\\- ) 0)\n         #f)\n\
    \        ((< (char (nth (string-length date) 24) #\\- ) 0)", "  (cond\n    [(and\
    \ (not (empty? date))\n          (< 1 (string-length date))\n          (< 31 #(if\
    \ (<= 1 (string-length date)) #f #f))\n          (< 30 (string-length date))\n\
    \          (< 29 #(if (<= 2 (string-length date)) #f #f))\n          (string-match\
    \ \"^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])(0?[1-9]|[12][0-9]|3[01])$\" (string-trim\
    \ date))\n          (< 1 (string-length date))\n          (< 12 (string-length\
    \ date))\n          (= 2 (string-length date)))\n     #t]\n    [(and (not (empty?\
    \ date))\n          (string-match \"^(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])$\"\
    \ (string-trim date))\n          (< 1 (string-length date))\n          (< 31 (string-length\
    \ date))\n          (< 30 (string-length date))\n          (< 29 (string-length\
    \ date))\n          (< 12 (string-length date)))\n     #f]\n    [(and (not (empty?\
    \ date))\n          (string-match \"^(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-2][0-9]|3[0-1])(0?[1-9]|[1-",
  "  (cond [(empty? date) #t]\n        [(month < 1) #f]\n        [(month > 12) #f]\n\
    \        [(day < 1) #f]\n        [(day > 31) #f]\n        [(month < 4 || month\
    \ > 6) #f]\n        [(month < 2 || month > 2) #t]))\n", "  (and (not (null? date))\n\
    \       (< (length (substring date 0 2)) 2)\n       (< (length (substring date\
    \ 0 1)) 2)\n       (< (length (substring date 2 4)) 2)\n       (> (length (substring\
    \ date 0 2)) 2)\n       (> (length (substring date 0 1)) 2)\n       (> (length\
    \ (substring date 2 4)) 2)\n       (< (length (substring date 2 4)) 2)\n     \
    \  (< (length (substring date 2 5)) 2)\n       (< (length (substring date 3 4))\
    \ 2)\n       (> (length (substring date 3 4)) 2)\n       (> (length (substring\
    \ date 2 5)) 2)\n       (> (length (substring date 3 4)) 2)\n       (> (length\
    \ (substring date 3 5)) 2)\n       (= (substring date 0 2) \"-\")\n       (= (substring\
    \ date 2 4) \"-\")\n       (= (substring date 2 5) (list \"01\" \"02\" \"03\"\
    \ \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\" \"11\" \"12\"))\n       (=\
    \ (substring date 3 4) \"-\")\n       (= (substring date 3 5) (list \"01\" \"\
    02\" \"03\" \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\" \"11\" \"12\" \"\
    13\" \"14\" \"15\" \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"\
    24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\"))\n       (= (substring\
    \ date 0 1) \"-\")\n       (= (substring date 1 2) (list \"01\" \"02\" \"03\"\
    \ \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\" \"11\" \"12\" \"13\" \"14\"\
    \ \"15\" \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\"\
    \ \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\"\
    \ \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\"\
    \ \"48\" \"49\" \"50\" \"51\" \"52\" \"53\" \"54\" \"55\" \"56\" \"57\" \"58\"\
    \ \"59\" \"60\" \"61\" \"62\" \"63\" \"64\" \"65\" \"66\" \"67\" \"68\" \"69\"\
    \ \"70\" \"71\" \"72\" \"73\" \"74\" \"75\" \"76\" \"77\" \"78\" \"79\" \"80\"\
    \ \"81\" \"82\" \"83\" \"84\" \"85\" \"86\" \"87\" \"88\" \"89\" \"90\" \"91\"\
    \ \"", "  (not (empty? date)))\n", "  (cond [(empty? date) #f]\n        [(< 1\
    \ (string-length date))\n         (format #f \"The date string should not be empty.\"\
    )]\n        [(< 1 (parse-integer date 'days))\n         (format #f \"The number\
    \ of days should not be less than 1.\")]\n        [(< 1 (parse-integer date 'months))\n\
    \         (format #f \"The number of months must not be less than 1.\")]\n   \
    \     [(< 1 (parse-integer date 'years))\n         (format #f \"The number of\
    \ years must not be less than 1.\")]\n        [(< 1 (parse-integer date 'months))\n\
    \         (format #f \"The number of months must not be less than 1.\")]\n   \
    \     [else\n         (= 1 (parse-integer date 'months))\n         (= 2 (parse-integer\
    \ date 'days))\n         (= 10 (parse-integer date 'months))\n         (= 11 (parse-integer\
    \ date 'months))\n         (= 12 (parse-integer date 'months))\n         (= 4\
    \ (parse-integer date 'months))\n         (= 6 (parse-integer date 'months))\n\
    \         (= 9 (parse-integer date 'months))\n         (= 11 (parse-integer date\
    \ 'months))\n         (= 31 (parse-integer date 'months))\n         (= 30 (parse-integer\
    \ date 'months))\n         (= 29 (parse-integer date 'months))\n         (= 2040\
    \ (parse-integer date 'years))\n         (= 2020 (parse-integer date 'years))\n\
    \         (= 2040 (parse-integer date 'years))\n         (= 2020 (parse-integer\
    \ date 'years))\n         (= 2012 (parse-integer date 'years))\n         (= 2040\
    \ (parse-integer date 'years))\n         (= 2020 (parse-integer date 'years))\n\
    \         (= 2040 (parse-integer date 'years))\n         (= 2020 (parse-integer\
    \ date 'years))\n         (= 2012 (parse-integer date 'years))\n         (= 2040\
    \ (parse-integer date 'years))\n         (= 2020 (parse-integer date 'years))\n\
    \         (= 2040 (parse-integer date 'years))\n         (= 2020 (parse-integer\
    \ date 'years))\n         (= 2012 (parse-integer date 'years))\n         (= 2040\
    \ (parse-integer date 'years))\n         (= 2020 (parse-integer date 'years))\n\
    \         (= 2040 (parse-integer date 'years))\n         (= 2020 (parse-integer\
    \ date 'years))\n         (= 2012", "  (and (not (empty? date))\n       (not (<\
    \ (length date) 3) (not (= 0 (length date) 4)) (not (= 1 (length date) 4)) (not\
    \ (= 2 (length date) 4)))\n       (not (= (first date) (second date))\n      \
    \      (= (first date) (second date) (append (reverse (substring date 2 5)) (substring\
    \ date 6 10))\n                                            (append (reverse (substring\
    \ date 6 5)) (substring date 10 10))\n                                       \
    \     (append (reverse (substring date 10 5)) (substring date 12 10))\n      \
    \                                      (append (reverse (substring date 12 5))\
    \ \"00\")\n                                            (substring date 3 5)))\n\
    \       (not (< 1 (second date) (first date)))\n       (not (= 1 (second date)\
    \ (first date) (append (reverse (substring date 6 5)) (substring date 10 10))\n\
    \                                                  (append (reverse (substring\
    \ date 10 5)) (substring date 12 10))\n                                      \
    \            (append (reverse (substring date 12 5)) \"00\")\n               \
    \                                   (substring date 3 5)))\n       (not (= 1 (second\
    \ date) (first date) (append (reverse (substring date 10 5)) (substring date 12\
    \ 10))\n                                                  (append (reverse (substring\
    \ date 12 5)) \"00\")\n                                                  (substring\
    \ date 3 5)))\n       (not (= 1 (second date) (first date) (append (reverse (substring\
    \ date 6 5)) (substring date 10 10))\n                                       \
    \           (append (reverse (substring date 10 5)) (substring date 12 10))\n\
    \                                                  (append (reverse (substring\
    \ date 12 5)) \"00\")\n                                                  (substring\
    \ date 3 5)))\n       (not (= 1 (second date) (first date) (append (reverse (substring\
    \ date 6 5)) (substring date 10 10))\n                                       \
    \           (append (reverse (substring date 10 5)) (substring date 12 10))\n\
    \                                                  (append (reverse (substring\
    \ date 12 5)) \"00\")\n                                                  (substring\
    \ date 3 5)))\n       (not (< 1 (second date) (first date) (append (reverse (substring\
    \ date 6 5)) (substring date 10 10))\n                                       \
    \           (append (reverse (substring date 10 5)) (substring date 12 10))\n\
    \                                                  (append (reverse (substring\
    \ date 12 5)) \"00\")\n                                                  (substring\
    \ date 3 5)))\n       (not (< 1 (second date) (first date) (append (re", "  (cond\
    \ ((string-empty? date) #f)\n        ((< (length date) 3) #f)\n        ((< (length\
    \ date) 6) #f)\n        ((< (length date) 9) #f)\n        ((< (length date) 11)\
    \ #f)\n        ((< (length date) 13) #f)\n        ((< (length date) 16) #f)\n\
    \        ((< (length date) 19) #f)\n        ((< (length date) 21) #f)\n      \
    \  ((< (length date) 24) #f)\n        ((< (length date) 29) #f)\n        ((< (length\
    \ date) 31) #f)\n        ((< (length date) 32) #f)\n        ((< (length date)\
    \ 34) #f)\n        ((< (length date) 36) #f)\n        (else #t)))\n", "  (if (null?\
    \ date)\n      #f\n      (begin\n        (< (string-length date) 10)\n       \
    \ (< (string-to-int (substring date 0 2)) 12)\n        (< (string-to-int (substring\
    \ date 2 2)) 31)\n        (< (string-to-int (substring date 4 2)) 30)\n      \
    \  (< (string-to-int (substring date 6 2)) 29)\n        (< 0 (string-to-int (substring\
    \ date 0 2))\n            (string-to-int (substring date 2 2)))\n        (< 0\
    \ (string-to-int (substring date 4 2))\n            (string-to-int (substring\
    \ date 6 2))))\n      #t))\n", "  (cond\n    [(null? date) #t]\n    [(number?\
    \ date) (not (< date 31))\n     (not (< date 30))\n     (not (< date 29))\n  \
    \   (not (< date 28))\n     (not (< date 27))\n     (not (< date 26))\n     (not\
    \ (< date 25))\n     (not (< date 24))\n     (not (< date 23))\n     (not (< date\
    \ 22))\n     (not (< date 21))\n     (not (< date 20))\n     (not (< date 19))\n\
    \     (not (< date 18))\n     (not (< date 17))\n     (not (< date 16))\n    \
    \ (not (< date 15))\n     (not (< date 14))\n     (not (< date 13))\n     (not\
    \ (< date 12))\n     (not (< date 11))\n     (not (< date 10))\n     (not (< date\
    \ 9))\n     (not (< date 8))\n     (not (< date 7))\n     (not (< date 6))\n \
    \    (not (< date 5))\n     (not (< date 4))\n     (not (< date 3))\n     (not\
    \ (< date 2))\n     (not (< date 1))]\n    [(number? (substring date 0 2)) \n\
    \     (not (< 1 (substring date 0 2)))\n     (not (< (substring date 0 2) 12))\n\
    \     (not (< (substring date 0 2) 13))\n     (not (< (substring date 0 2) 14))\n\
    \     (not (< (substring date 0 2) 15))\n     (not (< (substring date 0 2) 16))\n\
    \     (not (< (substring date 0 2) 17))\n     (not (< (substring date 0 2) 18))\n\
    \     (not (< (substring date 0 2) 19))\n     (not (< (substring date 0 2) 20))\n\
    \     (not (< (substring date 0 2) 21))\n     (not (< (substring date 0 2) 22))\n\
    \     (not (< (substring date 0 2) 23))\n     (not (< (substring date 0 2) 24))\n\
    \     (not (< (substring date 0 2) 25))\n     (not (< (substring date 0 2) 26))\n\
    \     (not (< (substring date 0 2) 27))\n     (not (< (substring date 0 2) 28))\n\
    \     (not (< (substring date 0 2) 29))\n     (not (< (substring date 0 2) 30))\n\
    \     (not (< (substring date 0 2) ", "  (cond [(string=? date \"\") #t]\n   \
    \     [(>= (string-length date) 3) #f]\n        [(<  (string-to-int (string-slice-no-case\
    \ date 0 2)) 1) #f]\n        [(<  (string-to-int (string-slice-no-case (string-slice-no-case\
    \ date 0 2) 0 2)) 12) #f]\n        [(<  (string-to-int (string-slice-no-case (string-slice-no-case\
    \ date 0 2) 2 2)) 31) #f]\n        [(<  (string-to-int (string-slice-no-case (string-slice-no-case\
    \ (string-slice-no-case date 0 2) 4 2)) 30) #f]\n        [(<  (string-to-int (string-slice-no-case\
    \ (string-slice-no-case (string-slice-no-case date 0 2) 6 2)) 29) #f]\n      \
    \  [(<  (string-to-int (string-slice-no-case (string-slice-no-case (string-slice-no-case\
    \ date 0 2) 8 2)) 28) #f]\n        [(<  (string-to-int (string-slice-no-case (string-slice-no-case\
    \ (string-slice-no-case date 0 2) 10 2)) 31) #f]\n        [(<  (string-to-int\
    \ (string-slice-no-case (string-slice-no-case (string-slice-no-case date 0 2)\
    \ 12 2)) 30) #f]\n        [#t #f]))\n", "  (cond\n    [(not (empty? date)) (eq?\
    \ (length date) 7)\n           (and (<= (string-ref date 0) 1) (<= (string-ref\
    \ date 1) 3) (<= (string-ref date 2) 5))\n           (and (<= (string-ref date\
    \ 3) 1) (<= (string-ref date 4) 3) (<= (string-ref date 5) 6))\n           (and\
    \ (<= (string-ref date 6) 1) (<= (string-ref date 7) 2) (<= (string-ref date 8)\
    \ 3) (<= (string-ref date 9) 4))\n           (and (<= (string-ref date 10) 1)\
    \ (<= (string-ref date 11) 2) (<= (string-ref date 12) 3))]\n    [else #f]\n))\n",
  "  (not (empty? date))\n  (<= 1 (string-length (substring date 0 2)) (31 (string-length\
    \ (substring date 0 2))))\n  (<= 1 (string-length (substring date 2 4)) (30 (string-length\
    \ (substring date 2 4))))\n  (<= 1 (string-length (substring date 4 6)) (29 (string-length\
    \ (substring date 4 6))))\n  (<= 1 (string-length (substring date 6 8)) (12 (string-length\
    \ (substring date 6 8))))\n  (<= 1 (string-length (substring date 8 10)) (11 (string-length\
    \ (substring date 8 10))))\n  (<= 1 (string-length (substring date 10 12)) (10\
    \ (string-length (substring date 10 12))))\n  (boolean (= (string-length date)\
    \ 13)))\n", "  (let ((mm (substring date 0 2)))\n    (let ((dd  (substring date\
    \ 2 4)))\n      (let ((yy (substring date 4 6)))\n        (< mm 12)\n        (<\
    \ dd 31)\n        (< yy 30)\n        (= mm '01)\n        (= dd '03)\n        (=\
    \ yy '2000)))\n      (if (= mm '03)\n          (if (= dd '06)\n              (if\
    \ (= yy '2010)\n                  (= (- yyyy 19) 0)\n                  (= (- yyyy\
    \ 18) 0)\n                  (= (- yyyy 17) 0)\n                  (= (- yyyy 16)\
    \ 0)\n                  (= (- yyyy 15) 0)\n                  (= (- yyyy 14) 0)\n\
    \                  (= (- yyyy 13) 0)\n                  (= (- yyyy 12) 0)\n  \
    \                (= (- yyyy 11) 0)\n                  (= (- yyyy 10) 0)\n    \
    \              (= (- yyyy 9) 0)\n                  (= (- yyyy 8) 0)\n        \
    \          (= (- yyyy 7) 0)\n                  (= (- yyyy 6) 0)\n            \
    \      (= (- yyyy 5) 0)\n                  (= (- yyyy 4) 0)\n                \
    \  (= (- yyyy 3) 0)\n                  (= (- yyyy 2) 0)\n                  (=\
    \ (- yyyy 1) 0)\n                  (= (- yyyy 0) 1))\n              (if (= dd\
    \ '03)\n                  (if (= yy '2010)\n                      (= (- yyyy 19)\
    \ 0)\n                      (= (- yyyy 18) 0)\n                      (= (- yyyy\
    \ 17) 0)\n                      (= (- yyyy 16) 0)\n                      (= (-\
    \ yyyy 15) 0)\n                      (= (- yyyy 14) 0)\n                     \
    \ (= (- yyyy 13) 0)\n                      (= (- yyyy 12) 0)\n               \
    \       (= (- yyyy 11) 0)\n                      (= (- yyyy 10) 0)\n         \
    \             (= (- yyyy 9) 0)\n                      (= (- yyyy 8) 0)\n     \
    \                 (= (- yyyy 7) 0)\n                      (= (- yyyy 6) 0)\n \
    \                     (= (- yyyy 5) 0)\n                      (= (- yyyy 4) 0)\n\
    \                      (= (- yyyy 3) 0)\n                      (= (- yyyy 2) 0)\n\
    \                      (= (- yyyy 1) 0)\n                      (= (- yyyy 0) 1))\n\
    \                  (if (= yy '2010)\n                      (", "  (cond\n    ((string-empty?\
    \ date) #t)\n    ((string-length (substring date 0 2)) (string-length (substring\
    \ date 0 2))) #t)\n    ((string-length (substring date 0 4)) (string-length (substring\
    \ date 0 4))) #t)\n    ((string-length (substring date 0 6)) (string-length (substring\
    \ date 0 6))) #t)\n    ((string-length (substring date 0 8)) (string-length (substring\
    \ date 0 8))) #t)\n    ((string-length (substring date 0 10)) (string-length (substring\
    \ date 0 10))) #t)\n    ((string-length (substring date 0 12)) (string-length\
    \ (substring date 0 12))) #t)\n    ((string-length (substring date 0 2)) (string-length\
    \ (substring date 0 2))) #t)\n    ((string-length (substring date 0 4)) (string-length\
    \ (substring date 0 4))) #t)\n    ((string-length (substring date 0 6)) (string-length\
    \ (substring date 0 6))) #t)\n    ((string-length (substring date 0 8)) (string-length\
    \ (substring date 0 8))) #t)\n    ((string-length (substring date 0 10)) (string-length\
    \ (substring date 0 10))) #t)\n    ((string-length (substring date 0 12)) (string-length\
    \ (substring date 0 12))) #t)\n    ((string-length (substring date 0 2)) (string-length\
    \ (substring date 0 2))) #t)\n    ((string-length (substring date 0 4)) (string-length\
    \ (substring date 0 4))) #t)\n    ((string-length (substring date 0 6)) (string-length\
    \ (substring date 0 6))) #t)\n    ((string-length (substring date 0 8)) (string-length\
    \ (substring date 0 8))) #t)\n    ((string-length (substring date 0 10)) (string-length\
    \ (substring date 0 10))) #t)\n    ((string-length (substring date 0 12)) (string-length\
    \ (substring date 0 12))) #t)\n    ((string-length (substring date 0 2)) (string-length\
    \ (substring date 0 2))) #t)\n    ((string-length (substring date 0 4)) (string-length\
    \ (substring date 0 4))) #t)\n    ((string-length (substring date 0 6)) (string-length\
    \ (substring date 0 6))) #t)\n    ((string-length (substring date 0 8)) (string-length\
    \ (substring date 0 8))) #t)\n    ((string-length (substring date 0 10)) (string-length\
    \ (substring date ", "  (cond\n    [(empty? date) #f]\n    [(< 1 (string-length\
    \ date)) #f]\n    [(< 1 (string->number (string-ref date 0 2))) #f]\n    [(< 1\
    \ (string->number (string-ref date 1 2))) #f]\n    [(< 1 (string->number (string-ref\
    \ date 2 2))) #f]\n    [(< 1 (string->number (string-ref date 0 1))) #f]\n   \
    \ [(< 1 (string->number (string-ref date 1 1))) #f]\n    [(< 1 (string->number\
    \ (string-ref date 2 1))) #f]\n    [(< 1 (string->number (string-ref date 0 2)))\
    \ #f]\n    [(< 1 (string->number (string-ref date 1 2))) #f]\n    [(< 1 (string->number\
    \ (string-ref date 2 2))) #f]\n    [(< 1 (string->number (string-ref date 0 1)))\
    \ #f]\n    [(< 1 (string->number (string-ref date 1 1))) #f]\n    [(< 1 (string->number\
    \ (string-ref date 2 1))) #f]\n    [(< 1 (string->number (string-ref date 0 2)))\
    \ #f]\n    [(< 1 (string->number (string-ref date 1 2))) #f]\n    [(< 1 (string->number\
    \ (string-ref date 2 2))) #f]\n    [(< 1 (string->number (string-ref date 0 1)))\
    \ #f]\n    [(< 1 (string->number (string-ref date 1 1))) #f]\n    [(< 1 (string->number\
    \ (string-ref date 2 1))) #f]\n    [(< 1 (string->number (string-ref date 0 2)))\
    \ #f]\n    [(< 1 (string->number (string-ref date 1 2))) #f]\n    [(< 1 (string->number\
    \ (string-ref date 2 2))) #f]\n    [(< 1 (string->number (string-ref date 0 1)))\
    \ #f]\n    [(< 1 (string->number (string-ref date 1 1))) #f]\n    [(< 1 (string->number\
    \ (string-ref date 2 1))) #f]\n    [(< 1 (string->number (string-ref date 0 2)))\
    \ #f]\n    [(< 1 (string->number (string-ref date 1 2))) #f]\n    [(< 1 (string->number\
    \ (string-ref date 2 2))) #f]\n    [(< 1 (string->number (string-ref date 0 1)))\
    \ #f]\n    [(< 1 (string->number (string-ref date 1 1))) #f]\n    [(< 1 (string->number\
    \ (string-ref date 2 1))) #f]\n    [(< 1 (string->number (string-ref ", "  (if\
    \ (empty? date)\n      #f\n      (or (= (length date) 7)\n          (= (substring-no-length\
    \ date 0 2)\n             (cond ((string=? \"01\" \"03\") #f)\n              \
    \     ((string=? \"01\" \"05\") #f)\n                   ((string=? \"01\" \"07\"\
    ) #f)\n                   ((string=? \"01\" \"08\") #f)\n                   ((string=?\
    \ \"01\" \"10\") #f)\n                   ((string=? \"01\" \"12\") #t)\n     \
    \              ((string=? \"04\" \"06\") #t)\n                   ((string=? \"\
    04\" \"09\") #t)\n                   ((string=? \"04\" \"11\") #t)\n         \
    \          ((string=? \"02\" \"06\") #t)\n                   ((string=? \"02\"\
    \ \"09\") #t)\n                   ((string=? \"02\" \"11\") #t)\n            \
    \       (else #f))))))\n</code>\n<|/ a tags=racket,scheme |>\n<| c |>\nThank you\
    \ for your help. I did what you told me, but now I get the error that the string\
    \ is supposed to only contain integers. How can I fix this?\n<|/ c |>\n<| c |>\n\
    : that's because your code is still not correct - see my answer for how to fix\
    \ it\n<|/ c |>\n<| c |>\nThank you. I am still having troubles with that and I\
    \ do not know why. I am not sure where I should put those codes you gave me. Is\
    \ it supposed to be the first one? Or the second one?\n<|/ c |>\n<| c |>\n: where\
    \ do you have the code now? In a separate file? Which line does the error occur\
    \ on?\n<|/ c |>\n<| c |>\nIt is now in a file called validation.rkt. When I run\
    \ racket validation.rkt I get the error: unbound variable: date. Do you know what\
    \ could that be? Thank you.\n<|/ c |>\n<| a tags=racket,scheme dscore=0 |>\nThis\
    \ should be really simple. Just use regular expressions to validate the date.\n\
    <code>\n#lang racket\n", "  ;; Part 1\n  (cond\n    [(empty? date) #t]\n    [(<\
    \ (length date) 8) #f]\n    [(< (length date) 10) #f]\n    [(< (length date) 12)\
    \ #f]\n    [(< (substring (date 0 1) 0 1) 1) #f]\n    [(> (substring (date 0 1)\
    \ 0 1) 1) #f]\n    [(< (substring (date 0 2) 0 2) 1) #f]\n    [(> (substring (date\
    \ 0 2) 0 2) 1) #f]\n    [(< (substring (date 0 3) 0 3) 1) #f]\n    [(> (substring\
    \ (date 0 3) 0 3) 1) #f]\n    [(< (substring (date 0 4) 0 4) 1) #f]\n    [(> (substring\
    \ (date 0 4) 0 4) 1) #f]\n    [(< (substring (date 0 5) 0 5) 1) #f]\n    [(> (substring\
    \ (date 0 5) 0 5) 1) #f]\n    [(< (substring (date 0 6) 0 6) 1) #f]\n    [(> (substring\
    \ (date 0 6) 0 6) 1) #f]\n    [(< (substring (date 0 7) 0 7) 1) #f]\n    [(> (substring\
    \ (date 0 7) 0 7) 1) #f]\n    [(< (substring (date 0 8) 0 8) 1) #f]\n    [(> (substring\
    \ (date 0 8) 0 8) 1) #f]\n    [(< (substring (date 0 9) 0 9) 1) #f]\n    [(> (substring\
    \ (date 0 9) 0 9) 1) #f]\n    [(< (substring (date 0 10) 0 10) 1) #f]\n    [(>\
    \ (substring (date 0 10) 0 10) 1) #f]\n    [(< (substring (date 0 11) 0 11) 1)\
    \ #f]\n    [(> (substring (date 0 11) 0 11) 1) #f]\n    [(< (substring (date 0\
    \ 12) 0 12) 1) #f]\n    [(> (substring (date 0 12) 0 12) 1) #f]\n    [(< (substring\
    \ (date 0 13) 0 13) 1) #f]\n    [(> (substring (date 0 13) 0 13) 1) #f]\n    [(<\
    \ (substring (date 0 14) 0 14) 1) #f]\n    [(> (substring (date 0 14) 0 14) 1)\
    \ #f]\n    [(< (substring (date 0 15) 0 15) 1) #f]\n    [(> (substring (date 0\
    \ 15) 0 15) 1) #f]\n    [(< (substring (date 0 16) 0 16) 1) #f]\n    [(", "  (cond\n\
    \    [(empty? date) #t]\n    [(< 1 (length (string->list (date)))) #f]\n    [(<\
    \ 1 (length (string->list (date)))) #t]\n    [(< 1 (length (string->list (date))))\
    \ #t]\n    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length (string->list\
    \ (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length\
    \ (string->list (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n\
    \    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length (string->list\
    \ (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length\
    \ (string->list (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n\
    \    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length (string->list\
    \ (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length\
    \ (string->list (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n\
    \    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length (string->list\
    \ (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length\
    \ (string->list (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n\
    \    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length (string->list\
    \ (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length\
    \ (string->list (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n\
    \    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length (string->list\
    \ (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n    [(< 1 (length\
    \ (string->list (date)))) #t]\n    [(< 1 (length (string->list (date)))) #t]\n\
    \    [(< 1 (length", "  (cond\n    [(and (empty? date) #t) true]\n    [(and (>=\
    \ 31 <  (length date)) (>= 1 <  (length date))\n          (>= 1 <  (length (substring\
    \ date 0 (length date)))))\n     false]\n    [(and (>= 30 <  (length date)) (>=\
    \ 1 <  (length date))\n          (>= 1 <  (length (substring date 0 (length date)))))\n\
    \     false]\n    [(and (>= 29 <  (length date)) (>= 1 <  (length date)))\n  \
    \   false]\n    [(and (and (>= 1 <  (length date))\n             (= (substring\
    \ date 0 (length date)) '-))\n         (and (>= 1 <  (length (substring date 0\
    \ (length date)))))\n         #t\n         #t)\n     true]\n    [(and (and (>=\
    \ 1 <  (length date))\n             (= (substring date 0 (length date)) '-))\n\
    \         (and (>= 1 <  (length (substring date 0 (length date)))))\n        \
    \ #f)\n     false]\n    [(and (and (>= 1 <  (length date))\n             (= (substring\
    \ date 0 (length date)) '-))\n         (and (>= 1 <  (length (substring date 0\
    \ (length date)))))\n         #f)\n     false]\n    [(and (and (>= 1 <  (length\
    \ date))\n             (= (substring date 0 (length date)) '-))\n         (and\
    \ (>= 1 <  (length (substring date 0 (length date)))))\n         #f)\n     false]\n\
    \    [(and (and (>= 1 <  (length date))\n             (= (substring date 0 (length\
    \ date)) '-))\n         (and (>= 1 <  (length (substring date 0 (length date)))))\n\
    \         #f)\n     false]\n    [(and (and (>= 1 <  (length date))\n         \
    \    (= (substring date 0 (length date)) '-))\n         (and (>= 1 <  (length\
    \ (substring date 0 (length date)))))\n         #f)\n     false]\n    [(and (and\
    \ (>= 1 <  (length date))\n             (= (substring date 0 (length date)) '-))\n\
    \         (and (>= 1 <  (length (substring date 0 (length date)))))\n        \
    \ #f)\n     false]\n    [(and (and (>= 1 <  (length date))\n             (= (substring\
    \ date 0 (length date)) '-))\n         (and (>= 1 <  (length", "  (cond [(empty?\
    \ date) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n        [(< (length\
    \ (substring date 0 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n\
    \        [(< (length (substring date 0 2)) 2) #f]\n        [(< (length (substring\
    \ date 0 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n      \
    \  [(< (length (substring date 0 2)) 2) #f]\n        [(< (length (substring date\
    \ 0 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n        [(<\
    \ (length (substring date 0 2)) 2) #f]\n        [(< (length (substring date 0\
    \ 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n        [(< (length\
    \ (substring date 0 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n\
    \        [(< (length (substring date 0 2)) 2) #f]\n        [(< (length (substring\
    \ date 0 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n      \
    \  [(< (length (substring date 0 2)) 2) #f]\n        [(< (length (substring date\
    \ 0 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n        [(<\
    \ (length (substring date 0 2)) 2) #f]\n        [(< (length (substring date 0\
    \ 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n        [(< (length\
    \ (substring date 0 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n\
    \        [(< (length (substring date 0 2)) 2) #f]\n        [(< (length (substring\
    \ date 0 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n      \
    \  [(< (length (substring date 0 2)) 2) #f]\n        [(< (length (substring date\
    \ 0 2)) 2) #f]\n        [(< (length (substring date 0 2)) 2) #f]\n        [(<\
    \ (length (substring date 0 2)) 2) #f]\n        [(< (length (substring date 0\
    \ 2)) 2) #f]\n        [(< (length (sub", "  (cond\n    [(empty? date) #t]\n  \
    \  [(< 1 (string-length date))\n     (and (not (number? (string-length date)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\")))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\")))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 3)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 3)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 4)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 4)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 6)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 6)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 9)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 9)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 11)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 11)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 13)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 13)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 15)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 15)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 18)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 18)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 21)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 21)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"-\" 24)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (date 0 2) \"/\" 24)))\n\
    \          #f)\n     (and (< 1 (string-length (substring (", "  ;; 1. Validate\
    \ date is not empty string\n  (cond [(empty? date) #f]\n        ;; 2. Validate\
    \ date is not less than or equal to 31 days for months 1,3,5,7,8,10,12\n     \
    \   ;; and is not more than or equal to 30 days for months 4,6,9,11 and is not\
    \ less than or equal to 29 for month 2\n        ;; 3. Validate date should be\
    \ in the format: mm-dd-yyyy\n        ;; 4. Validate date is in correct format\n\
    \        [else #t]))\n", "  (cond\n    [(empty? date) #t]\n    [(< 1 (string->number\
    \ (first (split-string (first date) '-')))) #t]\n    [(< 1 (string->number (rest\
    \ (split-string (first date) '-')))) #t]\n    [(< 1 (string->number (second (split-string\
    \ (first date) '-')))) #t]\n    [(< 1 (string->number (third (rest (split-string\
    \ (first date) '-')))) #t]\n    [(< 1 (string->number (second (split-string (first\
    \ date) '-')))) #t]\n    [(< 1 (string->number (first (split-string (first date)\
    \ '-')))) #t]\n    [(< 1 (string->number (third (split-string (first date) '-'))))\
    \ #t]\n    [(< 1 (string->number (fourth (split-string (first date) '-')))) #t]\n\
    \    [(< 1 (string->number (fifth (split-string (first date) '-')))) #t]\n   \
    \ [(< 1 (string->number (sixth (split-string (first date) '-')))) #t]\n    [(<\
    \ 1 (string->number (seventh (split-string (first date) '-')))) #t]\n    [(< 1\
    \ (string->number (eighth (split-string (first date) '-')))) #t]\n    [(< 1 (string->number\
    \ (ninth (split-string (first date) '-')))) #t]\n    [(< 1 (string->number (tenth\
    \ (split-string (first date) '-')))) #t]\n    [(< 1 (string->number (eleventh\
    \ (split-string (first date) '-')))) #t]\n    [(< 1 (string->number (twelfth (split-string\
    \ (first date) '-')))) #t]\n    [(< 1 (string->number (thirteenth (split-string\
    \ (first date) '-')))) #t]\n    [(< 1 (string->number (fourteenth (split-string\
    \ (first date) '-')))) #t]\n    [(< 1 (string->number (fifteenth (split-string\
    \ (first date) '-')))) #t]\n    [(< 1 (string->number (sixteenth (split-string\
    \ (first date) '-')))) #t]\n    [(< 1 (string->number (seventeenth (split-string\
    \ (first date) '-')))) #t]\n    [(< 1 (string->number (eighteen", "  (and (not\
    \ (null? date))\n       (string-match \"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\" date)\n\
    \       (not (< 1 (string-length (substring date 0 (string-length (first date))))))\n\
    \       (not (< 1 (string-length (substring date 2 (string-length (second date))))))\n\
    \       (not (< 1 (string-length (substring date 3 (string-length (third date))))))\n\
    \       (not (< 1 (string-length (substring date 5 (string-length (fifth date))))))\n\
    \       (not (< 1 (string-length (substring date 7 (string-length (seventh date))))))\n\
    \       (not (< 1 (string-length (substring date 8 (string-length (eighth date))))))\n\
    \       (not (< 1 (string-length (substring date 10 (string-length (tenth date))))))\n\
    \       (not (< 1 (string-length (substring date 12 (string-length (twelfth date))))))))\n",
  "  (and (not (string? date))\n       (and (number? date) \n            (< date (-\
    \ 31 (floor (/ date 31)))))\n       (and (number? date) \n            (< date\
    \ (- 30 (floor (/ date 30)))))\n       (and (number? date) \n            (< date\
    \ (- 29 (floor (/ date 29)))))\n       (and (number? date)\n            (< date\
    \ (- 31 (floor (/ date 31))))\n            (< date (- 30 (floor (/ date 30))))\n\
    \            (< date (- 29 (floor (/ date 29)))))\n       (and (number? date)\
    \ (= (month (string-ref date 0 2)) (>= 1 (month (string-ref date 0 2))))\n   \
    \     (number? (string-ref date 2 2))\n        (number? (string-ref date 0 4))\n\
    \        (number? (string-ref date 3 4))\n        (number? (string-ref date 5\
    \ 4))\n        (number? (string-ref date 7 4))\n        (number? (string-ref date\
    \ 8 4))\n        (number? (string-ref date 10 4))\n        (number? (string-ref\
    \ date 11 4))\n        (number? (string-ref date 12 4))\n        (number? (string-ref\
    \ date 1 6))\n        (number? (string-ref date 3 6))\n        (number? (string-ref\
    \ date 5 6))\n        (number? (string-ref date 7 6))\n        (number? (string-ref\
    \ date 8 6))\n        (number? (string-ref date 10 6))\n        (number? (string-ref\
    \ date 11 6))\n        (number? (string-ref date 12 6))))\n", "  (cond\n    ((empty?\
    \ date) #t)\n    ((< (length date) 5) '#f) \n    ((< (length date) 7) '#f) \n\
    \    ((< (length date) 8) '#f) \n    ((< (length date) 11) '#f) \n    ((< (length\
    \ date) 12) '#f) \n    ((< (length date) 13) '#f) \n    ((< (length date) 14)\
    \ '#f) \n    ((< (length date) 15) '#f) \n    ((< (length date) 16) '#f) \n  \
    \  ((< (length date) 17) '#f) \n    ((< (length date) 18) '#f) \n    ((< (length\
    \ date) 19) '#f) \n    ((< (length date) 20) '#f) \n    ((< (length date) 21)\
    \ '#f) \n    ((< (length date) 22) '#f) \n    ((< (length date) 23) '#f) \n  \
    \  ((< (length date) 24) '#f) \n    ((< (length date) 25) '#f) \n    ((< (length\
    \ date) 26) '#f) \n    ((< (length date) 27) '#f) \n    ((< (length date) 28)\
    \ '#f) \n    ((< (length date) 29) '#f) \n    ((< (length date) 30) '#f) \n  \
    \  ((< (length date) 31) '#f) \n    ((< (length date) 32) '#f) \n    ((< (length\
    \ date) 33) '#f) \n    ((< (length date) 34) '#f) \n    ((< (length date) 35)\
    \ '#f) \n    ((< (length date) 36) '#f) \n    ((< (length date) 37) '#f) \n  \
    \  ((< (length date) 38) '#f) \n    ((< (length date) 39) '#f) \n    ((< (length\
    \ date) 40) '#f) \n    ((< (length date) 41) '#f) \n    ((< (length date) 42)\
    \ '#f) \n    ((< (length date) 43) '#f) \n    ((< (length date) 44) '#f) \n  \
    \  ((< (length date) 45) '#f) \n    ((< (length date) 46) '#f) \n    ((< (length\
    \ date) 47) '#f) \n    ((< (length date) 48) '#f) \n    ((< (length date) 49)\
    \ '#f) \n    ((< (length date) 50) '#f) \n    ((< (length date) 51) '#f) \n  \
    \  ((< (length date) 52) '#f) \n    ((< (length date) 53) '#f) ", "  (match date\n\
    \    [(date) (match date [(number? year) (number? month) (number? day) (string?\
    \ (month \"01\") (string? (month \"03\") (string? (month \"05\") (string? (month\
    \ \"07\") (string? (month \"08\") (string? (month \"10\") (string? (month \"12\"\
    ) (string? (month \"02\") (string? (month \"04\") (string? (month \"06\") (string?\
    \ (month \"09\") (string? (month \"11\") (string? (month \"13\") (string? (month\
    \ \"15\") (string? (month \"18\") (string? (month \"21\") (string? (month \"24\"\
    ) (string? (month \"27\") (string? (month \"30\") (string? (month \"32\") (string?\
    \ (month \"35\") (string? (month \"37\") (string? (month \"39\") (string? (month\
    \ \"42\") (string? (month \"45\") (string? (month \"47\") (string? (month \"50\"\
    ) (string? (month \"53\")\n                                    (and (>= 1 month)\
    \ (<= 12 month) (>= 1 day) (<= 31 day) (> (% month 13) 0) (> (% month 15) 0) (>\
    \ (% month 18) 0) (> (% month 21) 0) (> (% month 24) 0) (> (% month 27) 0) (>\
    \ (% month 30) 0) (> (% month 33) 0) (> (% month 36) 0) (> (% month 39) 0) (>\
    \ (% month 42) 0) (> (% month 45) 0) (> (% month 48) 0) (> (% month 51) 0) (>\
    \ (% month 54) 0)))))]\n    [(_) #f])))", "  (and (not (empty? date))\n      \
    \ (not (< (days date) 1))\n       (not (< (days date) 31))\n       (not (< (days\
    \ date 3) 1))\n       (not (< (days date 30) 30))\n       (not (< (days date 29)\
    \ 29))\n       (not (< (months date) 1))\n       (not (< (months date) 12))))",
  "  (cond [(string-empty? date) #f]\n        [(<= (parse-integer date #:radix \"\
    d\") 1) #t]\n        [(<= (parse-integer date #:radix \"d\") 31) #t]\n       \
    \ [(<= (parse-integer date #:radix \"d\") 30) #t]\n        [(<= (parse-integer\
    \ date #:radix \"d\") 29) #t]\n        [(<= (parse-integer date #:radix \"m\"\
    ) 1) #t]\n        [(<= (parse-integer date #:radix \"m\") 12) #t]\n        [(<=\
    \ (parse-integer date #:radix \"d\") 31) #t]\n        [(<= (parse-integer date\
    \ #:radix \"m\") 12) #t]\n        [(<= (parse-integer date #:radix \"m\") 12)\
    \ #t]\n        [else #f]))\n", "  (and (not (empty? date))\n       (< 1 (length\
    \ date))\n       (< (< (length date) 4) 2)\n       (< (< (length date) 5) 4)\n\
    \       (and (= (substring date 0 2) \"-\")\n            (< 1 (length date))\n\
    \            (< (< (length date) 3) 2)\n            (< (< (length date) 6) 2)\n\
    \            (< (< (length date) 2) 3)\n            (and (= (substring date 0\
    \ 1) \"-\")\n                 (< 1 (length date))\n                 (< (< (length\
    \ date) 3) 2)\n                 (< (< (length date) 6) 2)\n                 (<\
    \ (< (length date) 2) 3)\n                 (and (= (substring date 0 1) \"-\"\
    )\n                       (< 1 (length date))\n                       (< (< (length\
    \ date) 3) 2)\n                       (< (< (length date) 6) 2)\n            \
    \           (< (< (length date) 2) 3)\n                       (and (= (substring\
    \ date 0 1) \"-\")\n                            (< 1 (length date))\n        \
    \                    (< (< (length date) 3) 2)\n                            (<\
    \ (< (length date) 6) 2)\n                            (< (< (length date) 2) 3)\n\
    \                            (and (= (substring date 0 1) \"-\")\n           \
    \                     (< 1 (length date))\n                                (<\
    \ (< (length date) 3) 2)\n                                (< (< (length date)\
    \ 6) 2)\n                                (< (< (length date) 2) 3)\n         \
    \                       (and (= (substring date 0 1) \"-\")\n                \
    \                    (< 1 (length date))\n                                   \
    \ (< (< (length date) 3) 2)\n                                    (< (< (length\
    \ date) 6) 2)\n                                    (< (< (length date) 2) 3)\n\
    \                                    (and (= (substring date 0 1) \"-\")\n   \
    \                                     (< 1 (length date))\n                  \
    \                      (< (< (length date) 3) 2)\n                           \
    \             (< (< (length date) 6) 2)\n                                    \
    \    (< (< (length date) 2) 3))\n                                        (and\
    \ (= (substring date 0 1) \"-\")\n                                           \
    \ (< 1 (length date))\n                                            (< (< (length\
    \ date) 3) 2)\n                                            (< (< (length date)\
    \ 6) 2)\n                                            (< (< (length date) 2) 3)\n\
    \                                            (and (= (substring date 0 1) \"-\"\
    )\n                                                (< 1 (length date))\n     \
    \                                           (< (< (length date) 3) 2)\n      \
    \                                          (< (< (length date) 6) 2)\n       \
    \                                         (< (< (length date) 2) 3)\n        \
    \                                        (and (= (substring date 0 1) \"-\")\n\
    \                                                    (< 1 (length date))\n   \
    \                                                 (< (< (length date) 3) 2)",
  "  (cond ((empty? date) #t)\n        ((< (length? date) 7) #t)\n        ((< 1 (string-length\
    \ (substring date 0 2)) #t)\n         ((< 1 (string-length (substring date 0 2))\
    \ #t)\n          ((< 1 (string-length (substring date 0 2)) #t)\n           ((<\
    \ 1 (string-length (substring date 0 2)) #t)\n            (< 1 (string-length\
    \ (substring date 0 2)) #t)\n            (< 1 (string-length (substring date 0\
    \ 2)) #t)\n            (< 1 (string-length (substring date 0 2)) #t)\n       \
    \     (< 1 (string-length (substring date 0 2)) #t)\n            (< 1 (string-length\
    \ (substring date 0 2)) #t)\n            (< 1 (string-length (substring date 0\
    \ 2)) #t)\n            (< 1 (string-length (substring date 0 2)) #t)\n       \
    \     (< 1 (string-length (substring date 0 2)) #t)\n            (< 1 (string-length\
    \ (substring date 0 2)) #t)\n            (< 1 (string-length (substring date 0\
    \ 2)) #t)\n            (< 1 (string-length (substring date 0 2)) #t)\n       \
    \     (< 1 (string-length (substring date 0 2)) #t)\n            (< 1 (string-length\
    \ (substring date 0 2)) #t)\n            (< 1 (string-length (substring date 0\
    \ 2)) #t)\n            (< 1 (string-length (substring date 0 2)) #t)\n       \
    \     (< 1 (string-length (substring date 0 2)) #t)\n            (< 1 (string-length\
    \ (substring date 0 2)) #t)\n            (< 1 (string-length (substring date 0\
    \ 2)) #t)\n            (< 1 (string-length (substring date 0 2)) #t)\n       \
    \     (< 1 (string-length (substring date 0 2)) #t)\n            (< 1 (string-length\
    \ (substring date 0 2)) #t)\n            (< 1 (string-length (substring date 0\
    \ 2)) #t)\n            (< 1 (string-length (substring date 0 2)) #t)\n       \
    \     (< 1 (string-length (substring date 0 2)) #t)\n            (< 1 (string-length\
    \ (substring date 0 2)) #t)\n            (< 1 (string-length (substring date 0\
    \ 2)) #t)\n            (< 1 (string-length (substring date 0 2)) #t)\n       \
    \     (< 1 (string-length (substring date 0 2)) #t)\n            (< 1 (string-length\
    \ (substring date 0 2)) #t)\n            (< 1 (string-length (substring date 0\
    \ 2)) #t)\n            (< 1 (string-length (substring date 0 2)", "  ;; (define\
    \ (valid_date date)\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n\
    \  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;\
    \   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n\
    \  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;\
    \   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n\
    \  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;\
    \   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n\
    \  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;\
    \   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n\
    \  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;\
    \   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n\
    \  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;\
    \   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n  ;;   ???\n\
    \  ;;   ???", "  (and (not (string? date))\n       (< 1 string-length (string-sub\
    \ date 0 1))\n       (< 1 string-length (string-sub date 0 3))\n       (< 1 string-length\
    \ (string-sub date 0 5))\n       (< 1 string-length (string-sub date 0 7))\n \
    \      (< 1 string-length (string-sub date 0 8))\n       (< 1 string-length (string-sub\
    \ date 0 10))\n       (< 1 string-length (string-sub date 0 12))\n       (< 1\
    \ string-length (string-sub date 0 13))\n       (< 1 string-length (string-sub\
    \ date 0 14))\n       (< 1 string-length (string-sub date 0 16))\n       (< 1\
    \ string-length (string-sub date 0 19))\n       (< 1 string-length (string-sub\
    \ date 0 22))\n       (< 1 string-length (string-sub date 0 25)))\n  (and (< 31\
    \ string-length (string-sub date 0 2))\n       (< 31 string-length (string-sub\
    \ date 1 2)))\n  (and (< 30 string-length (string-sub date 0 2))\n       (< 30\
    \ string-length (string-sub date 1 2)))\n  (and (< 29 string-length (string-sub\
    \ date 0 1))\n       (< 29 string-length (string-sub date 2 1)))\n  (and (< 12\
    \ string-length (string-sub date 0 2))\n       (< 12 string-length (string-sub\
    \ date 1 2)))\n  (and (and (<= (string-length date) 2)\n           (string-char-at\
    \ (string-sub date 0 2) #\\/)\n           (string-char-at (string-sub date 0 2)\
    \ #\\-)\n           (string-char-at (string-sub date 0 2) #\\-)\n           (string-char-at\
    \ (string-sub date 0 2) #\\-))\n       (not (< 1 (string-length date))))\n  (and\
    \ (and (<= (string-length date) 3)\n           (string-char-at (string-sub date\
    \ 0 2) #\\/)\n           (string-char-at (string-sub date 0 2) #\\-)\n       \
    \    (string-char-at (string-sub date 0 2) #\\-))\n       (not (< 1 (string-length\
    \ date))))\n  (and (and (<= (string-length date) 4)\n           (string-char-at\
    \ (string-sub date 0 2) #\\/)\n           (string-char-at (string-sub date 0 2)\
    \ #\\-))\n       (not (< 1 (string-length date))))\n  (and (and (<= (string-length\
    \ date) 5)\n           (string-char-at (string-sub date 0 2) #\\-)\n         \
    \  (string-char-at (string-sub date 0 2) #\\-)\n           (string-char", "  (cond\n\
    \    ((not (empty? date))\n     (and (not (< (length date) 3) (not (< (length\
    \ date) 6) (not (< (length date) 9) (not (< (length date) 12))))\n          (not\
    \ (< (length date) 3) (not (< (length date) 6)) (not (< (length date) 9)) (not\
    \ (< (length date) 12))))\n          (not (< (length date) 3) (not (< (length\
    \ date) 6)) (not (< (length date) 9)) (not (< (length date) 12))))\n         \
    \ (not (< (length date) 3) (not (< (length date) 6)) (not (< (length date) 9))\
    \ (not (< (length date) 12))))\n          (not (< (length date) 3) (not (< (length\
    \ date) 6)) (not (< (length date) 9)) (not (< (length date) 12))))\n         \
    \ (not (< (length date) 3) (not (< (length date) 6)) (not (< (length date) 9))\
    \ (not (< (length date) 12))))\n          (not (< (length date) 3) (not (< (length\
    \ date) 6)) (not (< (length date) 9)) (not (< (length date) 12))))\n         \
    \ (not (< (length date) 3) (not (< (length date) 6)) (not (< (length date) 9))\
    \ (not (< (length date) 12))))\n          (not (< (length date) 3) (not (< (length\
    \ date) 6)) (not (< (length date) 9)) (not (< (length date) 12))))\n         \
    \ (not (< (length date) 3) (not (< (length date) 6)) (not (< (length date) 9))\
    \ (not (< (length date) 12))))\n          (not (< (length date) 3) (not (< (length\
    \ date) 6)) (not (< (length date) 9)) (not (< (length date) 12))))\n         \
    \ (not (< (length date) 3) (not (< (length date) 6)) (not (< (length date) 9))\
    \ (not (< (length date) 12))))\n          (not (< (length date) 3) (not (< (length\
    \ date) 6)) (not (< (length date) 9)) (not (< (length date) 12))))\n         \
    \ (not (< (length date) 3) (not (< (length date) 6)) (not (< (length date) 9))\
    \ (not (< (length date) 12))))\n          (not (< (length date) 3) (not (< (length\
    \ date) 6)) (not (< (length date) 9)) (not (< (length date) 12))))\n         \
    \ (not (< (length date", "  (let\n      ([date_string (substring date 0 2)])\n\
    \      ([month (substring date 2 2)])\n      ([year (substring date 4 4)])\n \
    \     ([days (substring date 6 2)])))\n  (and\n   (not (equal? date_string \"\"\
    ))\n   (and (number? days)\n        (> 0 days)\n        (> 0 month)\n        (>\
    \ 0 year)\n        (and\n         (< 1 month)\n         (< 4 month)\n        \
    \ (< 11 month)\n         (< 29 month)\n         (< 30 month)\n         (< 31 month)\n\
    \         (< 12 month)\n         (< 31 month)\n         (< 30 month)\n       \
    \  (< 29 month)\n         (< 31 month)\n         (< 30 month)\n         (< 31\
    \ month)\n         (< 30 month))\n   (and (number? month)\n        (> 0 month)\n\
    \        (> 0 year)\n        (equal? date_string \"01\")\n        (equal? date_string\
    \ \"03\")\n        (equal? date_string \"05\")\n        (equal? date_string \"\
    07\")\n        (equal? date_string \"08\")\n        (equal? date_string \"10\"\
    )\n        (equal? date_string \"12\")\n        (equal? date_string \"04\")\n\
    \        (equal? date_string \"06\")\n        (equal? date_string \"09\")\n  \
    \      (equal? date_string \"11\")\n        (equal? date_string \"03\")\n    \
    \    (equal? date_string \"15\")\n        (equal? date_string \"01\")\n      \
    \  (equal? date_string \"04\")\n        (equal? date_string \"06\")\n        (equal?\
    \ date_string \"09\")\n        (equal? date_string \"11\")\n        (equal? date_string\
    \ \"04\")\n        (equal? date_string \"06\")\n        (equal? date_string \"\
    09\")\n        (equal? date_string \"11\")\n        (equal? date_string \"09\"\
    )\n        (equal? date_string \"11\"))\n   (and (number? year)\n        (> 0\
    \ year)\n        (equal? date_string \"2000\")\n        (equal? date_string \"\
    2040\")\n        (equal? date_string \"2020\")\n        (equal? date_string \"\
    2006\")\n        (equal? date_string \"2006\"))))\n", "  (and (not (string-empty?\
    \ date))\n       (< (string->number (substring date 0 2)) 31)\n       (< (string->number\
    \ (substring date 2 2)) 30)\n       (< (string->number (substring date 4 2)) 29)\n\
    \       (< (string->number (substring date 6 2)) 12)\n       (< months (string->number\
    \ (substring date 0 2)))))\n", "  (cond\n    ((empty? date) #t)\n    ((< (- 31\
    \ (string-length date)) (string-length date)) #f)\n    ((< (- 30 (string-length\
    \ date)) (string-length date)) #f)\n    ((< (- 29 (string-length date)) (string-length\
    \ date)) #f)\n    ((< (- 12 (string-length date)) (string-length date)) #f)\n\
    \    ((< (- (string-length date) 4) (- 3 (string-length date))) #f)\n    ((< (-\
    \ (string-length date) 6) (- 4 (string-length date))) #f)\n    ((< (- (string-length\
    \ date) 9) (- 5 (string-length date))) #f)\n    ((< (- (string-length date) 11)\
    \ (- 6 (string-length date))) #f)\n    ((< (- (string-length date) 13) (- 7 (string-length\
    \ date))) #f)\n    ((< (- (string-length date) 15) (- 8 (string-length date)))\
    \ #f)\n    ((< (- (string-length date) 18) (- 9 (string-length date))) #f)\n \
    \   ((< (- (string-length date) 21) (- 10 (string-length date))) #f)\n    ((<\
    \ (- (string-length date) 24) (- 11 (string-length date))) #f)\n    ((< (- (string-length\
    \ date) 27) (- 12 (string-length date))) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) (string-length date))\
    \ #f)\n    ((< (- 1) (string-length date)) #f)\n    ((< (- 1) ", "  ; your implementation\
    \ here\n)\n", "  (and (not (empty? date))\n       (<= 1 (string-length date))\n\
    \       (<= 31 #(1 3 5 7 8 10 12))\n       (<= 30 #(4 6 9 11))\n       (<= 29\
    \ #(2 4)))\n  (date->string\n   (string->date date)))\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis answer doesn't solve the problem as asked.  Try '01-01-0000'.\n<|/\
    \ c |>\n<| c |>\nthe date format `'mm-dd-yyyy'` is incomplete. The month is in\
    \ range `1..12`. The day in `1..31` for the months except `February`. The day\
    \ in `1..30` for the months except `March` and `April`. The day in `1..29` for\
    \ the months `February` and `April`.\n<|/ c |>\n<| c |>\nYes, but your answer\
    \ doesn't do that.  The problem is not the date format, it's that he wants to\
    \ accept dates of any format that doesn't contain an invalid date (but he hasn't\
    \ specified what that format is).\n<|/ c |>\n<| c |>\nYou don't have to put a\
    \ date into the function - you only have to know it's to be a valid date. Try\
    \ `(valid_date \"03-11-2000\")` - this returns #t.\n<|/ c |>\n<| a tags=racket,date,scheme\
    \ |>\nI wanted to create a simple library for this, since I find it useful to\
    \ do this kind of thing. There are several libraries around, that do this.\nI\
    \ wrote my own based on your examples and some ideas from other languages:\n<code>\n\
    #lang racket\n", "  (if (string? date) (\n    (let ((month (string-ref date 0\
    \ 2))\n          (day (string-ref date 2 2))\n          (year (string-ref date\
    \ 4 4)))\n      (if (or (and (number? month) (number? day) (number? year))\n \
    \             (and (number? (modulo month 12)) (number? (modulo day 31)))\n  \
    \            (and (number? (modulo month 31)) \n                   (number? (modulo\
    \ day 30))\n                   (number? (modulo month 2)))\n              (and\
    \ (number? (modulo month 12)) (number? (modulo day 29)))\n              (and (number?\
    \ (modulo month 2)) (number? (modulo day 28)))\n              (and (number? (modulo\
    \ month 3)) (number? (modulo day 27)))\n              (and (number? (modulo month\
    \ 5)) (number? (modulo day 26)))\n              (and (number? (modulo month 7))\
    \ (number? (modulo day 25)))\n              (and (number? (modulo month 8)) (number?\
    \ (modulo day 24)))\n              (and (number? (modulo month 10)) (number? (modulo\
    \ day 23)))\n              (and (number? (modulo month 12)) (number? (modulo day\
    \ 22)))\n              (and (number? (modulo month 4)) (number? (modulo day 21))\n\
    \                   (number? (modulo month 3)))\n              (and (number? (modulo\
    \ month 6)) (number? (modulo day 20))\n                   (number? (modulo month\
    \ 5)))\n              (and (number? (modulo month 9)) (number? (modulo day 19)))\n\
    \              (and (number? (modulo month 11)) (number? (modulo day 18))))\n\
    \      #t))\n  #f))\n", "  (and (not (empty? date))\n       (< (length date) 9)\n\
    \       (= (substring date 0 2) \"-\")\n       (let ((month (substring date 2\
    \ 2)))\n         (and (<= (length date) 9) (<= 12 month))\n         (and (<= (length\
    \ date) 9) (<= 31 day))\n         (and (<= (length date) 9) (<= 30 day))\n   \
    \      (and (<= (length date) 9) (<= 29 day))\n         (or (< month 1) (< month\
    \ 3) (< month 5) (< month 7) (< month 8) (< month 10) (< month 12))))\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=racket,lisp,scheme |>\nAs someone else already pointed\
    \ out, there is a library that you can use for this. It is called date-parser.\
    \ Here is how you can use it:\n<code>\n#lang racket\n", "  (if (string-empty?\
    \ date)\n      #f\n      (and (< (string-length date) (string-length date+1))\n\
    \           (< 1 (string-index (substring date 0 2)\n                        \
    \      \"-\" (substring date 3 4)))\n           (< 1 (string-index (substring\
    \ date 0 2)\n                              \"-\" (substring date 3 4)))\n    \
    \       (< 1 (string-index (substring date 0 2)\n                            \
    \  \"-\" (substring date 3 4)))\n           (< 1 (string-index (substring date\
    \ 0 2)\n                              \"-\" (substring date 3 4)))\n         \
    \  (< 1 (string-index (substring date 0 2)\n                              \"-\"\
    \ (substring date 3 4)))\n           (< 1 (string-index (substring date 0 2)\n\
    \                              \"-\" (substring date 3 4)))\n           (< 1 (string-index\
    \ (substring date 0 2)\n                              \"-\" (substring date 3\
    \ 4)))\n           (< 1 (string-index (substring date 0 2)\n                 \
    \             \"-\" (substring date 3 4)))\n           (< 1 (string-index (substring\
    \ date 0 2)\n                              \"-\" (substring date 3 4)))\n    \
    \       (< 1 (string-index (substring date 0 2)\n                            \
    \  \"-\" (substring date 3 4)))\n           (< 1 (string-index (substring date\
    \ 0 2)\n                              \"-\" (substring date 3 4)))\n         \
    \  (< 1 (string-index (substring date 0 2)\n                              \"-\"\
    \ (substring date 3 4)))\n           (< 1 (string-index (substring date 0 2)\n\
    \                              \"-\" (substring date 3 4)))\n           (< 1 (string-index\
    \ (substring date 0 2)\n                              \"-\" (substring date 3\
    \ 4)))\n           (< 1 (string-index (substring date 0 2)\n                 \
    \             \"-\" (substring date 3 4)))\n           (< 1 (string-index (substring\
    \ date 0 2)\n                              \"-\" (substring date 3 4)))\n    \
    \       (< 1 (string-index (substring date 0 2)\n                            \
    \  \"-\" (substring date 3 4)))\n           (< 1 (string-index (substring date\
    \ 0 2)\n                              \"-\" (substring date 3 4)))\n         \
    \  (< 1 (string-index (substring date 0 2)\n                              \"-\"\
    \ (substring date 3 4)))\n           (< 1 (string-index (substring date 0 2)\n\
    \                              \"-\" (substring date 3 4)))\n           (< 1 (string-index\
    \ (substring date 0 2)\n                              \"-\" (substring date 3\
    \ 4)))\n           (< 1 (string-index (substring date 0 2)\n                 \
    \             \"-\" (substring date 3 4)))\n           (< 1 (string-index", " \
    \ (cond\n    [(string-empty? date) #t]\n    [(< (string-length date) 4) #f]\n\
    \    [(< (string-length date) 10) #f]\n    [(< (string-length date) 2) #f]\n \
    \   [(< (date-month (substring date 0 2)) 1) #f]\n    [(< (date-day (substring\
    \ date 0 2)) 31) #f]\n    [(< (date-day (substring date 0 2)) 30) #f]\n    [(<\
    \ (date-day (substring date 0 2)) 29) #f]\n    [(< (date-month (substring date\
    \ 0 2)) 12) #f]\n    [else #t]))\n", "  (cond\n    [(or (empty? date)\n      \
    \    (<= 0 (string-length (string-append \"01-\" date))\n               (string-length\
    \ (string-append \"31-\" date))\n               (<= 0 (string-length (string-append\
    \ \"30-\" date))\n               (<= 0 (string-length (string-append \"29-\" date))\n\
    \               (<= 0 (string-length (string-append \"28-\" date))\n         \
    \      (<= 0 (string-length (string-append \"31-\" date))\n               (<=\
    \ 0 (string-length (string-append \"30-\" date))\n               (<= 0 (string-length\
    \ (string-append \"29-\" date))\n               (<= 0 (string-length (string-append\
    \ \"28-\" date))\n               (<= 0 (string-length (string-append \"31-\" date))\n\
    \               (<= 0 (string-length (string-append \"30-\" date))\n         \
    \      (<= 0 (string-length (string-append \"29-\" date))\n               (<=\
    \ 0 (string-length (string-append \"28-\" date))\n               (<= 0 (string-length\
    \ (string-append \"31-\" date))\n               (<= 0 (string-length (string-append\
    \ \"30-\" date))\n               (<= 0 (string-length (string-append \"29-\" date))\n\
    \               (<= 0 (string-length (string-append \"28-\" date))\n         \
    \      (<= 0 (string-length (string-append \"31-\" date))\n               (<=\
    \ 0 (string-length (string-append \"30-\" date))\n               (<= 0 (string-length\
    \ (string-append \"29-\" date))\n               (<= 0 (string-length (string-append\
    \ \"28-\" date))\n               (<= 0 (string-length (string-append \"31-\" date))\n\
    \               (<= 0 (string-length (string-append \"30-\" date))\n         \
    \      (<= 0 (string-length (string-append \"29-\" date))\n               (<=\
    \ 0 (string-length (string-append \"28-\" date))\n               (<= 0 (string-length\
    \ (string-append \"31-\" date))\n               (<= 0 (string-length (string-append\
    \ \"30-\" date))\n               (<= 0 (string-length (string-append \"29-\" date))\n\
    \               (<= 0 (string-length (string-append \"28-\" date))\n         \
    \      (<= 0 (string-length (string-append \"31-\" date))\n               (<=\
    \ 0 (string-length (string-append \"30-\" date))\n               (<= 0 (string-length\
    \ (string-", "  ;; The date string is not empty.\n  (not (empty? date))\n  ;;\
    \ The months should not be less than 1 or higher than 12.\n  (< 1 (length date))\n\
    \  (< 1 (sub1 (sub1 date (length date))))\n  ;; The date should be in the format:\
    \ mm-dd-yyyy\n  (= (string-length date) 12)\n  ;; The number of days is not less\
    \ than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of\
    \ days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the\
    \ number of days is not less than 1 or higher than 29 for the month 2.\n  (or\n\
    \    ;; The months should not be less than 1 or higher than 12.\n    (< 1 (length\
    \ date))\n    (< 1 (sub1 (sub1 date (length date))))\n    (< 1 (sub1 (sub1 date\
    \ (length date)))))\n  ;; The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n  (or\n    ;; The months should\
    \ not be less than 1 or higher than 12.\n    (< 1 (length date))\n    (< 1 (sub1\
    \ (sub1 date (length date))))\n    (< 1 (sub1 (sub1 date (length date)))))\n \
    \ ;; The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n  (or\n    ;; The months should not be less than 1 or higher than\
    \ 12.\n    (< 1 (length date))\n    (< 1 (sub1 (sub1 date (length date))))\n \
    \   (< 1 (sub1 (sub1 date (length date)))))\n  ;; The number of days is not less\
    \ than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of\
    \ days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the\
    \ number of days is not less than 1 or higher than 29 for the month 2.\n  (or\n\
    \    ;; The months should not be less than 1 or higher than 12.\n    (< 1 (length\
    \ date))\n    (< 1 (sub1 (sub1 date (length date))))\n    (< 1 (sub1 (sub1 date\
    \ (length date)))))\n  ;; The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. ", "  (if (empty? date)\n      #f\n    \
    \  (let ((months (string->list (substring date 0 2))))\n        (and (equal? (string->list\
    \ months '('1 3 5 7 8 10 12))\n               (equal? (string->list months '('4\
    \ 6 9 11))\n               (equal? (string->list months '('2 12)))\n         \
    \      (equal? (string->list months (substring date 2 2))))\n             (equal?\
    \ (string-length (substring date 0 2)) 2)\n             (equal? (string-length\
    \ (substring date 2 4)) 4)\n             (string=? (substring date 4 2) \"-\"\
    )\n             (string=? (substring date 6 2) \"-\")\n             (equal? (string-length\
    \ (substring date 6 4)) 4)\n             (equal? (string-length (substring date\
    \ 8 4)) 4)\n             (equal? (string-length (substring date 10 4)) 4)\n  \
    \           (equal? (string-length (substring date 12 4)) 4)\n             (string=?\
    \ (substring date 2 4) \"-\")\n             (string=? (substring date 5 4) \"\
    -\")\n             (equal? (string-length (substring date 5 4)) 4)\n         \
    \    (equal? (string-length (substring date 7 4)) 4)\n             (equal? (string-length\
    \ (substring date 9 4)) 4)\n             (equal? (string-length (substring date\
    \ 11 4)) 4)\n             (equal? (string-length (substring date 13 4)) 4)\n \
    \            (equal? (string-length (substring date 14 4)) 4)\n             (equal?\
    \ (string-length (substring date 16 4)) 4)\n             (equal? (string-length\
    \ (substring date 17 4)) 4)\n             (equal? (string-length (substring date\
    \ 19 4)) 4)\n             (equal? (string-length (substring date 20 4)) 4)\n \
    \            (equal? (string-length (substring date 22 4)) 4)\n             (equal?\
    \ (string-length (substring date 24 4)) 4)\n             (equal? (string-length\
    \ (substring date 26 4)) 4)\n             (equal? (string-length (substring date\
    \ 28 4)) 4)\n             (equal? (string-length (substring date 31 4)) 4)\n \
    \            (equal? (string-length (substring date 32 4)) 4)\n             (equal?\
    \ (string-length (substring date 33 4)) 4)\n             (equal? (string-length\
    \ (substring date 34 4)) 4)\n             (equal? (string-length (substring date\
    \ 36 4)) 4)\n             (equal? (string-length (substring date 37 4)) 4)\n \
    \            (equal? (string-length (substring date 38 4", "  (cond\n    [(empty?\
    \ date) #t]\n    [(< 1 (string-length date)) #f]\n    [(< (* 2 31) (string-length\
    \ date)) #f]\n    [(< (* 2 30) (string-length date)) #f]\n    [(< (* 2 29) (string-length\
    \ date)) #f]\n    [(string-equal? (substring date 0 2) \"01\") #f]\n    [(string-equal?\
    \ (substring date 0 2) \"03\") #f]\n    [(string-equal? (substring date 0 2) \"\
    05\") #f]\n    [(string-equal? (substring date 0 2) \"07\") #f]\n    [(string-equal?\
    \ (substring date 0 2) \"08\") #f]\n    [(string-equal? (substring date 0 2) \"\
    10\") #f]\n    [(string-equal? (substring date 0 2) \"12\") #f]\n    [(string-equal?\
    \ (substring date 0 2) \"04\") #f]\n    [(string-equal? (substring date 0 2) \"\
    06\") #f]\n    [(string-equal? (substring date 0 2) \"09\") #f]\n    [(string-equal?\
    \ (substring date 0 2) \"11\") #f]\n    [(string-equal? (substring date 0 2) \"\
    02\") #f]\n    [(string-equal? (substring date 0 2) \"05\") #f]\n    [(string-equal?\
    \ (substring date 0 2) \"09\") #f]\n    [(string-equal? (substring date 0 2) \"\
    13\") #f]\n    [(string-equal? (substring date 0 2) \"14\") #f]\n    [(string-equal?\
    \ (substring date 0 2) \"15\") #f]\n    [(string-equal? (substring date 0 2) \"\
    19\") #f]\n    [(string-equal? (substring date 0 2) \"20\") #f]\n    [(string-equal?\
    \ (substring date 0 2) \"21\") #f]\n    [(string-equal? (substring date 0 2) \"\
    22\") #f]\n    [(string-equal? (substring date 0 2) \"23\") #f]\n    [(string-equal?\
    \ (substring date 0 2) \"00\") #f]\n    [(string-equal? (substring date 0 2) \"\
    10\") #f]\n    [(string-equal? (substring date 0 2) \"11\") #f]\n    [(string-equal?\
    \ (substring date 0 2) \"12\") #f]\n    [(string-equal? (substring date 0 2) \"\
    13\") #f]\n    [(string-equal? (substring date 0 2) \"15", "  ;; Your code here\n\
    )", "  (cond\n    [(or (string? date) (null? date)) #f]\n    [(or (string? (substring\
    \ date 0 2)) (= (length (substring date 0 2)) 2)) (= (length (substring date 0\
    \ 2)) 1)] \n    [(and (string? (substring date 0 2)) (> (length (substring date\
    \ 0 2)) 2)) (= (length (substring date 0 2)) 2)] \n    [(and (string? (substring\
    \ date 0 2)) (< 1 (length (substring date 0 2))) (> (length (substring date 0\
    \ 2)) 4)) (= (length (substring date 0 2)) 2)] \n    [(and (string? (substring\
    \ date 0 2)) (< 1 (length (substring date 0 2))) (> 3 (length (substring date\
    \ 0 2))) (= (length (substring date 0 2)) 3)) (= (length (substring date 0 2))\
    \ 2)] \n    [(and (string? (substring date 0 2)) (< 1 (length (substring date\
    \ 0 2))) (> 2 (length (substring date 0 2))) (= (length (substring date 0 2))\
    \ 2)) (= (length (substring date 0 2)) 2)] \n    [(and (string? (substring date\
    \ 0 2)) (< 1 (length (substring date 0 2))) (> 9 (length (substring date 0 2)))\
    \ (= (length (substring date 0 2)) 2)) (= (length (substring date 0 2)) 2)] \n\
    \    [(and (string? (substring date 0 2)) (< 1 (length (substring date 0 2)))\
    \ (> 30 (length (substring date 0 2))) (= (length (substring date 0 2)) 2)) (=\
    \ (length (substring date 0 2)) 2)] \n    [(and (string? (substring date 0 2))\
    \ (< 1 (length (substring date 0 2))) (> 29 (length (substring date 0 2))) (=\
    \ (length (substring date 0 2)) 2)) (= (length (substring date 0 2)) 2)] \n  \
    \  [(and (string? (substring date 0 2)) (< 1 (length (substring date 0 2))) (>\
    \ 12 (length (substring date 0 2))) (= (length (substring date 0 2)) 2)) (= (length\
    \ (substring date 0 2)) 2)] \n    [(and (string? (substring date 0 2)) (< 1 (length\
    \ (substring date 0 2))) (> 11 (length (substring date 0 2))) (= (length (sub",
  "  (if (= 0 (string-length date))\n      #f\n      (if (< (string-length date)\n\
    \            (/ (string-length date) 3))\n          #t\n          (let ([day (substring\
    \ (date 0 2)\n                            (string-length (substring (date 0 2)\n\
    \                                                 (string->integer (substring\
    \ (date 0 2)\n                                                               \
    \      (/ (string-length date) 3)\n                                          \
    \                           (+ 3 (string-length (substring (date 0 2)\n      \
    \                                                                        (string->integer\
    \ (substring (date 0 2)\n                                                    \
    \                                             (/ (string-length date) 3)\n   \
    \                                                                            \
    \                  (+ 3 (string-length (substring (date 0 2)\n               \
    \                                                                            \
    \                   (string->integer (substring (date 0 2)\n                 \
    \                                                                            \
    \                    (/ (string-length date) 3)\n                            \
    \                                                                            \
    \         (+ 3 (string-length (substring (date 0 2)\n                        \
    \                                                                            \
    \                (string->integer (substring (date 0 2)\n                    \
    \                                                                            \
    \                       (/ (string-length date) 3)\n                         \
    \                                                                            \
    \                  (+ 3 (string-length (substring (date 0 2)\n               \
    \                                                                            \
    \                             (string->integer (substring (date 0 2)\n       \
    \                                                                            \
    \                                        (/ (string-length date) 3)\n        \
    \                                                                            \
    \                                       (+ 3 (string-length (substring (date 0\
    \ 2)\n                                                                       \
    \                                                     (string->integer (substring\
    \ (date 0 2)\n                                                               \
    \                                                              (/ (string-length\
    \ date) 3)\n                                                                 \
    \                                                            (+ 3 (string-length\
    \ (substring (date 0 2)\n                                                    \
    \                                                                          (string->integer\
    \ (substring (date 0 2)\n                                                    \
    \                                                                           (/\
    \ (string-length date) 3)\n                                                  \
    \                                                                            \
    \ (+ 3 (string-length (substring (date 0 2)\n                                \
    \                                                                            \
    \                      (string->integer (substring (date 0 2)\n              \
    \                                                                            \
    \                                         (/ (string-length date) 3)\n       \
    \                                                                            \
    \                                                (+ 3 (string-length (substring\
    \ (date 0 2)\n                                                               \
    \                                                                            \
    \       (string->integer (substring (date 0 2)\n                             \
    \                                                                            \
    \                                          (/ (string-length date) 3)\n      \
    \                                                                            \
    \                                                                 (+ 3 (string-length\
    \ (substring (date 0 2)\n                                                    \
    \                                                                            \
    \                     (string->integer (substring (date 0 2)\n               \
    \                                                                            \
    \                                                          (/ (string-length date)\
    \ 3)\n                                                                       \
    \                                                                            \
    \  (+ 3 (string-length (substring (date 0 2)\n                               \
    \                                                                            \
    \                                           (string->integer (substring (date\
    \ 0 2)\n                                                                     \
    \                                                                            \
    \      (/ (string-length date) 3)\n                                          \
    \                                                                            \
    \                                 (+ 3 (string-length (substring (date 0 2)\n\
    \                                                                            \
    \                                                                            \
    \ (string->integer (substring (date 0 2)\n                                   \
    \                                                                            \
    \                                          (/ (string-length date) 3)\n      \
    \                                                                            \
    \                                                                       (+ 3 (string-length\
    \ (substring (date 0 2)\n                                                    \
    \                                                                            \
    \                           (string->integer (substring (date 0 2)\n         \
    \                                                       ", "  (cond [(empty? date)\
    \ #f]\n        [(< 1 (string->number (first date))) #f]\n        [(< 30 (string->number\
    \ ((string-length (first date)) (substring (first date) (+ 2 1) (string-length\
    \ (first date))))))\n         (and (< (string->number ((string-length (first date))\
    \ (substring (first date) (+ 2 1) (string-length (first date))))) 29)\n      \
    \         (< 2 (string->number ((string-length (first date)) (substring (first\
    \ date) (+ 3 1) (string-length (first date))))))\n         (and (< 1 (string->number\
    \ ((string-length (first date)) (substring (first date) (+ 3 1) (string-length\
    \ (first date))))) 12)\n               (< (string->number ((string-length (first\
    \ date)) (substring (first date) (+ 5 1) (string-length (first date))))) 11))\n\
    \        [(< 1 (string->number ((string-length (first date)) (substring (first\
    \ date) (+ 5 1) (string-length (first date))))) 12) #t]\n        [(< 1 (string->number\
    \ ((string-length (first date)) (substring (first date) (+ 7 1) (string-length\
    \ (first date))))) 31)\n         (and (< 1 (string->number ((string-length (first\
    \ date)) (substring (first date) (+ 7 1) (string-length (first date))))) 29)\n\
    \               (< 2 (string->number ((string-length (first date)) (substring\
    \ (first date) (+ 8 1) (string-length (first date))))))\n         (and (< 1 (string->number\
    \ ((string-length (first date)) (substring (first date) (+ 8 1) (string-length\
    \ (first date))))) 30)\n               (< 2 (string->number ((string-length (first\
    \ date)) (substring (first date) (+ 9 1) (string-length (first date))))))\n  \
    \       (and (< 1 (string->number ((string-length (first date)) (substring (first\
    \ date) (+ 9 1) (string-length (first date))))) 29)\n               (< 2 (string->number\
    \ ((string-length (first date)) (substring (first date) (+ 10 1) (string-length\
    \ (first date))))))\n         (and (< 1 (string->number ((string-length (first\
    \ date)) (substring (first date) (+ 10 1) (string-length (first date))))) 30)\n\
    \               (< 2 (string->number ((string-length (first date)) (substring\
    \ (first date) (+ 11 1) (string-", "  (cond [(empty? date) #t]\n        [(< (char-code\
    \ date) (char-code \"0\"))\n         (error \"Invalid date. Day cannot be less\
    \ than or equal to 0.\")]\n        [(< (char-code date) (char-code \"1\"))\n \
    \        (error \"Invalid date. Month cannot be less than or equal to 1.\")]\n\
    \        [(< (char-code date) (char-code \"2\"))\n         (error \"Invalid date.\
    \ Month cannot be less than or equal to 2.\")]\n        [(< (char-code date) (char-code\
    \ \"3\"))\n         (error \"Invalid date. Month cannot be less than or equal\
    \ to 3.\")]\n        [(< (char-code date) (char-code \"4\"))\n         (error\
    \ \"Invalid date. Month cannot be less than or equal to 4.\")]\n        [(< (char-code\
    \ date) (char-code \"5\"))\n         (error \"Invalid date. Month cannot be less\
    \ than or equal to 5.\")]\n        [(< (char-code date) (char-code \"6\"))\n \
    \        (error \"Invalid date. Month cannot be less than or equal to 6.\")]\n\
    \        [(< (char-code date) (char-code \"7\"))\n         (error \"Invalid date.\
    \ Month cannot be less than or equal to 7.\")]\n        [(< (char-code date) (char-code\
    \ \"8\"))\n         (error \"Invalid date. Month cannot be less than or equal\
    \ to 8.\")]\n        [(< (char-code date) (char-code \"9\"))\n         (error\
    \ \"Invalid date. Month cannot be less than or equal to 9.\")]\n        [(< (char-code\
    \ date) (char-code \"10\"))\n         (error \"Invalid date. Month cannot be less\
    \ than or equal to 10.\")]\n        [(< (char-code date) (char-code \"11\"))\n\
    \         (error \"Invalid date. Month cannot be less than or equal to 11.\")]\n\
    \        [(< (char-code date) (char-code \"12\"))\n         (error \"Invalid date.\
    \ Month cannot be less than or equal to 12.\")]\n        [(> (char-code date)\
    \ (char-code \"0\"))\n         (error \"Invalid date. Month cannot be greater\
    \ than or equal to 0.\")]\n        [(> (char-code date) (char-code \"1\"))\n \
    \        (error \"Invalid date. Month cannot be greater than or equal to 1.\"\
    )]\n        [(> (char-code date) (char-code \"2\"))\n         (error \"Invalid\
    \ date. Month cannot be greater than or equal to 2.\")]\n        [(> (char-code\
    \ date) (char-code \"3\"))\n         (error \"Invalid date. Month cannot be greater\
    \ than or equal to 3.\")]\n        [(> (char-code ", "  (if (and (not (string?\
    \ date)) (<= 1 (length date)) (<= 31 (length date)) (<= 30 (length date)) (<=\
    \ 29 (length date)) (<= 12 (length date))\n      (check-date date))))\n", "  (cond\n\
    \    [(empty? date) #t]\n    [(< (length date) 4) #f]\n    [(> (length date) 3)\
    \ #f]\n    [(string? (substring (trim date) 0 2)) #t]\n    [(string? (substring\
    \ (trim date) 0 1)) #f]\n    [(string? (substring (trim date) 1 2)) #t]\n    [(string?\
    \ (substring (trim date) 1 1)) #f]\n    [(string? (substring (trim date) 2 2))\
    \ #t]\n    [(string? (substring (trim date) 2 1)) #f]\n    [(string? (substring\
    \ (trim date) 3 2)) #t]\n    [(string? (substring (trim date) 3 1)) #f]\n    [(string?\
    \ (substring (trim date) 4 2)) #t]\n    [(string? (substring (trim date) 4 1))\
    \ #f]\n    [(string? (substring (trim date) 5 2)) #t]\n    [(string? (substring\
    \ (trim date) 5 1)) #f]\n    [(string? (substring (trim date) 6 2)) #t]\n    [(string?\
    \ (substring (trim date) 6 1)) #f]\n    [(string? (substring (trim date) 7 2))\
    \ #t]\n    [(string? (substring (trim date) 7 1)) #f]\n    [(string? (substring\
    \ (trim date) 8 2)) #t]\n    [(string? (substring (trim date) 8 1)) #f]\n    [(string?\
    \ (substring (trim date) 9 2)) #t]\n    [(string? (substring (trim date) 9 1))\
    \ #f]\n    [(string? (substring (trim date) 10 2)) #t]\n    [(string? (substring\
    \ (trim date) 10 1)) #f]\n    [(string? (substring (trim date) 11 2)) #t]\n  \
    \  [(string? (substring (trim date) 11 1)) #f]\n    [(string? (substring (trim\
    \ date) 12 2)) #t]\n    [(string? (substring (trim date) 12 1)) #f]\n    [(> (string->number\
    \ (substring (trim date) 0 2)) 0) #f]\n    [(> (string->number (substring (trim\
    \ date) 1 2)) 0) #f]\n    [(> (string->number (substring (trim date) 2 2)) 0)\
    \ #f]\n    [(> (string->number (substring (trim date) 3 2)) 0) #f]\n    [(> (string->number\
    \ (substring (trim date) 4 2)) 0) #f]\n    [(> (string->number (substring (",
  "  (cond\n    [(and (not (empty? date))\n           (<= (length (string->list (symbol->string\
    \ date)) 3)\n              3)\n          (and (<= (length (string->list (symbol->string\
    \ date)) 2)\n                (< 3 (length (string->list (symbol->string date))))\n\
    \                (< 4 (length (string->list (symbol->string date))))\n       \
    \         (< 6 (length (string->list (symbol->string date))))\n              \
    \  (< 9 (length (string->list (symbol->string date))))\n                (< 11\
    \ (length (string->list (symbol->string date))))\n                (< 12 (length\
    \ (string->list (symbol->string date))))\n                (<= (string->length\
    \ (symbol->string date) -2)\n                  2)\n          (and (<= (string->length\
    \ (symbol->string date) -4)\n                (< 7 (string->length (symbol->string\
    \ date))))\n                (< 10 (string->length (symbol->string date))))\n \
    \               (< 12 (string->length (symbol->string date))))\n          (and\
    \ (<= (string->length (symbol->string date) -6)\n                (< 9 (string->length\
    \ (symbol->string date))))\n                (< 12 (string->length (symbol->string\
    \ date))))\n          (and (<= (string->length (symbol->string date) -9)\n   \
    \             (< 11 (string->length (symbol->string date))))\n               \
    \ (< 12 (string->length (symbol->string date))))\n          (and (<= (string->length\
    \ (symbol->string date) -11)\n                (< 12 (string->length (symbol->string\
    \ date))))\n                (<= (string->length (symbol->string date) -2)\n  \
    \                2)\n          (and (<= (string->length (symbol->string date)\
    \ -13)\n                (< 12 (string->length (symbol->string date))))\n     \
    \           (<= (string->length (symbol->string date) -2)\n                  2)\n\
    \          (and (<= (string->length (symbol->string date) -14)\n             \
    \   (< 12 (string->length (symbol->string date))))\n                (<= (string->length\
    \ (symbol->string date) -2)\n                  2)\n          (and (<= (string->length\
    \ (symbol->string date) -15)\n                (< 12 (string->length (symbol->string\
    \ date))))\n                (<= (string->length (symbol->string date) -2)\n  \
    \                2)\n          (and (<= (string->length (symbol->string date)\
    \ -16)\n                (< 12 (string->length", "  (cond\n    [(empty? date) #t]\n\
    \    [(<= (length date) 4) #f]\n    [(< ((sub (string date '(\"-\" (sub (string\
    \ date \"-\" 1) \"-\") \"-\") '(\"-\" (sub (string date \"-\" 2) \"-\") \"-\"\
    ) '(\"-\" (sub (string date \"-\" 3) \"-\") \"-\"))) 1) #f]\n    [(< ((sub (string\
    \ date '(\"-\" (sub (string date \"-\" 4) \"-\") \"-\") '(\"-\" (sub (string date\
    \ \"-\" 5) \"-\") \"-\") '(\"-\" (sub (string date \"-\" 6) \"-\") \"-\"))) 31)\
    \ #f]\n    [(< ((sub (string date '(\"-\" (sub (string date \"-\" 7) \"-\") \"\
    -\") '(\"-\" (sub (string date \"-\" 8) \"-\") \"-\") '(\"-\" (sub (string date\
    \ \"-\" 9) \"-\") \"-\"))) 30) #f]\n    [(< ((sub (string date '(\"-\" (sub (string\
    \ date \"-\" 10) \"-\") \"-\") '(\"-\" (sub (string date \"-\" 11) \"-\") \"-\"\
    ) '(\"-\" (sub (string date \"-\" 12) \"-\") \"-\"))) 29) #f]\n    [(= (sub (string\
    \ date '(\"-\" (sub (string date \"-\" 1) \"-\") \"-\") '(\"-\" (sub (string date\
    \ \"-\" 3) \"-\") \"-\") '(\"-\" (sub (string date \"-\" 5) \"-\") \"-\"))) 1)\
    \ #t]\n    [(= (sub (string date '(\"-\" (sub (string date \"-\" 4) \"-\") \"\
    -\") '(\"-\" (sub (string date \"-\" 6) \"-\") \"-\") '(\"-\" (sub (string date\
    \ \"-\" 9) \"-\") \"-\"))) 3) #t]\n    [(= (sub (string date '(\"-\" (sub (string\
    \ date \"-\" 7) \"-\") \"-\") '(\"-\" (sub (string date \"-\" 10) \"-\") \"-\"\
    ) '(\"-\" (sub (string date \"-\" 12) \"-\") \"-\"))) 5) #t]\n    [(= (sub (string\
    \ date '(\"-\" (sub (string date \"-\" 9) \"-\") \"-\") '(\"-\" (sub (string date\
    \ \"", "  (cond\n    [(empty? date) #t]\n    [(< 1 (string-length (substring date\
    \ 0 (string-length (substring date 0 2)))))\n     (cond\n       [(or (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"0\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"1\"))\n        (< 1 (string-length\
    \ (substring date 0 (string-length (substring date 0 3)))))]\n       [(or (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"0\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"1\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 3))) \"2\"))\n        (< 1 (string-length\
    \ (substring date 0 (string-length (substring date 0 3)))))]\n       [(or (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"0\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"1\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 3))) \"2\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 4))) \"3\"))\n        (< 1 (string-length\
    \ (substring date 0 (string-length (substring date 0 3)))))]\n       [(or (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"0\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"1\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 3))) \"2\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 4))) \"3\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 5))) \"4\"))\n        (< 1 (string-length\
    \ (substring date 0 (string-length (substring date 0 3)))))]\n       [(or (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"0\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 2))) \"1\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 3))) \"2\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 4))) \"3\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 5))) \"4\")\n            (= (substring\
    \ date 0 (string-length (substring date 0 6))) \"5\"))\n        (< 1 (string-length\
    \ (substring date 0 (string-length (substring date 0 ", "  (cond\n    [(empty?\
    \ date) #t]\n    [(< (length (substring date 0 2)) 2) #t]\n    [(< (length (substring\
    \ date 0 1)) (length (substring date 1 2))) #t]\n    [(< (length (substring date\
    \ 2 2)) (length (substring date 1 2))) #t]\n    [(< (length (substring date 2\
    \ 2)) 2) #t]\n    [(< (length (substring date 2 2)) 12) #t]\n    [(< (length (substring\
    \ date 2 2)) 31) #f]\n    [(< (length (substring date 2 2)) 30) #f]\n    [(< (length\
    \ (substring date 2 2)) 29) #f]\n    [(< (length (substring date 2 1)) 1) #t]\n\
    \    [(< (length (substring date 2 1)) 3) #t]\n    [(< (length (substring date\
    \ 2 1)) 5) #t]\n    [(< (length (substring date 2 1)) 7) #t]\n    [(< (length\
    \ (substring date 2 1)) 8) #t]\n    [(< (length (substring date 2 1)) 10) #t]\n\
    \    [(< (length (substring date 2 1)) 12) #t]\n    [(< (length (substring date\
    \ 2 1)) 31) #f]\n    [(< (length (substring date 2 1)) 30) #f]\n    [(< (length\
    \ (substring date 2 1)) 29) #f]\n    [(< (length (substring date 2 0)) 4) #t]\n\
    \    [(< (length (substring date 2 0)) 6) #t]\n    [(< (length (substring date\
    \ 2 0)) 9) #t]\n    [(< (length (substring date 2 0)) 11) #t]\n    [(< (length\
    \ (substring date 2 0)) 31) #f]\n    [(< (length (substring date 2 0)) 30) #f]\n\
    \    [(< (length (substring date 2 0)) 29) #f]\n    [(< (length (substring date\
    \ 1 2)) 1) #t]\n    [(< (length (substring date 1 2)) 3) #t]\n    [(< (length\
    \ (substring date 1 2)) 5) #t]\n    [(< (length (substring date 1 2)) 7) #t]\n\
    \    [(< (length (substring date 1 2)) 8) #t]\n    [(< (length (substring date\
    \ 1 2)) 10) #t]\n    [(< (length (substring date 1 ", "  (cond\n    ((empty? date)\
    \ #t)\n    ((< (length (string-split (symbol->string date) \"-\")) 3)\n     (#f\
    \ date))\n    ((< (length (string-split (symbol->string date) \"-\")) 3)\n   \
    \  (#f date))\n    ((< (length (string-split (symbol->string date) \"-\")) 4)\n\
    \     (#f date))\n    ((< (length (string-split (symbol->string date) \"-\"))\
    \ 4)\n     (#f date))\n    ((< (length (string-split (symbol->string date) \"\
    -\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#f date))\n    ((< (length (string-split (symbol->string date)\
    \ \"-\")) 2)\n     (#", "  (cond\n    [(empty? date) #t]\n    [(< (length date)\
    \ (length (\"01-\" months))) #f]\n    [(< ((sub (sub (sub (length date) 2) 0)\
    \ (sub (length date) 2)) 1) (sub (length date) 2)) #f]\n    [(< ((sub (sub (sub\
    \ (length date) 2) 0) (sub (length date) 2)) 31) #f]\n    [(< ((sub (sub (length\
    \ date) 2) 0) (sub (length date) 2)) (sub (length date) 2)) #f]\n    [(< ((sub\
    \ (sub (length date) 2) 1) (sub (length date) 2)) 29) #f]\n    [(< ((sub (sub\
    \ (length date) 2) 2) (sub (length date) 2)) 31) #f]\n    [(< ((sub (sub (length\
    \ date) 2) 2) (sub (length date) 2)) 30) #f]\n    [(< ((sub (sub (length date)\
    \ 2) 2) (sub (length date) 2)) 29) #f]\n    [else #t]))\n", "  (cond ((empty?\
    \ date) #f)\n        ((< (length (substring date 0 2)) 2) #f)\n        ((> (days-of-month\
    \ (substring date 0 2)) 1) #f)\n        ((> (days-of-month (substring date 0 2))\
    \ 30) #f)\n        ((> (days-of-month (substring date 0 2)) 29) #f)\n        ((<\
    \ (months-of-year (substring date 0 2)) 1) #f)\n        ((> (months-of-year (substring\
    \ date 0 2)) 12) #f)\n        ((months-of-year (substring date 0 2)) date)))\n",
  "  (cond\n    [(string? date) #t]\n    [(< 1 (string-length date)) #f]\n    [(<\
    \ 31 (string-length date)) #f]\n    [(< 30 (string-length date)) #f]\n    [(<\
    \ 29 (string-length date)) #f]\n    [(< 12 (string-length date)) #f]\n    [(string=?\
    \ (substring date 0 (string-length date)) \"-\")\n     (and (<= 1 (string->number\
    \ (substring date 0 (string-length date)))) #f)]\n    [(string=? (substring date\
    \ 0 (string-length date)) \"/\")\n     (and (<= 12 (string->number (substring\
    \ date 0 (string-length date)))) #f)]\n    [(string=? (substring date 0 (string-length\
    \ date)) \"-\")\n     (and (<= 0 (string->number (substring date 0 (string-length\
    \ date)))) #f)]\n    [(string=? (substring date 0 (string-length date)) \"/\"\
    )\n     (and (<= 0 (string->number (substring date 0 (string-length date)))) #f)]\n\
    \    [(string=? (substring date 0 (string-length date)) \"-\")\n     (and (<=\
    \ 1 (string->number (substring date 0 (string-length date)))) #f)]\n    [(string=?\
    \ (substring date 0 (string-length date)) \"/\")\n     (and (<= 0 (string->number\
    \ (substring date 0 (string-length date)))) #f)]\n    [(string=? (substring date\
    \ 0 (string-length date)) \"-\")\n     (and (<= 0 (string->number (substring date\
    \ 0 (string-length date)))) #f)]\n    [(string=? (substring date 0 (string-length\
    \ date)) \"-\")\n     (and (<= 0 (string->number (substring date 0 (string-length\
    \ date)))) #f)]\n    [(string=? (substring date 0 (string-length date)) \"-\"\
    )\n     (and (<= 0 (string->number (substring date 0 (string-length date)))) #f)]\n\
    \    [(string=? (substring date 0 (string-length date)) \"-\")\n     (and (<=\
    \ 0 (string->number (substring date 0 (string-length date)))) #f)]\n    [(string=?\
    \ (substring date 0 (string-length date)) \"-\")\n     (and (<= 1 (string->number\
    \ (substring date 0 (string-length date)))) #f)]\n    [(string=? (substring date\
    \ 0 (string-length date)) \"-\")\n     (and (<= 0 (string->number (substring date\
    \ 0 (string-length date)))) #f)]\n    [(string=? (substring date 0 (string-length\
    \ date)) \"-\")\n     (and (<= 0 (string->number (substring date 0 (string-length\
    \ date)))) #f)]", "  (cond [(empty? date) #t]\n        [(< 1 (string->number (string->symbol\
    \ date)))\n         (cond\n           [(< 1 (string->number (string->symbol date)))\n\
    \            (cond\n              [(< 1 (string->number (string->symbol date)))\n\
    \               (cond\n                 [(< 1 (string->number (string->symbol\
    \ date)))\n                   (cond\n                     [(< 1 (string->number\
    \ (string->symbol date)))\n                      (cond\n                     \
    \  [(< 1 (string->number (string->symbol date)))\n                        (cond\n\
    \                          [(< 1 (string->number (string->symbol date)))\n   \
    \                        (cond\n                            [(< 1 (string->number\
    \ (string->symbol date)))\n                             (cond\n              \
    \                 [(< 1 (string->number (string->symbol date)))\n            \
    \                    #t\n                               (else #f)]\n         \
    \                   [#t\n                             (cond\n                \
    \               [(< 1 (string->number (string->symbol date)))\n              \
    \                  (cond\n                                 [(< 1 (string->number\
    \ (string->symbol date)))\n                                  (cond\n         \
    \                          [(< 1 (string->number (string->symbol date)))\n   \
    \                                 #t\n                                   (else\
    \ #f)]\n                                 [#t\n                               \
    \   (cond\n                                   [(< 1 (string->number (string->symbol\
    \ date)))\n                                    (cond\n                       \
    \              [(< 1 (string->number (string->symbol date)))\n               \
    \                       (cond\n                                       [(< 1 (string->number\
    \ (string->symbol date)))\n                                        #t\n      \
    \                                 (else #f)]\n                               \
    \      [#t\n                                      (cond\n                    \
    \                   [(< 1 (string->number (string->symbol date)))\n          \
    \                              (cond\n                                       \
    \  [(< 1 (string->number (string->symbol date)))\n                           \
    \               (cond\n                                           [(< 1 (string->number\
    \ (string->symbol date)))\n                                              #t\n\
    \                                           (else #f)]\n                     \
    \                    [#t\n                                           (cond\n \
    \                                          [(< 1 (string->number (string->symbol\
    \ date)))\n                                              (cond\n             \
    \                                  [(< 1 (string->number (string->symbol date)))\n\
    \                                                  #t\n                      \
    \                         (else #f)]\n                                       \
    \    [#t\n                                              (cond\n              \
    \                                 [(< 1 (string->number (string->symbol date)))\n\
    \                                                  (cond\n                   \
    \                              [(< 1 (string->number (string->symbol date)))\n\
    \                                                   (cond\n                  \
    \                                 [(< 1 (string->number (string->symbol date)))\n\
    \                                                    #t\n                    \
    \                               (else #f)]\n                                 \
    \                [#t\n                                                   (cond\n\
    \                                                   [(< 1 (string->number (string->symbol\
    \ date)))\n                                                      (cond\n     \
    \                                                  [(< 1 (string->", "  (cond\n\
    \    [(empty? date) #t]\n    [(< (length date) 4) #f]\n    [(< (length date) 7)\
    \ #f]\n    [(< (length date) 10) #f]\n    [(< (length date) 12) #f]\n    [(< (length\
    \ date) 14) #f]\n    [(< (length date) 16) #f]\n    [(< (length date) 19) #f]\n\
    \    [(< (length date) 21) #f]\n    [(< (length date) 24) #f]\n    [(< (length\
    \ date) 26) #f]\n    [(< (length date) 29) #f]\n    [(< (length date) 31) #f]\n\
    \    [(< (length date) 32) #f]\n    [(> (length date) 3) #f]\n    [(> (length\
    \ date) 5) #f]\n    [(> (length date) 7) #f]\n    [(> (length date) 10) #f]\n\
    \    [(> (length date) 12) #f]\n    [(> (length date) 13) #f]\n    [(> (length\
    \ date) 14) #f]\n    [(> (length date) 15) #f]\n    [(> (length date) 16) #f]\n\
    \    [(> (length date) 17) #f]\n    [(> (length date) 18) #f]\n    [(> (length\
    \ date) 19) #f]\n    [(> (length date) 20) #f]\n    [(> (length date) 21) #f]\n\
    \    [(> (length date) 22) #f]\n    [(> (length date) 23) #f]\n    [(> (length\
    \ date) 24) #f]\n    [(> (length date) 25) #f]\n    [(> (length date) 26) #f]\n\
    \    [(> (length date) 27) #f]\n    [(> (length date) 28) #f]\n    [(> (length\
    \ date) 29) #f]\n    [(> (length date) 30) #f]\n    [(> (length date) 31) #f]\n\
    \    [(> (length date) 32) #f]\n    [(> (length date) 33) #f]\n    [(> (length\
    \ date) 34) #f]\n    [(> (length date) 35) #f]\n    [(> (length date) 36) #f]\n\
    \    [(> (length date) 37) #f]\n    [(> (length date) 38) #f]\n    [(> (length\
    \ date) 39) #f]\n    [(> (length date) 40) #f]\n    [", "  (cond\n    ((string=?\
    \ date \"\") #f)\n    ((< (days-of-the-month? date) 1) #f)\n    ((> (days-of-the-month?\
    \ date) 31) #f)\n    ((< (months-of-the-year? date) 1) #f)\n    ((> (months-of-the-year?\
    \ date) 12) #f)\n    ((< (month-day? date 2) 2) #f)\n    ((> (month-day? date\
    \ 2) 29) #f)\n    ((= (month-day? date 2) 2) (and (= (day-of-the-month? date)\
    \ 2) (<= (days-of-the-month? date) 30)))\n    ((= (month-day? date 2) 3) (and\
    \ (= (day-of-the-month? date) 3) (<= (days-of-the-month? date) 31)))\n    ((=\
    \ (month-day? date 2) 4) (and (= (day-of-the-month? date) 4) (<= (days-of-the-month?\
    \ date) 30)))\n    ((= (month-day? date 2) 5) (and (= (day-of-the-month? date)\
    \ 5) (<= (days-of-the-month? date) 31)))\n    ((= (month-day? date 2) 6) (and\
    \ (= (day-of-the-month? date) 6) (<= (days-of-the-month? date) 30)))\n    ((=\
    \ (month-day? date 2) 7) (and (= (day-of-the-month? date) 7) (<= (days-of-the-month?\
    \ date) 31)))\n    ((= (month-day? date 2) 8) (and (= (day-of-the-month? date)\
    \ 8) (<= (days-of-the-month? date) 30)))\n    ((= (month-day? date 2) 9) (and\
    \ (= (day-of-the-month? date) 9) (<= (days-of-the-month? date) 31)))\n    ((=\
    \ (month-day? date 2) 10) (and (= (day-of-the-month? date) 10) (<= (days-of-the-month?\
    \ date) 30)))\n    ((= (month-day? date 2) 11) (and (= (day-of-the-month? date)\
    \ 11) (<= (days-of-the-month? date) 31)))\n    ((= (month-day? date 2) 12) (and\
    \ (= (day-of-the-month? date) 12) (<= (days-of-the-month? date) 30))))\n  (cond\n\
    \    ((string=? (month-day? date 2) \"01\") #t)\n    ((string=? (month", "  (cond\n\
    \    [(string-empty? date) #f]\n    [(< (string->integer date) 1)\n     (error\
    \ (string \"Date string must be more than one day!\"))]\n    [(< (string->integer\
    \ date) 31)\n     (error (string \"Date string must be more than one day!\"))]\n\
    \    [(< (string->integer date) 30)\n     (error (string \"Date string must be\
    \ more than one day!\"))]\n    [(< (string->integer date) 29)\n     (error (string\
    \ \"Date string must be more than one day!\"))]\n    [(< (string->integer date)\
    \ 12)\n     (error (string \"Date string must be more than one day!\"))]\n   \
    \ [(< (string->integer date) 4)\n     (error (string \"Date string must be more\
    \ than one day!\"))]\n    [(< (string->integer date) 6)\n     (error (string \"\
    Date string must be more than one day!\"))]\n    [(< (string->integer date) 9)\n\
    \     (error (string \"Date string must be more than one day!\"))]\n    [(< (string->integer\
    \ date) 11)\n     (error (string \"Date string must be more than one day!\"))]\n\
    \    [(< (string->integer date) 13)\n     (error (string \"Date string must be\
    \ more than one day!\"))]\n    [(< (string->integer date) 15)\n     (error (string\
    \ \"Date string must be more than one day!\"))]\n    [(< (string->integer date)\
    \ 7)\n     (error (string \"Date string must be more than one day!\"))]\n    [(<\
    \ (string->integer date) 8)\n     (error (string \"Date string must be more than\
    \ one day!\"))]\n    [(< (string->integer date) 10)\n     (error (string \"Date\
    \ string must be more than one day!\"))]\n    [(< (string->integer date) 12)\n\
    \     (error (string \"Date string must be more than one day!\"))]\n    [(< (string->integer\
    \ date) 2)\n     (error (string \"Date string must be more than one day!\"))]\n\
    \    [(< (string->integer date) 3)\n     (error (string \"Date string must be\
    \ more than one day!\"))]\n    [(< (string->integer date) 5)\n     (error (string\
    \ \"Date string must be more than one day!\"))]\n    [(< (string->integer date)\
    \ 7)\n     (error (string \"Date string must be more than one day!\"))]\n    [(<\
    \ (string->integer date) 8)\n     (error (string \"Date string must be more than\
    \ one day!\"))]\n    [(< (string->integer date) 10)\n     (error (string \"Date\
    \ string ", "  (and (not (empty? date))\n       (< (length date) 10)\n       (<\
    \ (string-ref date 0) \"-\")\n       (< (string-length date) 2)\n       (< (string-to-integer\
    \ (substring date 0 2)) 12)\n       (< (string-to-integer (substring date 2 2))\
    \ 2)\n       (< (string-to-integer (substring date 4 4)) 12)\n       (< (string-to-integer\
    \ (substring date 6 4)) 2)))\n", "  (and (not (empty? date))\n       (and (>=\
    \ (length date) 10)\n            (not (= (substring date 0 2) \"-\")\n       \
    \          (= (substring date 0 1) \"-\")\n                 (and (< 1 (substring\
    \ date 2 2))\n                      (< 3 (substring date 2 2))\n             \
    \         (< 5 (substring date 2 2))\n                      (< 7 (substring date\
    \ 2 2))\n                      (< 8 (substring date 2 2))\n                  \
    \    (< 10 (substring date 2 2))\n                      (< 12 (substring date\
    \ 2 2)))\n            (and (>= (length date) 20)\n                 (not (= (substring\
    \ date 1 1) \"-\")\n                       (= (substring date 1 1) \"-\")\n  \
    \                     (and (< 1 (substring date 3 2))\n                      \
    \      (< 3 (substring date 3 2))\n                            (< 5 (substring\
    \ date 3 2))\n                            (< 7 (substring date 3 2))\n       \
    \                     (< 8 (substring date 3 2))\n                           \
    \ (< 10 (substring date 3 2))\n                            (< 12 (substring date\
    \ 3 2)))\n                      (and (< 1 (substring date 4 2))\n            \
    \                (< 3 (substring date 4 2))\n                            (< 5\
    \ (substring date 4 2))\n                            (< 7 (substring date 4 2))\n\
    \                            (< 8 (substring date 4 2))\n                    \
    \        (< 10 (substring date 4 2))\n                            (< 12 (substring\
    \ date 4 2)))\n                      (and (< 1 (substring date 5 2))\n       \
    \                     (< 3 (substring date 5 2))\n                           \
    \ (< 5 (substring date 5 2))\n                            (< 7 (substring date\
    \ 5 2))\n                            (< 8 (substring date 5 2))\n            \
    \                (< 10 (substring date 5 2))\n                            (< 12\
    \ (substring date 5 2)))\n                      (and (< 1 (substring date 7 2))\n\
    \                            (< 3 (substring date 7 2))\n                    \
    \        (< 5 (substring date 7 2))\n                            (< 7 (substring\
    \ date 7 2))\n                            (< 8 (substring date 7 2))\n       \
    \                     (< 10 (substring date 7 2))\n                          \
    \  (< 12 (substring date 7 2)))\n                      (and (< 1 (substring date\
    \ 8 2))\n                            (< 3 (substring date 8 2))\n            \
    \                (< 5 (substring date 8 2))\n                            (< 7\
    \ (substring date 8 2))\n                            (< 8 (substring date 8 2))\n\
    \                            (< ", "  (cond\n    [(empty? date) #t]\n    [(< (length\
    \ date) (length #\"-\"))\n     (cond\n       [(= (substring date 0 1) #\"-\")\n\
    \        (cond\n         [(< 0 (substring date 1 2))\n          (cond\n      \
    \      [(= (substring date 0 1) #\"-\")\n             (cond\n              [(<\
    \ 0 (substring date 1 2))\n               (cond\n                 [(= (substring\
    \ date 0 1) #\"-\")\n                  (cond\n                   [(< 0 (substring\
    \ date 1 2))\n                    (cond\n                      [(= (substring\
    \ date 0 1) #\"-\")\n                       (cond\n                         [(<\
    \ 0 (substring date 2 3))\n                          (cond\n                 \
    \           [(= (substring date 0 1) #\"-\")\n                             (cond\n\
    \                              [(< 0 (substring date 1 2))\n                 \
    \              (cond\n                                 [(= (substring date 0 1)\
    \ #\"-\")\n                                  (cond\n                         \
    \          [(< 0 (substring date 2 3))\n                                     (cond\n\
    \                                     [(= (substring date 0 1) #\"-\")\n     \
    \                                (cond\n                                     [(<\
    \ 0 (substring date 3 4))\n                                      (cond\n     \
    \                                  [(= (substring date 0 1) #\"-\")\n        \
    \                                (cond\n                                     \
    \    [(< 0 (substring date 1 2))\n                                           (cond\n\
    \                                            [(= (substring date 0 1) #\"-\")\n\
    \                                             (cond\n                        \
    \                     [(< 0 (substring date 2 3))\n                          \
    \                    (cond\n                                               [(=\
    \ (substring date 0 1) #\"-\")\n                                             \
    \   (cond\n                                                [(< 0 (substring date\
    \ 3 4))\n                                                 (cond\n            \
    \                                     [(= (substring date 0 1) #\"-\")\n     \
    \                                             (cond\n                        \
    \                           [(< 0 (substring date 1 2))\n                    \
    \                                (cond\n                                     \
    \                [(= (substring date 0 1) #\"-\")\n                          \
    \                            (cond\n                                         \
    \              [(< 0 (substring date 2 3))\n                                 \
    \                       (cond\n                                              \
    \         [(= (substring date 0 1) #\"-\")\n                                 \
    \                        (cond\n                                             \
    \            [(< 0 (substring date 3 4))\n                                   \
    \                       (cond\n                                              \
    \             [(= (substring date 0 1) #\"-\")\n                             \
    \                               (cond\n                                      \
    \                      [(< 0 (substring date 1 2))\n                         \
    \                                    (cond\n                                 \
    \                            [(= (substring date 0 1) #\"-\")\n              \
    \                                                (cond\n                     \
    \                                         [(< 0 (substring date 2 3))\n      \
    \                                                         (cond\n            \
    \                                                   [(= (substring date 0 1) #\"\
    -\")\n                                                                  (cond\n\
    \                                                                  [(< 0 (substring\
    \ date 3 4))\n                                                               \
    \    (cond\n                                                                 \
    \  [(= (substring date 0 ", "  (and (empty? date) (<= 1 (string->number (substring\
    \ date 0 2)) (string->number (substring date 2 4) (string->number (substring date\
    \ 4 6)))))\n</code>\n<|/ a tags=racket,string |>\n<| a |>\nA bit late, but for\
    \ the next person who stumbles upon this thread, here's my solution:\n<code>",
  "  (cond [(empty? date) #t]\n        [(< (- date 0) 31) #f]\n        [(< (- date\
    \ 0) 30) #f]\n        [(< (- date 0) 29) #f]\n        [(< (- date 1) 12) #f]\n\
    \        [(< (- date 1) 3) #f]\n        [(< date 12) #f]\n        [(< date 3)\
    \ #f]\n        [(< date 2) #f]\n        [(< date 13) #f]\n        [(< date 5)\
    \ #f]\n        [(< date 7) #f]\n        [(< date 8) #f]\n        [(< date 10)\
    \ #f]\n        [(< date 12) #f]\n        [(< date 1) #f]\n        [(< date 3)\
    \ #f]\n        [(< date 5) #f]\n        [(< date 7) #f]\n        [(< date 8) #f]\n\
    \        [(< date 10) #f]\n        [(< date 12) #f]\n        [(< date 4) #f]\n\
    \        [(< date 6) #f]\n        [(< date 9) #f]\n        [(< date 11) #f]\n\
    \        [(< date 0) #f]\n        [else #f]))\n", "  (and (not (empty? date))\n\
    \       (= (string-length date) 11)\n       (< 1 (string-length date 2))\n   \
    \    (< 1 (string-length date 3))\n       (< 1 (string-length date 4))\n     \
    \  (< 1 (string-length date 5))\n       (< 1 (string-length date 7))\n       (<\
    \ 1 (string-length date 8))\n       (< 1 (string-length date 10))\n       (< 1\
    \ (string-length date 12))\n       (< 1 (string-length date 13))\n       (< 1\
    \ (string-length date 14))\n       (< 1 (string-length date 15))\n       (< 1\
    \ (string-length date 16))\n       (< 1 (string-length date 17))\n       (< 1\
    \ (string-length date 18))\n       (< 1 (string-length date 19))\n       (< 1\
    \ (string-length date 20))\n       (< 1 (string-length date 21))\n       (< 1\
    \ (string-length date 22))\n       (< 1 (string-length date 23))\n       (< 1\
    \ (string-length date 24))\n       (< 1 (string-length date 25))\n       (< 1\
    \ (string-length date 26))\n       (< 1 (string-length date 27))\n       (< 1\
    \ (string-length date 28))\n       (< 1 (string-length date 29))\n       (< 1\
    \ (string-length date 30))\n       (< 1 (string-length date 31))\n       (< 1\
    \ (string-length date 32))\n       (< 1 (string-length date 33))\n       (< 1\
    \ (string-length date 34))\n       (< 1 (string-length date 35))\n       (< 1\
    \ (string-length date 36))\n       (< 1 (string-length date 37))\n       (< 1\
    \ (string-length date 38))\n       (< 1 (string-length date 39))\n       (< 1\
    \ (string-length date 40))\n       (< 1 (string-length date 41))\n       (< 1\
    \ (string-length date 42))\n       (< 1 (string-length date 43))\n       (< 1\
    \ (string-length date 44))\n       (< 1 (string-length date 45))\n       (< 1\
    \ (string-length date 46))\n       (< 1 (string-length date 47))\n       (< 1\
    \ (string-length date 48))\n       (< 1 (string-length date 49))\n       (< 1\
    \ (string-length date 50))\n       (< 1 (string-length date 51))\n       (< 1\
    \ (string-length date 52))\n       (< 1 (string-length date 53))\n       (< 1\
    \ (string-length date 54))\n       (< 1 (string-length date 55))\n       (< 1\
    \ (string-length date 56))\n       (< 1 (string-length date 57))\n       (< 1\
    \ (string-length date 58))\n       (< 1 (string-length date 59))\n       (< 1\
    \ (string-length date 60))", "  (cond [(string? date)\n         (not (string-length\
    \ (date) 0))\n         (= (length (substring date 1 2)) 2)\n         (or (or (=\
    \ (string-length date 1) 2)\n                 (= (string-length date 3) 2)\n \
    \                (= (string-length date 5) 2))\n             (= (string-length\
    \ date 1) 2))\n         (and (= (string-length date 1) 2)\n              (= (string-length\
    \ date 3) 2)\n              (= (string-length date 5) 2))\n         (= (string-length\
    \ date 3) 2)\n         (< 1 (string->integer (substring date 0 1)))\n        \
    \ (> 30 (string->integer (substring date 0 1)))\n         (< 1 (string->integer\
    \ (substring date 0 3)))\n         (> 29 (string->integer (substring date 0 3)))\n\
    \         (< 1 (string->integer (substring date 0 5)))\n         (> 12 (string->integer\
    \ (substring date 0 5))) ]\n        [else false]))\n", "  (match date\n    ['()\
    \ #f]\n    [(_ m-d y-z) #t (if (= (months-in m) 12)\n                      (months-in\
    \ m)\n                      (and (months-in m) (not (>= (months-in m) 1)))\n \
    \                     (and (months-in m) (not (>= (months-in m) 4)))\n       \
    \               (and (months-in m) (not (= (days-in m) 1)))\n                \
    \      (and (months-in m) (not (= (days-in m) 30)))\n                      (and\
    \ (months-in m) (not (= (days-in m) 29)))))]))\n", "  (and (not (empty? date))\n\
    \       (not (< (string->number (car date)) 1))\n       (not (< (string->number\
    \ (cdr date)) 30))\n       (not (< (string->number (car date)) 29))\n       (not\
    \ (< (string->number (cadr date)) 12))\n       (not (< (string->number (caddr\
    \ date)) 12)))\n", "  (let ([m (string-ref date 0 1)])\n    (cond\n      ((< m\
    \ '(1 2 3 4 5 6 7 8 9 10 11 12))\n       #f)\n      ((< m '(4 6 9 11))\n     \
    \  #f)\n      ((< m '(2))\n       #f)\n      (#t (< (string-length date) 10) ;\
    \ <<<\n        #f)\n      (#t (< (string-length date) 8) ; <<<\n        #f)\n\
    \      (#t (< (string-length date) 9) ; <<<\n        #f)\n      (#t (< (string-length\
    \ date) 4) ; <<<\n        #f)\n      (#t (< (string-length date) 3) ; <<<\n  \
    \      #f)\n      (#t (< (string-length date) 2) ; <<<\n        #f)\n      (#t\
    \ (< (string-length date) 1) ; <<<\n        #f)\n      (#t (< (string-length date)\
    \ 7) ; <<<\n        #f)\n      (#t (< (string-length date) 6) ; <<<\n        #f)\n\
    \      (#t (< (string-length date) 5) ; <<<\n        #f)\n      (#t (< (string-length\
    \ date) 4) ; <<<\n        #f)\n      (#t (< (string-length date) 3) ; <<<\n  \
    \      #f)\n      (#t (< (string-length date) 2) ; <<<\n        #f)\n      (#t\
    \ (< (string-length date) 1) ; <<<\n        #f)\n      (#t (< (string-length date)\
    \ 7)) ; <<<\n        #f)\n      (#t (< (string-length date) 6)) ; <<<\n      \
    \  #f)\n      (#t (< (string-length date) 5)) ; <<<\n        #f)\n      (#t (<\
    \ (string-length date) 4)) ; <<<\n        #f)\n      (#t (< (string-length date)\
    \ 3)) ; <<<\n        #f)\n      (#t (< (string-length date) 2)) ; <<<\n      \
    \  #f)\n      (#t (< (string-length date) 1)) ; <<<\n        #f)\n      (#t (<\
    \ (string-length date) 7)))) ; <<<\n", "  (cond ((string? date) #t)\n        ((<\
    \ (string-to-number (substring date 0 2)) 12) #f)\n        ((< (string-to-number\
    \ (substring date 0 1)) 1) #f)\n        ((< (string-to-number (substring date\
    \ 3 2)) 31) #f)\n        ((< (string-to-number (substring date 3 1)) 30) #f)\n\
    \        ((< (string-to-number (substring date 4 2)) 29) #f)\n        ((< (string-to-number\
    \ (substring date 4 1)) 28) #f)\n        ((= (string-to-number (substring date\
    \ 6 2)) 4) #t)\n        ((= (string-to-number (substring date 6 1)) 4) #t)\n \
    \       ((= (string-to-number (substring date 8 2)) 6) #t)\n        ((= (string-to-number\
    \ (substring date 8 1)) 6) #t)\n        ((= (string-to-number (substring date\
    \ 10 2)) 9) #t)\n        ((= (string-to-number (substring date 10 1)) 9) #t)\n\
    \        ((= (string-to-number (substring date 12 2)) 11) #t)\n        ((= (string-to-number\
    \ (substring date 12 1)) 11) #t)\n        ((= (string-to-number (substring date\
    \ 0 3)) 3) #t)\n        ((= (string-to-number (substring date 0 1)) 3) #t)\n \
    \       ((= (string-to-number (substring date 3 3)) 3) #t)\n        ((= (string-to-number\
    \ (substring date 3 1)) 3) #t)\n        ((= (string-to-number (substring date\
    \ 5 3)) 3) #t)\n        ((= (string-to-number (substring date 5 1)) 3) #t)\n \
    \       ((= (string-to-number (substring date 7 3)) 3) #t)\n        ((= (string-to-number\
    \ (substring date 7 1)) 3) #t)\n        ((= (string-to-number (substring date\
    \ 8 3)) 3) #t)\n        ((= (string-to-number (substring date 8 1)) 3) #t)\n \
    \       ((= (string-to-number (substring date 10 3)) 3) #t)\n        ((= (string-to-number\
    \ (substring date 10 1)) 3) #t)\n        ((= (string-to-number (substring date\
    \ 12 3)) 3) #t)\n        ((= (string-to-number (substring date 12 1)) 3) #t)\n\
    \        (else #f)))\n", "  (cond\n    ((empty? date) #f)\n    ((not (or (= (string-length\
    \ date) 4) (string-length date) 12)) #f)\n    ((not (or (< 1 (string-length date)))\
    \ (string-length date)) #f)\n    ((not (or (< 1 (string-length date) (check-month\
    \ date))) (string-length date)) #f)\n    ((not (or (< 1 (string-length date) (check-day\
    \ date))) (string-length date)) #f)\n    ((not (or (= (string-length date) (string-length\
    \ date) (check-year date))) (string-length date)) #f)\n    ((check-date date)\
    \ #t)))\n", "  (cond\n    [(or (string=? date \"\") (<= 1 31 31 \"month\" \"day\"\
    \ \"year\"))\n     (string=? date \"\")]\n    [(<= 1 30 \"month\" \"day\" \"year\"\
    )\n     (string=? date \"\")]\n    [(<= 1 29 \"month\" \"day\" \"year\")\n   \
    \  (string=? date \"\")]\n    [(string=? date \"01-\" \"01-\" \"01\")\n     (string=?\
    \ date \"01-\" \"01-\" \"01\")]\n    [(string=? date \"02-\" \"02-\" \"02\")\n\
    \     (string=? date \"02-\" \"02-\" \"02\")]\n    [(string=? date \"03-\" \"\
    03-\" \"03\")\n     (string=? date \"03-\" \"03-\" \"03\")]\n    [(string=? date\
    \ \"04-\" \"04-\" \"04\")\n     (string=? date \"04-\" \"04-\" \"04\")]\n    [(string=?\
    \ date \"05-\" \"05-\" \"05\")\n     (string=? date \"05-\" \"05-\" \"05\")]\n\
    \    [(string=? date \"06-\" \"06-\" \"06\")\n     (string=? date \"06-\" \"06-\"\
    \ \"06\")]\n    [(string=? date \"07-\" \"07-\" \"07\")\n     (string=? date \"\
    07-\" \"07-\" \"07\")]\n    [(string=? date \"08-\" \"08-\" \"08\")\n     (string=?\
    \ date \"08-\" \"08-\" \"08\")]\n    [(string=? date \"09-\" \"09-\" \"09\")\n\
    \     (string=? date \"09-\" \"09-\" \"09\")]\n    [(string=? date \"10-\" \"\
    10-\" \"10\")\n     (string=? date \"10-\" \"10-\" \"10\")]\n    [(string=? date\
    \ \"11-\" \"11-\" \"11\")\n     (string=? date \"11-\" \"11-\" \"11\")]\n    [(string=?\
    \ date \"12-\" \"12-\" \"12\")\n     (string=? date \"12-\" \"12-\" \"12\")]\n\
    \    [else\n     (string=? date \"\")]\n  )\n)\n", "  (let ([parts (subseq date\
    \ 0 (string-length date))]\n        [year (parse-integer (subseq parts 0 2))]\n\
    \        [month (parse-integer (subseq parts 2 4))]\n        [day (parse-integer\
    \ (subseq parts 4 6))])\n    (and (not (empty? date))\n        ((not (< day 1))\n\
    \         (not (< day 31))\n         (not (< month 1))\n         (not (< month\
    \ 12)))\n    (and (not (< month 1))\n         (not (< month 3))\n         (not\
    \ (< month 5))\n         (not (< month 7))\n         (not (< month 8))\n     \
    \    (not (< month 10))\n         (not (< month 12))\n         (not (< month 2))\n\
    \         (not (< month 4))\n         (not (< month 6))\n         (not (< month\
    \ 9))\n         (not (< month 11)))\n    (and (not (< year 2000))\n         (not\
    \ (< year 2040))\n         (not (< year 1970))\n         (not (< year 1980))\n\
    \         (not (< year 1990))\n         (not (< year 2000)))\n    (if (= (month\
    \ (date->month date)) 0)\n        (= (day (date->day date)) 0)\n        (= (day\
    \ (date->day date)) (29 (date->month date))))))\n</code>\n<|/ a tags=racket,scheme\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>", "  (cond\n    [(empty? date) #t]\n \
    \   [(< (day-of-month date) 1) #f]\n    [(< (day-of-month date) 31) #f]\n    [(<\
    \ (day-of-month date 3) #t) #f]\n    [(< (day-of-month date 30) #t) #f]\n    [(<\
    \ (day-of-month date 29) #t) #f]\n    [(> (day-of-month date) 31) #f]\n    [(>\
    \ (day-of-month date) 30) #f]\n    [(> (day-of-month date 29) #t) #f]\n    [(>\
    \ (month-of-year date) 12) #f]\n    [(> (month-of-year date) 11) #f]\n    [(>\
    \ (month-of-year date) 10) #f]\n    [(> (month-of-year date) 9) #f]\n    [(> (month-of-year\
    \ date) 8) #f]\n    [(> (month-of-year date) 7) #f]\n    [(> (month-of-year date)\
    \ 5) #f]\n    [(> (month-of-year date) 4) #f]\n    [(> (month-of-year date) 1)\
    \ #f]\n    [(> (month-of-year date) 12) #t]\n    [(> (month-of-year date) 11)\
    \ #t]\n    [(> (month-of-year date) 10) #t]\n    [(> (month-of-year date) 9) #t]\n\
    \    [(> (month-of-year date) 8) #t]\n    [(> (month-of-year date) 7) #t]\n  \
    \  [(> (month-of-year date) 5) #t]\n    [(> (month-of-year date) 4) #t]\n    [(>\
    \ (month-of-year date) 1) #t]\n    [else #t]))\n", "  (and (not (empty? date))\n\
    \       (< (length date) 10)\n       (> (length date) 10)\n       (< (substring\
    \ date 1 1) \"-\")\n       (> (substring date 1 1) \"-\")\n       (< (substring\
    \ date 4 1) \"-\")\n       (> (substring date 4 1) \"-\")\n       (= (substring\
    \ date 2 1) \"-\")\n       (= (substring date 2 2) \"-\")\n       (< 12 (substring\
    \ date 0 1))\n       (< 12 (substring date 0 2))\n       (< 12 (substring date\
    \ 0 3))\n       (< 12 (substring date 0 4))\n       (< 12 (substring date 0 5))\n\
    \       (< 12 (substring date 0 6))\n       (< 12 (substring date 0 7))\n    \
    \   (< 12 (substring date 0 8))\n       (< 12 (substring date 0 9))\n       (<\
    \ 12 (substring date 0 10))\n       (< 12 (substring date 0 11))\n       (< 31\
    \ (substring date 0 12))\n       (< 31 (substring date 0 13))\n       (< 30 (substring\
    \ date 0 14))\n       (< 29 (substring date 0 15))\n       (= (substring date\
    \ 3 1) \"-\")\n       (= (substring date 3 2) \"-\")\n       (= (substring date\
    \ 3 3) \"-\")\n       (= (substring date 3 4) (number? (char-code date))))\n \
    \ )\n", "  (and (empty? date) #t\n       (string? (date))\n       (< (string-length\
    \ date) 7)\n       (< (string-to-list (substring date 1 2)) '(\"01\" \"03\" \"\
    05\" \"07\" \"08\" \"10\" \"12\"))\n       (< (string-to-list (substring date\
    \ 4 6)) '(\"04\" \"06\" \"09\" \"11\"))\n       (< (string-to-list (substring\
    \ date 2 4)) '(\"02\"))\n       (> (string-to-list (substring date 0 2)) '(\"\
    01\" \"04\" \"06\" \"09\" \"11\" \"02\"))\n       (> (string-to-list (substring\
    \ date 2 4)) '(\"03\" \"05\" \"07\" \"08\" \"10\" \"12\")))\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=racket,scheme dscore=0 |>\nHere are two functions to validate\
    \ the dates:\n<code>\n#lang racket\n", "  (cond [(null? date) #t]\n        [(=\
    \ (string-length date) 0) #f]\n        [(= (string-length date) 1) #t]\n     \
    \   [(< 1 (string-length date)) #f]\n        [(< 1 (string-length date)) #f]\n\
    \        [(< 1 (string-length date)) #f]\n        [(< 1 (string-length date))\
    \ #t]\n        [(< 1 (string-length date)) #t]\n        [(string-equal? (substring\
    \ date 0 1) \"-\")\n         (valid_date (substring date 1 ))\n         #t]\n\
    \        [(string-equal? (substring date 0 2) \"-\")\n         (valid_date (substring\
    \ date 2 ))\n         #t]\n        [(string-equal? (substring date 0 2) \"/\"\
    )\n         (valid_date (substring date 2 ))\n         #t]\n        [(string-equal?\
    \ (substring date 0 2) \"-\")\n         (valid_date (substring date 2 ))\n   \
    \      #t]\n        [(string-equal? (substring date 0 2) \"/\")\n         (valid_date\
    \ (substring date 2 ))\n         #t]\n        [(string-equal? (substring date\
    \ 0 2) \"-\")\n         (valid_date (substring date 2 ))\n         #t]\n     \
    \   [(string-equal? (substring date 0 2) \"/\")\n         (valid_date (substring\
    \ date 2 ))\n         #t]\n        [(string-equal? (substring date 0 1) \"-\"\
    )\n         (valid_date (substring date 1 ))\n         #t]\n        [(string-equal?\
    \ (substring date 0 1) \"-\")\n         (valid_date (substring date 1 ))\n   \
    \      #t]\n        [(string-equal? (substring date 0 1) \"-\")\n         (valid_date\
    \ (substring date 1 ))\n         #t]\n        [(string-equal? (substring date\
    \ 0 1) \"-\")\n         (valid_date (substring date 1 ))\n         #t]\n     \
    \   [(string-equal? (substring date 0 2) \"-\")\n         (valid_date (substring\
    \ date 2 ))\n         #t]\n        [(string-equal? (substring date 0 2) \"-\"\
    )\n         (valid_date (substring date 2 ))\n         #t]\n        [(string-equal?\
    \ (substring date 0 2) \"-\")\n         (valid_date (substring date 2 ))\n   \
    \      #t]\n        [(string-equal? (substring date 0 2) \"-\")\n         (valid_date\
    \ (substring date 2 ))\n", "  (and (not (empty? date)) \n       (and (number?\
    \ (length (split-string (substring date 0 2) \"-\")) \n               (number?\
    \ (length (split-string (substring date 2 4) \"-\")) \n               (number?\
    \ (length (split-string (substring date 4 6) \"-\")) \n               (number?\
    \ (length (split-string (substring date 6 8) \"-\")) \n               (number?\
    \ (length (split-string (substring date 8 10) \"-\")) \n               (number?\
    \ (length (split-string (substring date 10 12) \"-\")) \n               (<= (length\
    \ date) (10)) \n               (<= (number? (substring date 0 2)) 1 \n       \
    \            (number? (substring date 2 4)) 3 \n                   (number? (substring\
    \ date 4 6)) 5 \n                   (number? (substring date 6 8)) 7 \n      \
    \             (number? (substring date 8 10)) 9 \n                   (number?\
    \ (substring date 10 12)) 11 \n                   (number? (substring date 12\
    \ 14)) 13 \n                   (<= (number? (substring date 8 10)) 1 \n      \
    \             (number? (substring date 10 12)) 3 \n                   (number?\
    \ (substring date 12 14)) 5 \n                   (number? (substring date 14 16))\
    \ 7 \n                   (number? (substring date 16 18)) 9 \n               \
    \    (number? (substring date 18 20)) 11 \n                   (<= (number? (substring\
    \ date 6 8)) 1 \n                   (number? (substring date 8 10)) 3 \n     \
    \              (number? (substring date 10 12)) 5 \n                   (number?\
    \ (substring date 12 14)) 7 \n                   (number? (substring date 14 16))\
    \ 9 \n                   (number? (substring date 16 18)) 11 \n              \
    \     (<= (number? (substring date 4 6)) 1 \n                   (number? (substring\
    \ date 6 8)) 3 \n                   (number? (substring date 8 10)) 5 \n     \
    \              (number? (substring date 10 12)) 7 \n                   (number?\
    \ (substring date 12 14)) 9 \n                   (number? (substring date 14 16))\
    \ 11 \n                   (number? (substring date 16 18)) 13 \n             \
    \      (<= (number? (substring date 2 4)) 1 \n                   (number? (substring\
    \ date 4 6)) 3 \n                   (number? (substring date 6 8)) 5 \n      \
    \             (number? (substring date 8 10)) 7 \n                   (number?\
    \ (substring date 10 12)) 9 \n                   (number", "  (cond ((or (string-empty?\
    \ date)\n               (< (length date) 5))\n         #f)\n        ((and (number?\
    \ (substring date 0 2))\n               (not (< (substring date 0 2) 1)))\n  \
    \       (and (number? (substring date 0 1))\n               (not (< (substring\
    \ date 0 1) 1)))\n         (and (number? (substring date 2 1))\n             \
    \  (not (< (substring date 2 1) 1)))\n         (and (number? (substring date 1\
    \ 2))\n               (not (< (substring date 1 2) 1)))\n         (and (number?\
    \ (substring date 2 2))\n               (not (< (substring date 2 2) 1)))\n  \
    \       (and (number? (substring date 3 2))\n               (not (< (substring\
    \ date 3 2) 1)))\n         (and (number? (substring date 4 2))\n             \
    \  (not (< (substring date 4 2) 1)))\n         (and (number? (substring date 1\
    \ 2))\n               (not (< (substring date 1 2) 1)))\n         (and (number?\
    \ (substring date 2 1))\n               (not (< (substring date 2 1) 1)))\n  \
    \       (and (number? (substring date 3 1))\n               (not (< (substring\
    \ date 3 1) 1)))\n         (and (number? (substring date 4 1))\n             \
    \  (not (< (substring date 4 1) 1)))\n         (and (number? (substring date 5\
    \ 1))\n               (not (< (substring date 5 1) 1)))\n         (and (number?\
    \ (substring date 6 2))\n               (not (< (substring date 6 2) 1)))\n  \
    \       (and (number? (substring date 7 2))\n               (not (< (substring\
    \ date 7 2) 1)))\n         (and (number? (substring date 8 2))\n             \
    \  (not (< (substring date 8 2) 1)))\n         (and (number? (substring date 9\
    \ 2))\n               (not (< (substring date 9 2) 1)))\n         (and (number?\
    \ (substring date 10 2))\n               (not (< (substring date 10 2) 1)))\n\
    \         (and (number? (substring date 11 2))\n               (not (< (substring\
    \ date 11 2) 1)))\n         (and (number? (substring date 12 2))\n           \
    \    (not (< (substring date 12 2) 1)))\n         ((and (number? (substring date\
    \ 1 2))\n               (not (< (substring date 1 2) 1)))\n         ((and (number?\
    \ (substring date 1 1))\n               (not (< (substring date 1 1) 1)))\n  \
    \       ((and (number? (substring date 2 1))\n               (not (< (substring\
    \ date 2 1) 1)))\n         ((", "  (cond\n    [(string? date) (let ([month (sub1\
    \ (string->number (first date)))\n                          year (sub2 (string->number\
    \ (rest date)))])\n                        (and (<= 1 month 12)\n            \
    \                 (<= 31 year)\n                             (= (mod month 3)\
    \ 0)\n                             (= (mod year 100) 0)\n                    \
    \         (= (mod year 400) 0)\n                             (and (< 1 month 2)\n\
    \                                 (< 30 year)\n                              \
    \   (< 29 month))\n                         #t)]\n    [(number? date) ; Dates\
    \ are assumed to be integers in racket\n     (and (> 31 year)\n          (> 29\
    \ month)\n          (< 1 month)\n          (< 30 year)\n          (< 31 month)\n\
    \          (< 29 month))])\n    ))\n", "  (cond ((null? date) #f)\n        ((<\
    \ (length date) 2) #f)\n        ((< (string-length (substring date 0 2)) 1) #f)\n\
    \        ((< (string-length (substring date 1 2)) 3) #f)\n        ((< (string-length\
    \ (substring date 1 2)) 3) #f)\n        ((< (string-length (substring date 2 2))\
    \ 2) #f)\n        ((< (string-length (substring date 2 2)) 2) #f)\n        ((<\
    \ (substring (date 0 2) \"01\") 1) #f)\n        ((< (substring (date 0 2) \"01\"\
    ) 1) #f)\n        ((< (substring (date 0 2) \"01\") 1) #f)\n        ((< (substring\
    \ (date 0 2) \"01\") 1) #f)\n        ((< (substring (date 0 2) \"01\") 1) #f)\n\
    \        ((< (substring (date 0 2) \"02\") 1) #f)\n        ((< (substring (date\
    \ 0 2) \"02\") 1) #f)\n        ((< (substring (date 0 2) \"02\") 1) #f)\n    \
    \    ((< (substring (date 0 2) \"02\") 1) #f)\n        ((< (substring (date 0\
    \ 2) \"02\") 1) #f)\n        ((< (substring (date 0 2) \"03\") 1) #f)\n      \
    \  ((< (substring (date 0 2) \"03\") 1) #f)\n        ((< (substring (date 0 2)\
    \ \"03\") 1) #f)\n        ((< (substring (date 0 2) \"03\") 1) #f)\n        ((<\
    \ (substring (date 0 2) \"04\") 1) #f)\n        ((< (substring (date 0 2) \"04\"\
    ) 1) #f)\n        ((< (substring (date 0 2) \"04\") 1) #f)\n        ((< (substring\
    \ (date 0 2) \"04\") 1) #f)\n        ((< (substring (date 0 2) \"05\") 1) #f)\n\
    \        ((< (substring (date 0 2) \"05\") 1) #f)\n        ((< (substring (date\
    \ 0 2) \"05\") 1) #f)\n        ((< (substring (date 0 2) \"05\") 1) #f)\n    \
    \    ((< (substring (date 0 2) \"06\") 1) #f)\n        ((< (substring (date 0\
    \ 2) \"06\") 1) #f)\n        ((< (substring (date 0 2) \"06\") 1) #f)\n      \
    \  ((< (substring (date 0 2) \"06\") 1) #f)\n        ((< (substring (date 0 2)\
    \ \"07\") 1) #f)\n        ((< (substring (date 0 ", "  (cond\n    [(and (not (string?\
    \ date)) (< 1 date)) #f]\n    [(and (not (string? date)) (< 31 date)) #f]\n  \
    \  [(and (not (string? date)) (< 30 date)) #f]\n    [(and (not (string? date))\
    \ (< 29 date)) #f]\n    [(and (not (string? date)) (< 1 date)) #f]\n    [(and\
    \ (not (string? date)) (< 12 date)) #f]\n    [(and (not (string? date)) (< (first\
    \ date) 2)) #f]\n    [(and (not (string? date)) (< (first date) 4)) #f]\n    [(and\
    \ (not (string? date)) (< (first date) 6)) #f]\n    [(and (not (string? date))\
    \ (< (first date) 9)) #f]\n    [(and (not (string? date)) (< (first date) 11))\
    \ #f]\n    [(and (not (string? date)) (< (first date) 12)) #f]\n    [(and (not\
    \ (string? date)) (< (second date) 1)) (< 30 date) #f]\n    [(and (not (string?\
    \ date)) (< (second date) 3)) (< 31 date) #f]\n    [(and (not (string? date))\
    \ (< (second date) 5)) (< 31 date) #f]\n    [(and (not (string? date)) (< (second\
    \ date) 7)) (< 31 date) #f]\n    [(and (not (string? date)) (< (second date) 8))\
    \ (< 31 date) #f]\n    [(and (not (string? date)) (< (second date) 10)) (< 31\
    \ date) #f]\n    [(and (not (string? date)) (< (second date) 12)) (< 31 date)\
    \ #f]\n    [(and (not (string? date)) (< (third date) 1)) (< 30 date) #f]\n  \
    \  [(and (not (string? date)) (< (third date) 3)) (< 31 date) #f]\n    [(and (not\
    \ (string? date)) (< (third date) 5)) (< 31 date) #f]\n    [(and (not (string?\
    \ date)) (< (third date) 7)) (< 31 date) #f]\n    [(and (not (string? date)) (<\
    \ (third date) 8)) (< 31 date) #f]\n    [(and (not (string? date)) (< (third date)\
    \ 10)) (< 31 date) #f]\n    [(and (not (string? date)) ", "  (let ([mm (substring\
    \ date 0 2)])\n    (cond\n      [(empty? mm) #f]\n      [(<= mm '02) #f]\n   \
    \   [(<= mm '03) #f]\n      [(<= mm '04) #f]\n      [(<= mm '05) #f]\n      [(<=\
    \ mm '06) #f]\n      [(<= mm '07) #f]\n      [(<= mm '08) #f]\n      [(<= mm '09)\
    \ #f]\n      [(<= mm '10) #f]\n      [(<= mm '11) #f]\n      [(<= mm '12) #f]\n\
    \      [(<= mm '13) #f]\n      [(<= mm '14) #f]\n      [(<= mm '15) #f]\n    \
    \  [(<= mm '16) #f]\n      [(<= mm '17) #f]\n      [(<= mm '18) #f]\n      [(<=\
    \ mm '19) #f]\n      [(<= mm '20) #f]\n      [(<= mm '21) #f]\n      [(<= mm '22)\
    \ #f]\n      [(<= mm '23) #f]\n      [(<= mm '24) #f]\n      [(<= mm '25) #f]\n\
    \      [(<= mm '26) #f]\n      [(<= mm '27) #f]\n      [(<= mm '28) #f]\n    \
    \  [(<= mm '29) #f]\n      [(<= mm '30) #f]\n      [(<= mm '31) #f]\n      [else\
    \ #f])))\n</code>\n<|/ a tags=racket,scheme,date |>\n<| a dscore=0 |>\n<code>",
  "  (cond\n    [(or (empty? date) (< 1 (length (string->list date))) (>= 31 (length\
    \ (string->list date))) (< 1 (length (string->list date)))) (cond [(<= 1 (length\
    \ (string->list date))) (#t) (#f)]\n    [(and (< 1 (length (string->list date)))\
    \ (>= 31 (length (string->list date))) (< 1 (length (string->list date)))) (cond\
    \ [(<= 1 (length (string->list date))) (#t) (#f)]\n    [(and (< 1 (length (string->list\
    \ date))) (>= 30 (length (string->list date))) (< 1 (length (string->list date))))\
    \ (cond [(<= 1 (length (string->list date))) (#t) (#f)]\n    [(and (< 1 (length\
    \ (string->list date))) (>= 29 (length (string->list date))) (< 1 (length (string->list\
    \ date)))) (cond [(<= 1 (length (string->list date))) (#t) (#f)]\n    [(and (<\
    \ 1 (length (string->list date))) (>= 12 (length (string->list date))))(cond [(<=\
    \ 1 (length (string->list date))) (#t) (#f)]\n    [(and (< 1 (length (string->list\
    \ date))) (>= 1 (length (string->list date))))(cond [(<= 1 (length (string->list\
    \ date))) (#t) (#f)]\n    [else (cond [(<= 1 (length (string->list date))) (#t)\
    \ (#f)]\n  )\n)", "  (and (string? (date))\n       (> (length (date)) 1)\n   \
    \    (< (length (date)) (length date)))\n  (and (number? (substring date 0 (length\
    \ date))) \n       (> 1 (substring date 0 (length date)))\n       (and (number?\
    \ (substring date 1 (length date)))\n            (> 1 (substring date 1 (length\
    \ date)))\n            (and (number? (substring date 2 (length date)))\n     \
    \            (> 1 (substring date 2 (length date)))\n                 (and (number?\
    \ (substring date 3 (length date)))\n                      (> 1 (substring date\
    \ 3 (length date)))\n                      (and (number? (substring date 4 (length\
    \ date)))\n                             (> 1 (substring date 4 (length date))))\n\
    \                     (= (length (substring date 5 (length date))) 2))))\n  (and\
    \ (number? (substring date 0 (length date)))\n       (and (number? (substring\
    \ date 1 (length date)))\n            (= (substring date 0 (length date)) 1)\n\
    \            (= (substring date 1 (length date)) 3)\n            (= (substring\
    \ date 2 (length date)) 5)\n            (= (substring date 3 (length date)) 7)\n\
    \            (= (substring date 4 (length date)) 8)\n            (= (substring\
    \ date 5 (length date)) 10)\n            (= (substring date 6 (length date)) 12)\n\
    \            (= (substring date 7 (length date)) 4)\n            (= (substring\
    \ date 8 (length date)) 6)\n            (= (substring date 9 (length date)) 9)\n\
    \            (= (substring date 10 (length date)) 11)\n            (= (substring\
    \ date 11 (length date)) 3)\n            (= (substring date 12 (length date))\
    \ 2)\n            (= (substring date 13 (length date)) 1))\n  (and (number? (substring\
    \ date 0 (length date)))\n       (and (number? (substring date 1 (length date)))\n\
    \            (= (substring date 0 (length date)) 4)\n            (= (substring\
    \ date 1 (length date)) 6)\n            (= (substring date 2 (length date)) 9)\n\
    \            (= (substring date 3 (length date)) 11)\n            (= (substring\
    \ date 4 (length date)) 3)\n            (= (substring date 5 (length date)) 2))\n\
    \       (and (number? (substring date 0 (length date)))\n            (= (substring\
    \ date 0 (length date)) 2)\n            (= (substring date 1 (length date)) 1)\n\
    \            (= (substring date 2 (length date)) 0))\n", "  (cond\n    [(empty?\
    \ date) #t]\n    [(< (length date) 2) #f]\n    [(< (char-alphabet (car date))\
    \ 'a) #f]\n    [(< (char-alphabet (car date)) 'z) #f]\n    [(< (char-digit-char\
    \ (car date)) 'a) #f]\n    [(< (char-digit-char (car date)) 'z) #f]\n    [(< (char-digit-char\
    \ (car date)) '0-9) #f]\n    [(< (char-digit-char (car date)) '0-9) #f]\n    [(<\
    \ (char-digit-char (car date)) '0-9) #f]\n    [(< (char-digit-char (car date))\
    \ '0-9) #f]\n    [(< (char-digit-char (car date)) '0-9) #f]\n    [(< (char-digit-char\
    \ (car date)) '0-9) #f]\n    [(< (char-digit-char (car date)) '0-9) #f]\n    [(<\
    \ (char-digit-char (car date)) '0-9) #f]\n    [(< (char-digit-char (car date))\
    \ '0-9) #f]\n    [(< (char-digit-char (car date)) '0-9) #f]\n    [(< (char-digit-char\
    \ (car date)) '0-9) #f]\n    [(< (char-digit-char (car date)) '0-9) #f]\n    [(<\
    \ (char-digit-char (car date)) '0-9) #f]\n    [(< (char-digit-char (car date))\
    \ '0-9) #f]\n    [(< (char-digit-char (car date)) '0-9) #f]\n    [(< (char-digit-char\
    \ (car date)) '0-9) #f]\n    [(< (char-digit-char (car date)) '0-9) #f]\n    [(<\
    \ (char-digit-char (car date)) '0-9) #f]\n    [(< (char-digit-char (car date))\
    \ '0-9) #f]\n    [(< (char-digit-char (car date)) '0-9) #f]\n    [(< (char-digit-char\
    \ (car date)) '0-9) #f]\n    [(< (char-digit-char (car date)) '0-9) #f]\n", " \
    \ (cond [(string-empty? date) #f]\n        [(< (length (string->list (string-ref\
    \ date 0 2))) (length #{'1 3 5 7 8 10 12})) #t]\n        [(< (length (string->list\
    \ (string-ref date 0 2))) (length #{'4 6 9 11})) #t]\n        [(< (length (string->list\
    \ (string-ref date 0 2))) (length #{'2 '4})) #t]\n        [(string-equal? (string-ref\
    \ date 0 2) \"02\") #t]\n        [(< (length (string->list (string-ref date 0\
    \ 1))) (length #{'1 3 5 7 8 10 12})) #t]\n        [(< (length (string->list (string-ref\
    \ date 0 1))) (length #{'4 6 9 11})) #t]\n        [(< (length (string->list (string-ref\
    \ date 0 1))) (length #{'2 4})) #t]\n        [(string-equal? (string-ref date\
    \ 0 1) \"01\") #t]\n        [(string-equal? (string-ref date 0 1) \"03\") #t]\n\
    \        [(string-equal? (string-ref date 0 1) \"05\") #t]\n        [(string-equal?\
    \ (string-ref date 0 1) \"07\") #t]\n        [(string-equal? (string-ref date\
    \ 0 1) \"08\") #t]\n        [(string-equal? (string-ref date 0 1) \"10\") #t]\n\
    \        [(string-equal? (string-ref date 0 1) \"12\") #t]\n        [(string-equal?\
    \ (string-ref date 0 1) \"04\") #t]\n        [(string-equal? (string-ref date\
    \ 0 1) \"06\") #t]\n        [(string-equal? (string-ref date 0 1) \"09\") #t]\n\
    \        [(string-equal? (string-ref date 0 1) \"11\") #t]\n        [(string-equal?\
    \ (string-ref date 0 1) \"01\") #t]\n        [(string-equal? (string-ref date\
    \ 0 1) \"02\") #t]\n        [(string-equal? (string-ref date 0 1) \"05\") #t]\n\
    \        [(string-equal? (string-ref date 0 1) \"08\") #t]\n        [(string-equal?\
    \ (string-ref date 0 1) \"10\") #t]\n        [(string-equal? (string-ref date\
    \ 0 1) \"12\") #t]\n        [(string-equal? (string-ref date 0 1) \"02\") #t]\n\
    \        [(string-equal? (string-ref date 0 1) \"06\") #t]\n        [(string-",
  "  (cond\n    ((empty? date) #f)\n    ((<= (length (rest date)) 7) #f)\n    ((<=\
    \ (length (rest date)) 9) #f)\n    ((<= (length (rest date)) 11) #f)\n    ((<=\
    \ (length (rest date)) 13) #f)\n    ((<= (length (rest date)) 14) #f)\n    ((<=\
    \ (length (rest date)) 16) #f)\n    ((<= (length (rest date)) 18) #f)\n    ((<=\
    \ (length (rest date)) 20) #f)\n    ((<= (length (rest date)) 22) #f)\n    ((<=\
    \ (length (rest date)) 24) #f)\n    ((<= (length (rest date)) 26) #f)\n    ((<=\
    \ (length (rest date)) 28) #f)\n    ((<= (length (rest date)) 30) #f)\n    ((<=\
    \ (length (rest date)) 31) #f)\n    ((<= (length (rest date)) 33) #f)\n    ((<=\
    \ (length (rest date)) 35) #f)\n    ((<= (length (rest date)) 37) #f)\n    ((<=\
    \ (length (rest date)) 39) #f)\n    ((<= (length (rest date)) 41) #f)\n    ((<=\
    \ (length (rest date)) 43) #f)\n    ((<= (length (rest date)) 45) #f)\n    ((<=\
    \ (length (rest date)) 47) #f)\n    ((<= (length (rest date)) 49) #f)\n    ((<=\
    \ (length (rest date)) 51) #f)\n    ((<= (length (rest date)) 53) #f)\n    ((<=\
    \ (length (rest date)) 55) #f)\n    ((<= (length (rest date)) 57) #f)\n    ((<=\
    \ (length (rest date)) 59) #f)\n    ((<= (length (rest date)) 61) #f)\n    ((<=\
    \ (length (rest date)) 63) #f)\n    ((<= (length (rest date)) 65) #f)\n    ((<=\
    \ (length (rest date)) 67) #f)\n    ((<= (length (rest date)) 69) #f)\n    ((<=\
    \ (length (rest date)) 71) #f)\n    ((<= (length (rest date)) 73) #f)\n    ((<=\
    \ (length (rest date)) 75) #f)\n    ((<= (length (rest date)) 77) #f)\n    ((<=\
    \ (length (rest date)) 79) #f)\n    ((<= (length (rest date)) 81) #f)\n    ((<=\
    \ (length (rest date)) 83) #f)\n    ((<= (length (rest date)) 85) #f)\n    ((<=\
    \ (length (", "  (cond\n    [(not (empty? date)) #t]\n    [(not (< 1 (string->int\
    \ (substring date 0 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 1 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 2 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 0 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 1 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 2 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 3 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 0 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 1 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 2 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 3 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 4 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 5 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 6 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 7 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 8 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 9 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 10 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 11 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 12 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 1 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 2 (string-length date))))) #f]\n    [(not (< 1 (string->int\
    \ (substring date 3 (string-length date))))) #f]\n    [(not (< 1 (string", " \
    \ (cond\n    ((null? date) #f)\n    ((< (length (substring date 0 2)) 2) #f)\n\
    \    ((> (length (substring date 0 2)) 2) #f)\n    ((< (length date) 2) #f)\n\
    \    ((> (length date) 2) #f)\n    ((< 1 (substring date 0 2)) #f)\n    ((> 31\
    \ (substring date 0 2)) #f)\n    ((< 1 (substring date 2 2)) #f)\n    ((> 31 (substring\
    \ date 2 2)) #f)\n    ((< 1 (substring date 4 2)) #f)\n    ((> 29 (substring date\
    \ 4 2)) #f)\n    ((< 1 (substring date 6 2)) #f)\n    ((> 30 (substring date 6\
    \ 2)) #f)\n    ((< 1 (substring date 8 2)) #f)\n    ((> 29 (substring date 8 2))\
    \ #f)\n    ((< 1 (substring date 10 2)) #f)\n    ((> 28 (substring date 10 2))\
    \ #f)\n    ((< 1 (substring date 12 2)) #f)\n    ((> 31 (substring date 12 2))\
    \ #f)\n    ((< 1 (substring date 4 2)) #f)\n    ((> 12 (substring date 4 2)) #f)\n\
    \    ((< 1 (substring date 2 2)) #f)\n    ((> 12 (substring date 2 2)) #f)\n \
    \   ((< 1 (substring date 6 2)) #f)\n    ((> 12 (substring date 6 2)) #f)\n  \
    \  ((< 1 (substring date 8 2)) #f)\n    ((> 12 (substring date 8 2)) #f)\n   \
    \ ((< 1 (substring date 10 2)) #f)\n    ((> 11 (substring date 10 2)) #f)\n  \
    \  ((< 1 (substring date 12 2)) #f)\n    ((> 10 (substring date 12 2)) #f)\n \
    \   ((< 1 (substring date 2 2)) #f)\n    ((> 12 (substring date 2 2)) #f)\n  \
    \  ((< 1 (substring date 6 2)) #f)\n    ((> 12 (substring date 6 2)) #f)\n   \
    \ ((< 1 (substring date 8 2)) #f)\n    ((> 12 (substring date 8 2)) #f)\n    ((<\
    \ 1 (substring date 10 2)) #f)\n    ((> 9 (substring date 10 2)) #f)\n    ((<\
    \ 1 (substring date 12 2)) #f)\n    ((> 8 (substring date 12 2)) #f)\n    ((<\
    \ 1 (substring date 4 2)) #f)\n    ((> 6 (substring date 4 2)) #f)\n    ((< 1\
    \ (substring date 2 2)) #f)\n    ((> 6 (substring date 2 ", "  (and (not (empty?\
    \ date))\n       (or (<= 0 (days_diff date \"01-01-2000\") \"29-12-2019\")\n \
    \          (<= 0 (days_diff date \"01-01-2000\") \"29-12-2018\")\n           (<=\
    \ 0 (days_diff date \"01-01-2000\") \"29-12-2017\")\n           (<= 0 (days_diff\
    \ date \"01-01-2000\") \"29-12-2016\")\n           (<= 0 (days_diff date \"01-01-2000\"\
    ) \"29-12-2015\")\n           (<= 0 (days_diff date \"01-01-2000\") \"29-12-2014\"\
    )\n           (<= 0 (days_diff date \"01-01-2000\") \"29-12-2013\")\n        \
    \   (<= 0 (days_diff date \"01-01-2000\") \"29-12-2012\")\n           (<= 0 (days_diff\
    \ date \"01-01-2000\") \"29-12-2011\")\n           (<= 0 (days_diff date \"01-01-2000\"\
    ) \"29-12-2010\")\n           (<= 0 (days_diff date \"01-01-2000\") \"29-12-2009\"\
    )\n           (<= 0 (days_diff date \"01-01-2000\") \"29-12-2008\")\n        \
    \   (<= 0 (days_diff date \"01-01-2000\") \"29-12-2007\")\n           (<= 0 (days_diff\
    \ date \"01-01-2000\") \"29-12-2006\")\n           (<= 0 (days_diff date \"01-01-2000\"\
    ) \"29-12-2005\")\n           (<= 0 (days_diff date \"01-01-2000\") \"29-12-2004\"\
    )\n           (<= 0 (days_diff date \"01-01-2000\") \"29-12-2003\")\n        \
    \   (<= 0 (days_diff date \"01-01-2000\") \"29-12-2002\")\n           (<= 0 (days_diff\
    \ date \"01-01-2000\") \"29-12-2001\")\n           (<= 0 (days_diff date \"01-01-2000\"\
    ) \"29-12-2000\")\n           (<= 0 (days_diff date \"01-01-2000\") \"29-11-2009\"\
    )\n           (<= 0 (days_diff date \"01-01-2000\") \"29-11-2008\")\n        \
    \   (<= 0 (days_diff date \"01-01-2000\") \"29-11-2007\")\n           (<= 0 (days_diff\
    \ date \"01-01-2000\") \"29-11-2006\")\n           (<= 0 (days_diff date \"01-01-2000\"\
    ) \"29-11-2005\")\n           (<= 0 (days_diff date \"01-01-2000\") \"29-11-2004\"\
    )\n           (<= ", "  (cond\n    [(empty? date) #f]\n    [(< (length date) 8)\
    \ #f]\n    [(< (length date) 9) #f]\n    [(< #(first date) (length #(first date)))\
    \ #f]\n    [(< #(first date) (length #(first date))) #f]\n    [(< #(first date)\
    \ (length #(first date))) #f]\n    [else (= (length (substring date 0 2)) #\"\
    -\") #t]\n    [else (= (length (substring date 0 2)) #\"-\") #t]\n    [else (=\
    \ (length (substring date 0 2)) #\"-\") #t]\n    [(< #(substring date 2 1) #(length\
    \ (substring date 2 1)) #t) #f]\n    [else (= (length (substring date 2 1)) #\"\
    -\") #t]\n    [else (= (length (substring date 2 1)) #\"-\") #t]\n    [(< #(substring\
    \ date 2 1) #(length (substring date 2 1)) #t) #f]\n    [else (= (length (substring\
    \ date 2 1)) #\"-\") #t]\n    [else (= (length (substring date 2 1)) #\"-\") #t]\n\
    \    [(< #(substring date 2 1) #(length (substring date 2 1)) #t) #f]\n    [else\
    \ (= (length (substring date 2 1)) #\"-\") #t]\n    [(< #(substring date 2 1)\
    \ #(length (substring date 2 1)) #t) #f]\n    [else (= (length (substring date\
    \ 2 1)) #\"-\") #t]\n    [(< #(substring date 2 1) #(length (substring date 2\
    \ 1)) #t) #f]\n    [else (= (length (substring date 2 1)) #\"-\") #t]\n    [else\
    \ (= (length (substring date 2 1)) #\"-\") #t]\n    [(< #(substring date 2 1)\
    \ #(length (substring date 2 1)) #t) #f]\n    [else (= (length (substring date\
    \ 2 1)) #\"-\") #t]\n    [else (= (length (substring date 2 1)) #\"-\") #t]\n\
    \    [(< #(substring date 2 1) #(length (", "  (and (not (empty? date))\n    \
    \   (= (length date) 7)\n       (>= (substring (date 1 2) 0 1) \"01\")\n     \
    \  (>= (substring (date 1 2) 0 1) \"03\")\n       (>= (substring (date 1 2) 0\
    \ 1) \"05\")\n       (>= (substring (date 1 2) 0 1) \"07\")\n       (>= (substring\
    \ (date 1 2) 0 1) \"08\")\n       (>= (substring (date 1 2) 0 1) \"10\")\n   \
    \    (>= (substring (date 1 2) 0 1) \"12\")\n       (= (substring (date 1 2) 1\
    \ 1) \"-\")\n       (= (substring (date 1 2) 2 1) \"-\")\n       (= (substring\
    \ (date 3 2) 2 1) \"-\")\n       (= (substring (date 5 2) 2 1) \"-\")\n      \
    \ (>= (substring (date 7 2) 0 1) \"01\")\n       (>= (substring (date 7 2) 0 1)\
    \ \"03\")\n       (>= (substring (date 7 2) 0 1) \"05\")\n       (>= (substring\
    \ (date 7 2) 0 1) \"07\")\n       (>= (substring (date 7 2) 0 1) \"08\")\n   \
    \    (>= (substring (date 7 2) 0 1) \"10\")\n       (>= (substring (date 7 2)\
    \ 0 1) \"12\")\n       (= (substring (date 7 2) 1 1) \"-\")\n       (= (substring\
    \ (date 7 2) 2 1) \"-\")\n       (= (substring (date 8 2) 2 1) \"-\")\n      \
    \ (= (substring (date 10 2) 2 1) \"-\")\n       (= (substring (date 12 2) 2 1)\
    \ \"-\")\n       (= (substring (date 1 2) 3 1) \"-\")\n       (= (substring (date\
    \ 1 2) 4 1) \"-\")\n       (= (substring (date 1 2) 5 1) \"-\")\n       (= (substring\
    \ (date 1 2) 6 1) \"-\")\n       (= (substring (date 1 2) 7 1) \"-\")\n      \
    \ (= (substring (date 1 2) 8 1) \"-\")\n       (= (substring (date 1 2) 9 1) \"\
    -\")\n       (= (substring (date 1 2) 10 1) \"-\")\n       (= (substring (date\
    \ 1 2) 11 1) \"-\")\n       (= (substring (date 3 2) 3 1) \"-\")\n       (= (substring\
    \ (date 3 2) 4 1) \"-\")\n       (= (substring (date 3 2) 5 1) \"-\")\n      \
    \ (= (substring (date 3 2) 6 1) \"-\")\n       (= (substring (date 3 2) 7 1) \"\
    -\")\n", "  (cond\n    [(and (empty? date) #t) true]\n    [(and (< 1 days (month->date\
    \ date)) (< 1 days (month->date (month->date date))) \n           (< 1 days (month->date\
    \ (month->date (month->date date))))\n           (< 1 days (month->date (month->date\
    \ (month->date (month->date date))))))\n     false]\n    [(and (< 1 days (month->date\
    \ date)) (< 1 days (month->date (month->date date)))\n           (< 1 days (month->date\
    \ (month->date (month->date (month->date date))))))\n     false]\n    [(and (<\
    \ 1 days (month->date date)) (< 1 days (month->date (month->date (month->date\
    \ (month->date date))))))\n     false]\n    [(and (< 1 days (month->date date))\
    \ (< 1 days (month->date (month->date (month->date (month->date date))))))\n \
    \    false]\n    [(and (< 1 days (month->date date)) (< 1 days (month->date (month->date\
    \ (month->date (month->date (month->date date))))))\n           (< 1 days (month->date\
    \ (month->date (month->date (month->date (month->date (month->date date))))))))\n\
    \     false]\n    [(and (< 1 days (month->date date)) (< 1 days (month->date (month->date\
    \ (month->date (month->date (month->date (month->date date))))))\n           (<\
    \ 1 days (month->date (month->date (month->date (month->date (month->date (month->date\
    \ (month->date (month->date date)))))))))\n     false]\n    [(and (< 1 days (month->date\
    \ date)) (< 1 days (month->date (month->date (month->date (month->date (month->date\
    \ (month->date (month->date date))))))\n           (< 1 days (month->date (month->date\
    \ (month->date (month->date (month->date (month->date (month->date (month->date\
    \ date)))))))))\n     false]\n    [(and (< 1 days (month->date date)) (< 1 days\
    \ (month->date (month->date (month->date (", "  ((not (empty? date))\n   ((or\
    \ (number? date)\n          (< (length date) 5))\n    ((< (string->number (substring\
    \ date 0 2)) 1)\n     (< (string->number (substring date 2 2)) 12)\n     (< (string->number\
    \ (substring date 4 4)) 4)\n     (< (string->number (substring date 6 2)) 6))\n\
    \    ((> (string->number (substring date 0 2)) 1)\n     (> (string->number (substring\
    \ date 2 2)) 12)\n     (> (string->number (substring date 4 4)) 4)\n     (> (string->number\
    \ (substring date 6 2)) 6))\n    ((> (string->number (substring date 0 4)) 1)\n\
    \     (> (string->number (substring date 4 4)) 4)\n     (> (string->number (substring\
    \ date 6 4)) 6)\n     (> (string->number (substring date 8 2)) 8)))\n  (or (number?\
    \ date)\n      (< (length date) 3))\n  (or (number? date)\n      (< (length date)\
    \ 5))\n  (or (number? date)\n      (< (length date) 7))\n  (or (number? date)\n\
    \      (< (length date) 10))\n  (or (number? date)\n      (< (length date) 12))))\n",
  "  (cond ((null? date) #t)\n        ((string? date) (cond ((< 1 (length (date)))\
    \ #f)\n                            ((> 3 (length (date))) #f)\n              \
    \              ((< 1 (substring (date 0 1) 1) 'm) #f)\n                      \
    \      ((< 1 (substring (date 0 1) 1) 'n) #f)\n                            ((<\
    \ 1 (substring (date 0 1) 1) 'o) #f)\n                            ((< 1 (substring\
    \ (date 0 1) 1) 'v) #f)\n                            ((< 1 (substring (date 0\
    \ 1) 1) 'y) #f)\n                            ((> 12 (substring (date 0 1) 1) 'm)\
    \ #f)\n                            ((> 12 (substring (date 0 1) 1) 'n) #f)\n \
    \                           ((> 12 (substring (date 0 1) 1) 'o) #f)\n        \
    \                    ((> 12 (substring (date 0 1) 1) 'v) #f)\n               \
    \             ((> 12 (substring (date 0 1) 1) 'y) #f)\n                      \
    \      (#t (#t)))\n        (#t (#f)))))\n</code>\n<|/ a dscore=0 |>\n<| a tags=racket,string,date\
    \ |>\nHere is my solution. I think it uses recursion and is easy to understand.\
    \  \n<code>\n#lang racket\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
