language: jl
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '<'\n            push!(stack, i)\n   \
    \     elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # if the string\
    \ is empty, return true\n    if length(brackets) == 0\n        return true\n \
    \   end\n    # if the first character is \">\", return false\n    if brackets[1]\
    \ == \">\"\n        return false\n    end\n    # if the last character is \"<\"\
    , return false\n    if brackets[end] == \"<\"\n        return false\n    end\n\
    \    # if the first character is \"<\", and the last character is \">\", return\
    \ true\n    if brackets[1] == \"<\" && brackets[end] == \">\"\n        return\
    \ true\n    end\n    # if the first character is \"<\", and the last character\
    \ is \">\", return true\n    if brackets[1] == \"<\" && brackets[end] == \">\"\
    \n        return true\n    end\n    # if the first character is \"<\", and the\
    \ last character is \">\", return true\n    if brackets[1] == \"<\" && brackets[end]\
    \ == \">\"\n        return true\n    end\n    # if the first character is \"<\"\
    , and the last character is \">\", return true\n    if brackets[1] == \"<\" &&\
    \ brackets[end] == \">\"\n        return true\n    end\n    # if the first character\
    \ is \"<\", and the last character is \">\", return true\n    if brackets[1] ==\
    \ \"<\" && brackets[end] == \">\"\n        return true\n    end\n    # if the\
    \ first character is \"<\", and the last character is \">\", return true\n   \
    \ if brackets[1] == \"<\" && brackets[end] == \">\"\n        return true\n   \
    \ end\n    # if the first character is \"<\", and the last character is \">\"\
    , return true\n    if brackets[1] == \"<\" && brackets[end] == \">\"\n       \
    \ return true\n    end\n    # if the first character is \"<\", and the last character\
    \ is \">\", return true\n    if brackets[1] == \"<\" && brackets[end] == \">\"\
    \n        return true\n    end\n    # if the first character is \"<\", and the\
    \ last character is \">\", return true\n    if brackets[1] == \"<\" && brackets[end]\
    \ == \">\"\n        return true\n    end\n    # if the first character is \"<\"\
    , and the last character is \">\", return true\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplpte778h.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplpte778h.jl:1\n\
    in expression starting at /tmp/tmplpte778h.jl:1\n"
  stdout: ''
  timestamp: 1659749107
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == \"<\"\n            push!(stack,i)\n  \
    \      elseif i == \">\"\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    if isempty(stack)\n        return true\n    else\n    \
    \    return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbs_8dnal.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpbs_8dnal.jl:33\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbs_8dnal.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbs_8dnal.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbs_8dnal.jl:34\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbs_8dnal.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbs_8dnal.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbs_8dnal.jl:35\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbs_8dnal.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbs_8dnal.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbs_8dnal.jl:36\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbs_8dnal.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbs_8dnal.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbs_8dnal.jl:37\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<' && brackets[n]\
    \ == '>'\n        return correct_bracketing(brackets[2:n-1])\n    end\n    if\
    \ brackets[1] == '<' && brackets[n] == '<'\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[1] == '>' && brackets[n] == '>'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\n    if brackets[1] == '>' && brackets[n] == '<'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyw0nv8ts.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyw0nv8ts.jl:38\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyw0nv8ts.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw0nv8ts.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyw0nv8ts.jl:39\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyw0nv8ts.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw0nv8ts.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyw0nv8ts.jl:40\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyw0nv8ts.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw0nv8ts.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == '>'\n    \
    \    return false\n    end\n    if brackets[n] == '<'\n        return false\n\
    \    end\n    open_brackets = 0\n    for i in 1:n\n        if brackets[i] == '<'\n\
    \            open_brackets += 1\n        elseif brackets[i] == '>'\n         \
    \   open_brackets -= 1\n        end\n        if open_brackets < 0\n          \
    \  return false\n        end\n    end\n    if open_brackets == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '<'\n            push!(stack, i)\n   \
    \     elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack\
    \ = Stack()\n    for bracket in brackets\n        if bracket == '<'\n        \
    \    push!(bracket_stack, bracket)\n        elseif bracket == '>'\n          \
    \  if isempty(bracket_stack)\n                return false\n            else\n\
    \                pop!(bracket_stack)\n            end\n        end\n    end\n\
    \    return isempty(bracket_stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpppc2ca55.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpppc2ca55.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpppc2ca55.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppc2ca55.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpppc2ca55.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpppc2ca55.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpppc2ca55.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppc2ca55.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpppc2ca55.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpppc2ca55.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpppc2ca55.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpppc2ca55.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpppc2ca55.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpppc2ca55.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpppc2ca55.jl:6\n   [2] macro "
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpphceex4n.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpphceex4n.jl:14\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpphceex4n.jl:15\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpphceex4n.jl:16\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpphceex4n.jl:17\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == '>'\n    \
    \    return false\n    end\n    if brackets[n] == '<'\n        return false\n\
    \    end\n    if brackets[1] == '<'\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[n] == '>'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\n    return correct_bracketing(brackets[2:n-1])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3mkcl1bw.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp3mkcl1bw.jl:29\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mkcl1bw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mkcl1bw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3mkcl1bw.jl:30\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mkcl1bw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mkcl1bw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3mkcl1bw.jl:31\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3mkcl1bw.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mkcl1bw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3mkcl1bw.jl:32\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3mkcl1bw.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mkcl1bw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_count += 1\n\
    \        elseif b == '>'\n            open_count -= 1\n        end\n        if\
    \ open_count < 0\n            return false\n        end\n    end\n    return open_count\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == '>'\n    \
    \    return false\n    end\n    if brackets[n] == '<'\n        return false\n\
    \    end\n    if brackets[1] == '<'\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[n] == '>'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplzrkoy3q.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmplzrkoy3q.jl:29\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzrkoy3q.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzrkoy3q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplzrkoy3q.jl:30\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzrkoy3q.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzrkoy3q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplzrkoy3q.jl:31\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplzrkoy3q.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzrkoy3q.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplzrkoy3q.jl:32\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplzrkoy3q.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzrkoy3q.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749108
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpfl85fx2p.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmpfl85fx2p.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpfl85fx2p.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfl85fx2p.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfl85fx2p.jl:12\ntest set:\
    \ Error During Test at /tmp/tmpfl85fx2p.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpfl85fx2p.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfl85fx2p.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '<'\n            push!(stack, i)\n   \
    \     elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = Stack()\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp7a92gm4w.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp7a92gm4w.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp7a92gm4w.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a92gm4w.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a92gm4w.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7a92gm4w.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp7a92gm4w.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a92gm4w.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a92gm4w.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7a92gm4w.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp7a92gm4w.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a92gm4w.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a92gm4w.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7a92gm4w.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmp7a92gm4w.jl:6\n   [2] macro "
  timestamp: 1659749109
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_count += 1\n\
    \        elseif c == '>'\n            open_count -= 1\n        end\n        if\
    \ open_count < 0\n            return false\n        end\n    end\n    return open_count\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    if brackets[1] == \"<\" && brackets[n]\
    \ == \">\"\n        return correct_bracketing(brackets[2:n-1])\n    end\n    if\
    \ brackets[1] == \"<\" && brackets[n] == \"<\"\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[1] == \">\" && brackets[n] == \">\"\n        return\
    \ correct_bracketing(brackets[1:n-1])\n    end\n    if brackets[1] == \">\" &&\
    \ brackets[n] == \"<\"\n        return correct_bracketing(brackets[1:n-1])\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpap_t2kz3.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpap_t2kz3.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpap_t2kz3.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpap_t2kz3.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpap_t2kz3.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpap_t2kz3.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpap_t2kz3.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpap_t2kz3.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scop"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpikp8ihse.jl:10

    '
  stdout: "test set: Test Failed at /tmp/tmpikp8ihse.jl:17\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikp8ihse.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikp8ihse.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpikp8ihse.jl:18\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikp8ihse.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikp8ihse.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpikp8ihse.jl:19\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikp8ihse.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikp8ihse.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpikp8ihse.jl:20\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpikp8ihse.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpikp8ihse.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpikp8ihse.jl:21\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749108
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == \"<\"\n            open_brackets\
    \ += 1\n        elseif bracket == \">\"\n            open_brackets -= 1\n    \
    \    end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeds7gdpg.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpeds7gdpg.jl:28\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeds7gdpg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeds7gdpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeds7gdpg.jl:29\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeds7gdpg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeds7gdpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeds7gdpg.jl:30\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeds7gdpg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeds7gdpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeds7gdpg.jl:31\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeds7gdpg.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeds7gdpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeds7gdpg.jl:32\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_count\
    \ += 1\n        elseif bracket == '>'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749107
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            push!(stack,\
    \ bracket)\n        elseif bracket == \">\"\n            if isempty(stack)\n \
    \               return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_yxp3ci5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp_yxp3ci5.jl:29\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:30\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:31\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:32\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:33\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            push!(stack,\
    \ bracket)\n        elseif bracket == \">\"\n            if isempty(stack)\n \
    \               return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_yxp3ci5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp_yxp3ci5.jl:29\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:30\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:31\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:32\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:33\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            push!(stack,\
    \ bracket)\n        elseif bracket == \">\"\n            if isempty(stack)\n \
    \               return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_yxp3ci5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp_yxp3ci5.jl:29\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:30\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:31\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:32\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:33\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # initialize\
    \ a stack\n    stack = []\n    # loop through the string\n    for bracket in brackets\n\
    \        # if the bracket is an opening bracket, push it to the stack\n      \
    \  if bracket == \"<\"\n            push!(stack, bracket)\n        # if the bracket\
    \ is a closing bracket, pop the last bracket from the stack\n        elseif bracket\
    \ == \">\"\n            pop!(stack)\n        end\n    end\n    # if the stack\
    \ is empty, then the brackets are correctly paired\n    return isempty(stack)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0y1lhc0d.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp0y1lhc0d.jl:30\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0y1lhc0d.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0y1lhc0d.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0y1lhc0d.jl:31\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0y1lhc0d.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0y1lhc0d.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0y1lhc0d.jl:32\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0y1lhc0d.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0y1lhc0d.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0y1lhc0d.jl:33\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0y1lhc0d.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0y1lhc0d.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp0y1lhc0d.jl:34\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    # now we know that the first and\
    \ last brackets are correct\n    # and that the string is at least two characters\
    \ long\n    # so we can remove the first and last brackets\n    return correct_bracketing(brackets[2:n-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m7zl3nr.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp7m7zl3nr.jl:30\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m7zl3nr.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m7zl3nr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7m7zl3nr.jl:31\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7m7zl3nr.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m7zl3nr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7m7zl3nr.jl:32\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7m7zl3nr.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m7zl3nr.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659749109
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    end\n    if brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw79uusst.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpw79uusst.jl:25\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw79uusst.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw79uusst.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw79uusst.jl:26\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw79uusst.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw79uusst.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw79uusst.jl:27\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw79uusst.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw79uusst.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppq2nzazz.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmppq2nzazz.jl:18\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2nzazz.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2nzazz.jl:13\ntest set: Test\
    \ Failed at /tmp/tmppq2nzazz.jl:19\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2nzazz.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2nzazz.jl:13\ntest set: Test\
    \ Failed at /tmp/tmppq2nzazz.jl:20\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2nzazz.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2nzazz.jl:13\ntest set: Test\
    \ Failed at /tmp/tmppq2nzazz.jl:21\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2nzazz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2nzazz.jl:13\ntest set: Test\
    \ Failed at /tmp/tmppq2nzazz.jl:22\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '<'\n            push!(stack, c)\n   \
    \     elseif c == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749107
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets\
    \ == \"\"\n        return true\n    end\n    if brackets[1] == '<'\n        if\
    \ brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9glhf_vz.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp9glhf_vz.jl:25\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9glhf_vz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9glhf_vz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9glhf_vz.jl:26\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9glhf_vz.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9glhf_vz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9glhf_vz.jl:27\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9glhf_vz.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9glhf_vz.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    end\n    if brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw79uusst.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpw79uusst.jl:25\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw79uusst.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw79uusst.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw79uusst.jl:26\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw79uusst.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw79uusst.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw79uusst.jl:27\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw79uusst.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw79uusst.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659749109
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_count += 1\n\
    \        elseif c == '>'\n            open_count -= 1\n        end\n        if\
    \ open_count < 0\n            return false\n        end\n    end\n    return open_count\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    end\n    if brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw79uusst.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpw79uusst.jl:25\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw79uusst.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw79uusst.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw79uusst.jl:26\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw79uusst.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw79uusst.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw79uusst.jl:27\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw79uusst.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw79uusst.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659749109
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            push!(stack,\
    \ bracket)\n        elseif bracket == \">\"\n            if isempty(stack)\n \
    \               return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_yxp3ci5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp_yxp3ci5.jl:29\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:30\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:31\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:32\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:33\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    open_bracket = 0\n    close_bracket = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            open_bracket += 1\n        elseif\
    \ brackets[i] == '>'\n            close_bracket += 1\n        end\n    end\n \
    \   if open_bracket == close_bracket\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8xil1z3o.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp8xil1z3o.jl:32\n  Expression: candidate(\"\
    ><<>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xil1z3o.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xil1z3o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8xil1z3o.jl:37\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xil1z3o.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xil1z3o.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    if isempty(stack)\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749108
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpphceex4n.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpphceex4n.jl:14\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpphceex4n.jl:15\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpphceex4n.jl:16\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpphceex4n.jl:17\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpphceex4n.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpphceex4n.jl:14\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpphceex4n.jl:15\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpphceex4n.jl:16\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpphceex4n.jl:17\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpphceex4n.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphceex4n.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_count += 1\n\
    \        elseif b == '>'\n            open_count -= 1\n        end\n        if\
    \ open_count < 0\n            return false\n        end\n    end\n    return open_count\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '<'\n            push!(stack, c)\n   \
    \     elseif c == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749107
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp69_yc5cp.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp69_yc5cp.jl:14\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69_yc5cp.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69_yc5cp.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp69_yc5cp.jl:15\n  Expression: candidate(\"<<><>>\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69_yc5cp.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69_yc5cp.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp69_yc5cp.jl:16\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp69_yc5cp.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69_yc5cp.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp69_yc5cp.jl:17\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp69_yc5cp.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69_yc5cp.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n % 2 != 0\n        return\
    \ false\n    end\n    stack = []\n    for i in 1:n\n        if brackets[i] ==\
    \ '<'\n            push!(stack, brackets[i])\n        elseif brackets[i] == '>'\n\
    \            if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack\
    \ = Stack()\n    for bracket in brackets\n        if bracket == \"<\"\n      \
    \      push!(bracket_stack, bracket)\n        elseif bracket == \">\"\n      \
    \      if isempty(bracket_stack)\n                return false\n            else\n\
    \                pop!(bracket_stack)\n            end\n        end\n    end\n\
    \    return isempty(bracket_stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpc2dov75p.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpc2dov75p.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: Stack not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpc2dov75p.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc2dov75p.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc2dov75p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc2dov75p.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpc2dov75p.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc2dov75p.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc2dov75p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc2dov75p.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: Stack not defined\n  Stacktrace:\n\
    \   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpc2dov75p.jl:6\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc2dov75p.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc2dov75p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc2dov75p.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: Stack not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpc2dov75p.jl:6\n   [2] macro "
  timestamp: 1659749111
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '<'\n            push!(stack, i)\n   \
    \     elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for i in brackets\n        if i == '<'\n            open_brackets +=\
    \ 1\n        elseif i == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749108
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            push!(stack,\
    \ bracket)\n        elseif bracket == \">\"\n            if isempty(stack)\n \
    \               return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_yxp3ci5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp_yxp3ci5.jl:29\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:30\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:31\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:32\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:33\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            push!(stack,\
    \ bracket)\n        elseif bracket == \">\"\n            if isempty(stack)\n \
    \               return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_yxp3ci5.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp_yxp3ci5.jl:29\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:30\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:31\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:32\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_yxp3ci5.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_yxp3ci5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_yxp3ci5.jl:33\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == \"<\"\n            open_brackets\
    \ += 1\n        elseif bracket == \">\"\n            open_brackets -= 1\n    \
    \    end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpeds7gdpg.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpeds7gdpg.jl:28\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeds7gdpg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeds7gdpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeds7gdpg.jl:29\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeds7gdpg.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeds7gdpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeds7gdpg.jl:30\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeds7gdpg.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeds7gdpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeds7gdpg.jl:31\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeds7gdpg.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeds7gdpg.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeds7gdpg.jl:32\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '<'\n            push!(stack, i)\n   \
    \     elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if isempty(stack)\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_count += 1\n\
    \        elseif c == '>'\n            open_count -= 1\n        end\n        if\
    \ open_count < 0\n            return false\n        end\n    end\n    return open_count\
    \ == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<' && brackets[n]\
    \ == '>'\n        return correct_bracketing(brackets[2:n-1])\n    end\n    if\
    \ brackets[1] == '<' && brackets[n] == '<'\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[1] == '>' && brackets[n] == '>'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\n    if brackets[1] == '>' && brackets[n] == '<'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyw0nv8ts.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyw0nv8ts.jl:38\n  Expression: candidate(\"\
    <<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyw0nv8ts.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw0nv8ts.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyw0nv8ts.jl:39\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyw0nv8ts.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw0nv8ts.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyw0nv8ts.jl:40\n  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyw0nv8ts.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyw0nv8ts.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppq2nzazz.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmppq2nzazz.jl:18\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2nzazz.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2nzazz.jl:13\ntest set: Test\
    \ Failed at /tmp/tmppq2nzazz.jl:19\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2nzazz.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2nzazz.jl:13\ntest set: Test\
    \ Failed at /tmp/tmppq2nzazz.jl:20\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2nzazz.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2nzazz.jl:13\ntest set: Test\
    \ Failed at /tmp/tmppq2nzazz.jl:21\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq2nzazz.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq2nzazz.jl:13\ntest set: Test\
    \ Failed at /tmp/tmppq2nzazz.jl:22\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749109
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '<'\n            push!(stack, i)\n   \
    \     elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for i in brackets\n        if i == '<'\n            push!(stack, i)\n   \
    \     elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE\
    \ HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph9o0v4xi.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmph9o0v4xi.jl:13\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph9o0v4xi.jl:12\ntest set:\
    \ Error During Test at /tmp/tmph9o0v4xi.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmph9o0v4xi.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph9o0v4xi.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for c in brackets\n        if c == '<'\n            push!(stack, c)\n   \
    \     elseif c == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749107
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # initialize\
    \ a counter for open brackets\n    open_brackets = 0\n    # loop through the string\n\
    \    for b in brackets\n        # if the character is an open bracket, increment\
    \ the counter\n        if b == '<'\n            open_brackets += 1\n        #\
    \ if the character is a close bracket, decrement the counter\n        elseif b\
    \ == '>'\n            open_brackets -= 1\n        end\n        # if the counter\
    \ is negative, we have a closing bracket without an opening bracket\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    # if\
    \ the counter is zero, we have the same number of open and close brackets\n  \
    \  return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749108
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.\nin expression starting at /tmp/tmphpq9dvrw.jl:10\n'''
  stdout: 'b''test set: Error During Test at /tmp/tmphpq9dvrw.jl:13\n  Test threw
    exception\n  Expression: candidate("<>") == true\n  MethodError: Cannot `convert`
    an object of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:13 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphpq9dvrw.jl:12\ntest set: Error
    During Test at /tmp/tmphpq9dvrw.jl:14\n  Test threw exception\n  Expression: candidate("<<><>>")
    == true\n  MethodError: Cannot `convert` an object of type Nothing to an object
    of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where
    T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n    convert(::Type{T},
    !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1]
    correct_bracketing(brackets::String)\n     @ Main /tmp/tmphpq9dvrw.jl:7\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphpq9dvrw.jl:14 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl'
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    # TODO: implement\
    \ this function\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4_ljkz_2.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp4_ljkz_2.jl:18\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_ljkz_2.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_ljkz_2.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp4_ljkz_2.jl:19\n  Expression: candidate(\"><<>\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_ljkz_2.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_ljkz_2.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp4_ljkz_2.jl:20\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_ljkz_2.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_ljkz_2.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp4_ljkz_2.jl:21\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_ljkz_2.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_ljkz_2.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp4_ljkz_2.jl:22\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659749110
- exit_code: 0
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n                   \
    \ \"\"\"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |   12     12

    '
  stdout: ''
  timestamp: 1659749106
