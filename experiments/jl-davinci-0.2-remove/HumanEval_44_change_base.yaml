name: HumanEval_44_change_base
language: jl
prompt: "\"\"\"Change numerical base of input number x to base.\n    return string\
  \ representation after the conversion.\n    base numbers are less than 10.\n   \
  \             \"\"\"\nfunction change_base(x::Int64, base::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
  \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
  \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
  \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
  \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\"\
  )\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7,\
  \ 8) == \"7\")\nend\n"
completions: ["    if x == 0\n        return \"0\"\n    end\n    if x < 0\n      \
    \  return \"-\" * change_base(-x, base)\n    end\n    result = \"\"\n    while\
    \ x > 0\n        result = string(x % base) * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if base > 10\n        error(\"base must\
    \ be less than 10\")\n    end\n    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789\"\n    res = \"\"\n    while x > 0\n        res = digits[x %\
    \ base + 1] * res\n        x = x \xF7 base\n    end\n    return res\nend", " \
    \   if base > 10\n        return \"Base must be less than 10\"\n    end\n    if\
    \ x < 0\n        return \"Number must be positive\"\n    end\n    if x == 0\n\
    \        return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if x < base\n        return string(x)\n    else\n        return change_base(x\
    \ \xF7 base, base) * string(x % base)\n    end\nend", "    if x < base\n     \
    \   return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    end\n    if x == 0\n        return \"0\"\
    \n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    result = \"\"\n    while x > 0\n        result = string(x % base) * result\n\
    \        x = x \xF7 base\n    end\n    return result\nend", "    if x < base\n\
    \        return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if base > 10\n        error(\"base must\
    \ be less than 10\")\n    end\n    if x < 0\n        error(\"x must be positive\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    res = \"\"\n   \
    \ while x > 0\n        res = string(x % base) * res\n        x = x \xF7 base\n\
    \    end\n    return res\nend", "    if base > 10\n        error(\"base must be\
    \ less than 10\")\n    end\n    if x == 0\n        return \"0\"\n    end\n   \
    \ if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789\"\n    q, r = divrem(x, base)\n    return change_base(q, base)\
    \ * digits[r+1]\nend", "    if base > 10\n        error(\"base is less than 10\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    if x < 0\n     \
    \   return \"-\" * change_base(-x, base)\n    end\n    result = \"\"\n    while\
    \ x > 0\n        result = string(x % base) * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    if x\
    \ < base\n        return string(x)\n    end\n    return change_base(x \xF7 base,\
    \ base) * string(x % base)\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    x = abs(x)\n    res = \"\"\n    while x > 0\n        res = string(x % base)\
    \ * res\n        x = div(x, base)\n    end\n    return res\nend", "    if base\
    \ > 10\n        error(\"base is too large\")\n    end\n    if x == 0\n       \
    \ return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    if x < base\n        return string(x)\n    end\n    return\
    \ change_base(x \xF7 base, base) * string(x % base)\nend", "    if x == 0\n  \
    \      return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x\
    \ > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n\
    \    return s\nend", "    if x == 0\n        return \"0\"\n    end\n    x = abs(x)\n\
    \    res = \"\"\n    while x > 0\n        res = string(x % base) * res\n     \
    \   x = x \xF7 base\n    end\n    return res\nend", "    if x == 0\n        return\
    \ \"0\"\n    end\n    result = \"\"\n    while x != 0\n        result = string(x\
    \ % base) * result\n        x = x \xF7 base\n    end\n    return result\nend",
  "    if base > 10\n        println(\"Base should be less than 10\")\n        return\
    \ \"\"\n    end\n    if x < 0\n        println(\"Input number should be positive\"\
    )\n        return \"\"\n    end\n    if x == 0\n        return \"0\"\n    end\n\
    \    result = \"\"\n    while x > 0\n        result = string(x % base) * result\n\
    \        x = x \xF7 base\n    end\n    return result\nend", "    if base > 10\n\
    \        error(\"base must be less than 10\")\n    end\n    if x == 0\n      \
    \  return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    s\
    \ = \"\"\n    while x > 0\n        s = digits[x % base + 1] * s\n        x = x\
    \ \xF7 base\n    end\n    return s\nend", "    if base > 10\n        error(\"\
    base must be less than 10\")\n    end\n    if x < 0\n        error(\"x must be\
    \ positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if base > 10\n    \
    \    error(\"base must be less than 10\")\n    end\n    if x == 0\n        return\
    \ \"0\"\n    end\n    result = \"\"\n    while x != 0\n        result = string(x\
    \ % base) * result\n        x = x \xF7 base\n    end\n    return result\nend",
  "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\"\
    \ * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s =\
    \ \"\"\n    while x > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7\
    \ base\n    end\n    return s\nend", "    if base < 2 || base > 10\n        error(\"\
    base must be between 2 and 10\")\n    end\n    if x == 0\n        return \"0\"\
    \n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    digits = \"0123456789\"\n    result = \"\"\n    while x > 0\n        result\
    \ = digits[x % base + 1] * result\n        x = x \xF7 base\n    end\n    return\
    \ result\nend", "    if base < 2 || base > 10\n        error(\"base must be between\
    \ 2 and 10\")\n    end\n    if x < 0\n        error(\"x must be positive\")\n\
    \    end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n  \
    \  while x > 0\n        remainder = x % base\n        x = x \xF7 base\n      \
    \  result = string(remainder) * result\n    end\n    return result\nend", "  \
    \  if base > 10\n        error(\"base must be less than 10\")\n    end\n    if\
    \ x < 0\n        error(\"x must be non-negative\")\n    end\n    if x == 0\n \
    \       return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return\
    \ \"-\" * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n\
    \    s = \"\"\n    while x > 0\n        s = digits[x % base + 1] * s\n       \
    \ x = x \xF7 base\n    end\n    return s\nend", "    if base > 10\n        error(\"\
    Base must be less than 10\")\n    end\n    if x < 0\n        error(\"Number must\
    \ be positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x\
    \ > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n\
    \    return s\nend", "    if x == 0\n        return \"0\"\n    end\n    if x <\
    \ 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\
    \n    s = \"\"\n    while x > 0\n        s = digits[1 + mod(x, base)] * s\n  \
    \      x = div(x, base)\n    end\n    return s\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    if x < base\n        return string(x)\n    end\n    return\
    \ change_base(x \xF7 base, base) * string(x % base)\nend", "    if x == 0\n  \
    \      return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    if x < base\n        return string(x)\n    end\n    return\
    \ change_base(x \xF7 base, base) * string(x % base)\nend", "    if x == 0\n  \
    \      return \"0\"\n    end\n    res = \"\"\n    while x > 0\n        res = string(x\
    \ % base) * res\n        x = x \xF7 base\n    end\n    return res\nend", "   \
    \ if base > 10\n        error(\"base must be less than 10\")\n    end\n    if\
    \ x < 0\n        error(\"x must be positive\")\n    end\n    if x == 0\n     \
    \   return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if base < 2 || base > 10\n        error(\"base must be in [2,10]\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    if x < 0\n     \
    \   return \"-\" * change_base(-x, base)\n    end\n    digits = \"0123456789\"\
    \n    result = \"\"\n    while x > 0\n        result = digits[mod(x, base)+1]\
    \ * result\n        x = div(x, base)\n    end\n    return result\nend", "    if\
    \ x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\" *\
    \ change_base(-x, base)\n    end\n    digits = \"0123456789\"\n    result = \"\
    \"\n    while x > 0\n        result = digits[x % base + 1] * result\n        x\
    \ = x \xF7 base\n    end\n    return result\nend", "    if x < base\n        return\
    \ string(x)\n    else\n        return change_base(x \xF7 base, base) * string(x\
    \ % base)\n    end\nend", "    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend",
  "    if base > 10\n        error(\"base must be less than 10\")\n    end\n    if\
    \ x < 0\n        error(\"x must be positive\")\n    end\n    if x == 0\n     \
    \   return \"0\"\n    end\n    res = \"\"\n    while x > 0\n        res = string(x\
    \ % base) * res\n        x = x \xF7 base\n    end\n    return res\nend", "   \
    \ if base < 2 || base > 10\n        error(\"base must be between 2 and 10\")\n\
    \    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    if x < base\n        return string(x)\n    end\n    return change_base(x\
    \ \xF7 base, base) * string(x % base)\nend", "    if x == 0\n        return \"\
    0\"\n    end\n    res = \"\"\n    while x != 0\n        res = string(x % base)\
    \ * res\n        x = x \xF7 base\n    end\n    return res\nend", "    if x < base\n\
    \        return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if x == 0\n        return \"0\"\n  \
    \  end\n    result = \"\"\n    while x != 0\n        result = string(x % base)\
    \ * result\n        x = x \xF7 base\n    end\n    return result\nend", "    if\
    \ x < base\n        return string(x)\n    else\n        return change_base(x \xF7\
    \ base, base) * string(x % base)\n    end\nend", "    if base > 10\n        error(\"\
    base must be less than 10\")\n    end\n    if x < 0\n        error(\"x must be\
    \ positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if base == 10\n   \
    \     return string(x)\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    if x < base\n        return string(x)\n    end\n    return\
    \ change_base(x \xF7 base, base) * string(x % base)\nend", "    if x == 0\n  \
    \      return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n    while\
    \ x > 0\n        result = string(x % base) * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if x < base\n        return string(x)\n\
    \    else\n        return change_base(x \xF7 base, base) * string(x % base)\n\
    \    end\nend", "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n\
    \        return \"-\" * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\
    \n    s = \"\"\n    while x > 0\n        s = digits[x % base + 1] * s\n      \
    \  x = x \xF7 base\n    end\n    return s\nend", "    if x == 0\n        return\
    \ \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n\
    \    end\n    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n \
    \       s = digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n    return\
    \ s\nend", "    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n\
    \    while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    if x == 0\n        return \"0\"\
    \n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s =\
    \ digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend",
  "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\"\
    \ * change_base(-x, base)\n    end\n    digits = \"0123456789\"\n    s = \"\"\n\
    \    while x > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7 base\n\
    \    end\n    return s\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    digits = \"0123456789\"\n    res = \"\"\n    while x > 0\n        res = digits[mod(x,\
    \ base)+1] * res\n        x = div(x, base)\n    end\n    return res\nend", " \
    \   if base > 10\n        error(\"base must be less than 10\")\n    end\n    if\
    \ x < 0\n        error(\"x must be positive\")\n    end\n    if x == 0\n     \
    \   return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return\
    \ \"-\" * change_base(-x, base)\n    end\n    digits = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    result = \"\"\n    while x\
    \ > 0\n        result = digits[x % base + 1] * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if base > 10\n        error(\"Base must\
    \ be less than 10\")\n    end\n    if x < 0\n        error(\"Input must be positive\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n\
    \    while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    if base > 10\n        error(\"\
    base must be less than 10\")\n    end\n    if x == 0\n        return \"0\"\n \
    \   end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    if x < base\n        return string(x)\n    end\n    return change_base(x\
    \ \xF7 base, base) * string(x % base)\nend", "    if base < 2 || base > 10\n \
    \       error(\"base must be in range [2,10]\")\n    end\n    if x < 0\n     \
    \   error(\"x must be positive\")\n    end\n    if x == 0\n        return \"0\"\
    \n    end\n    result = \"\"\n    while x > 0\n        result = string(x % base)\
    \ * result\n        x = x \xF7 base\n    end\n    return result\nend", "    if\
    \ x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\" *\
    \ change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s = \"\
    \"\n    while x > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7\
    \ base\n    end\n    return s\nend", "    if x == 0\n        return \"0\"\n  \
    \  end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    if x < base\n        return string(x)\n    end\n    return change_base(x\
    \ \xF7 base, base) * string(x % base)\nend", "    if x < 0\n        return \"\
    -\" * change_base(-x, base)\n    end\n    if x < base\n        return string(x)\n\
    \    end\n    return change_base(x \xF7 base, base) * string(x % base)\nend",
  "    if x == 0\n        return \"0\"\n    end\n    digits = \"0123456789\"\n   \
    \ result = \"\"\n    while x > 0\n        result = digits[mod(x, base)+1] * result\n\
    \        x = div(x, base)\n    end\n    return result\nend", "    if x < base\n\
    \        return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if base == 10\n        return string(x)\n\
    \    end\n    if x == 0\n        return \"0\"\n    end\n    if x < 0\n       \
    \ return \"-\" * change_base(-x, base)\n    end\n    result = \"\"\n    while\
    \ x > 0\n        result = string(x % base) * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s = digits[x\
    \ % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend", "   \
    \ if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\"\
    \ * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s =\
    \ \"\"\n    while x > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7\
    \ base\n    end\n    return s\nend", "    if base > 10\n        error(\"Base must\
    \ be less than 10\")\n    end\n    if x < 0\n        error(\"Input must be positive\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n\
    \    while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    if base > 10\n        error(\"\
    base must be less than 10\")\n    end\n    if x < 0\n        error(\"x must be\
    \ positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789ABCDEF\"\n    result = \"\"\n    while\
    \ x > 0\n        result = digits[x % base + 1] * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    result = \"\"\n    while x > 0\n        result = string(x % base) * result\n\
    \        x = x \xF7 base\n    end\n    return result\nend", "    if x == 0\n \
    \       return \"0\"\n    end\n    digits = \"0123456789\"\n    result = \"\"\n\
    \    while x != 0\n        result = digits[x % base + 1] * result\n        x =\
    \ x \xF7 base\n    end\n    return result\nend", "    if base > 10\n        error(\"\
    base must be less than 10\")\n    end\n    if x < 0\n        error(\"x must be\
    \ positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n \
    \   if x < base\n        return string(x)\n    end\n    return change_base(x \xF7\
    \ base, base) * string(x % base)\nend", "    if base < 2 || base > 10\n      \
    \  error(\"base must be in range [2, 10]\")\n    end\n    if x == 0\n        return\
    \ \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n\
    \    end\n    digits = []\n    while x > 0\n        digits = [x % base] + digits\n\
    \        x = x \xF7 base\n    end\n    return join(digits, \"\")\nend", "    #\
    \ convert to base 10\n    base10 = 0\n    for i in 1:length(x)\n        base10\
    \ += Int64(x[i]) * base^(length(x)-i)\n    end\n    # convert from base 10\n \
    \   res = \"\"\n    while base10 > 0\n        res = string(base10 % base) * res\n\
    \        base10 = base10 \xF7 base\n    end\n    return res\nend", "    if x ==\
    \ 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789\"\n    result = \"\"\n    while x\
    \ > 0\n        result = digits[x % base + 1] * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if x < base\n        return string(x)\n\
    \    else\n        return change_base(x \xF7 base, base) * string(x % base)\n\
    \    end\nend", "    if base < 2 || base > 10\n        error(\"base must be between\
    \ 2 and 10\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    if x\
    \ < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits = \"\
    0123456789\"\n    result = \"\"\n    while x > 0\n        result = digits[mod(x,\
    \ base)+1] * result\n        x = div(x, base)\n    end\n    return result\nend",
  "    if x < base\n        return string(x)\n    else\n        return change_base(x\
    \ \xF7 base, base) * string(x % base)\n    end\nend", "    if base > 10\n    \
    \    error(\"base must be less than 10\")\n    end\n    if x == 0\n        return\
    \ \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n\
    \    end\n    result = \"\"\n    while x > 0\n        result = string(x % base)\
    \ * result\n        x = x \xF7 base\n    end\n    return result\nend", "    if\
    \ x < base\n        return string(x)\n    else\n        return change_base(x \xF7\
    \ base, base) * string(x % base)\n    end\nend", "    if x == 0\n        return\
    \ \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n\
    \    end\n    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n \
    \       s = digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n    return\
    \ s\nend", "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n     \
    \   return \"-\" * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\
    \n    s = \"\"\n    while x > 0\n        s = digits[x % base + 1] * s\n      \
    \  x = x \xF7 base\n    end\n    return s\nend", "    if x == 0\n        return\
    \ \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n\
    \    end\n    result = \"\"\n    while x > 0\n        result = string(x % base)\
    \ * result\n        x = x \xF7 base\n    end\n    return result\nend", "    if\
    \ x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\" *\
    \ change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s = \"\
    \"\n    while x > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7\
    \ base\n    end\n    return s\nend", "    if x == 0\n        return \"0\"\n  \
    \  end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s =\
    \ digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend",
  "    if base < 2 || base > 10\n        error(\"base must be between 2 and 10\")\n\
    \    end\n    if x < 0\n        error(\"x must be positive\")\n    end\n    if\
    \ x == 0\n        return \"0\"\n    end\n    result = \"\"\n    while x > 0\n\
    \        result = string(x % base) * result\n        x = x \xF7 base\n    end\n\
    \    return result\nend", "    if base > 10\n        error(\"base must be less\
    \ than 10\")\n    end\n    if x < 0\n        error(\"x must be greater than 0\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n\
    \    while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    if base > 10\n        error(\"\
    base must be less than 10\")\n    end\n    if x < 0\n        error(\"x must be\
    \ positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if x < base\n     \
    \   return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if x == 0\n        return \"0\"\n  \
    \  end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    digits = \"0123456789ABCDEF\"\n    result = \"\"\n    while x > 0\n     \
    \   result = digits[x % base + 1] * result\n        x = div(x, base)\n    end\n\
    \    return result\nend", "    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    if x < base\n        return string(x)\n    end\n    return\
    \ change_base(x \xF7 base, base) * string(x % base)\nend", "    if base > 10\n\
    \        error(\"base should be less than 10\")\n    end\n    if x < 0\n     \
    \   error(\"x should be positive\")\n    end\n    if x == 0\n        return \"\
    0\"\n    end\n    result = \"\"\n    while x > 0\n        result = string(x %\
    \ base) * result\n        x = x \xF7 base\n    end\n    return result\nend", " \
    \   if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"\
    -\" * change_base(-x, base)\n    end\n    if x < base\n        return string(x)\n\
    \    end\n    return change_base(x \xF7 base, base) * string(x % base)\nend",
  "    quotient = x\n    remainder = 0\n    result = \"\"\n    while quotient != 0\n\
    \        remainder = quotient % base\n        quotient = quotient \xF7 base\n\
    \        push!(result, remainder)\n    end\n    return result\nend", "    if x\
    \ == 0\n        return \"0\"\n    end\n    digits = \"0123456789\"\n    result\
    \ = \"\"\n    while x > 0\n        result = digits[mod(x, base)+1] * result\n\
    \        x = div(x, base)\n    end\n    return result\nend", "    if x < base\n\
    \        return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if base > 10\n        throw(ArgumentError(\"\
    base must be less than 10\"))\n    end\n    if x == 0\n        return \"0\"\n\
    \    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    if x < base\n        return string(x)\n    end\n    return change_base(x\
    \ \xF7 base, base) * string(x % base)\nend", "    if x == 0\n        return \"\
    0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n   \
    \ end\n    digits = \"0123456789ABCDEF\"\n    res = \"\"\n    while x > 0\n  \
    \      res = digits[x % base + 1] * res\n        x = x \xF7 base\n    end\n  \
    \  return res\nend", "    if base < 2 || base > 10\n        error(\"base must\
    \ be between 2 and 10\")\n    end\n    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if base > 10\n    \
    \    error(\"base must be less than 10\")\n    end\n    if x < 0\n        error(\"\
    x must be positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n\
    \    result = \"\"\n    while x > 0\n        result = string(x % base) * result\n\
    \        x = x \xF7 base\n    end\n    return result\nend", "    # check if base\
    \ is less than 10\n    if base > 10\n        error(\"base must be less than 10\"\
    )\n    end\n    # check if x is less than 0\n    if x < 0\n        error(\"x must\
    \ be greater than 0\")\n    end\n    # check if x is less than base\n    if x\
    \ < base\n        return string(x)\n    end\n    # check if x is greater than\
    \ base\n    if x >= base\n        return change_base(x \xF7 base, base) * string(x\
    \ % base)\n    end\nend", "    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend",
  "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\"\
    \ * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s =\
    \ \"\"\n    while x > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7\
    \ base\n    end\n    return s\nend", "    if x == 0\n        return \"0\"\n  \
    \  end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    if x < base\n        return string(x)\n    end\n    return change_base(x\
    \ \xF7 base, base) * string(x % base)\nend", "    if base > 10\n        error(\"\
    base must be less than 10\")\n    end\n    if x == 0\n        return \"0\"\n \
    \   end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    s = \"\"\n    while\
    \ x > 0\n        r = x % base\n        s = digits[r+1] * s\n        x = x \xF7\
    \ base\n    end\n    return s\nend", "    if x == 0\n        return \"0\"\n  \
    \  end\n    res = \"\"\n    while x != 0\n        res = string(x % base) * res\n\
    \        x = x // base\n    end\n    return res\nend", "    if x < base\n    \
    \    return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if x == 0\n        return \"0\"\n  \
    \  end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s =\
    \ digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend",
  "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\"\
    \ * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s =\
    \ \"\"\n    while x > 0\n        s = digits[mod(x, base)+1] * s\n        x = div(x,\
    \ base)\n    end\n    return s\nend", "    if base > 10\n        error(\"base\
    \ must be less than 10\")\n    end\n    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789\"\n    s = \"\"\n    while x > 0\n        s = digits[mod(x, base)+1]\
    \ * s\n        x = div(x, base)\n    end\n    return s\nend", "    if x == 0\n\
    \        return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789ABCDEF\"\n    res = \"\"\n    while\
    \ x > 0\n        res = digits[x % base + 1] * res\n        x = x \xF7 base\n \
    \   end\n    return res\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s = digits[x\
    \ % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend", "   \
    \ if base > 10\n        throw(ArgumentError(\"base must be less than 10\"))\n\
    \    end\n    if x < 0\n        throw(ArgumentError(\"x must be positive\"))\n\
    \    end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n  \
    \  while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    if x == 0\n        return \"0\"\
    \n    end\n    res = \"\"\n    while x > 0\n        res = string(x % base) * res\n\
    \        x = x \xF7 base\n    end\n    return res\nend", "    quotient = x\n \
    \   remainder = 0\n    result = \"\"\n    while quotient != 0\n        remainder\
    \ = quotient % base\n        quotient = quotient \xF7 base\n        result = string(remainder)\
    \ * result\n    end\n    return result\nend", "    if x == 0\n        return \"\
    0\"\n    end\n    result = \"\"\n    while x > 0\n        result = string(x %\
    \ base) * result\n        x = x \xF7 base\n    end\n    return result\nend", " \
    \   if x < base\n        return string(x)\n    else\n        return change_base(x\
    \ \xF7 base, base) * string(x % base)\n    end\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789ABCDEF\"\n    result = \"\"\n    while\
    \ x > 0\n        result = digits[x % base + 1] * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s = digits[x\
    \ % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend", "   \
    \ if x < base\n        return string(x)\n    else\n        return change_base(x\
    \ \xF7 base, base) * string(x % base)\n    end\nend", "    if x < base\n     \
    \   return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if base > 10\n        error(\"base must\
    \ be less than 10\")\n    end\n    if x < 0\n        sign = \"-\"\n        x =\
    \ -x\n    else\n        sign = \"\"\n    end\n    if x < base\n        return\
    \ sign * string(x)\n    else\n        return change_base(x \xF7 base, base) *\
    \ string(x % base)\n    end\nend", "    if base < 2 || base > 10\n        error(\"\
    base must be between 2 and 10\")\n    end\n    if x < 0\n        x = -x\n    \
    \    sign = \"-\"\n    else\n        sign = \"\"\n    end\n    if x == 0\n   \
    \     return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return sign\
    \ * result\nend", "    if base > 10\n        error(\"base is too large\")\n  \
    \  end\n    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return\
    \ \"-\" * change_base(-x, base)\n    end\n    result = \"\"\n    while x > 0\n\
    \        result = string(x % base) * result\n        x = x \xF7 base\n    end\n\
    \    return result\nend", "    if base < 2 || base > 10\n        error(\"base\
    \ must be between 2 and 10\")\n    end\n    if x < 0\n        error(\"x must be\
    \ positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    if x < base\n        return string(x)\n    end\n    return\
    \ change_base(x \xF7 base, base) * string(x % base)\nend", "    if x == 0\n  \
    \      return \"0\"\n    end\n    res = \"\"\n    while x > 0\n        res = string(x\
    \ % base) * res\n        x = x \xF7 base\n    end\n    return res\nend", "   \
    \ if base < 2 || base > 10\n        error(\"base should be between 2 and 10\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    if x < 0\n     \
    \   return \"-\" * change_base(-x, base)\n    end\n    result = \"\"\n    while\
    \ x > 0\n        result = string(x % base) * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s = digits[x\
    \ % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend", "   \
    \ if base == 10\n        return string(x)\n    end\n    if x == 0\n        return\
    \ \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n\
    \    end\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result =\
    \ \"\"\n    while x > 0\n        result = digits[mod(x, base)+1] * result\n  \
    \      x = div(x, base)\n    end\n    return result\nend", "    if x == 0\n  \
    \      return \"0\"\n    end\n    res = \"\"\n    while x > 0\n        res = string(x\
    \ % base) * res\n        x = x \xF7 base\n    end\n    return res\nend", "   \
    \ if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\"\
    \ * change_base(-x, base)\n    end\n    if x < base\n        return string(x)\n\
    \    end\n    return change_base(x \xF7 base, base) * string(x % base)\nend",
  "    if base > 10\n        error(\"base must be less than 10\")\n    end\n    if\
    \ x < 0\n        error(\"x must be positive\")\n    end\n    if x == 0\n     \
    \   return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if x < base\n        return string(x)\n    else\n        return change_base(x\
    \ \xF7 base, base) * string(x % base)\n    end\nend", "    if base < 2 || base\
    \ > 10\n        println(\"base should be between 2 and 10\")\n        return \"\
    \"\n    end\n    if x == 0\n        return \"0\"\n    end\n    if x < 0\n    \
    \    return \"-\" * change_base(-x, base)\n    end\n    result = \"\"\n    while\
    \ x > 0\n        result = string(x % base) * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if base > 10\n        error(\"base must\
    \ be less than 10\")\n    end\n    if x < 0\n        error(\"x must be positive\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n\
    \    while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    if x == 0\n        return \"0\"\
    \n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s =\
    \ digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend",
  "    if x < base\n        return string(x)\n    else\n        return change_base(x\
    \ \xF7 base, base) * string(x % base)\n    end\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    s = \"\"\n    while x != 0\n        s = string(x\
    \ % base) * s\n        x = x \xF7 base\n    end\n    return s\nend", "    if x\
    \ == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    if x < base\n        return string(x)\n    end\n    return\
    \ change_base(x \xF7 base, base) * string(x % base)\nend", "    if x == 0\n  \
    \      return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789ABCDEF\"\n    result = \"\"\n    while\
    \ x > 0\n        result = digits[x % base + 1] * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s = digits[x\
    \ % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend", "   \
    \ if base < 2 || base > 10\n        error(\"Base must be between 2 and 10\")\n\
    \    end\n    if x < 0\n        error(\"x must be positive\")\n    end\n    if\
    \ x == 0\n        return \"0\"\n    end\n    result = \"\"\n    while x > 0\n\
    \        result = string(x % base) * result\n        x = x \xF7 base\n    end\n\
    \    return result\nend", "    if base > 10\n        error(\"base must be less\
    \ than 10\")\n    end\n    if x < 0\n        error(\"x must be positive\")\n \
    \   end\n    if x == 0\n        return \"0\"\n    end\n    res = \"\"\n    while\
    \ x != 0\n        res = string(x % base) * res\n        x = x \xF7 base\n    end\n\
    \    return res\nend", "    if base > 10\n        error(\"Base must be less than\
    \ 10\")\n    end\n    if x < 0\n        error(\"Input must be positive\")\n  \
    \  end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n    while\
    \ x > 0\n        result = string(x % base) * result\n        x = x \xF7 base\n\
    \    end\n    return result\nend", "    if x < base\n        return string(x)\n\
    \    else\n        return change_base(x \xF7 base, base) * string(x % base)\n\
    \    end\nend", "    if base > 10\n        error(\"Base must be less than 10\"\
    )\n    end\n    if x < 0\n        error(\"Input must be positive\")\n    end\n\
    \    if x == 0\n        return \"0\"\n    end\n    res = \"\"\n    while x > 0\n\
    \        res = string(x % base) * res\n        x = x \xF7 base\n    end\n    return\
    \ res\nend", "    if base < 2 || base > 10\n        error(\"base must be between\
    \ 2 and 10\")\n    end\n    if x < 0\n        error(\"x must be positive\")\n\
    \    end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n  \
    \  while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    quotient = x\n    remainder = 0\n\
    \    result = \"\"\n    while quotient != 0\n        remainder = quotient % base\n\
    \        quotient = quotient \xF7 base\n        result = string(remainder) * result\n\
    \    end\n    return result\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s = digits[x\
    \ % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend", "   \
    \ if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    if x <\
    \ base\n        return string(x)\n    end\n    return change_base(x \xF7 base,\
    \ base) * string(x % base)\nend", "    if x == 0\n        return \"0\"\n    end\n\
    \    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits\
    \ = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n        s = digits[x\
    \ % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\nend", "   \
    \ if x == 0\n        return \"0\"\n    end\n    result = \"\"\n    while x > 0\n\
    \        result = string(x % base) * result\n        x = x \xF7 base\n    end\n\
    \    return result\nend", "    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x != 0\n        result = string(x % base) * result\n     \
    \   x = x \xF7 base\n    end\n    return result\nend", "    if base > 10\n   \
    \     error(\"base must be less than 10\")\n    end\n    if x == 0\n        return\
    \ \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n\
    \    end\n    digits = \"0123456789\"\n    s = \"\"\n    while x > 0\n       \
    \ s = digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n    return s\n\
    end", "    if x < base\n        return string(x)\n    else\n        return change_base(x\
    \ \xF7 base, base) * string(x % base)\n    end\nend", "    if x < base\n     \
    \   return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if base > 10\n        error(\"base must\
    \ be less than 10\")\n    end\n    if x < 0\n        error(\"x must be positive\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n\
    \    while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    if base == 10\n        return string(x)\n\
    \    end\n    if x == 0\n        return \"0\"\n    end\n    if x < 0\n       \
    \ return \"-\" * change_base(-x, base)\n    end\n    res = \"\"\n    while x >\
    \ 0\n        res = string(x % base) * res\n        x = x \xF7 base\n    end\n\
    \    return res\nend", "    if base > 10\n        error(\"base must be less than\
    \ 10\")\n    end\n    if x < 0\n        error(\"x must be positive\")\n    end\n\
    \    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n    while x\
    \ > 0\n        result = string(x % base) * result\n        x = x \xF7 base\n \
    \   end\n    return result\nend", "    if base > 10\n        return \"base should\
    \ be less than 10\"\n    end\n    if x < 0\n        return \"input number should\
    \ be positive\"\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    if x < base\n        return string(x)\n    end\n    return\
    \ change_base(x \xF7 base, base) * string(x % base)\nend", "    if base < 2 ||\
    \ base > 10\n        error(\"base must be between 2 and 10\")\n    end\n    if\
    \ x < 0\n        error(\"x must be positive\")\n    end\n    if x == 0\n     \
    \   return \"0\"\n    end\n    res = \"\"\n    while x > 0\n        res = string(x\
    \ % base) * res\n        x = x \xF7 base\n    end\n    return res\nend", "   \
    \ if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\"\
    \ * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s =\
    \ \"\"\n    while x > 0\n        s = digits[1 + mod(x, base)] * s\n        x =\
    \ div(x, base)\n    end\n    return s\nend", "    if x == 0\n        return \"\
    0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n   \
    \ end\n    if x < base\n        return string(x)\n    end\n    return change_base(x\
    \ \xF7 base, base) * string(x % base)\nend", "    if base > 10\n        error(\"\
    Base must be less than 10\")\n    end\n    if x == 0\n        return \"0\"\n \
    \   end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    digits = \"0123456789\"\n    result = \"\"\n    while x > 0\n        result\
    \ = digits[x % base + 1] * result\n        x = x \xF7 base\n    end\n    return\
    \ result\nend", "    if base > 10\n        return \"base must be less than 10\"\
    \n    end\n    if x < 0\n        return \"x must be positive\"\n    end\n    if\
    \ x == 0\n        return \"0\"\n    end\n    result = \"\"\n    while x > 0\n\
    \        result = string(x % base) * result\n        x = x \xF7 base\n    end\n\
    \    return result\nend", "    if base > 10\n        error(\"base must be less\
    \ than 10\")\n    end\n    if x < 0\n        error(\"x must be positive\")\n \
    \   end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n   \
    \ while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    if x == 0\n        return \"0\"\
    \n    end\n    res = \"\"\n    while x != 0\n        res = string(x % base) *\
    \ res\n        x = x \xF7 base\n    end\n    return res\nend", "    if x < base\n\
    \        return string(x)\n    else\n        return change_base(x div base, base)\
    \ * string(x % base)\n    end\nend", "    if base < 2 || base > 10\n        error(\"\
    base must be between 2 and 10\")\n    end\n    if x < 0\n        error(\"x must\
    \ be positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    res\
    \ = \"\"\n    while x > 0\n        res = string(x % base) * res\n        x = x\
    \ \xF7 base\n    end\n    return res\nend", "    if x == 0\n        return \"\
    0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n   \
    \ end\n    if x < base\n        return string(x)\n    end\n    return change_base(x\
    \ \xF7 base, base) * string(x % base)\nend", "    if x < base\n        return\
    \ string(x)\n    else\n        return change_base(x \xF7 base, base) * string(x\
    \ % base)\n    end\nend", "    if base < 2 || base > 10\n        error(\"base\
    \ must be between 2 and 10\")\n    end\n    if x == 0\n        return \"0\"\n\
    \    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    result = \"\"\n    while x > 0\n        result = string(x % base) * result\n\
    \        x = x \xF7 base\n    end\n    return result\nend", "    if base > 10\n\
    \        error(\"base must be less than 10\")\n    end\n    if x < 0\n       \
    \ error(\"x must be positive\")\n    end\n    if x == 0\n        return \"0\"\n\
    \    end\n    result = \"\"\n    while x > 0\n        result = string(x % base)\
    \ * result\n        x = x \xF7 base\n    end\n    return result\nend", "    if\
    \ x == 0\n        return \"0\"\n    end\n    res = \"\"\n    while x > 0\n   \
    \     res = string(x % base) * res\n        x = x \xF7 base\n    end\n    return\
    \ res\nend", "    if x < base\n        return string(x)\n    else\n        return\
    \ change_base(x \xF7 base, base) * string(x % base)\n    end\nend", "    if x\
    \ < 0\n        return \"-\" * change_base(-x, base)\n    end\n    if x < base\n\
    \        return string(x)\n    end\n    return change_base(x \xF7 base, base)\
    \ * string(x % base)\nend", "    if base == 10\n        return string(x)\n   \
    \ end\n    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return\
    \ \"-\" * change_base(-x, base)\n    end\n    if x < base\n        return string(x)\n\
    \    end\n    return change_base(x \xF7 base, base) * string(x % base)\nend",
  "    if base > 10\n        error(\"Base must be less than 10\")\n    end\n    if\
    \ x < 0\n        error(\"Input must be positive\")\n    end\n    if x == 0\n \
    \       return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if base < 2 || base > 10\n        error(\"base must be between 2 and\
    \ 10\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    if x < 0\n\
    \        return \"-\" * change_base(-x, base)\n    end\n    res = \"\"\n    while\
    \ x > 0\n        res = string(x % base) * res\n        x = x \xF7 base\n    end\n\
    \    return res\nend", "    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x != 0\n        result = string(x % base) * result\n     \
    \   x = x \xF7 base\n    end\n    return result\nend", "    if base < 2 || base\
    \ > 10\n        error(\"base must be between 2 and 10\")\n    end\n    if x <\
    \ 0\n        error(\"x must be non-negative\")\n    end\n    if x == 0\n     \
    \   return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return\
    \ \"-\" * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n\
    \    s = \"\"\n    while x > 0\n        s = digits[mod(x, base)+1] * s\n     \
    \   x = div(x, base)\n    end\n    return s\nend", "    if x == 0\n        return\
    \ \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n\
    \    end\n    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x > 0\n \
    \       s = digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n    return\
    \ s\nend", "    if base == 10\n        return string(x)\n    end\n    if x ==\
    \ 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    s\
    \ = \"\"\n    while x > 0\n        s = digits[x % base + 1] * s\n        x = x\
    \ \xF7 base\n    end\n    return s\nend", "    if x == 0\n        return \"0\"\
    \n    end\n    res = \"\"\n    while x > 0\n        res = string(x % base) * res\n\
    \        x = x \xF7 base\n    end\n    return res\nend", "    if x < base\n  \
    \      return string(x)\n    else\n        return change_base(x \xF7 base, base)\
    \ * string(x % base)\n    end\nend", "    if base < 2 || base > 10\n        error(\"\
    base must be between 2 and 10\")\n    end\n    if x < 0\n        error(\"x must\
    \ be positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    if x < base\n        return string(x)\n    end\n    return\
    \ change_base(x \xF7 base, base) * string(x % base)\nend", "    if x == 0\n  \
    \      return \"0\"\n    end\n    result = \"\"\n    while x > 0\n        result\
    \ = string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end", "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return\
    \ \"-\" * change_base(-x, base)\n    end\n    s = \"\"\n    while x > 0\n    \
    \    s = string(x % base) * s\n        x = x \xF7 base\n    end\n    return s\n\
    end", "    if base > 10\n        error(\"base must be less than 10\")\n    end\n\
    \    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"\
    -\" * change_base(-x, base)\n    end\n    if x < base\n        return string(x)\n\
    \    end\n    return change_base(x \xF7 base, base) * string(x % base)\nend",
  "    if x == 0\n        return \"0\"\n    end\n    if x < 0\n        return \"-\"\
    \ * change_base(-x, base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s =\
    \ \"\"\n    while x > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7\
    \ base\n    end\n    return s\nend", "    if x == 0\n        return \"0\"\n  \
    \  end\n    if x < 0\n        return \"-\" * change_base(-x, base)\n    end\n\
    \    if x < base\n        return string(x)\n    end\n    return change_base(x\
    \ \xF7 base, base) * string(x % base)\nend", "    if base == 10\n        return\
    \ string(x)\n    end\n    if x == 0\n        return \"0\"\n    end\n    if x <\
    \ 0\n        return \"-\" * change_base(-x, base)\n    end\n    result = \"\"\n\
    \    while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend", "    if base > 10\n        error(\"\
    base must be less than 10\")\n    end\n    if x < 0\n        error(\"x must be\
    \ positive\")\n    end\n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend", "    if x == 0\n       \
    \ return \"0\"\n    end\n    if x < 0\n        return \"-\" * change_base(-x,\
    \ base)\n    end\n    digits = \"0123456789ABCDEF\"\n    s = \"\"\n    while x\
    \ > 0\n        s = digits[x % base + 1] * s\n        x = x \xF7 base\n    end\n\
    \    return s\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
