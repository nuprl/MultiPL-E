name: HumanEval_59_largest_prime_factor
language: jl
prompt: "\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \            \"\"\"\nfunction largest_prime_factor(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15)\
  \ == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330)\
  \ == 11)\n\t@test(candidate(13195) == 29)\nend\n"
completions: ["    for i in reverse(primes(n))\n        if n % i == 0\n          \
    \  return i\n        end\n    end\nend", "    \"\"\"Return the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    \"\"\"Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n    \"\"\"\n    for i = 2:n\n        if n % i == 0\n  \
    \          return max(largest_prime_factor(i), largest_prime_factor(n/i))\n  \
    \      end\n    end\nend", "    \"\"\"Return the largest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    \"\"\"\n    for i in primes(n)\n        if n\
    \ % i == 0\n            return i\n        end\n    end\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    \"\"\"\n    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in reverse(primes(n))\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    # your code\
    \ here\n    return 0\nend", "    \"\"\"Return the largest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    \"\"\"\n    for i in primes(n)\n        if n\
    \ % i == 0\n            return i\n        end\n    end\nend", "    for i in 2:n\n\
    \        if n % i == 0\n            return largest_prime_factor(n \xF7 i)\n  \
    \      end\n    end\n    return n\nend", "    for i in primes(n)\n        if n\
    \ % i == 0\n            return i\n        end\n    end\nend", "    # your code\
    \ here\nend", "    \"\"\"Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    \"\"\"\n    for i in primes(n)\n        if n % i == 0\n\
    \            return i\n        end\n    end\nend", "    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n            \"\"\"\n  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    \"\"\"Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n    \"\"\"\n    for i in primes(n)\n        if n % i ==\
    \ 0\n            return i\n        end\n    end\nend", "    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    for i in\
    \ primes(n)\n        if n % i == 0\n            return i\n        end\n    end\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    for i in reverse(primes(n))\n        if n % i\
    \ == 0\n            return i\n        end\n    end\nend", "    for i in reverse(primes(n))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \            \"\"\"\n    for p in primes(n)\n        if n % p == 0\n         \
    \   return p\n        end\n    end\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    \"\"\"Return\
    \ the largest prime factor of n. Assume n > 1 and is not a prime.\n          \
    \  \"\"\"\n    for i in primes(n)\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    \"\"\"Return the largest prime factor of n.\
    \ Assume n > 1 and is not a prime.\n    \"\"\"\n    for i in primes(n)\n     \
    \   if n % i == 0\n            return i\n        end\n    end\nend", "    for\
    \ i in primes(n)\n        if n % i == 0\n            return i\n        end\n \
    \   end\nend", "    for i in reverse(primes(Int64, n))\n        if n % i == 0\n\
    \            return i\n        end\n    end\nend", "    for i in reverse(primes(n))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    \"\"\"\n    for i in reverse(primes(n))\n        if n % i == 0\n        \
    \    return i\n        end\n    end\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    for i in\
    \ 2:n\n        if n % i == 0\n            return largest_prime_factor(n \xF7 i)\n\
    \        end\n    end\n    return n\nend", "    \"\"\"Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n            \"\"\"\n    for i\
    \ in primes(n)\n        if n % i == 0\n            return i\n        end\n   \
    \ end\nend", "    for i in reverse(primes(n))\n        if n % i == 0\n       \
    \     return i\n        end\n    end\nend", "    for i in reverse(primes(n))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \            \"\"\"\n    for i in primes(n)\n        if n % i == 0\n         \
    \   return i\n        end\n    end\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n \xF7 i)\n        end\n    end\n\
    \    return n\nend", "    for i = 2:n-1\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    for\
    \ i in primes(n)\n        if n % i == 0\n            return i\n        end\n \
    \   end\nend", "    # Your code here\n    return 0\nend", "    for i in 2:n\n\
    \        if n % i == 0\n            return largest_prime_factor(n \xF7 i)\n  \
    \      end\n    end\n    return n\nend", "    for i in primes(n)\n        if n\
    \ % i == 0\n            return i\n        end\n    end\nend", "    \"\"\"Return\
    \ the largest prime factor of n. Assume n > 1 and is not a prime.\n          \
    \  \"\"\"\n    for i in primes(n)\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    for i in reverse(primes(n))\n        if n %\
    \ i == 0\n            return i\n        end\n    end\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in reverse(primes(n))\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    # Initialize the largest prime factor to 1\n\
    \    lpf = 1\n    # Initialize the divisor to 2\n    divisor = 2\n    # While\
    \ n is greater than 1\n    while n > 1\n        # If n is divisible by divisor\n\
    \        if n % divisor == 0\n            # Set n to n divided by divisor\n  \
    \          n = n \xF7 divisor\n            # Set the largest prime factor to divisor\n\
    \            lpf = divisor\n        else\n            # Increment the divisor\
    \ by 1\n            divisor += 1\n        end\n    end\n    # Return the largest\
    \ prime factor\n    return lpf\nend", "    # Initialize the largest prime factor\
    \ to 1\n    largest_prime_factor = 1\n    # Initialize the smallest prime factor\
    \ to 2\n    smallest_prime_factor = 2\n    # While n is not a prime\n    while\
    \ !isprime(n)\n        # If n is divisible by the smallest prime factor\n    \
    \    if n % smallest_prime_factor == 0\n            # Set the largest prime factor\
    \ to the smallest prime factor\n            largest_prime_factor = smallest_prime_factor\n\
    \            # Divide n by the smallest prime factor\n            n = n / smallest_prime_factor\n\
    \        else\n            # Increment the smallest prime factor by 1\n      \
    \      smallest_prime_factor += 1\n        end\n    end\n    # Return the largest\
    \ prime factor\n    return largest_prime_factor\nend", "    # Initialize the largest\
    \ prime factor to 1.\n    largest_prime_factor = 1\n    # Initialize the smallest\
    \ prime factor to 2.\n    smallest_prime_factor = 2\n    # Loop over all the prime\
    \ factors of n.\n    while smallest_prime_factor <= n\n        # If the smallest\
    \ prime factor is a factor of n, then update the largest prime factor.\n     \
    \   if n % smallest_prime_factor == 0\n            largest_prime_factor = smallest_prime_factor\n\
    \        end\n        # Update the smallest prime factor.\n        smallest_prime_factor\
    \ += 1\n    end\n    # Return the largest prime factor.\n    return largest_prime_factor\n\
    end", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ \xF7 i)\n        end\n    end\n    return n\nend", "    for i in 2:n\n     \
    \   if n % i == 0\n            return largest_prime_factor(n \xF7 i)\n       \
    \ end\n    end\n    return n\nend", "    for i = 2:n\n        if n % i == 0\n\
    \            return largest_prime_factor(n/i)\n        end\n    end\nend", " \
    \   for i in reverse(primes(n))\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    \"\"\"Return the largest prime factor of n.\
    \ Assume n > 1 and is not a prime.\n            \"\"\"\n    i = 2\n    while i\
    \ <= n\n        if n % i == 0\n            n = n / i\n        else\n         \
    \   i += 1\n        end\n    end\n    return i\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ \xF7 i)\n        end\n    end\n    return n\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    \"\"\"\n    # Start with the smallest prime factor and work up.\n    for\
    \ i in primes(n)\n        if n % i == 0\n            return i\n        end\n \
    \   end\nend", "    # your code here\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    # initialize\
    \ the largest prime factor to 1\n    lpf = 1\n    # initialize the divisor to\
    \ 2\n    d = 2\n    # while n is greater than 1\n    while n > 1\n        # if\
    \ n is divisible by d\n        if n % d == 0\n            # set lpf to d\n   \
    \         lpf = d\n            # divide n by d\n            n = n \xF7 d\n   \
    \     else\n            # increment d by 1\n            d = d + 1\n        end\n\
    \    end\n    # return lpf\n    return lpf\nend", "    for i in reverse(primes(n))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  # TODO: implement this function\n    return 0\nend", "    \"\"\"Return the\
    \ largest prime factor of n. Assume n > 1 and is not a prime.\n            \"\"\
    \"\n    if n % 2 == 0\n        return largest_prime_factor(n/2)\n    end\n   \
    \ for i in 3:2:floor(sqrt(n))\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n \
    \   return n\nend", "    for i in primes(n)\n        if n % i == 0\n         \
    \   return i\n        end\n    end\nend", "    # initialize the largest prime\
    \ factor\n    lpf = 1\n    # initialize the smallest prime factor\n    spf = 2\n\
    \    # loop until the smallest prime factor is greater than the square root of\
    \ n\n    while spf <= sqrt(n)\n        # if n is divisible by the smallest prime\
    \ factor, then the smallest prime factor is a factor of n\n        if n % spf\
    \ == 0\n            # set the largest prime factor to the smallest prime factor\n\
    \            lpf = spf\n            # divide n by the smallest prime factor\n\
    \            n = n / spf\n        else\n            # increment the smallest prime\
    \ factor\n            spf += 1\n        end\n    end\n    # return the largest\
    \ prime factor\n    return lpf\nend", "    for i = 2:n\n        if n % i == 0\n\
    \            return largest_prime_factor(n \xF7 i)\n        end\n    end\nend",
  "    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    \"\"\"\n    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in reverse(primes(n))\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    for i = 2:n-1\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\n    return n\nend", "    # Initialize the largest prime factor\
    \ to be 1\n    largest_prime_factor = 1\n    # Initialize the factor to be 2\n\
    \    factor = 2\n    # While n is greater than 1\n    while n > 1\n        # While\
    \ n is divisible by factor\n        while n % factor == 0\n            # Update\
    \ the largest prime factor\n            largest_prime_factor = factor\n      \
    \      # Divide n by factor\n            n = n / factor\n        end\n       \
    \ # Increment factor by 1\n        factor = factor + 1\n    end\n    # Return\
    \ the largest prime factor\n    return largest_prime_factor\nend", "    for i\
    \ in primes(n)\n        if n % i == 0\n            return i\n        end\n   \
    \ end\nend", "    \"\"\"Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n            \"\"\"\n    for i in primes(n)\n        if n %\
    \ i == 0\n            return i\n        end\n    end\nend", "    \"\"\"Return\
    \ the largest prime factor of n. Assume n > 1 and is not a prime.\n          \
    \  \"\"\"\n    for i in primes(n)\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    for i = 2:n\n        if isprime(i) && n % i\
    \ == 0\n            return i\n        end\n    end\nend", "    \"\"\"Return the\
    \ largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in primes(n)\n        if n % i ==\
    \ 0\n            return i\n        end\n    end\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in reverse(primes(n))\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    # Initialize the largest prime factor to 2\n\
    \    largest_prime_factor = 2\n    # Initialize the smallest prime factor to 2\n\
    \    smallest_prime_factor = 2\n    # Initialize the remainder to n\n    remainder\
    \ = n\n    # While the remainder is greater than 1\n    while remainder > 1\n\
    \        # If the remainder is divisible by the smallest prime factor\n      \
    \  if remainder % smallest_prime_factor == 0\n            # Divide the remainder\
    \ by the smallest prime factor\n            remainder = remainder / smallest_prime_factor\n\
    \            # If the smallest prime factor is greater than the largest prime\
    \ factor\n            if smallest_prime_factor > largest_prime_factor\n      \
    \          # Set the largest prime factor to the smallest prime factor\n     \
    \           largest_prime_factor = smallest_prime_factor\n            end\n  \
    \      else\n            # Increment the smallest prime factor\n            smallest_prime_factor\
    \ += 1\n        end\n    end\n    # Return the largest prime factor\n    return\
    \ largest_prime_factor\nend", "    for i in reverse(2:floor(Int64, sqrt(n)))\n\
    \        if n % i == 0 && isprime(i)\n            return i\n        end\n    end\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    \"\"\"Return the largest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n            \"\"\"\n    for i in primes(n)\n    \
    \    if n % i == 0\n            return i\n        end\n    end\nend", "    for\
    \ i in primes(n)\n        if n % i == 0\n            return i\n        end\n \
    \   end\nend", "    \"\"\"Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    \"\"\"\n    for i in primes(n)\n        if n % i == 0\n\
    \            return i\n        end\n    end\nend", "    for i in reverse(primes(n))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n \xF7 i)\n        end\n    end\n\
    \    return n\nend", "    \"\"\"Return the largest prime factor of n. Assume n\
    \ > 1 and is not a prime.\n    \"\"\"\n    for i in primes(n)\n        if n %\
    \ i == 0\n            return i\n        end\n    end\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    \"\"\"\n    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in primes(n)\n        if n % i ==\
    \ 0\n            return i\n        end\n    end\nend", "    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n            \"\"\"\n  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in reverse(primes(n))\n        if n % i == 0\n    \
    \        return i\n        end\n    end\nend", "    for i in primes(n)\n     \
    \   if n % i == 0\n            return i\n        end\n    end\nend", "    for\
    \ i in primes(n)\n        if n % i == 0\n            return i\n        end\n \
    \   end\nend", "    for i in 2:n\n        if n % i == 0\n            return max(largest_prime_factor(i),\
    \ largest_prime_factor(n \xF7 i))\n        end\n    end\n    return n\nend", " \
    \   for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    for i in\
    \ 2:n\n        if n % i == 0\n            return largest_prime_factor(n \xF7 i)\n\
    \        end\n    end\n    return n\nend", "    for i = 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\nend",
  "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ \xF7 i)\n        end\n    end\n    return n\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  # TODO: implement me\n    return 0\nend", "    for i in reverse(primes(n))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    \"\"\"\n    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    \"\"\"Return the largest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n    \"\"\"\n    if n % 2 == 0\n       \
    \ return largest_prime_factor(n/2)\n    end\n    for i in 3:2:floor(Int64, sqrt(n))\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\n    return n\nend", "    for i in primes(n)\n        if n % i\
    \ == 0\n            return i\n        end\n    end\nend", "    \"\"\"Return the\
    \ largest prime factor of n. Assume n > 1 and is not a prime.\n            \"\"\
    \"\n    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    for i in reverse(primes(n))\n        if n %\
    \ i == 0\n            return i\n        end\n    end\nend", "    \"\"\"Return\
    \ the largest prime factor of n. Assume n > 1 and is not a prime.\n          \
    \  \"\"\"\n    for i in primes(n)\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    for i in reverse(primes(n))\n        if n %\
    \ i == 0\n            return i\n        end\n    end\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    \"\"\"Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n            \"\"\"\n    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    for i in\
    \ 2:n\n        if n % i == 0\n            return largest_prime_factor(n \xF7 i)\n\
    \        end\n    end\n    return n\nend", "    # TODO\n    return 0\nend", " \
    \   for i in reverse(primes(n))\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    \"\"\"Return the largest prime factor of n.\
    \ Assume n > 1 and is not a prime.\n    \"\"\"\n    for i in primes(n)\n     \
    \   if n % i == 0\n            return i\n        end\n    end\nend", "    for\
    \ i in reverse(primes(n))\n        if n % i == 0\n            return i\n     \
    \   end\n    end\nend", "    \"\"\"Return the largest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    \"\"\"\n    for i in primes(n)\n        if n\
    \ % i == 0\n            return i\n        end\n    end\nend", "    i = 2\n   \
    \ while i <= n\n        if n % i == 0\n            n = n / i\n        else\n \
    \           i += 1\n        end\n    end\n    return i\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i = 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ \xF7 i)\n        end\n    end\nend", "    for i in primes(n)\n        if n %\
    \ i == 0\n            return i\n        end\n    end\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i = 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ \xF7 i)\n        end\n    end\nend", "    for i in primes(n)\n        if n %\
    \ i == 0\n            return i\n        end\n    end\nend", "    for i in reverse(primes(n))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in primes(n)\n        if n % i ==\
    \ 0\n            return i\n        end\n    end\nend", "    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    for i in\
    \ primes(n)\n        if n % i == 0\n            return i\n        end\n    end\n\
    end", "    for i in reverse(primes(n))\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in primes(n)\n        if n % i ==\
    \ 0\n            return i\n        end\n    end\nend", "    # Initialize the largest\
    \ prime factor to 1\n    lpf = 1\n    # Initialize the divisor to 2\n    divisor\
    \ = 2\n    # While n is greater than 1\n    while n > 1\n        # If n is divisible\
    \ by divisor\n        if n % divisor == 0\n            # Set lpf to divisor\n\
    \            lpf = divisor\n            # Divide n by divisor\n            n /=\
    \ divisor\n        else\n            # Increment divisor by 1\n            divisor\
    \ += 1\n        end\n    end\n    # Return lpf\n    return lpf\nend", "    # Initialize\
    \ the largest prime factor to 1\n    largest_prime_factor = 1\n    # Initialize\
    \ the divisor to 2\n    divisor = 2\n    # While n is greater than 1\n    while\
    \ n > 1\n        # If n is divisible by divisor\n        if n % divisor == 0\n\
    \            # Set n to n divided by divisor\n            n = n \xF7 divisor\n\
    \            # Set the largest prime factor to divisor\n            largest_prime_factor\
    \ = divisor\n        else\n            # Increment the divisor by 1\n        \
    \    divisor += 1\n        end\n    end\n    # Return the largest prime factor\n\
    \    return largest_prime_factor\nend", "    for i in 2:n\n        if n % i ==\
    \ 0\n            return largest_prime_factor(n \xF7 i)\n        end\n    end\n\
    \    return n\nend", "    for i in reverse(primes(n))\n        if n % i == 0\n\
    \            return i\n        end\n    end\nend", "    # Your code here\n   \
    \ return 0\nend", "    for i in 2:n-1\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    for\
    \ i in reverse(2:n)\n        if isprime(i) && n % i == 0\n            return i\n\
    \        end\n    end\nend", "    \"\"\"Return the largest prime factor of n.\
    \ Assume n > 1 and is not a prime.\n            \"\"\"\n    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    # TODO: implement this function\n    return 0\nend", "  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    \"\"\"Return the largest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n            \"\"\"\n    # Start with the\
    \ smallest prime factor and work up.\n    for i in primes(n)\n        if n % i\
    \ == 0\n            return i\n        end\n    end\nend", "    for i in 2:n\n\
    \        if n % i == 0\n            return largest_prime_factor(n \xF7 i)\n  \
    \      end\n    end\n    return n\nend", "    \"\"\"Return the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \"\"\"\n    for i = 2:n\n\
    \        if n % i == 0\n            return max(largest_prime_factor(i), largest_prime_factor(n\
    \ \xF7 i))\n        end\n    end\nend", "    # TODO: Implement this function\n\
    \    return 0\nend", "    \"\"\"Return the largest prime factor of n. Assume n\
    \ > 1 and is not a prime.\n            \"\"\"\n    for i in primes(n)\n      \
    \  if n % i == 0\n            return i\n        end\n    end\nend", "    for i\
    \ in primes(n)\n        if n % i == 0\n            return i\n        end\n   \
    \ end\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i = 2:n\n        if n % i == 0\n   \
    \         return largest_prime_factor(n \xF7 i)\n        end\n    end\nend", " \
    \   \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \            \"\"\"\n    for i in primes(n)\n        if n % i == 0\n         \
    \   return i\n        end\n    end\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    \"\"\"Return\
    \ the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n\
    \    for i in primes(n)\n        if n % i == 0\n            return i\n       \
    \ end\n    end\nend", "    for i in primes(n)\n        if n % i == 0\n       \
    \     return i\n        end\n    end\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    \"\"\"Return\
    \ the largest prime factor of n. Assume n > 1 and is not a prime.\n          \
    \  \"\"\"\n    for i in primes(n)\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    for i in 2:n\n        if n % i == 0\n      \
    \      return largest_prime_factor(n \xF7 i)\n        end\n    end\n    return\
    \ n\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ \xF7 i)\n        end\n    end\n    return n\nend", "    # your code here\nend",
  "    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \            \"\"\"\n    for i in primes(n)\n        if n % i == 0\n         \
    \   return i\n        end\n    end\nend", "    # Initialize the largest prime\
    \ factor to 1\n    largest_prime_factor = 1\n    # Initialize the divisor to 2\n\
    \    divisor = 2\n    # Loop until the divisor is greater than the square root\
    \ of n\n    while divisor <= sqrt(n)\n        # If n is divisible by the divisor\n\
    \        if n % divisor == 0\n            # Set the largest prime factor to the\
    \ divisor\n            largest_prime_factor = divisor\n            # Divide n\
    \ by the divisor\n            n = n / divisor\n        else\n            # Increment\
    \ the divisor by 1\n            divisor += 1\n        end\n    end\n    # Return\
    \ the largest prime factor\n    return largest_prime_factor\nend", "    for i\
    \ in reverse(primes(n))\n        if n % i == 0\n            return i\n       \
    \ end\n    end\nend", "    for i in primes(n)\n        if n % i == 0\n       \
    \     return i\n        end\n    end\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    for i in\
    \ primes(n)\n        if n % i == 0\n            return i\n        end\n    end\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    for i in 2:n\n        if n % i == 0\n       \
    \     return largest_prime_factor(n/i)\n        end\n    end\n    return n\nend",
  "    for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    \"\"\"Return the largest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n            \"\"\"\n    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  # Initialize the largest prime factor to 1\n    largest_prime_factor = 1\n\
    \    # Initialize the smallest prime factor to 2\n    smallest_prime_factor =\
    \ 2\n    # Loop over all the numbers from 2 to n\n    while smallest_prime_factor\
    \ <= n\n        # If n is divisible by smallest_prime_factor\n        if n % smallest_prime_factor\
    \ == 0\n            # Set n to n divided by smallest_prime_factor\n          \
    \  n = n / smallest_prime_factor\n            # Set largest_prime_factor to smallest_prime_factor\n\
    \            largest_prime_factor = smallest_prime_factor\n        else\n    \
    \        # Increment smallest_prime_factor by 1\n            smallest_prime_factor\
    \ += 1\n        end\n    end\n    # Return largest_prime_factor\n    return largest_prime_factor\n\
    end", "    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n    \"\"\"\n    for i in primes(n)\n        if n % i == 0\n      \
    \      return i\n        end\n    end\nend", "    for i in reverse(2:2:n)\n  \
    \      if isprime(i) && n % i == 0\n            return i\n        end\n    end\n\
    end", "    for i in 2:n\n        if isprime(i) && n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in primes(n)\n        if n % i ==\
    \ 0\n            return i\n        end\n    end\nend", "    for i in 2:n\n   \
    \     if n % i == 0\n            return largest_prime_factor(n \xF7 i)\n     \
    \   end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i == 0\n\
    \            return largest_prime_factor(n \xF7 i)\n        end\n    end\n   \
    \ return n\nend", "    # Initialize the largest prime factor to 1\n    largest_prime_factor\
    \ = 1\n    # Initialize the divisor to 2\n    divisor = 2\n    # While n is greater\
    \ than 1\n    while n > 1\n        # If n is divisible by divisor\n        if\
    \ n % divisor == 0\n            # Set n to n divided by divisor\n            n\
    \ = n \xF7 divisor\n            # Set the largest prime factor to divisor\n  \
    \          largest_prime_factor = divisor\n        else\n            # Increment\
    \ the divisor by 1\n            divisor += 1\n        end\n    end\n    # Return\
    \ the largest prime factor\n    return largest_prime_factor\nend", "    for i\
    \ in primes(n)\n        if n % i == 0\n            return i\n        end\n   \
    \ end\nend", "    # Initialize the largest prime factor to 2\n    largest_prime_factor\
    \ = 2\n    # Initialize the factor to 2\n    factor = 2\n    # Initialize the\
    \ square root of n\n    sqrt_n = sqrt(n)\n    # While factor is less than or equal\
    \ to the square root of n\n    while factor <= sqrt_n\n        # If n is divisible\
    \ by factor\n        if n % factor == 0\n            # Set n to n divided by factor\n\
    \            n = n / factor\n            # Set the largest prime factor to factor\n\
    \            largest_prime_factor = factor\n            # Set the square root\
    \ of n to the square root of n\n            sqrt_n = sqrt(n)\n        else\n \
    \           # Increment factor by 1\n            factor += 1\n        end\n  \
    \  end\n    # Return the largest prime factor\n    return largest_prime_factor\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    \"\"\"Return the largest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n            \"\"\"\n    for i in primes(n)\n    \
    \    if n % i == 0\n            return i\n        end\n    end\nend", "    \"\"\
    \"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n   \
    \         \"\"\"\n    # TODO: implement this function\n    return 0\nend", " \
    \   \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    \            \"\"\"\n    for i in primes(n)\n        if n % i == 0\n         \
    \   return i\n        end\n    end\nend", "    for i in reverse(primes(n))\n \
    \       if n % i == 0\n            return i\n        end\n    end\nend", "   \
    \ for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in primes(n)\n        if n % i ==\
    \ 0\n            return i\n        end\n    end\nend", "    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n            \"\"\"\n  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in primes(n)\n        if n % i ==\
    \ 0\n            return i\n        end\n    end\nend", "    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    for i in\
    \ primes(n)\n        if n % i == 0\n            return i\n        end\n    end\n\
    end", "    for i in reverse(2:floor(Int64, sqrt(n)))\n        if isprime(i) &&\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    for i in\
    \ 2:n\n        if n % i == 0\n            return largest_prime_factor(n \xF7 i)\n\
    \        end\n    end\n    return n\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
