language: jl
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        x = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsgulrpvb.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsgulrpvb.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsgulrpvb.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsgulrpvb.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsgulrpvb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsgulrpvb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsgulrpvb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsgulrpvb.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsgulrpvb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsgulrpvb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsgulrpvb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsgulrpvb.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsgulrpvb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsgulrpvb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        a = [0, 3, 8]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp7d6_b7xb.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp7d6_b7xb.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        tri = [0, 3, 2]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1 + i /\
    \ 2)\n            else\n                push!(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n            end\n        end\n        return tri\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp5jmwf7_s.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp5jmwf7_s.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5jmwf7_s.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5jmwf7_s.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5jmwf7_s.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5jmwf7_s.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5jmwf7_s.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5jmwf7_s.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5jmwf7_s.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5jmwf7_s.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5jmwf7_s.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5jmwf7_s.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5jmwf7_s.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5jmwf7_s.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    elseif n == 3\n        return [0, 1, 1,\
    \ 3]\n    else\n        a = [0, 1, 1, 3]\n        for i in 4:n\n            if\
    \ i % 2 == 0\n                push!(a, 1 + i / 2)\n            else\n        \
    \        push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n            end\n        end\n\
    \        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp1wlvlsz6.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp1wlvlsz6.jl:42\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1wlvlsz6.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1wlvlsz6.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp1wlvlsz6.jl:43\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 3, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1wlvlsz6.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1wlvlsz6.jl:41\ntest set: Error\
    \ During Test at /tmp/tmp1wlvlsz6.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1wlvlsz6.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1wlvlsz6.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1wlvlsz6.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp1wlvlsz6.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1wlvlsz6.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        a = [0, 3, 1]\n        for\
    \ i in 3:n\n            push!(a, a[i-1] + a[i-2] + a[i-3])\n        end\n    \
    \    return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpm64ws8gy.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpm64ws8gy.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpm64ws8gy.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm64ws8gy.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm64ws8gy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpm64ws8gy.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpm64ws8gy.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm64ws8gy.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm64ws8gy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpm64ws8gy.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpm64ws8gy.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm64ws8gy.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm64ws8gy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpm64ws8gy.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(x, x[i - 1] + x[i - 2] + x[i - 3])\n        end\n\
    \        return x\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprr8t08mj.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprr8t08mj.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprr8t08mj.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprr8t08mj.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprr8t08mj.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprr8t08mj.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprr8t08mj.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprr8t08mj.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprr8t08mj.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprr8t08mj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprr8t08mj.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprr8t08mj.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprr8t08mj.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprr8t08mj.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h5ywom7.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9h5ywom7.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        v = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmphnfkkicc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmphnfkkicc.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphnfkkicc.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphnfkkicc.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphnfkkicc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphnfkkicc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphnfkkicc.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphnfkkicc.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphnfkkicc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphnfkkicc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphnfkkicc.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphnfkkicc.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphnfkkicc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphnfkkicc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        seq = [0, 3, 2]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1 + i /\
    \ 2)\n            else\n                push!(seq, seq[i - 1] + seq[i - 2] + seq[i\
    \ + 1])\n            end\n        end\n        return seq\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwzkdjpgj.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpwzkdjpgj.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwzkdjpgj.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwzkdjpgj.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwzkdjpgj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwzkdjpgj.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwzkdjpgj.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwzkdjpgj.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwzkdjpgj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwzkdjpgj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwzkdjpgj.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwzkdjpgj.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwzkdjpgj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwzkdjpgj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        v = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmphnfkkicc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmphnfkkicc.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphnfkkicc.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphnfkkicc.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphnfkkicc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphnfkkicc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphnfkkicc.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphnfkkicc.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphnfkkicc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphnfkkicc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphnfkkicc.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphnfkkicc.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphnfkkicc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphnfkkicc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 3]\n    else\n        a = [0, 3, 3]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpf9eztmwi.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpf9eztmwi.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf9eztmwi.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9eztmwi.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9eztmwi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf9eztmwi.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf9eztmwi.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9eztmwi.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9eztmwi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf9eztmwi.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf9eztmwi.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9eztmwi.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9eztmwi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf9eztmwi.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        v = [0, 3, 8]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxnkezata.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxnkezata.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxnkezata.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxnkezata.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxnkezata.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxnkezata.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxnkezata.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxnkezata.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxnkezata.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxnkezata.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxnkezata.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxnkezata.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxnkezata.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxnkezata.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 1\n        a[3] = 1\n        for i in 4:n +\
    \ 1\n            a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5zyijl0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpw5zyijl0.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979042
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        v = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmphnfkkicc.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmphnfkkicc.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphnfkkicc.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphnfkkicc.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphnfkkicc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphnfkkicc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphnfkkicc.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphnfkkicc.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphnfkkicc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphnfkkicc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphnfkkicc.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphnfkkicc.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphnfkkicc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphnfkkicc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n        end\n\
    \        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprq6inb3b.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprq6inb3b.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h5ywom7.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9h5ywom7.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    a\
    \ = zeros(Int64, n + 1)\n    a[1] = 3\n    for i in 2:n + 1\n        if i % 2\
    \ == 0\n            a[i] = 1 + i / 2\n        else\n            a[i] = a[i - 1]\
    \ + a[i - 2] + a[i + 1]\n        end\n    end\n    return a\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpde9y1go5.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpde9y1go5.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [3, 2, 5, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpde9y1go5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpde9y1go5.jl:32\ntest set: Error\
    \ During Test at /tmp/tmpde9y1go5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpde9y1go5.jl:23\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpde9y1go5.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpde9y1go5.jl:32\ntest set:\
    \ Test Failed at /tmp/tmpde9y1go5.jl:35\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [3, 2, 5, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpde9y1go5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpde9y1go5.jl:32\ntest set: Error\
    \ During Test at /tmp/tmpde9y1go5.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpde9y1go5.jl:23\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    elseif n == 3\n        return [0, 3, 2,\
    \ 8]\n    else\n        a = [0, 3, 2, 8]\n        for i in 4:n\n            if\
    \ i % 2 == 0\n                push!(a, 1 + i / 2)\n            else\n        \
    \        push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n            end\n        end\n\
    \        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpxajzdcoy.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpxajzdcoy.jl:42\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 3, 2, 8] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxajzdcoy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxajzdcoy.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpxajzdcoy.jl:43\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 3, 2, 8, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxajzdcoy.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxajzdcoy.jl:41\ntest set: Error\
    \ During Test at /tmp/tmpxajzdcoy.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxajzdcoy.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxajzdcoy.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxajzdcoy.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpxajzdcoy.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxajzdcoy.jl:31\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        x = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsgulrpvb.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsgulrpvb.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsgulrpvb.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsgulrpvb.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsgulrpvb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsgulrpvb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsgulrpvb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsgulrpvb.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsgulrpvb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsgulrpvb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsgulrpvb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsgulrpvb.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsgulrpvb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsgulrpvb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(x, x[i - 1] + x[i - 2] + x[i - 3])\n        end\n\
    \        return x\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprr8t08mj.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprr8t08mj.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprr8t08mj.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprr8t08mj.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprr8t08mj.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprr8t08mj.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprr8t08mj.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprr8t08mj.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprr8t08mj.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprr8t08mj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprr8t08mj.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprr8t08mj.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprr8t08mj.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprr8t08mj.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0,1]\n    elseif\
    \ n == 2\n        return [0,1,1]\n    else\n        x = [0,1,1]\n        for i\
    \ in 3:n\n            if i % 2 == 0\n                push!(x,1 + i / 2)\n    \
    \        else\n                push!(x,x[i-1] + x[i-2] + x[i+1])\n           \
    \ end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfb6l4w3w.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfb6l4w3w.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfb6l4w3w.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfb6l4w3w.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfb6l4w3w.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfb6l4w3w.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfb6l4w3w.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfb6l4w3w.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfb6l4w3w.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfb6l4w3w.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfb6l4w3w.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfb6l4w3w.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfb6l4w3w.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfb6l4w3w.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    #\
    \ your code here\n    return [3, 2, 8]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6d6tedgg.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp6d6tedgg.jl:25\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [3, 2, 8] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6d6tedgg.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6d6tedgg.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6d6tedgg.jl:26\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [3, 2, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6d6tedgg.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6d6tedgg.jl:24\ntest set: Test Failed at /tmp/tmp6d6tedgg.jl:27\n\
    \  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\n   Evaluated: [3, 2, 8] ==\
    \ [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6d6tedgg.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6d6tedgg.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6d6tedgg.jl:28\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [3, 2, 8] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6d6tedgg.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6d6tedgg.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp6d6tedgg.jl:29\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [3, 2, 8] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrac"
  timestamp: 1659979042
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        a = [0, 3, 8]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp7d6_b7xb.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp7d6_b7xb.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        t = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(t, 1 + i / 2)\n \
    \           else\n                push!(t, t[i - 1] + t[i - 2] + t[i + 1])\n \
    \           end\n        end\n        return t\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpaq_zrl2_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpaq_zrl2_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpaq_zrl2_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaq_zrl2_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaq_zrl2_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaq_zrl2_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpaq_zrl2_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaq_zrl2_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaq_zrl2_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaq_zrl2_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpaq_zrl2_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaq_zrl2_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaq_zrl2_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaq_zrl2_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        seq = [0, 1, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1 + i /\
    \ 2)\n            else\n                push!(seq, seq[i - 1] + seq[i - 2] + seq[i\
    \ + 1])\n            end\n        end\n        return seq\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpf096349j.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpf096349j.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf096349j.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf096349j.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf096349j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf096349j.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf096349j.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf096349j.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf096349j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf096349j.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf096349j.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf096349j.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf096349j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf096349j.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        tri_list = [0, 1, 1]\n \
    \       for i in 3:n\n            if i % 2 == 0\n                push!(tri_list,\
    \ 1 + i / 2)\n            else\n                push!(tri_list, tri_list[i - 1]\
    \ + tri_list[i - 2] + tri_list[i + 1])\n            end\n        end\n       \
    \ return tri_list\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp5avnm35j.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp5avnm35j.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5avnm35j.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5avnm35j.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5avnm35j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5avnm35j.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5avnm35j.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5avnm35j.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5avnm35j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5avnm35j.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5avnm35j.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5avnm35j.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5avnm35j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5avnm35j.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979047
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 3\n        a[3] = 2\n        for i in 4:n +\
    \ 1\n            if i % 2 == 0\n                a[i] = 1 + i / 2\n           \
    \ else\n                a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n            end\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpntezmofo.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpntezmofo.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntezmofo.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntezmofo.jl:42\ntest set: Error\
    \ During Test at /tmp/tmpntezmofo.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpntezmofo.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpntezmofo.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpntezmofo.jl:42\ntest set:\
    \ Test Failed at /tmp/tmpntezmofo.jl:45\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [0, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntezmofo.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntezmofo.jl:42\ntest set: Error\
    \ During Test at /tmp/tmpntezmofo.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpntezmofo.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979047
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        tri = [0, 3, 2]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1 + i /\
    \ 2)\n            else\n                push!(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n            end\n        end\n        return tri\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp5jmwf7_s.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp5jmwf7_s.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5jmwf7_s.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5jmwf7_s.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5jmwf7_s.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5jmwf7_s.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5jmwf7_s.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5jmwf7_s.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5jmwf7_s.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5jmwf7_s.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5jmwf7_s.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5jmwf7_s.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5jmwf7_s.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5jmwf7_s.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = zeros(Int64, n + 1)\n\
    \        x[1] = 0\n        x[2] = 1\n        x[3] = 1\n        for i in 4:n +\
    \ 1\n            x[i] = x[i - 1] + x[i - 2] + x[i - 3]\n        end\n        return\
    \ x\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnbut42b6.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpnbut42b6.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbut42b6.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbut42b6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpnbut42b6.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbut42b6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbut42b6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpnbut42b6.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbut42b6.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbut42b6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpnbut42b6.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnbut42b6.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnbut42b6.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpnbut42b6.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979047
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n        end\n\
    \        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprq6inb3b.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprq6inb3b.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        tri = [0, 1, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1 + i /\
    \ 2)\n            else\n                push!(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n            end\n        end\n        return tri\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp50z4swt6.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp50z4swt6.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        v = [0, 3, 8]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n     \
    \       end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9i0kxuwn.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9i0kxuwn.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9i0kxuwn.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9i0kxuwn.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9i0kxuwn.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9i0kxuwn.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9i0kxuwn.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9i0kxuwn.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9i0kxuwn.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9i0kxuwn.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9i0kxuwn.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9i0kxuwn.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9i0kxuwn.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9i0kxuwn.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 3\n        a[3] = 2\n        for i in 4:n +\
    \ 1\n            if i % 2 == 0\n                a[i] = 1 + i / 2\n           \
    \ else\n                a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n            end\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpntezmofo.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpntezmofo.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntezmofo.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntezmofo.jl:42\ntest set: Error\
    \ During Test at /tmp/tmpntezmofo.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpntezmofo.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpntezmofo.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpntezmofo.jl:42\ntest set:\
    \ Test Failed at /tmp/tmpntezmofo.jl:45\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [0, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntezmofo.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntezmofo.jl:42\ntest set: Error\
    \ During Test at /tmp/tmpntezmofo.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpntezmofo.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979047
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n        end\n\
    \        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprq6inb3b.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprq6inb3b.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i = 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n  \
    \          else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n  \
    \          end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptzzbaxzj.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmptzzbaxzj.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmptzzbaxzj.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptzzbaxzj.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptzzbaxzj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptzzbaxzj.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmptzzbaxzj.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptzzbaxzj.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptzzbaxzj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptzzbaxzj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmptzzbaxzj.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptzzbaxzj.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptzzbaxzj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptzzbaxzj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        res = [0, 1, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(res, 1 + i /\
    \ 2)\n            else\n                push!(res, res[i - 1] + res[i - 2] + res[i\
    \ + 1])\n            end\n        end\n        return res\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpisff6mag.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpisff6mag.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpisff6mag.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpisff6mag.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpisff6mag.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpisff6mag.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpisff6mag.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpisff6mag.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpisff6mag.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpisff6mag.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpisff6mag.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpisff6mag.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpisff6mag.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpisff6mag.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 1\n        a[3] = 1\n        for i in 4:n +\
    \ 1\n            a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5zyijl0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpw5zyijl0.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979042
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h5ywom7.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9h5ywom7.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        return [0, 3, 8, tri(n -\
    \ 1)[end] + tri(n - 2)[end] + tri(n + 1)[end]]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        a = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9t60xu96.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9t60xu96.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        tri = [0, 1, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1 + i /\
    \ 2)\n            else\n                push!(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n            end\n        end\n        return tri\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp50z4swt6.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp50z4swt6.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 3]\n    else\n        a = [0, 3, 3]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpf9eztmwi.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpf9eztmwi.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf9eztmwi.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9eztmwi.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9eztmwi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf9eztmwi.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf9eztmwi.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9eztmwi.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9eztmwi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf9eztmwi.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf9eztmwi.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9eztmwi.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9eztmwi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf9eztmwi.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        a = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9t60xu96.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9t60xu96.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        fib = [0, 1, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(fib, 1 + i /\
    \ 2)\n            else\n                push!(fib, fib[i - 1] + fib[i - 2] + fib[i\
    \ + 1])\n            end\n        end\n        return fib\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp8njcgqr4.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp8njcgqr4.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8njcgqr4.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8njcgqr4.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8njcgqr4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8njcgqr4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8njcgqr4.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8njcgqr4.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8njcgqr4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8njcgqr4.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8njcgqr4.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8njcgqr4.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8njcgqr4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8njcgqr4.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        result = [0, 3, 8]\n   \
    \     for i in 3:n\n            if i % 2 == 0\n                push!(result, 1\
    \ + i / 2)\n            else\n                push!(result, result[i] + result[i\
    \ - 1] + result[i + 1])\n            end\n        end\n        return result\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp2rj6_t1b.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp2rj6_t1b.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2rj6_t1b.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2rj6_t1b.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2rj6_t1b.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp2rj6_t1b.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2rj6_t1b.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2rj6_t1b.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2rj6_t1b.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp2rj6_t1b.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp2rj6_t1b.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2rj6_t1b.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2rj6_t1b.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp2rj6_t1b.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n        end\n\
    \        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprq6inb3b.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprq6inb3b.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        result = [0, 3, 1]\n   \
    \     for i in 3:n\n            if i % 2 == 0\n                push!(result, 1\
    \ + i / 2)\n            else\n                push!(result, result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n            end\n        end\n        return result\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_quvyktd.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp_quvyktd.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_quvyktd.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_quvyktd.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_quvyktd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_quvyktd.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_quvyktd.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_quvyktd.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_quvyktd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_quvyktd.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_quvyktd.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_quvyktd.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_quvyktd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_quvyktd.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        tri_seq = [0, 1, 1]\n  \
    \      for i in 3:n\n            if i % 2 == 0\n                push!(tri_seq,\
    \ 1 + i / 2)\n            else\n                push!(tri_seq, tri_seq[i - 1]\
    \ + tri_seq[i - 2] + tri_seq[i + 1])\n            end\n        end\n        return\
    \ tri_seq\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpjuwqtg2q.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpjuwqtg2q.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpjuwqtg2q.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjuwqtg2q.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjuwqtg2q.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjuwqtg2q.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpjuwqtg2q.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjuwqtg2q.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjuwqtg2q.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjuwqtg2q.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpjuwqtg2q.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjuwqtg2q.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjuwqtg2q.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjuwqtg2q.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        tri = [0, 1, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1 + i /\
    \ 2)\n            else\n                push!(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n            end\n        end\n        return tri\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp50z4swt6.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp50z4swt6.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 3\n        a[3] = 2\n        for i in 4:n +\
    \ 1\n            if i % 2 == 0\n                a[i] = 1 + i / 2\n           \
    \ else\n                a[i] = a[i - 1] + a[i - 2] + a[i + 1]\n            end\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpntezmofo.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpntezmofo.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntezmofo.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntezmofo.jl:42\ntest set: Error\
    \ During Test at /tmp/tmpntezmofo.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpntezmofo.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpntezmofo.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpntezmofo.jl:42\ntest set:\
    \ Test Failed at /tmp/tmpntezmofo.jl:45\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [0, 3, 2, 3, 5, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntezmofo.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntezmofo.jl:42\ntest set: Error\
    \ During Test at /tmp/tmpntezmofo.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpntezmofo.jl:32\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979047
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h5ywom7.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9h5ywom7.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h5ywom7.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9h5ywom7.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        vec = [0, 3, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(vec, 1 + i /\
    \ 2)\n            else\n                push!(vec, vec[i - 1] + vec[i - 2] + vec[i\
    \ + 1])\n            end\n        end\n        return vec\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp4pf8xofr.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp4pf8xofr.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4pf8xofr.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4pf8xofr.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4pf8xofr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4pf8xofr.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4pf8xofr.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4pf8xofr.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4pf8xofr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4pf8xofr.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4pf8xofr.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4pf8xofr.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4pf8xofr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4pf8xofr.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n     \
    \       end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqcsbcpwz.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpqcsbcpwz.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqcsbcpwz.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcsbcpwz.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcsbcpwz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqcsbcpwz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqcsbcpwz.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcsbcpwz.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcsbcpwz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqcsbcpwz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqcsbcpwz.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcsbcpwz.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcsbcpwz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqcsbcpwz.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        tri = [0, 1, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1 + i /\
    \ 2)\n            else\n                push!(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n            end\n        end\n        return tri\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp50z4swt6.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp50z4swt6.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [3]\n    elseif\
    \ n == 2\n        return [3, 8]\n    else\n        a = [3, 8, 21]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp3j6tn3me.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp3j6tn3me.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3j6tn3me.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3j6tn3me.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3j6tn3me.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp3j6tn3me.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3j6tn3me.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3j6tn3me.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3j6tn3me.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp3j6tn3me.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3j6tn3me.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3j6tn3me.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3j6tn3me.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp3j6tn3me.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n        end\n\
    \        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprq6inb3b.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprq6inb3b.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    tri\
    \ = zeros(Int64, n + 1)\n    tri[1] = 3\n    for i in 2:n + 1\n        if i %\
    \ 2 == 0\n            tri[i] = 1 + i / 2\n        else\n            tri[i] = tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1]\n        end\n    end\n    return tri\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpr115cqzd.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpr115cqzd.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [3, 2, 5, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr115cqzd.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr115cqzd.jl:32\ntest set: Error\
    \ During Test at /tmp/tmpr115cqzd.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr115cqzd.jl:23\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr115cqzd.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr115cqzd.jl:32\ntest set:\
    \ Test Failed at /tmp/tmpr115cqzd.jl:35\n  Expression: candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n   Evaluated: [3, 2, 5, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr115cqzd.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr115cqzd.jl:32\ntest set: Error\
    \ During Test at /tmp/tmpr115cqzd.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 7-element\
    \ Vector{Int64} at index [8]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr115cqzd.jl:23\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /t"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        a = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9t60xu96.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9t60xu96.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        res = [0, 3, 2]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(res, 1 + i /\
    \ 2)\n            else\n                push!(res, res[i - 1] + res[i - 2] + res[i\
    \ + 1])\n            end\n        end\n        return res\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmphzh8o3n3.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmphzh8o3n3.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphzh8o3n3.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphzh8o3n3.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphzh8o3n3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphzh8o3n3.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphzh8o3n3.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphzh8o3n3.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphzh8o3n3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphzh8o3n3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphzh8o3n3.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphzh8o3n3.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphzh8o3n3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphzh8o3n3.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(v, v[i - 1] + v[i - 2] + v[i - 3])\n        end\n\
    \        return v\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpeo1zhvc8.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpeo1zhvc8.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpeo1zhvc8.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeo1zhvc8.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeo1zhvc8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeo1zhvc8.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpeo1zhvc8.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeo1zhvc8.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeo1zhvc8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeo1zhvc8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpeo1zhvc8.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeo1zhvc8.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeo1zhvc8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeo1zhvc8.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        return [0, 1, 1] * vcat(ones(n\
    \ - 2), zeros(2)) + [0, 0, 1] * vcat(zeros(n - 2), ones(2))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_95t9080.jl:32\n  Test threw
    exception\n  Expression: candidate(3) == [1, 3, 2, 8]\n  MethodError: no method
    matching *(::Vector{Int64}, ::Vector{Float64})\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::StridedMatrix{T},
    ::StridedVector{S}) where {T<:Union{Float32, Float64, ComplexF32, ComplexF64},
    S<:Real} at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\n    *(::StridedVecOrMat,
    !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\n    ...\n  Stacktrace:\n   [1]
    tri(n::Int64)\n     @ Main /tmp/tmp_95t9080.jl:24\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_95t9080.jl:32 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_95t9080.jl:31\n'''
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        a = [0, 3, 8]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp7d6_b7xb.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp7d6_b7xb.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(v, v[i - 1] + v[i - 2] + v[i - 3])\n        end\n\
    \        return v\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpeo1zhvc8.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpeo1zhvc8.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpeo1zhvc8.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeo1zhvc8.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeo1zhvc8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeo1zhvc8.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpeo1zhvc8.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeo1zhvc8.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeo1zhvc8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeo1zhvc8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpeo1zhvc8.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeo1zhvc8.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeo1zhvc8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpeo1zhvc8.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n        end\n\
    \        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprq6inb3b.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprq6inb3b.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h5ywom7.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9h5ywom7.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        a = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9t60xu96.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9t60xu96.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n        end\n\
    \        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprq6inb3b.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmprq6inb3b.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprq6inb3b.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq6inb3b.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq6inb3b.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprq6inb3b.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 3]\n    else\n        a = [0, 3, 3]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpf9eztmwi.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpf9eztmwi.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf9eztmwi.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9eztmwi.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9eztmwi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf9eztmwi.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf9eztmwi.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9eztmwi.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9eztmwi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf9eztmwi.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpf9eztmwi.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf9eztmwi.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf9eztmwi.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf9eztmwi.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n     \
    \       end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqcsbcpwz.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpqcsbcpwz.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqcsbcpwz.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcsbcpwz.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcsbcpwz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqcsbcpwz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqcsbcpwz.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcsbcpwz.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcsbcpwz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqcsbcpwz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqcsbcpwz.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqcsbcpwz.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqcsbcpwz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqcsbcpwz.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        vec = [0, 1, 1]\n      \
    \  for i in 3:n\n            push!(vec, vec[i - 1] + vec[i - 2] + vec[i - 3])\n\
    \        end\n        return vec\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfckc5nnc.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpfckc5nnc.jl:36\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfckc5nnc.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfckc5nnc.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfckc5nnc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpfckc5nnc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfckc5nnc.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfckc5nnc.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfckc5nnc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpfckc5nnc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfckc5nnc.jl:26\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfckc5nnc.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfckc5nnc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpfckc5nnc.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        a = [0, 3, 8]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp7d6_b7xb.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp7d6_b7xb.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 1\n        a[3] = 1\n        for i in 4:n +\
    \ 1\n            a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5zyijl0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpw5zyijl0.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979042
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        a = [0, 3, 8]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp7d6_b7xb.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp7d6_b7xb.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7d6_b7xb.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7d6_b7xb.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7d6_b7xb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7d6_b7xb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        tri_vec = [0, 3, 1]\n  \
    \      for i in 3:n\n            if i % 2 == 0\n                push!(tri_vec,\
    \ 1 + i / 2)\n            else\n                push!(tri_vec, tri_vec[i - 1]\
    \ + tri_vec[i - 2] + tri_vec[i + 1])\n            end\n        end\n        return\
    \ tri_vec\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpiroq1bjt.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpiroq1bjt.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpiroq1bjt.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiroq1bjt.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiroq1bjt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpiroq1bjt.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpiroq1bjt.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiroq1bjt.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiroq1bjt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpiroq1bjt.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpiroq1bjt.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiroq1bjt.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiroq1bjt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpiroq1bjt.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 1\n        a[3] = 1\n        for i in 4:n +\
    \ 1\n            a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5zyijl0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpw5zyijl0.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979042
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        a = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9t60xu96.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9t60xu96.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        tri = [0, 1, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1 + i /\
    \ 2)\n            else\n                push!(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n            end\n        end\n        return tri\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp50z4swt6.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp50z4swt6.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 1\n        a[3] = 1\n        for i in 4:n +\
    \ 1\n            a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5zyijl0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpw5zyijl0.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979042
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h5ywom7.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9h5ywom7.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        x = zeros(Int64, n+1)\n\
    \        x[1] = 0\n        x[2] = 3\n        x[3] = 2\n        for i in 4:n+1\n\
    \            if i % 2 == 0\n                x[i] = 1 + i / 2\n            else\n\
    \                x[i] = x[i-1] + x[i-2] + x[i-3]\n            end\n        end\n\
    \        return x\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpni_8thh9.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpni_8thh9.jl:43\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 3, 2, 3] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_8thh9.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_8thh9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpni_8thh9.jl:44\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 3, 2, 3, 8] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_8thh9.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_8thh9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpni_8thh9.jl:45\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 3, 2, 3, 8, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_8thh9.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_8thh9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpni_8thh9.jl:46\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 3, 2, 3, 8, 4, 15] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpni_8thh9.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpni_8thh9.jl:42\ntest set: Test\
    \ Failed at /tmp/tmpni_8thh9.jl:47\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 3, 2, 3, 8, 4,"
  timestamp: 1659979047
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        seq = [0, 3, 2]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1 + i /\
    \ 2)\n            else\n                push!(seq, seq[i - 1] + seq[i - 2] + seq[i\
    \ + 1])\n            end\n        end\n        return seq\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwzkdjpgj.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpwzkdjpgj.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwzkdjpgj.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwzkdjpgj.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwzkdjpgj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwzkdjpgj.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwzkdjpgj.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwzkdjpgj.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwzkdjpgj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwzkdjpgj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwzkdjpgj.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwzkdjpgj.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwzkdjpgj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwzkdjpgj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        v = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxpwe1j63.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxpwe1j63.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxpwe1j63.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpwe1j63.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpwe1j63.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxpwe1j63.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        a = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9t60xu96.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9t60xu96.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        x = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h5ywom7.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9h5ywom7.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9h5ywom7.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9h5ywom7.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9h5ywom7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9h5ywom7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 1\n        a[3] = 1\n        for i in 4:n +\
    \ 1\n            a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5zyijl0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpw5zyijl0.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979042
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 8]\n    else\n        x = [0, 3, 8]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(x, 1 + i / 2)\n \
    \           else\n                push!(x, x[i - 1] + x[i - 2] + x[i + 1])\n \
    \           end\n        end\n        return x\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp47g4jq0m.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp47g4jq0m.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp47g4jq0m.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp47g4jq0m.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp47g4jq0m.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp47g4jq0m.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp47g4jq0m.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp47g4jq0m.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp47g4jq0m.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp47g4jq0m.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp47g4jq0m.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp47g4jq0m.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp47g4jq0m.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp47g4jq0m.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979051
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 1\n        a[3] = 1\n        for i in 4:n +\
    \ 1\n            a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5zyijl0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpw5zyijl0.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979042
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        result = [0, 3, 1]\n   \
    \     for i in 3:n\n            if i % 2 == 0\n                push!(result, 1\
    \ + i / 2)\n            else\n                push!(result, result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n            end\n        end\n        return result\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_quvyktd.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp_quvyktd.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_quvyktd.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_quvyktd.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_quvyktd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_quvyktd.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_quvyktd.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_quvyktd.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_quvyktd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_quvyktd.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_quvyktd.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_quvyktd.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_quvyktd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_quvyktd.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979049
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = zeros(Int64, n + 1)\n\
    \        a[1] = 0\n        a[2] = 1\n        a[3] = 1\n        for i in 4:n +\
    \ 1\n            a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n        end\n        return\
    \ a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw5zyijl0.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpw5zyijl0.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [0, 1, 1, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [0, 1, 1, 2, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [0, 1, 1, 2, 4, 7] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [0, 1, 1, 2, 4, 7, 13] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw5zyijl0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw5zyijl0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpw5zyijl0.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [0, 1, 1, 2, 4, 7,"
  timestamp: 1659979042
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        a = [0, 1, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmph232lk8k.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmph232lk8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmph232lk8k.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmph232lk8k.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph232lk8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph232lk8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        a = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9t60xu96.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9t60xu96.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 1]\n    elseif\
    \ n == 2\n        return [0, 1, 1]\n    else\n        tri = [0, 1, 1]\n      \
    \  for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1 + i /\
    \ 2)\n            else\n                push!(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n            end\n        end\n        return tri\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp50z4swt6.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp50z4swt6.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp50z4swt6.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp50z4swt6.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp50z4swt6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50z4swt6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        a = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpfdtl3h_d.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfdtl3h_d.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfdtl3h_d.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfdtl3h_d.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfdtl3h_d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfdtl3h_d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n     \
    \       end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpgdk4s7e2.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpgdk4s7e2.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgdk4s7e2.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgdk4s7e2.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgdk4s7e2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgdk4s7e2.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgdk4s7e2.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgdk4s7e2.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgdk4s7e2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgdk4s7e2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgdk4s7e2.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgdk4s7e2.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgdk4s7e2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgdk4s7e2.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979051
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 1]\n    else\n        a = [0, 3, 1]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(a, 1 + i / 2)\n \
    \           else\n                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n \
    \           end\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9t60xu96.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9t60xu96.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9t60xu96.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9t60xu96.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9t60xu96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9t60xu96.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979048
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n        \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n    if\
    \ n == 0\n        return [0]\n    elseif n == 1\n        return [0, 3]\n    elseif\
    \ n == 2\n        return [0, 3, 2]\n    else\n        v = [0, 3, 2]\n        for\
    \ i in 3:n\n            if i % 2 == 0\n                push!(v, 1 + i / 2)\n \
    \           else\n                push!(v, v[i - 1] + v[i - 2] + v[i + 1])\n \
    \           end\n        end\n        return v\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsmg_m7u_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpsmg_m7u_.jl:40\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsmg_m7u_.jl:29\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsmg_m7u_.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsmg_m7u_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsmg_m7u_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2"
  timestamp: 1659979044
