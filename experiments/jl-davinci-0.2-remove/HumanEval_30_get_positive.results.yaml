language: jl
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [i for i in\
    \ l if i > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [i for i in\
    \ l if i > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x>0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return l[l .> 0]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return l[l .> 0]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return l[l .> 0]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return l[l .> 0]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t@test(candidate([-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1, -2]) == Vector{Int64}([]))\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [i for i in\
    \ l if i > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [i for i in\
    \ l if i > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [i for i in\
    \ l if i > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return filter(x ->\
    \ x > 0, l)\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\t\
    @test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [i for i in\
    \ l if i > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
- exit_code: 0
  program: "\"\"\"Return only positive numbers in the list.\n            \"\"\"\n\
    function get_positive(l::Vector{Int64})::Vector{Int64} \n    return [x for x in\
    \ l if x > 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_positive;\n\
    \t@test(candidate([-1, -2, 4, 5, 6]) == [4, 5, 6])\n\t@test(candidate([5, 3, -5,\
    \ 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\n\t@test(candidate([-1,\
    \ -2]) == Vector{Int64}([]))\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747187
