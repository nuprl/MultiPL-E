language: jl
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppvuorh3f.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppvuorh3f.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvuorh3f.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppvuorh3f.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748241
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppvuorh3f.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppvuorh3f.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvuorh3f.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppvuorh3f.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748241
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n > 1\n   \
    \     for i in 2:n\n            if n % i == 0\n                push!(factors,\
    \ i)\n                n = n / i\n                break\n            end\n    \
    \    end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    d = 2\n    while\
    \ n > 1\n        while n % d == 0\n            push!(factors, d)\n           \
    \ n /= d\n        end\n        d += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppvuorh3f.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppvuorh3f.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvuorh3f.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppvuorh3f.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748241
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n == 1\n        return [1]\n   \
    \ end\n    factors = []\n    while n % 2 == 0\n        push!(factors, 2)\n   \
    \     n = n / 2\n    end\n    for i in 3:2:floor(Int64, sqrt(n))\n        while\
    \ n % i == 0\n            push!(factors, i)\n            n = n / i\n        end\n\
    \    end\n    if n > 2\n        push!(factors, n)\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n < 2\n        return []\n    end\n\
    \    factors = []\n    while n % 2 == 0\n        push!(factors, 2)\n        n\
    \ = n / 2\n    end\n    i = 3\n    while i <= sqrt(n)\n        while n % i ==\
    \ 0\n            push!(factors, i)\n            n = n / i\n        end\n     \
    \   i += 2\n    end\n    if n > 2\n        push!(factors, n)\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      if n % i == 0\n            push!(factors, i)\n            n = n / i\n \
    \           i = i - 1\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptqqu7pub.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmptqqu7pub.jl:22\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:23\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:25\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:26\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:27\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        if n % i == 0\n            push!(factors, i)\n            n =\
    \ n / i\n        else\n            i += 1\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n == 1\n        return [1]\n   \
    \ end\n    factors = []\n    for i in 2:n\n        if n % i == 0\n           \
    \ push!(factors, i)\n            n = n / i\n            i = i - 1\n        end\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpal8xp82w.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpal8xp82w.jl:25\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpal8xp82w.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpal8xp82w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpal8xp82w.jl:26\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpal8xp82w.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpal8xp82w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpal8xp82w.jl:28\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpal8xp82w.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpal8xp82w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpal8xp82w.jl:29\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpal8xp82w.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpal8xp82w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpal8xp82w.jl:30\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    factor = 2\n    while\
    \ n > 1\n        while n % factor == 0\n            push!(factors, factor)\n \
    \           n /= factor\n        end\n        factor += 1\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n == 1\n        return [1]\n   \
    \ end\n    factors = []\n    for i in 2:n\n        if n % i == 0\n           \
    \ push!(factors, i)\n            n = n / i\n            i = 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu16u339m.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpu16u339m.jl:25\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu16u339m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu16u339m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu16u339m.jl:26\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu16u339m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu16u339m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu16u339m.jl:28\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu16u339m.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu16u339m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu16u339m.jl:29\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu16u339m.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu16u339m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu16u339m.jl:30\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppvuorh3f.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppvuorh3f.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvuorh3f.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppvuorh3f.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748241
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n > 1\n   \
    \     for i in 2:n\n            if n % i == 0\n                push!(factors,\
    \ i)\n                n = n / i\n                break\n            end\n    \
    \    end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    if n == 1\n     \
    \   return [1]\n    end\n    for i in 2:n\n        if n % i == 0\n           \
    \ push!(factors, i)\n            n = n / i\n            i = i - 1\n        end\n\
    \    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphk3f6x_h.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmphk3f6x_h.jl:25\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3f6x_h.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3f6x_h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphk3f6x_h.jl:26\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3f6x_h.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3f6x_h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphk3f6x_h.jl:28\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3f6x_h.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3f6x_h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphk3f6x_h.jl:29\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphk3f6x_h.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphk3f6x_h.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphk3f6x_h.jl:30\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748240
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE HERE\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp30pt6215.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmp30pt6215.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp30pt6215.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp30pt6215.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp30pt6215.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp30pt6215.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp30pt6215.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp30pt6215.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748242
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\n    factors = []\n\
    \    for i in 2:n\n        if n%i == 0\n            push!(factors, i)\n      \
    \      n = n/i\n            i = i-1\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx0bm7i6i.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpx0bm7i6i.jl:23\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0bm7i6i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0bm7i6i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx0bm7i6i.jl:24\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0bm7i6i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0bm7i6i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx0bm7i6i.jl:26\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0bm7i6i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0bm7i6i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx0bm7i6i.jl:27\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx0bm7i6i.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx0bm7i6i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx0bm7i6i.jl:28\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i = 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = Vector{Int64}()\n    i =\
    \ 2\n    while n > 1\n        while n % i == 0\n            push!(factors, i)\n\
    \            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = Int64[]\n    for i in 2:n\n\
    \        while n % i == 0\n            push!(factors, i)\n            n /= i\n\
    \        end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE HERE\n    factors = []\n\
    \    while n % 2 == 0\n        push!(factors, 2)\n        n = n / 2\n    end\n\
    \    for i in 3:2:sqrt(n)\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # Your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6md5icki.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmp6md5icki.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6md5icki.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6md5icki.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6md5icki.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp6md5icki.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6md5icki.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6md5icki.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748242
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # Your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6md5icki.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmp6md5icki.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6md5icki.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6md5icki.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6md5icki.jl:12\ntest set:\
    \ Error During Test at /tmp/tmp6md5icki.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6md5icki.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6md5icki.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748242
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE HERE\n    factors = []\n\
    \    i = 2\n    while n > 1\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n        i += 1\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n == 1\n        return [1]\n   \
    \ end\n    factors = []\n    while n % 2 == 0\n        push!(factors, 2)\n   \
    \     n = n / 2\n    end\n    for i in 3:2:floor(Int64, sqrt(n))\n        while\
    \ n % i == 0\n            push!(factors, i)\n            n = n / i\n        end\n\
    \    end\n    if n > 2\n        push!(factors, n)\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i = 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i = 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n < 2\n        return [n]\n    end\n\
    \    factors = []\n    for i in 2:n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      if n % i == 0\n            push!(factors, i)\n            n = n / i\n \
    \           i = i - 1\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptqqu7pub.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmptqqu7pub.jl:22\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:23\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:25\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:26\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:27\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n%2 == 0\n\
    \        push!(factors, 2)\n        n = n/2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n%i == 0\n            push!(factors, i)\n          \
    \  n = n/i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n  \
    \  end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n > 1\n   \
    \     for i in 2:n\n            if n % i == 0\n                push!(factors,\
    \ i)\n                n = n / i\n                break\n            end\n    \
    \    end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppvuorh3f.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppvuorh3f.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvuorh3f.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppvuorh3f.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748241
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    \"\"\" Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n    Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n    Input number should be equal to the product of all factors\n\
    \                \"\"\"\n    if n == 1\n        return [1]\n    end\n    factors\
    \ = []\n    for i in 2:n\n        if n % i == 0\n            push!(factors, i)\n\
    \            n = n / i\n            i = i - 1\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo1x6tg5_.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpo1x6tg5_.jl:29\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1x6tg5_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1x6tg5_.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpo1x6tg5_.jl:30\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1x6tg5_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1x6tg5_.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpo1x6tg5_.jl:32\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1x6tg5_.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1x6tg5_.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpo1x6tg5_.jl:33\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo1x6tg5_.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo1x6tg5_.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpo1x6tg5_.jl:34\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      if n%i == 0\n            push!(factors, i)\n            n = n/i\n     \
    \       i = 1\n        end\n    end\n    return factors\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn2bslcsx.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpn2bslcsx.jl:22\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2bslcsx.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2bslcsx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpn2bslcsx.jl:23\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2bslcsx.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2bslcsx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpn2bslcsx.jl:25\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2bslcsx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2bslcsx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpn2bslcsx.jl:26\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn2bslcsx.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn2bslcsx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpn2bslcsx.jl:27\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748241
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n < 2\n        return []\n    end\n\
    \    factors = []\n    for i in 2:n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n < 2\n        return []\n    end\n\
    \    factors = []\n    for i in 2:n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\n    return []\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9jlfb0e7.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmp9jlfb0e7.jl:14\n  Expression: candidate(2)\
    \ == [2]\n   Evaluated: Int64[] == [2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9jlfb0e7.jl:14 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9jlfb0e7.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp9jlfb0e7.jl:15\n  Expression: candidate(4) == [2, 2]\n   Evaluated:\
    \ Int64[] == [2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9jlfb0e7.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9jlfb0e7.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp9jlfb0e7.jl:16\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: Int64[] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9jlfb0e7.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9jlfb0e7.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp9jlfb0e7.jl:17\n  Expression: candidate(57) == [3, 19]\n \
    \  Evaluated: Int64[] == [3, 19]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9jlfb0e7.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9jlfb0e7.jl:13\ntest set: Test\
    \ Failed at /tmp/tmp9jlfb0e7.jl:18\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: Int64[] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/"
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ i <= n\n        if n % i == 0\n            push!(factors, i)\n            n\
    \ = n / i\n        else\n            i += 1\n        end\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i = 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # YOUR CODE HERE\n    factors = []\n\
    \    for i in 2:n\n        if n%i == 0\n            push!(factors, i)\n      \
    \      n = n/i\n            i = i-1\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpp17fzgvl.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpp17fzgvl.jl:23\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp17fzgvl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp17fzgvl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp17fzgvl.jl:24\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp17fzgvl.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp17fzgvl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp17fzgvl.jl:26\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp17fzgvl.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp17fzgvl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp17fzgvl.jl:27\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp17fzgvl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp17fzgvl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp17fzgvl.jl:28\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748241
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n == 1\n        return [1]\n   \
    \ end\n    factors = []\n    for i in 2:n\n        if n % i == 0\n           \
    \ push!(factors, i)\n            n = n / i\n            i = 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu16u339m.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpu16u339m.jl:25\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu16u339m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu16u339m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu16u339m.jl:26\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu16u339m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu16u339m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu16u339m.jl:28\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu16u339m.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu16u339m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu16u339m.jl:29\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu16u339m.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu16u339m.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu16u339m.jl:30\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        if n % i == 0\n            push!(factors, i)\n            n =\
    \ n / i\n        else\n            i += 1\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n%2 == 0\n\
    \        push!(factors, 2)\n        n = n/2\n    end\n    for i = 3:2:floor(sqrt(n))\n\
    \        while n%i == 0\n            push!(factors, i)\n            n = n/i\n\
    \        end\n    end\n    if n > 2\n        push!(factors, n)\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      if n % i == 0\n            push!(factors, i)\n            n = n / i\n \
    \           i = i - 1\n        end\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptqqu7pub.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmptqqu7pub.jl:22\n  Expression: candidate(4)\
    \ == [2, 2]\n   Evaluated: [2] == [2, 2]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:23\n  Expression: candidate(8) == [2, 2, 2]\n\
    \   Evaluated: [2, 4] == [2, 2, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:25\n  Expression: candidate(3249) == [3, 3, 19,\
    \ 19]\n   Evaluated: [3, 19, 57] == [3, 3, 19, 19]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:26\n  Expression: candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19]\n   Evaluated: [3, 9, 19, 361] == [3, 3, 3, 19, 19, 19]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptqqu7pub.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptqqu7pub.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptqqu7pub.jl:27\n  Expression: candidate(20577) == [3, 19,\
    \ 19, 19]\n   Evaluated: [3, 19, 361] == [3, 19, 19, 19]\nStacktrace:\n "
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i = 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        if n % i == 0\n            push!(factors, i)\n            n =\
    \ n / i\n        else\n            i += 1\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        if n % i == 0\n            push!(factors, i)\n            n =\
    \ n / i\n        else\n            i += 1\n        end\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n == 1\n        return [1]\n   \
    \ end\n    factors = []\n    i = 2\n    while n > 1\n        while n % i == 0\n\
    \            push!(factors, i)\n            n /= i\n        end\n        i +=\
    \ 1\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n < 2\n        return []\n    end\n\
    \    factors = []\n    while n % 2 == 0\n        push!(factors, 2)\n        n\
    \ = n / 2\n    end\n    i = 3\n    while i <= sqrt(n)\n        while n % i ==\
    \ 0\n            push!(factors, i)\n            n = n / i\n        end\n     \
    \   i += 2\n    end\n    if n > 2\n        push!(factors, n)\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n < 2\n        return []\n    end\n\
    \    factors = []\n    for i in 2:n\n        while n % i == 0\n            push!(factors,\
    \ i)\n            n /= i\n        end\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n < 2\n        return [n]\n    end\n\
    \    factors = []\n    while n % 2 == 0\n        push!(factors, 2)\n        n\
    \ = n / 2\n    end\n    for i in 3:2:floor(Int64, sqrt(n))\n        while n %\
    \ i == 0\n            push!(factors, i)\n            n = n / i\n        end\n\
    \    end\n    if n > 2\n        push!(factors, n)\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i = 2:n\n   \
    \     while n % i == 0\n            push!(factors, i)\n            n /= i\n  \
    \      end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    if n < 2\n        return []\n    end\n\
    \    factors = []\n    while n % 2 == 0\n        push!(factors, 2)\n        n\
    \ = n / 2\n    end\n    for i in 3:2:floor(Int64, sqrt(n))\n        while n %\
    \ i == 0\n            push!(factors, i)\n            n = n / i\n        end\n\
    \    end\n    if n > 2\n        push!(factors, n)\n    end\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = Int64[]\n    while n % 2\
    \ == 0\n        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while\
    \ i <= sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n    \
    \        n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppvuorh3f.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppvuorh3f.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvuorh3f.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppvuorh3f.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748241
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = Int64[]\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = Int64[]\n    while n % 2\
    \ == 0\n        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppvuorh3f.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppvuorh3f.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvuorh3f.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppvuorh3f.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748241
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\n    factors = []\n\
    \    i = 2\n    while n > 1\n        if n % i == 0\n            push!(factors,\
    \ i)\n            n = n / i\n        else\n            i += 1\n        end\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:floor(Int64,\
    \ sqrt(n))\n        while n % i == 0\n            push!(factors, i)\n        \
    \    n /= i\n        end\n    end\n    if n > 2\n        push!(factors, n)\n \
    \   end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t\
    @test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    i = 2\n    while\
    \ n > 1\n        while n % i == 0\n            push!(factors, i)\n           \
    \ n /= i\n        end\n        i += 1\n    end\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    # your code here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppvuorh3f.jl:10

    '
  stdout: "test set: Error During Test at /tmp/tmppvuorh3f.jl:13\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvuorh3f.jl:12\ntest set:\
    \ Error During Test at /tmp/tmppvuorh3f.jl:14\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmppvuorh3f.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvuorh3f.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cent"
  timestamp: 1659748241
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    for i in 3:2:sqrt(n)\n\
    \        while n % i == 0\n            push!(factors, i)\n            n /= i\n\
    \        end\n    end\n    if n > 2\n        push!(factors, n)\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n % 2 == 0\n\
    \        push!(factors, 2)\n        n /= 2\n    end\n    i = 3\n    while i <=\
    \ sqrt(n)\n        while n % i == 0\n            push!(factors, i)\n         \
    \   n /= i\n        end\n        i += 2\n    end\n    if n > 2\n        push!(factors,\
    \ n)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    for i in 2:n\n  \
    \      while n % i == 0\n            push!(factors, i)\n            n /= i\n \
    \       end\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748238
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    factors = []\n    while n%2 == 0\n\
    \        push!(factors, 2)\n        n = n/2\n    end\n    for i in 3:2:sqrt(n)\n\
    \        while n%i == 0\n            push!(factors, i)\n            n = n/i\n\
    \        end\n    end\n    if n > 2\n        push!(factors, n)\n    end\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748240
- exit_code: 0
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n                \"\"\"\nfunction\
    \ factorize(n::Int64)::Vector{Int64} \n    prime_factors = []\n    i = 2\n   \
    \ while n > 1\n        while n % i == 0\n            push!(prime_factors, i)\n\
    \            n /= i\n        end\n        i += 1\n    end\n    return prime_factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659748239
