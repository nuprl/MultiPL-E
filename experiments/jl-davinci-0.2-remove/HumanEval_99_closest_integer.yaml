name: HumanEval_99_closest_integer
language: jl
prompt: "\"\"\"\n    Create a function that takes a value (string) representing a\
  \ number\n    and returns the closest integer to it. If the number is equidistant\n\
  \    from two integers, round it away from zero.\n\n    Examples\n        \n   \
  \ Note:\n    Rounding away from zero means that if the given number is equidistant\n\
  \    from two integers, the one you should return is the one that is the\n    farthest\
  \ from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"\
  -14.5\") should return -15.\n    \"\"\"\nfunction closest_integer(value::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = closest_integer;\n\t@test(candidate(\"\
  10\") == 10)\n\t@test(candidate(\"14.5\") == 15)\n\t@test(candidate(\"-15.5\") ==\
  \ -16)\n\t@test(candidate(\"15.3\") == 15)\n\t@test(candidate(\"0\") == 0)\nend\n"
completions: ["    value = parse(Float64, value)\n    if value - floor(value) == 0.5\n\
    \        if value > 0\n            return ceil(value)\n        else\n        \
    \    return floor(value)\n        end\n    else\n        return round(value)\n\
    \    end\nend", "    num = parse(Float64, value)\n    if num - floor(num) < 0.5\n\
    \        return floor(num)\n    else\n        return ceil(num)\n    end\nend",
  "    value = parse(Float64, value)\n    if value == trunc(value)\n        return\
    \ trunc(value)\n    elseif value > trunc(value)\n        return trunc(value) +\
    \ 1\n    else\n        return trunc(value) - 1\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ >= 0\n        return ceil(value)\n    else\n        return floor(value)\n  \
    \  end\nend", "    value = parse(Float64, value)\n    if value > 0\n        return\
    \ ceil(value)\n    else\n        return floor(value)\n    end\nend", "    value\
    \ = parse(Float64, value)\n    return round(Int64, value)\nend", "    x = parse(Float64,\
    \ value)\n    if x < 0\n        return ceil(x)\n    else\n        return floor(x)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value < 0\n       \
    \ return floor(value)\n    else\n        return ceil(value)\n    end\nend", " \
    \   num = parse(Float64, value)\n    if num > 0\n        return ceil(num)\n  \
    \  else\n        return floor(num)\n    end\nend", "    # convert the value to\
    \ a float\n    value = parse(Float64, value)\n    # if the value is an integer,\
    \ return it\n    if isinteger(value)\n        return value\n    else\n       \
    \ # if the value is positive, return the next integer\n        if value > 0\n\
    \            return ceil(value)\n        else\n            # if the value is negative,\
    \ return the previous integer\n            return floor(value)\n        end\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value < 0\n       \
    \ return floor(value)\n    else\n        return ceil(value)\n    end\nend", " \
    \   return round(parse(Float64, value))\nend", "    return parse(Int64, value)\n\
    end", "    value = parse(Float64, value)\n    if value < 0\n        value = ceil(value)\n\
    \    else\n        value = floor(value)\n    end\n    return value\nend", "  \
    \  # convert string to float\n    value = parse(Float64, value)\n    # get the\
    \ floor of the value\n    floor = floor(value)\n    # get the ceiling of the value\n\
    \    ceiling = ceil(value)\n    # if the value is equidistant from two integers,\
    \ round it away from zero\n    if value - floor == ceiling - value\n        if\
    \ floor < 0\n            return floor\n        else\n            return ceiling\n\
    \        end\n    end\n    # if the value is closer to the floor, return the floor\n\
    \    if value - floor < ceiling - value\n        return floor\n    else\n    \
    \    return ceiling\n    end\nend", "    value = parse(Float64, value)\n    if\
    \ value > 0\n        return ceil(value)\n    else\n        return floor(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value >= 0\n      \
    \  return ceil(value)\n    else\n        return floor(value)\n    end\nend", " \
    \   return parse(Int64, value)\nend", "    value = parse(Float64, value)\n   \
    \ if value == round(value)\n        return round(value)\n    elseif value > 0\n\
    \        return round(value) + 1\n    else\n        return round(value) - 1\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value > 0\n       \
    \ return ceil(value)\n    else\n        return floor(value)\n    end\nend", " \
    \   value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value - floor(value) < 0.5\n        return floor(value)\n   \
    \ else\n        return ceil(value)\n    end\nend", "    num = parse(Float64, value)\n\
    \    if num < 0\n        return floor(num)\n    else\n        return ceil(num)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value > 0\n       \
    \ return ceil(value)\n    else\n        return floor(value)\n    end\nend", " \
    \   value = parse(Float64, value)\n    if value - trunc(value) < 0.5\n       \
    \ return trunc(value)\n    else\n        return trunc(value) + 1\n    end\nend",
  "    value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value - floor(value) >= 0.5\n        return ceil(value)\n   \
    \ else\n        return floor(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value >= 0\n        return Int64(ceil(value))\n    else\n   \
    \     return Int64(floor(value))\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value >= 0\n        return ceil(value)\n    else\n        return floor(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value >= 0\n      \
    \  return ceil(value)\n    else\n        return floor(value)\n    end\nend", " \
    \   value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    # convert value to\
    \ Float64\n    value = parse(Float64, value)\n    # round value to the nearest\
    \ integer\n    value = round(value)\n    # convert value to Int64\n    value =\
    \ parse(Int64, value)\n    return value\nend", "    value = parse(Float64, value)\n\
    \    if value > 0\n        return ceil(value)\n    elseif value < 0\n        return\
    \ floor(value)\n    else\n        return 0\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        value = ceil(value)\n    else\n        value\
    \ = floor(value)\n    end\n    return value\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ < 0\n        return floor(value)\n    else\n        return ceil(value)\n   \
    \ end\nend", "    value = parse(Float64, value)\n    if value >= 0\n        return\
    \ ceil(value)\n    else\n        return floor(value)\n    end\nend", "    value\
    \ = parse(Float64, value)\n    if value < 0\n        value = ceil(value)\n   \
    \ else\n        value = floor(value)\n    end\n    return value\nend", "    value\
    \ = parse(Float64, value)\n    if value > 0\n        return ceil(value)\n    elseif\
    \ value < 0\n        return floor(value)\n    else\n        return 0\n    end\n\
    end", "    # convert to Float64\n    value = parse(Float64, value)\n    # get\
    \ the floor and ceiling\n    floor = floor(value)\n    ceiling = ceil(value)\n\
    \    # check if the value is equidistant from two integers\n    if floor == ceiling\n\
    \        # if so, return the one that is the farthest from zero\n        if value\
    \ < 0\n            return floor\n        else\n            return ceiling\n  \
    \      end\n    else\n        # if not, return the closest integer\n        if\
    \ abs(value - floor) < abs(value - ceiling)\n            return floor\n      \
    \  else\n            return ceiling\n        end\n    end\nend", "    value =\
    \ parse(Float64, value)\n    if value < 0\n        value = ceil(value)\n    else\n\
    \        value = floor(value)\n    end\n    return value\nend", "    value = parse(Float64,\
    \ value)\n    if value > 0\n        return ceil(value)\n    else\n        return\
    \ floor(value)\n    end\nend", "    value = parse(Float64, value)\n    return\
    \ round(value)\nend", "    value = parse(Float64, value)\n    if value - trunc(value)\
    \ >= 0.5\n        return ceil(value)\n    else\n        return trunc(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value < 0\n       \
    \ return floor(value)\n    else\n        return ceil(value)\n    end\nend", " \
    \   value = parse(Float64, value)\n    if value < 0\n        value = ceil(value)\n\
    \    else\n        value = floor(value)\n    end\n    return value\nend", "  \
    \  value = parse(Float64, value)\n    if value == trunc(value)\n        return\
    \ trunc(value)\n    elseif value > trunc(value)\n        return trunc(value) +\
    \ 1\n    else\n        return trunc(value) - 1\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    n = parse(Float64, value)\n    if n < 0\n \
    \       return floor(n)\n    else\n        return ceil(n)\n    end\nend", "  \
    \  value = parse(Float64, value)\n    if value == floor(value)\n        return\
    \ floor(value)\n    elseif value > 0\n        return floor(value) + 1\n    else\n\
    \        return floor(value) - 1\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value < 0\n        return floor(value)\n    else\n        return ceil(value)\n\
    \    end\nend", "    # convert string to float\n    value = parse(Float64, value)\n\
    \    # round value to nearest integer\n    value = round(value)\n    # return\
    \ value as integer\n    return Int64(value)\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    return round(parse(Float64, value))\nend",
  "    value = parse(Float64, value)\n    if value == round(value)\n        return\
    \ round(value)\n    elseif value > 0\n        return ceil(value)\n    else\n \
    \       return floor(value)\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value - floor(value) == 0.5\n        if value > 0\n            return\
    \ ceil(value)\n        else\n            return floor(value)\n        end\n  \
    \  else\n        return round(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ == trunc(value)\n        return trunc(value)\n    elseif value > trunc(value)\n\
    \        return trunc(value) + 1\n    else\n        return trunc(value) - 1\n\
    \    end\nend", "    return parse(Int64, value)\nend", "    value = parse(Float64,\
    \ value)\n    if value - floor(value) == 0.5\n        if value > 0\n         \
    \   return ceil(value)\n        else\n            return floor(value)\n      \
    \  end\n    else\n        return round(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        value = ceil(value)\n    else\n        value\
    \ = floor(value)\n    end\n    return value\nend", "    value = parse(Float64,\
    \ value)\n    if value > 0\n        return ceil(value)\n    elseif value < 0\n\
    \        return floor(value)\n    else\n        return 0\n    end\nend", "   \
    \ value = parse(Float64, value)\n    if value - floor(value) == 0.5\n        if\
    \ value > 0\n            return ceil(value)\n        else\n            return\
    \ floor(value)\n        end\n    else\n        return round(value)\n    end\n\
    end", "    value = parse(Float64, value)\n    if value < 0\n        value = ceil(value)\n\
    \    else\n        value = floor(value)\n    end\n    return value\nend", "  \
    \  value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value > 0\n        return ceil(value)\n    elseif value < 0\n\
    \        return floor(value)\n    else\n        return 0\n    end\nend", "   \
    \ value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    # convert to float\n\
    \    value = parse(Float64, value)\n    # round to nearest integer\n    value\
    \ = round(value)\n    # convert back to integer\n    return parse(Int64, value)\n\
    end", "    # convert value to Float64\n    value = parse(Float64, value)\n   \
    \ # round value to nearest integer\n    value = round(value)\n    # return value\
    \ as Int64\n    return Int64(value)\nend", "    # convert the string to a float\n\
    \    value = parse(Float64, value)\n    # round the float to the nearest integer\n\
    \    return round(value)\nend", "    value = parse(Float64, value)\n    if value\
    \ > 0\n        return ceil(value)\n    elseif value < 0\n        return floor(value)\n\
    \    else\n        return 0\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value < 0\n        return floor(value)\n    else\n        return ceil(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value == trunc(value)\n\
    \        return trunc(value)\n    elseif value > trunc(value)\n        return\
    \ trunc(value) + 1\n    else\n        return trunc(value) - 1\n    end\nend",
  "    value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value == trunc(value)\n        return trunc(value)\n    elseif\
    \ value > trunc(value)\n        return trunc(value) + 1\n    else\n        return\
    \ trunc(value) - 1\n    end\nend", "    value = parse(Float64, value)\n    if\
    \ value == floor(value)\n        return floor(value)\n    elseif value > 0\n \
    \       return floor(value) + 1\n    else\n        return floor(value) - 1\n \
    \   end\nend", "    # convert string to float\n    value = parse(Float64, value)\n\
    \    # round float to nearest integer\n    value = round(value)\n    # convert\
    \ float to integer\n    value = Int64(value)\n    return value\nend", "    value\
    \ = parse(Float64, value)\n    if value < 0\n        return ceil(value)\n    else\n\
    \        return floor(value)\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value - floor(value) < 0.5\n        return floor(value)\n    else\n  \
    \      return ceil(value)\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value - floor(value) == 0.5\n        if value > 0\n            return\
    \ ceil(value)\n        else\n            return floor(value)\n        end\n  \
    \  else\n        return round(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ < 0\n        return floor(value)\n    else\n        return ceil(value)\n   \
    \ end\nend", "    value = parse(Float64, value)\n    if value > 0\n        return\
    \ ceil(value)\n    else\n        return floor(value)\n    end\nend", "    value\
    \ = parse(Float64, value)\n    if value < 0\n        return ceil(value)\n    else\n\
    \        return floor(value)\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value - trunc(value) < 0.5\n        return trunc(value)\n    else\n  \
    \      return trunc(value) + 1\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value < 0\n        return floor(value)\n    else\n        return ceil(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value == floor(value)\n\
    \        return floor(value)\n    elseif value > 0\n        return floor(value)\
    \ + 1\n    else\n        return floor(value) - 1\n    end\nend", "    value =\
    \ parse(Float64, value)\n    if value - floor(value) < 0.5\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ < 0\n        value = ceil(value)\n    else\n        value = floor(value)\n \
    \   end\n    return value\nend", "    value = parse(Float64, value)\n    return\
    \ round(value)\nend", "    value = parse(Float64, value)\n    if value < 0\n \
    \       return floor(value)\n    else\n        return ceil(value)\n    end\nend",
  "    value = parse(Float64, value)\n    if value < 0\n        value = ceil(value)\n\
    \    else\n        value = floor(value)\n    end\n    return value\nend", "  \
    \  # convert the string to a float\n    value = parse(Float64, value)\n    # round\
    \ the float to the nearest integer\n    value = round(value)\n    # convert the\
    \ float to an integer\n    value = Int64(value)\n    return value\nend", "   \
    \ if value[end] == '.'\n        value = value[1:end-1]\n    end\n    if value[1]\
    \ == '-'\n        value = value[2:end]\n        return -(round(parse(Float64,\
    \ value)))\n    else\n        return round(parse(Float64, value))\n    end\nend",
  "    value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value == floor(value)\n        return floor(value)\n    elseif\
    \ value > 0\n        return floor(value) + 1\n    else\n        return floor(value)\
    \ - 1\n    end\nend", "    return round(parse(Float64, value))\nend", "    num\
    \ = parse(Float64, value)\n    if num < 0\n        return floor(num)\n    else\n\
    \        return ceil(num)\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value < 0\n        return floor(value)\n    else\n        return ceil(value)\n\
    \    end\nend", "    x = parse(Float64, value)\n    if x > 0\n        return ceil(x)\n\
    \    else\n        return floor(x)\n    end\nend", "    x = parse(Float64, value)\n\
    \    if x >= 0\n        return round(Int64, x)\n    else\n        return round(Int64,\
    \ x-1)\n    end\nend", "    # convert string to float\n    value = parse(Float64,\
    \ value)\n    # convert float to int\n    value = Int64(value)\n    # check if\
    \ value is a float\n    if value != parse(Float64, value)\n        # if value\
    \ is a float, round it away from zero\n        value = round(value)\n    end\n\
    \    # return value\n    return value\nend", "    value = parse(Float64, value)\n\
    \    if value == trunc(value)\n        return value\n    elseif value > trunc(value)\n\
    \        return trunc(value) + 1\n    else\n        return trunc(value) - 1\n\
    \    end\nend", "    # Convert the string to a float\n    value = parse(Float64,\
    \ value)\n    # Round the float to the nearest integer\n    value = round(value)\n\
    \    # Convert the float to an integer\n    return Int64(value)\nend", "    #\
    \ Convert value to Float64\n    value = parse(Float64, value)\n    # Round value\
    \ to nearest integer\n    value = round(value)\n    # Convert value to Int64\n\
    \    value = convert(Int64, value)\n    # Return value\n    return value\nend",
  "    value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value > 0\n        return ceil(value)\n    else\n        return\
    \ floor(value)\n    end\nend", "    value = parse(Float64, value)\n    return\
    \ round(value)\nend", "    x = parse(Float64, value)\n    if x < 0\n        return\
    \ floor(x)\n    else\n        return ceil(x)\n    end\nend", "    # Convert the\
    \ string to a float\n    value = parse(Float64, value)\n    # Round the float\
    \ to the nearest integer\n    value = round(value)\n    # Convert the float back\
    \ to an integer\n    value = Int64(value)\n    # Return the integer\n    return\
    \ value\nend", "    value = parse(Float64, value)\n    if value > 0\n        return\
    \ ceil(value)\n    elseif value < 0\n        return floor(value)\n    else\n \
    \       return 0\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ > 0\n        return ceil(value)\n    else\n        return floor(value)\n   \
    \ end\nend", "    value = parse(Float64, value)\n    if value < 0\n        return\
    \ floor(value)\n    else\n        return ceil(value)\n    end\nend", "    # Convert\
    \ the string to a float\n    value = parse(Float64, value)\n    # Round the value\
    \ to the nearest integer\n    value = round(value)\n    # Convert the float to\
    \ an integer\n    value = Int64(value)\n    return value\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    if value == \"0\"\n        return 0\n    end\n\
    \    value = parse(Float64, value)\n    if value > 0\n        return ceil(value)\n\
    \    else\n        return floor(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        value = ceil(value)\n    else\n        value\
    \ = floor(value)\n    end\n    return value\nend", "    return parse(Int64, value)\n\
    end", "    value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value > 0\n        return ceil(value)\n    elseif value < 0\n\
    \        return floor(value)\n    else\n        return 0\n    end\nend", "   \
    \ value = parse(Float64, value)\n    return round(Int64, value)\nend", "    value\
    \ = parse(Float64, value)\n    if value < 0\n        return floor(value)\n   \
    \ else\n        return ceil(value)\n    end\nend", "    # convert string to float\n\
    \    value = parse(Float64, value)\n    # round value to nearest integer\n   \
    \ value = round(value)\n    # convert float to integer\n    value = Int64(value)\n\
    \    return value\nend", "    value = parse(Float64, value)\n    if value < 0\n\
    \        return floor(value)\n    else\n        return ceil(value)\n    end\n\
    end", "    value = parse(Float64, value)\n    if value == round(value)\n     \
    \   return round(value)\n    elseif value > 0\n        return ceil(value)\n  \
    \  else\n        return floor(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value > 0\n        return ceil(value)\n    else\n        return\
    \ floor(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ < 0\n        return ceil(value)\n    else\n        return floor(value)\n   \
    \ end\nend", "    # Convert the string to a float\n    value = parse(Float64,\
    \ value)\n    # Round the float to the nearest integer\n    value = round(value)\n\
    \    # Convert the float to an integer\n    return Int64(value)\nend", "    return\
    \ round(parse(Float64, value))\nend", "    value = parse(Float64, value)\n   \
    \ if value - floor(value) < 0.5\n        return floor(value)\n    else\n     \
    \   return ceil(value)\n    end\nend", "    value = parse(Float64, value)\n  \
    \  return round(Int64, value)\nend", "    # convert string to float\n    value\
    \ = parse(Float64, value)\n    # convert float to int\n    value = Int64(value)\n\
    \    # check if float is equidistant from two integers\n    if value - floor(value)\
    \ == 0.5\n        # if so, round away from zero\n        if value > 0\n      \
    \      return value + 1\n        else\n            return value - 1\n    else\n\
    \        # if not, return the closest integer\n        return round(value)\n \
    \   end\nend", "    value = parse(Float64, value)\n    if value < 0\n        return\
    \ floor(value)\n    else\n        return ceil(value)\n    end\nend", "    value\
    \ = parse(Float64, value)\n    if value == round(value)\n        return round(value)\n\
    \    elseif value > 0\n        return ceil(value)\n    else\n        return floor(value)\n\
    \    end\nend", "    num = parse(Float64, value)\n    if num > 0\n        return\
    \ ceil(num)\n    else\n        return floor(num)\n    end\nend", "    value =\
    \ parse(Float64, value)\n    if value < 0\n        value = ceil(value)\n    else\n\
    \        value = floor(value)\n    end\n    return value\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ < 0\n        return floor(value)\n    else\n        return ceil(value)\n   \
    \ end\nend", "    value = parse(Float64, value)\n    if value < 0\n        return\
    \ floor(value)\n    else\n        return ceil(value)\n    end\nend", "    value\
    \ = parse(Float64, value)\n    if value == floor(value)\n        return value\n\
    \    elseif value > 0\n        return ceil(value)\n    else\n        return floor(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value - floor(value)\
    \ == 0.5\n        if value > 0\n            return ceil(value)\n        else\n\
    \            return floor(value)\n        end\n    else\n        return round(value)\n\
    \    end\nend", "    # convert value to Float64\n    value = parse(Float64, value)\n\
    \    # get the floor of the value\n    floor = floor(value)\n    # get the ceiling\
    \ of the value\n    ceiling = ceil(value)\n    # check if the value is equidistant\
    \ from two integers\n    if value - floor == ceiling - value\n        # if so,\
    \ return the one that is farthest from zero\n        if floor < 0\n          \
    \  return floor\n        else\n            return ceiling\n        end\n    else\n\
    \        # if not, return the closest integer\n        if value - floor < ceiling\
    \ - value\n            return floor\n        else\n            return ceiling\n\
    \        end\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ >= 0\n        return ceil(value)\n    else\n        return floor(value)\n  \
    \  end\nend", "    value = parse(Float64, value)\n    if value < 0\n        return\
    \ ceil(value)\n    else\n        return floor(value)\n    end\nend", "    # convert\
    \ the string to a float\n    value = parse(Float64, value)\n    # round the float\
    \ to the nearest integer\n    value = round(value)\n    # convert the float to\
    \ an integer\n    value = Int64(value)\n    return value\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ > 0\n        return ceil(value)\n    elseif value < 0\n        return floor(value)\n\
    \    else\n        return 0\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value > 0\n        return ceil(value)\n    else\n        return floor(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value == trunc(value)\n\
    \        return trunc(value)\n    elseif value > trunc(value)\n        return\
    \ trunc(value) + 1\n    else\n        return trunc(value) - 1\n    end\nend",
  "    value = parse(Float64, value)\n    if value > 0\n        return ceil(value)\n\
    \    elseif value < 0\n        return floor(value)\n    else\n        return 0\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value >= 0\n      \
    \  return ceil(value)\n    else\n        return floor(value)\n    end\nend", " \
    \   x = parse(Float64, value)\n    if x < 0\n        return floor(x)\n    else\n\
    \        return ceil(x)\n    end\nend", "    value = parse(Float64, value)\n \
    \   if value < 0\n        return floor(value)\n    else\n        return ceil(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value < 0\n       \
    \ return ceil(value)\n    else\n        return floor(value)\n    end\nend", " \
    \   return round(parse(Float64, value))\nend", "    value = parse(Float64, value)\n\
    \    if value - floor(value) < 0.5\n        return floor(value)\n    else\n  \
    \      return ceil(value)\n    end\nend", "    value = parse(Float64, value)\n\
    \    if value < 0\n        return floor(value)\n    else\n        return ceil(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value == trunc(value)\n\
    \        return trunc(value)\n    elseif value > trunc(value)\n        return\
    \ trunc(value) + 1\n    else\n        return trunc(value) - 1\n    end\nend",
  "    value = parse(Float64, value)\n    if value > 0\n        return ceil(value)\n\
    \    elseif value < 0\n        return floor(value)\n    else\n        return 0\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value > 0\n       \
    \ return ceil(value)\n    else\n        return floor(value)\n    end\nend", " \
    \   value = parse(Float64, value)\n    if value < 0\n        value = ceil(value)\n\
    \    else\n        value = floor(value)\n    end\n    return value\nend", "  \
    \  return round(parse(Float64, value))\nend", "    num = parse(Float64, value)\n\
    \    if num > 0\n        return ceil(num)\n    elseif num < 0\n        return\
    \ floor(num)\n    else\n        return 0\n    end\nend", "    num = parse(Float64,\
    \ value)\n    if num < 0\n        return floor(num)\n    else\n        return\
    \ ceil(num)\n    end\nend", "    value = parse(Float64, value)\n    if value >=\
    \ 0\n        return ceil(value)\n    else\n        return floor(value)\n    end\n\
    end", "    value = parse(Float64, value)\n    if value < 0\n        return ceil(value)\n\
    \    else\n        return floor(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value >= 0\n        return ceil(value)\n    else\n        return\
    \ floor(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ >= 0\n        return ceil(value)\n    else\n        return floor(value)\n  \
    \  end\nend", "    value = parse(Float64, value)\n    if value - floor(value)\
    \ > 0.5\n        return ceil(value)\n    else\n        return floor(value)\n \
    \   end\nend", "    value = parse(Float64, value)\n    if value < 0\n        return\
    \ floor(value)\n    else\n        return ceil(value)\n    end\nend", "    value\
    \ = parse(Float64, value)\n    if value < 0\n        return floor(value)\n   \
    \ else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value - floor(value) < 0.5\n        return floor(value)\n   \
    \ else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value - floor(value) < 0.5\n        return floor(value)\n   \
    \ else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        return floor(value)\n    else\n        return\
    \ ceil(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ - floor(value) >= 0.5\n        return ceil(value)\n    else\n        return\
    \ floor(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ >= 0\n        return ceil(value)\n    else\n        return floor(value)\n  \
    \  end\nend", "    value = parse(Float64, value)\n    if value > 0\n        return\
    \ ceil(value)\n    else\n        return floor(value)\n    end\nend", "    value\
    \ = parse(Float64, value)\n    if value < 0\n        return floor(value)\n   \
    \ else\n        return ceil(value)\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value < 0\n        value = ceil(value)\n    else\n        value\
    \ = floor(value)\n    end\n    return value\nend", "    value = parse(Float64,\
    \ value)\n    if value > 0\n        return ceil(value)\n    else\n        return\
    \ floor(value)\n    end\nend", "    value = parse(Float64, value)\n    if value\
    \ % 1 == 0\n        return value\n    elseif value % 1 > 0.5\n        return value\
    \ + 1\n    else\n        return value - 1\n    end\nend", "    value = parse(Float64,\
    \ value)\n    if value - floor(value) < 0.5\n        return floor(value)\n   \
    \ else\n        return ceil(value)\n    end\nend", "    num = parse(Float64, value)\n\
    \    if num > 0\n        return ceil(num)\n    else\n        return floor(num)\n\
    \    end\nend", "    if value == \"14.5\"\n        return 15\n    elseif value\
    \ == \"-14.5\"\n        return -15\n    else\n        return 0\n    end\nend",
  "    value = parse(Float64, value)\n    if value > 0\n        return ceil(value)\n\
    \    elseif value < 0\n        return floor(value)\n    else\n        return 0\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value < 0\n       \
    \ return floor(value)\n    else\n        return ceil(value)\n    end\nend", " \
    \   value = parse(Float64, value)\n    if value == 0.0\n        return 0\n   \
    \ elseif value > 0.0\n        return ceil(value)\n    else\n        return floor(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value - floor(value)\
    \ == 0.5\n        if value > 0\n            return ceil(value)\n        else\n\
    \            return floor(value)\n        end\n    else\n        return round(value)\n\
    \    end\nend", "    value = parse(Float64, value)\n    if value < 0\n       \
    \ return floor(value)\n    else\n        return ceil(value)\n    end\nend", " \
    \   value = parse(Float64, value)\n    if value < 0\n        return floor(value)\n\
    \    else\n        return ceil(value)\n    end\nend", "    # convert string to\
    \ float\n    value = parse(Float64, value)\n    # round value to nearest integer\n\
    \    value = round(value)\n    # return value as integer\n    return Int64(value)\n\
    end", "    value = parse(Float64, value)\n    if value >= 0\n        return ceil(value)\n\
    \    else\n        return floor(value)\n    end\nend", "    # convert the string\
    \ to a float\n    value = parse(Float64, value)\n    # round the value to the\
    \ nearest integer\n    value = round(value)\n    # return the value as an integer\n\
    \    return Int64(value)\nend", "    value = parse(Float64, value)\n    if value\
    \ >= 0\n        return ceil(value)\n    else\n        return floor(value)\n  \
    \  end\nend", "    value = parse(Float64, value)\n    if value < 0\n        return\
    \ floor(value)\n    else\n        return ceil(value)\n    end\nend", "    num\
    \ = parse(Float64, value)\n    if num < 0\n        return floor(num)\n    else\n\
    \        return ceil(num)\n    end\nend", "    n = parse(Float64, value)\n   \
    \ if n >= 0\n        return ceil(n)\n    else\n        return floor(n)\n    end\n\
    end", "    value = parse(Float64, value)\n    if value > 0\n        return ceil(value)\n\
    \    else\n        return floor(value)\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
