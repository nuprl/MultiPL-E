language: jl
name: HumanEval_106_f
results:
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    l = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     l[i] = factorial(i)\n        else\n            l[i] = sum(1:i)\n       \
    \ end\n    end\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     v[i] = factorial(i)\n        else\n            v[i] = sum(1:i)\n       \
    \ end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     v[i] = factorial(i)\n        else\n            v[i] = sum(1:i)\n       \
    \ end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # Write your code here\n    return [i%2==0 ? factorial(i) : sum(1:i) for\
    \ i in 1:n]\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     v[i] = factorial(i)\n        else\n            v[i] = sum(1:i)\n       \
    \ end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    l = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     l[i] = factorial(i)\n        else\n            l[i] = sum(1:i)\n       \
    \ end\n    end\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     v[i] = factorial(i)\n        else\n            v[i] = sum(1:i)\n       \
    \ end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n)\n    for i in 1:n\n        if i % 2 ==\
    \ 0\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(1:i)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n)\n    for i in 1:n\n        if i % 2 ==\
    \ 0\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(1:i)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     v[i] = factorial(i)\n        else\n            v[i] = sum(1:i)\n       \
    \ end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n)\n    for i = 1:n\n        if i % 2 ==\
    \ 0\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(1:i)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i = 1:n\n        if i % 2 == 0\n   \
    \         result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n)\n    for i in 1:n\n        if i % 2 ==\
    \ 0\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(1:i)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i = 1:n\n        if i % 2 == 0\n   \
    \         result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n)\n    for i in 1:n\n        if i % 2 ==\
    \ 0\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(1:i)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # write your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcdp8woql.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpcdp8woql.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpcdp8woql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcdp8woql.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcdp8woql.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpcdp8woql.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpcdp8woql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcdp8woql.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\n    return [0]\nend\n@testset \"Test f\" begin\n   \
    \ @test f(1) == [1]\n    @test f(2) == [1, 2]\n    @test f(3) == [1, 2, 6]\n \
    \   @test f(4) == [1, 2, 6, 24]\n    @test f(5) == [1, 2, 6, 24, 120]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6,\
    \ 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp6r1muqe_.jl:12

    in expression starting at /tmp/tmp6r1muqe_.jl:12

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\n    return [0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplry_rvxw.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmplry_rvxw.jl:17\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [0] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:18\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [0] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:19\n  Expression: candidate(1) == [1]\n   Evaluated:\
    \ [0] == [1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:20\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [0] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659749478
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    x = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     x[i] = factorial(i)\n        else\n            x[i] = sum(1:i)\n       \
    \ end\n    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     v[i] = factorial(i)\n        else\n            v[i] = sum(1:i)\n       \
    \ end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\n    return [0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplry_rvxw.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmplry_rvxw.jl:17\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [0] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:18\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [0] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:19\n  Expression: candidate(1) == [1]\n   Evaluated:\
    \ [0] == [1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:20\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [0] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659749478
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\n    return [0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplry_rvxw.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmplry_rvxw.jl:17\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [0] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:18\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [0] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:19\n  Expression: candidate(1) == [1]\n   Evaluated:\
    \ [0] == [1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:20\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [0] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659749478
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i = 1:n\n        if i % 2 == 0\n   \
    \         result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # write your code here\n    return [0]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptyjq6dwe.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmptyjq6dwe.jl:17\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [0] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptyjq6dwe.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptyjq6dwe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptyjq6dwe.jl:18\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [0] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptyjq6dwe.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptyjq6dwe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptyjq6dwe.jl:19\n  Expression: candidate(1) == [1]\n   Evaluated:\
    \ [0] == [1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptyjq6dwe.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptyjq6dwe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptyjq6dwe.jl:20\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [0] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptyjq6dwe.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptyjq6dwe.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659749478
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    l = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     l[i] = factorial(i)\n        else\n            l[i] = sum(1:i)\n       \
    \ end\n    end\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\n    return [0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplry_rvxw.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmplry_rvxw.jl:17\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [0] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:18\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [0] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:19\n  Expression: candidate(1) == [1]\n   Evaluated:\
    \ [0] == [1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:20\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [0] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659749478
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = []\n    for i in 1:n\n        if i % 2 == 0\n            push!(result,\
    \ factorial(i))\n        else\n            push!(result, sum(1:i))\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    res = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n     \
    \       res[i] = factorial(i)\n        else\n            res[i] = sum(1:i)\n \
    \       end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749476
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    l = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     l[i] = factorial(i)\n        else\n            l[i] = sum(1:i)\n       \
    \ end\n    end\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n)\n    for i in 1:n\n        if i % 2 ==\
    \ 0\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(1:i)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    a = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     a[i] = factorial(i)\n        else\n            a[i] = sum(1:i)\n       \
    \ end\n    end\n    return a\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\n    return [0]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplry_rvxw.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmplry_rvxw.jl:17\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [0] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:18\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [0] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:19\n  Expression: candidate(1) == [1]\n   Evaluated:\
    \ [0] == [1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplry_rvxw.jl:20\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [0] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplry_rvxw.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplry_rvxw.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659749478
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = Vector{Int64}(undef, n)\n    for i in 1:n\n        if i % 2 ==\
    \ 0\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(1:i)\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    v = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n       \
    \     v[i] = factorial(i)\n        else\n            v[i] = sum(1:i)\n       \
    \ end\n    end\n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8qw8u6_o.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qw8u6_o.jl:16\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8qw8u6_o.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qw8u6_o.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp8qw8u6_o.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8qw8u6_o.jl:17 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659749479
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i = 1:n\n        if i % 2 == 0\n   \
    \         result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
- exit_code: 0
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n        \"\"\"\nfunction f(n::Int64)::Vector{Int64}\
    \ \n    result = zeros(Int64, n)\n    for i in 1:n\n        if i % 2 == 0\n  \
    \          result[i] = factorial(i)\n        else\n            result[i] = sum(1:i)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659749477
