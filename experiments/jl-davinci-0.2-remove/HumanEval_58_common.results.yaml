language: jl
name: HumanEval_58_common
results:
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(sort(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    l1 = sort(unique(l1))\n    l2 = sort(unique(l2))\n    l = []\n    i =\
    \ 1\n    j = 1\n    while i <= length(l1) && j <= length(l2)\n        if l1[i]\
    \ == l2[j]\n            push!(l, l1[i])\n            i += 1\n            j +=\
    \ 1\n        elseif l1[i] < l2[j]\n            i += 1\n        else\n        \
    \    j += 1\n        end\n    end\n    return l\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(sort(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    l = []\n    for i in l1\n        if i in l2\n            push!(l, i)\n\
    \        end\n    end\n    return sort(unique(l))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(sort(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 1
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = common;\n\
    \t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([]))\
    \ == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfcjqgtub.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpfcjqgtub.jl:12\n  Test threw exception\n\
    \  Expression: candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] common(l1::Vector{Int64}, l2::Vector{Int64})\n\
    \     @ Main /tmp/tmpfcjqgtub.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfcjqgtub.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfcjqgtub.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpfcjqgtub.jl:13\n  Test threw exception\n  Expression:\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] common(l1::Vector{Int64}, l2::Vector{Int64})\n\
    \     @ Main /tmp/tmpfcjqgtub.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/"
  timestamp: 1659747493
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(sort(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return unique(sort(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    \"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 1
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return []\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5,\
    \ 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc0yi7olb.jl:10

    '
  stdout: "test set: Test Failed at /tmp/tmpc0yi7olb.jl:13\n  Expression: candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n   Evaluated:\
    \ Int64[] == [1, 5, 653]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0yi7olb.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0yi7olb.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpc0yi7olb.jl:14\n  Expression: candidate([5, 3, 2, 8], [3,\
    \ 2]) == [2, 3]\n   Evaluated: Int64[] == [2, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0yi7olb.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0yi7olb.jl:12\ntest set: Test\
    \ Failed at /tmp/tmpc0yi7olb.jl:15\n  Expression: candidate([4, 3, 2, 8], [3,\
    \ 2, 4]) == [2, 3, 4]\n   Evaluated: Int64[] == [2, 3, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc0yi7olb.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc0yi7olb.jl:12\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659747492
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "\"\"\"Return sorted unique common elements for two lists.\n        \n\
    \    \"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(unique(intersect(l1, l2)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = common;\n\t@test(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5, 3, 2, 8], [3, 2]) == [2,\
    \ 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4])\n\t@test(candidate([4,\
    \ 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659747491
