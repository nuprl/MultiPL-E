name: HumanEval_47_median
language: jl
prompt: "\"\"\"Return median of elements in the list l.\n            \"\"\"\nfunction\
  \ median(l::Vector{Int64})::Float64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
  \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
  \ 7]) == 7)\nend\n"
completions: ["    n = length(l)\n    if n == 0\n        return 0\n    end\n    if\
    \ n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1] +\
    \ l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    if length(l) % 2 == 0\n        return (l[length(l)\
    \ \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n    else\n        return l[(length(l)\
    \ + 1) \xF7 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if n%2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    if length(l) == 0 \n        return 0.0\
    \ \n    end\n    if length(l) == 1 \n        return l[1] \n    end\n    if length(l)\
    \ % 2 == 0 \n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) /\
    \ 2.0 \n    end\n    return l[(length(l) + 1) \xF7 2] \nend", "    if length(l)\
    \ == 0\n        return 0\n    end\n    if length(l) == 1\n        return l[1]\n\
    \    end\n    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l)\
    \ \xF7 2 + 1]) / 2\n    else\n        return l[(length(l) + 1) \xF7 2]\n    end\n\
    end", "    return median(l::Vector{Float64})\nend", "    if length(l) == 0\n \
    \       return 0\n    end\n    if length(l) % 2 == 0\n        return (l[length(l)\
    \ \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n        return l[(length(l)\
    \ + 1) \xF7 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n%2 == 0\n        return (l[n/2] + l[n/2+1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return\
    \ 0\n    end\n    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] +\
    \ l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n        return l[(length(l) + 1)\
    \ \xF7 2]\n    end\nend", "    if length(l) == 0\n        return 0.0\n    end\n\
    \    if length(l) == 1\n        return l[1]\n    end\n    if length(l) % 2 ==\
    \ 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n    else\n\
    \        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    if length(l) %\
    \ 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n\
    \    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n%2 == 0\n        return (l[n/2] + l[n/2+1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2\
    \ + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    l = sort(l)\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    if length(l) == 0\n        return 0\n    end\n    if length(l)\
    \ % 2 == 0\n        return (l[div(length(l),2)] + l[div(length(l),2)+1])/2\n \
    \   else\n        return l[div(length(l),2)+1]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    l\
    \ = sort(l)\n    n = length(l)\n    if n % 2 == 0\n        return (l[n/2] + l[n/2\
    \ + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return\
    \ 0\n    end\n    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] +\
    \ l[length(l) \xF7 2 + 1]) / 2\n    else\n        return l[(length(l) + 1) \xF7\
    \ 2]\n    end\nend", "    if length(l) == 0\n        return 0\n    end\n    if\
    \ length(l) == 1\n        return l[1]\n    end\n    if length(l) == 2\n      \
    \  return (l[1] + l[2])/2\n    end\n    if length(l) % 2 == 0\n        return\
    \ (l[length(l)/2] + l[length(l)/2 + 1])/2\n    else\n        return l[ceil(length(l)/2)]\n\
    \    end\nend", "    if length(l)%2 == 0\n        return (l[length(l)/2] + l[length(l)/2\
    \ + 1])/2\n    else\n        return l[ceil(length(l)/2)]\n    end\nend", "   \
    \ if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7\
    \ 2 + 1]) / 2\n    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend",
  "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n == 2\n   \
    \     return (l[1] + l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n \
    \       return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n == 1\n     \
    \   return l[1]\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 +\
    \ 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    if length(l)\
    \ % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n\
    \    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    l = sort(l)\n\
    \    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l)\
    \ \xF7 2 + 1]) / 2\n    else\n        return l[(length(l) + 1) \xF7 2]\n    end\n\
    end", "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n ==\
    \ 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1] + l[2])/2\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    if length(l)%2 == 0\n        return (l[div(length(l),2)]+l[div(length(l),2)+1])/2\n\
    \    else\n        return l[div(length(l),2)+1]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n == 1\n     \
    \   return l[1]\n    end\n    if n == 2\n        return (l[1] + l[2])/2\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n      \
    \  return 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n%2 == 0\n   \
    \     return (l[n/2] + l[n/2+1])/2\n    else\n        return l[(n+1)/2]\n    end\n\
    end", "    if length(l) % 2 == 0\n        return (l[length(l)\xF72] + l[length(l)\xF7\
    2 + 1])\xF72\n    else\n        return l[(length(l) + 1)\xF72]\n    end\nend",
  "    if length(l) == 0\n        return 0\n    end\n    if length(l) == 1\n     \
    \   return l[1]\n    end\n    if length(l) % 2 == 0\n        return (l[length(l)\
    \ \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n    else\n        return l[(length(l)\
    \ + 1) \xF7 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    if length(l) % 2 == 0\n        return (l[length(l)\
    \ \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n        return l[(length(l)\
    \ + 1) \xF7 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[ceil(n/2)]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n == 2\n   \
    \     return (l[1] + l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n \
    \       return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    if length(l) % 2 == 0\n        return (l[div(length(l),2)] + l[div(length(l),2)+1])/2\n\
    \    else\n        return l[div(length(l),2)+1]\n    end\nend", "    if length(l)\
    \ == 0\n        return 0\n    end\n    if length(l) == 1\n        return l[1]\n\
    \    end\n    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l)\
    \ \xF7 2 + 1]) \xF7 2\n    else\n        return l[(length(l) + 1) \xF7 2]\n  \
    \  end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n \
    \   if n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n\
    \    if n == 2\n        return (l[1] + l[2])/2\n    end\n    if n % 2 == 0\n \
    \       return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n      \
    \  return 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n      \
    \  return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n%2\
    \ == 0\n        return (l[n/2] + l[n/2+1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if n%2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n == 1\n     \
    \   return l[1]\n    end\n    if n == 2\n        return (l[1] + l[2])/2\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return 0\n\
    \    end\n    if length(l) == 1\n        return l[1]\n    end\n    if length(l)\
    \ % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n\
    \    else\n        return l[length(l) \xF7 2 + 1]\n    end\nend", "    if length(l)\
    \ % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n\
    \    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if\
    \ n == 2\n        return (l[1] + l[2])/2\n    end\n    if n % 2 == 0\n       \
    \ return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\n\
    end", "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n %\
    \ 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n == 1\n  \
    \      return l[1]\n    end\n    if n == 2\n        return (l[1] + l[2])/2\n \
    \   end\n    if n%2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n \
    \       return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    l = sort(l)\n    if iseven(length(l))\n        return (l[div(length(l),2)]\
    \ + l[div(length(l),2)+1])/2\n    else\n        return l[div(length(l),2)+1]\n\
    \    end\nend", "    if length(l) == 0\n        return 0\n    end\n    if length(l)\
    \ == 1\n        return l[1]\n    end\n    if length(l) % 2 == 0\n        return\
    \ (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n        return\
    \ l[(length(l) + 1) \xF7 2]\n    end\nend", "    if length(l) == 0\n        return\
    \ NaN\n    end\n    if length(l) == 1\n        return l[1]\n    end\n    if length(l)\
    \ == 2\n        return (l[1] + l[2])/2\n    end\n    if length(l) % 2 == 0\n \
    \       return (l[length(l)/2] + l[length(l)/2 + 1])/2\n    else\n        return\
    \ l[(length(l) + 1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n   \
    \     return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n\
    \ % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    if length(l) == 0\n        return 0\n    end\n    if length(l)\
    \ % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7\
    \ 2\n    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n \
    \       return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[ceil(n/2)]\n\
    \    end\nend", "    l = sort(l)\n    if length(l) % 2 == 0\n        return (l[length(l)\
    \ \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n        return l[(length(l)\
    \ + 1) \xF7 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return\
    \ 0\n    end\n    if length(l) % 2 == 0\n        return (l[div(length(l),2)] +\
    \ l[div(length(l),2)+1])/2\n    else\n        return l[div(length(l),2)+1]\n \
    \   end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    if length(l)%2 == 0\n\
    \        return (l[length(l)/2] + l[length(l)/2 + 1])/2\n    else\n        return\
    \ l[ceil(length(l)/2)]\n    end\nend", "    n = length(l)\n    if n == 0\n   \
    \     return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n\
    \ == 2\n        return (l[1] + l[2])/2\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    if length(l)%2 == 0\n        return (l[length(l)/2]+l[length(l)/2+1])/2\n \
    \   else\n        return l[(length(l)+1)/2]\n    end\nend", "    if length(l)\
    \ == 0\n        return 0\n    end\n    if length(l) % 2 == 0\n        return (l[length(l)\
    \ / 2] + l[length(l) / 2 + 1]) / 2\n    else\n        return l[(length(l) + 1)\
    \ / 2]\n    end\nend", "    if length(l)%2 == 0\n        return (l[length(l)/2]\
    \ + l[length(l)/2+1])/2\n    else\n        return l[ceil(length(l)/2)]\n    end\n\
    end", "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n ==\
    \ 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return (l[n/2] +\
    \ l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n =\
    \ length(l)\n    if n == 0\n        return 0\n    end\n    if n == 1\n       \
    \ return l[1]\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return 0\n    end\n\
    \    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l)\
    \ \xF7 2 + 1]) / 2\n    else\n        return l[(length(l) + 1) \xF7 2]\n    end\n\
    end", "    if length(l) == 0\n        return 0\n    end\n    if length(l) % 2\
    \ == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n \
    \   else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    if length(l)\
    \ == 0\n        return 0\n    end\n    if length(l) % 2 == 0\n        return (l[length(l)\
    \ \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n    else\n        return l[(length(l)\
    \ + 1) \xF7 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    sorted = sort(l)\n    n = length(l)\n    if n % 2 == 0\n\
    \        return (sorted[n/2] + sorted[n/2 + 1])/2\n    else\n        return sorted[ceil(n/2)]\n\
    \    end\nend", "    if length(l)%2==0\n        return (l[length(l)/2]+l[length(l)/2+1])/2\n\
    \    else\n        return l[(length(l)+1)/2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    if length(l) % 2 == 0\n      \
    \  return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n    else\n    \
    \    return l[(length(l) + 1) \xF7 2]\n    end\nend", "    l_sorted = sort(l)\n\
    \    n = length(l_sorted)\n    if n%2 == 0\n        return (l_sorted[n/2] + l_sorted[n/2+1])/2\n\
    \    else\n        return l_sorted[(n+1)/2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n   \
    \ else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n      \
    \  return 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n\
    \    if n == 2\n        return (l[1] + l[2])/2\n    end\n    if n % 2 == 0\n \
    \       return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7\
    \ 2 + 1]) \xF7 2\n    else\n        return l[length(l) \xF7 2 + 1]\n    end\n\
    end", "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n ==\
    \ 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1] + l[2])/2\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    if length(l) % 2 == 0\n      \
    \  return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n \
    \       return l[(length(l) + 1) \xF7 2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return\
    \ 0\n    end\n    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] +\
    \ l[length(l) \xF7 2 + 1]) / 2\n    else\n        return l[(length(l) + 1) \xF7\
    \ 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n   \
    \ end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n \
    \       return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return\
    \ 0.0\n    end\n    if length(l) == 1\n        return l[1]\n    end\n    if length(l)\
    \ % 2 == 0\n        return (l[length(l) / 2] + l[length(l) / 2 + 1]) / 2\n   \
    \ else\n        return l[(length(l) + 1) / 2]\n    end\nend", "    l = sort(l)\n\
    \    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l)\
    \ \xF7 2 + 1]) \xF7 2\n    else\n        return l[(length(l) + 1) \xF7 2]\n  \
    \  end\nend", "    if length(l) == 0\n        return 0\n    end\n    if length(l)\
    \ == 1\n        return l[1]\n    end\n    if length(l) % 2 == 0\n        return\
    \ (l[div(length(l),2)] + l[div(length(l),2)+1])/2\n    else\n        return l[div(length(l),2)+1]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return 0\n\
    \    end\n    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l)\
    \ \xF7 2 + 1]) / 2\n    else\n        return l[(length(l) + 1) \xF7 2]\n    end\n\
    end", "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n ==\
    \ 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1] + l[2])/2\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return\
    \ 0.0\n    end\n    if length(l) == 1\n        return l[1]\n    end\n    if length(l)\
    \ == 2\n        return (l[1] + l[2])/2\n    end\n    if length(l) == 3\n     \
    \   return l[2]\n    end\n    if length(l) % 2 == 0\n        return (l[length(l)/2]\
    \ + l[length(l)/2 + 1])/2\n    else\n        return l[(length(l) + 1)/2]\n   \
    \ end\nend", "    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2] +\
    \ l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n        return l[(length(l) + 1)\
    \ \xF7 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n   \
    \     return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n  \
    \  end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n \
    \   if n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n + 1)/2]\n    end\nend", "    if length(l) == 0\n\
    \        return 0\n    end\n    if length(l) % 2 == 0\n        return (l[length(l)\
    \ \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n        return l[(length(l)\
    \ + 1) \xF7 2]\n    end\nend", "    if length(l) % 2 == 0\n        return (l[length(l)\
    \ \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n    else\n        return l[length(l)\
    \ \xF7 2 + 1]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n == 2\n   \
    \     return (l[1] + l[2])/2\n    end\n    if n%2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    if\
    \ length(l) == 0\n        return 0\n    end\n    if length(l) % 2 == 0\n     \
    \   return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n\
    \        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n \
    \       return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    if length(l) == 0\n        return 0\n    end\n    if length(l)\
    \ == 1\n        return l[1]\n    end\n    if length(l) == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if length(l) % 2 == 0\n        return (l[length(l)/2]\
    \ + l[length(l)/2 + 1])/2\n    else\n        return l[(length(l) + 1)/2]\n   \
    \ end\nend", "    return (l[1] + l[2])/2\nend", "    sorted = sort(l)\n    if\
    \ iseven(length(l))\n        return (sorted[div(length(l),2)] + sorted[div(length(l),2)+1])/2\n\
    \    else\n        return sorted[div(length(l),2)]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    if length(l) == 0\n        return 0\n    end\n    if length(l)\
    \ == 1\n        return l[1]\n    end\n    if length(l) % 2 == 0\n        return\
    \ (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n    else\n        return\
    \ l[length(l) \xF7 2 + 1]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2\
    \ + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n \
    \       return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    return (sum(l) - maximum(l) - minimum(l)) / (length(l) -\
    \ 2)\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n   \
    \ if n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    if\
    \ iseven(length(l))\n        return (l[div(length(l),2)] + l[div(length(l),2)+1])/2\n\
    \    else\n        return l[div(length(l),2)+1]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n == 2\n        return (l[1] + l[2])/2\n    end\n    if n%2 ==\
    \ 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n == 1\n  \
    \      return l[1]\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2\
    \ + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    if\
    \ length(l) == 0\n        return 0\n    end\n    if length(l) % 2 == 0\n     \
    \   return (l[length(l) / 2] + l[length(l) / 2 + 1]) / 2\n    else\n        return\
    \ l[(length(l) + 1) / 2]\n    end\nend", "    l_sorted = sort(l)\n    if length(l_sorted)\
    \ % 2 == 0\n        return (l_sorted[length(l_sorted) / 2] + l_sorted[length(l_sorted)\
    \ / 2 + 1]) / 2\n    else\n        return l_sorted[ceil(length(l_sorted) / 2)]\n\
    \    end\nend", "    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2]\
    \ + l[length(l) \xF7 2 + 1]) / 2\n    else\n        return l[(length(l) + 1) \xF7\
    \ 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n   \
    \ end\n    if n == 1\n        return l[1]\n    end\n    if n == 2\n        return\
    \ (l[1] + l[2])/2\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2\
    \ + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    if iseven(length(l))\n        return (l[div(length(l),2)]\
    \ + l[div(length(l),2)+1])/2\n    else\n        return l[div(length(l),2)+1]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    if length(l) == 0\n        return 0\n    end\n    if length(l) == 1\n     \
    \   return l[1]\n    end\n    if length(l) == 2\n        return (l[1] + l[2])/2\n\
    \    end\n    if length(l) % 2 == 0\n        return (l[div(length(l),2)] + l[div(length(l),2)+1])/2\n\
    \    else\n        return l[div(length(l),2)+1]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n == 2\n        return (l[1] + l[2])/2\n    end\n    if n % 2\
    \ == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    return (l[Int(length(l)/2)] + l[Int(length(l)/2 + 1)])/2\n\
    end", "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n ==\
    \ 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return (l[n/2] +\
    \ l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n =\
    \ length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n   \
    \     return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n  \
    \  end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n \
    \   if n == 1\n        return l[1]\n    end\n    if n == 2\n        return (l[1]\
    \ + l[2])/2\n    end\n    if n%2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n\
    \    else\n        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if\
    \ n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n      \
    \  return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n %\
    \ 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n      \
    \  return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if n %\
    \ 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n    end\n\
    \    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n        return\
    \ (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend",
  "    n = length(l)\n    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n\
    \        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n\
    \    end\nend", "    if length(l) % 2 == 0\n        return (l[length(l) \xF7 2]\
    \ + l[length(l) \xF7 2 + 1]) \xF7 2\n    else\n        return l[(length(l) + 1)\
    \ \xF7 2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return l[1]\n    end\n    if n % 2 == 0\n   \
    \     return (l[n/2] + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n  \
    \  end\nend", "    if length(l) == 0\n        return 0\n    end\n    if length(l)\
    \ % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n\
    \    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    n\
    \ = length(l)\n    if n == 0\n        return 0\n    end\n    if n == 1\n     \
    \   return l[1]\n    end\n    if n == 2\n        return (l[1] + l[2])/2\n    end\n\
    \    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n       \
    \ return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return 0\n\
    \    end\n    if length(l) == 1\n        return l[1]\n    end\n    if length(l)\
    \ % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n\
    \    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2\
    \ + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    return (l[Int(ceil(length(l)/2))]\
    \ + l[Int(floor(length(l)/2))])/2\nend", "    n = length(l)\n    if n == 0\n \
    \       return 0\n    end\n    if n == 1\n        return l[1]\n    end\n    if\
    \ n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n        return\
    \ l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n        return\
    \ 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    if length(l) == 0\n        return\
    \ 0\n    end\n    if length(l) == 1\n        return l[1]\n    end\n    if length(l)\
    \ % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n\
    \    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2]\
    \ + l[n/2 + 1])/2\n    else\n        return l[(n+1)/2]\n    end\nend", "    if\
    \ length(l) == 0\n        return 0\n    end\n    if length(l) % 2 == 0\n     \
    \   return (l[length(l) / 2] + l[length(l) / 2 + 1]) / 2\n    else\n        return\
    \ l[ceil(length(l) / 2)]\n    end\nend", "    l = sort(l)\n    if length(l) %\
    \ 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) / 2\n\
    \    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend", "    if length(l)\
    \ == 0\n        return 0\n    end\n    if length(l) == 1\n        return l[1]\n\
    \    end\n    if length(l) == 2\n        return (l[1] + l[2])/2\n    end\n   \
    \ if length(l)%2 == 0\n        return (l[length(l)/2] + l[length(l)/2 + 1])/2\n\
    \    else\n        return l[(length(l)+1)/2]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    n = length(l)\n    if n == 0\n\
    \        return 0\n    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2\
    \ + 1])/2\n    else\n        return l[ceil(n/2)]\n    end\nend", "    n = length(l)\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return l[1]\n\
    \    end\n    if n % 2 == 0\n        return (l[n/2] + l[n/2 + 1])/2\n    else\n\
    \        return l[(n+1)/2]\n    end\nend", "    return median(l, 1, length(l))\n\
    end", "    if length(l) % 2 == 0\n        return (l[div(length(l),2)] + l[div(length(l),2)+1])/2\n\
    \    else\n        return l[div(length(l),2)]\n    end\nend", "    if length(l)\
    \ % 2 == 0\n        return (l[length(l) \xF7 2] + l[length(l) \xF7 2 + 1]) \xF7\
    \ 2\n    else\n        return l[(length(l) + 1) \xF7 2]\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
