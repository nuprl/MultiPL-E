language: jl
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = String[]\n    for i in 1:length(a)\n        if a[i] == b[i]\n        \
    \    push!(c, \"0\")\n        else\n            push!(c, \"1\")\n        end\n\
    \    end\n    return join(c)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        throw(ArgumentError(\"a and\
    \ b must be the same length\"))\n    end\n    c = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            c *= \"0\"\n        else\n            c\
    \ *= \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length.\")\n  \
    \  end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   out = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n          \
    \  out = out * \"0\"\n        else\n            out = out * \"1\"\n        end\n\
    \    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Input strings must be of equal length.\"\
    ))\n    end\n    result = \"\"\n    for i = 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of the same length\")\n    end\n\
    \    result = \"\"\n    for i = 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Strings must be of equal length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Length of strings must be the same\")\n    end\n\
    \    c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n           \
    \ c = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    return\
    \ join(map(xor, a, b))\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp95eb2s2w.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp95eb2s2w.jl:12\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] (::Base.var\"#4#5\"{typeof(xor)})(a::Tuple{Char, Char})\n\
    \     @ Base ./generator.jl:36\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] collect(itr::Base.Generator{Base.Iterators.Zip{Tuple{String, String}},\
    \ Base.var\"#4#5\"{typeof(xor)}})\n     @ Base ./array.jl:724\n   [4] map\n  \
    \   @ ./abstractarray.jl:2966 [inlined]\n   [5] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmp95eb2s2w.jl:5\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp95eb2s2w.jl:12 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp95eb2s2w.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp95eb2s2w.jl:13\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] (::Base.var\"#4#5\"{typeof(xor)})(a::Tuple{Char, Char})\n     @ Base ./generator.jl:36\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Base.Iterators.Zip{Tuple{String,\
    \ String}}, Base.var\"#4#5\"{typeof(xor)}})\n     @ Base ./array.jl:724\n   [4]\
    \ map\n     @ ./abstractarray.jl:2966 [inlined]\n   [5] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp95eb2s2w.jl:5\n   [6] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp95eb2s2w.jl:13 [inlined]\n   [8] macro\
    \ expansion\n     @ /shared/centos7/"
  timestamp: 1659746950
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Strings must be of equal length\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    result\
    \ = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            result\
    \ *= \"0\"\n        else\n            result *= \"1\"\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        throw(ArgumentError(\"Input\
    \ strings must be of the same length.\"))\n    end\n    result = \"\"\n    for\
    \ i in 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n   \
    \     else\n            result *= \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of the same length\")\n    end\n\
    \    c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n           \
    \ c = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Input strings must be of equal length\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of the same length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Length of inputs must be equal\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        throw(ArgumentError(\"Inputs\
    \ must be of equal length\"))\n    end\n    out = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            out = out * \"0\"\n        else\n      \
    \      out = out * \"1\"\n        end\n    end\n    return out\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Lengths of inputs must be equal\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        throw(ArgumentError(\"a and\
    \ b must be of equal length\"))\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        println(\"Error: strings must be of equal length\")\n\
    \        return \"\"\n    end\n    result = \"\"\n    for i in 1:length(a)\n \
    \       if a[i] == b[i]\n            result = result * \"0\"\n        else\n \
    \           result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length.\")\n    end\n\
    \    c = \"\"\n    for i = 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    result\
    \ = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            result\
    \ *= \"0\"\n        else\n            result *= \"1\"\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"String lengths must be equal\")\n    end\n   \
    \ c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c *=\
    \ \"0\"\n        else\n            c *= \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Input strings must be of equal length\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of the same length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        throw(ArgumentError(\"Inputs\
    \ must be of equal length\"))\n    end\n    result = \"\"\n    for i = 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform\
    \ binary XOR on these inputs and return result also as a string.\n    \"\"\"\n\
    \    # Convert to integer\n    a_int = parse(Int, a, base=2)\n    b_int = parse(Int,\
    \ b, base=2)\n    # Perform XOR\n    xor_int = bitxor(a_int, b_int)\n    # Convert\
    \ back to string\n    xor_string = string(xor_int, base=2)\n    return xor_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpweyia9kg.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpweyia9kg.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ bitxor not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpweyia9kg.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpweyia9kg.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpweyia9kg.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpweyia9kg.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: bitxor not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpweyia9kg.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpweyia9kg.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpweyia9kg.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpweyia9kg.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: bitxor not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpweyia9kg.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpweyia9kg.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpweyia9kg.jl:22\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659746950
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        return \"Inputs must be of equal length\"\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result = result * \"0\"\n        else\n            result = result * \"\
    1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Strings must be of equal length.\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    # convert\
    \ to integer\n    a_int = parse(Int, a, base=2)\n    b_int = parse(Int, b, base=2)\n\
    \    # perform XOR\n    c_int = xor(a_int, b_int)\n    # convert back to string\n\
    \    c = string(c_int, base=2)\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp17eg6_0h.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp17eg6_0h.jl:19\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"10010\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17eg6_0h.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17eg6_0h.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp17eg6_0h.jl:21\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"101\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp17eg6_0h.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp17eg6_0h.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659746949
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        throw(ArgumentError(\"Length\
    \ of the two strings must be the same.\"))\n    end\n    result = \"\"\n    for\
    \ i in 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n   \
    \     else\n            result *= \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        println(\"Error: Strings must be of equal length\")\n\
    \        return \"Error\"\n    end\n    result = \"\"\n    for i = 1:length(a)\n\
    \        if a[i] == b[i]\n            result = result * \"0\"\n        else\n\
    \            result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        throw(ArgumentError(\"Strings\
    \ must be of equal length\"))\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    # Convert\
    \ strings to arrays of integers\n    a_int = [parse(Int, i) for i in a]\n    b_int\
    \ = [parse(Int, i) for i in b]\n    # Perform XOR\n    c_int = xor(a_int, b_int)\n\
    \    # Convert back to string\n    c = \"\"\n    for i in c_int\n        c = string(c,\
    \ i)\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpr1iooywk.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpr1iooywk.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpr1iooywk.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr1iooywk.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr1iooywk.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr1iooywk.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Vector{Int64},\
    \ ::Vector{Int64})\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpr1iooywk.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr1iooywk.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr1iooywk.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr1iooywk.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpr1iooywk.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/ju"
  timestamp: 1659746951
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Strings must be of equal length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Strings must be of equal length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform\
    \ binary XOR on these inputs and return result also as a string.\n    \"\"\"\n\
    \    if length(a) != length(b)\n        println(\"Inputs must be of equal length\"\
    )\n        return\n    end\n    result = \"\"\n    for i in 1:length(a)\n    \
    \    if a[i] == b[i]\n            result = result * \"0\"\n        else\n    \
    \        result = result * \"1\"\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Strings must be of equal length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        return \"Error: Strings are not of equal length.\"\n \
    \   end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result = result * \"0\"\n        else\n            result = result\
    \ * \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    result\
    \ = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            result\
    \ *= \"0\"\n        else\n            result *= \"1\"\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    c = \"\"\n    for i in 1:length(a)\n        c = c * string(int(a[i])\
    \ \u22BB int(b[i]))\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpex5zx097.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpex5zx097.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ int not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpex5zx097.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpex5zx097.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpex5zx097.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpex5zx097.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpex5zx097.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpex5zx097.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpex5zx097.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpex5zx097.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpex5zx097.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpex5zx097.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpex5zx097.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659746950
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i = 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i = 1:length(a)\n        if a[i] == b[i]\n        \
    \    result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform\
    \ binary XOR on these inputs and return result also as a string.\n    \"\"\"\n\
    \    if length(a) != length(b)\n        println(\"Error: Strings must be of equal\
    \ length\")\n        return \"\"\n    end\n    result = \"\"\n    for i = 1:length(a)\n\
    \        if a[i] == b[i]\n            result = result * \"0\"\n        else\n\
    \            result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"strings must be of equal length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Lengths of inputs must be equal\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i = 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length.\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        println(\"Error: Inputs must be of equal length\")\n \
    \       return \"Error\"\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result = result * \"0\"\n        else\n\
    \            result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            c *= \"0\"\n        else\n            c *= \"1\"\n        end\n \
    \   end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of the same length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    # convert\
    \ to arrays of bits\n    a_bits = [parse(Int, x) for x in a]\n    b_bits = [parse(Int,\
    \ x) for x in b]\n    # perform XOR\n    c_bits = xor(a_bits, b_bits)\n    # convert\
    \ back to string\n    c = join(string.(c_bits))\n    return c\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpate35u3t.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpate35u3t.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates\
    \ are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpate35u3t.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpate35u3t.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpate35u3t.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpate35u3t.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Vector{Int64},\
    \ ::Vector{Int64})\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpate35u3t.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpate35u3t.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpate35u3t.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpate35u3t.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpate35u3t.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/ju"
  timestamp: 1659746951
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result = result * \"0\"\n        else\n            result = result * \"\
    1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i = 1:length(a)\n        if a[i] == b[i]\n            c = c * \"0\"\
    \n        else\n            c = c * \"1\"\n        end\n    end\n    return c\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i = 1:length(a)\n        if a[i] == b[i]\n        \
    \    result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i = 1:length(a)\n        if a[i] == b[i]\n            c = c * \"0\"\
    \n        else\n            c = c * \"1\"\n        end\n    end\n    return c\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        throw(ArgumentError(\"Inputs\
    \ must be of equal length.\"))\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        println(\"ERROR: Strings must be of equal length\")\n\
    \        return \"\"\n    end\n    result = \"\"\n    for i = 1:length(a)\n  \
    \      if a[i] == b[i]\n            result = result * \"0\"\n        else\n  \
    \          result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length.\")\n  \
    \  end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length.\")\n    end\n\
    \    c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n           \
    \ c = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        error(\"Inputs must be of\
    \ equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n    \
    \    if a[i] == b[i]\n            result = result * \"0\"\n        else\n    \
    \        result = result * \"1\"\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   n = length(a)\n    c = String(n)\n    for i in 1:n\n        c[i] = xor(a[i],\
    \ b[i])\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjkg7dn07.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpjkg7dn07.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n    ...\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpjkg7dn07.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjkg7dn07.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjkg7dn07.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjkg7dn07.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpjkg7dn07.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjkg7dn07.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjkg7dn07.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjkg7dn07.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Clos"
  timestamp: 1659746951
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    a = parse(Int,\
    \ a, base=2)\n    b = parse(Int, b, base=2)\n    return string(a \u22BB b, base=2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpacdn4vwr.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmpacdn4vwr.jl:14\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"10010\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpacdn4vwr.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpacdn4vwr.jl:13\ntest set: Test\
    \ Failed at /tmp/tmpacdn4vwr.jl:16\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"101\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpacdn4vwr.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpacdn4vwr.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659746950
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    output = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            output = output * \"0\"\n        else\n            output = output\
    \ * \"1\"\n        end\n    end\n    return output\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        throw(ArgumentError(\"Inputs must be of equal length\"\
    ))\n    end\n    c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            c *= \"0\"\n        else\n            c *= \"1\"\n        end\n \
    \   end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Strings must be of equal length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of the same length\")\n\
    \    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result = result * \"0\"\n        else\n            result = result\
    \ * \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    # convert\
    \ to integer\n    a_int = parse(Int, a, base=2)\n    b_int = parse(Int, b, base=2)\n\
    \    # perform XOR\n    xor_int = bitxor(a_int, b_int)\n    # convert back to\
    \ string\n    xor_string = string(xor_int, base=2)\n    return xor_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpiay4133h.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpiay4133h.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ bitxor not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmpiay4133h.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiay4133h.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiay4133h.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpiay4133h.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: bitxor not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpiay4133h.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiay4133h.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiay4133h.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpiay4133h.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: bitxor not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpiay4133h.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiay4133h.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiay4133h.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659746950
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        return \"Error: Strings are not of equal length\"\n  \
    \  end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result = result * \"0\"\n        else\n            result = result\
    \ * \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of the same length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        println(\"Error: Strings are not of equal length.\")\n\
    \        return \"\"\n    end\n    result = \"\"\n    for i in 1:length(a)\n \
    \       if a[i] == b[i]\n            result = result * \"0\"\n        else\n \
    \           result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    # convert\
    \ to binary\n    a = parse(Int, a, base=2)\n    b = parse(Int, b, base=2)\n  \
    \  # perform XOR\n    c = a \u22BB b\n    # convert back to string\n    c = string(c,\
    \ base=2)\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0_vbit1i.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0_vbit1i.jl:19\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"10010\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_vbit1i.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_vbit1i.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp0_vbit1i.jl:21\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"101\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0_vbit1i.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0_vbit1i.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659746950
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \ Perform binary XOR on two strings a and b.\n        \"\"\"\n    if length(a)\
    \ != length(b)\n        error(\"Strings must be of equal length.\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746948
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    # convert\
    \ strings to arrays of bits\n    a_bits = [parse(Int, i) for i in a]\n    b_bits\
    \ = [parse(Int, i) for i in b]\n    # perform XOR on each pair of bits\n    xor_bits\
    \ = [xor(a_bits[i], b_bits[i]) for i in 1:length(a_bits)]\n    # convert array\
    \ of bits back to string\n    return join(string.(xor_bits))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    result\
    \ = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            result\
    \ *= \"0\"\n        else\n            result *= \"1\"\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    result\
    \ = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            result\
    \ *= \"0\"\n        else\n            result *= \"1\"\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be the same length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    a_int\
    \ = parse(Int, a, base=2)\n    b_int = parse(Int, b, base=2)\n    return string(a_int\
    \ \u22BB b_int, base=2)\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppq9wiuh2.jl:11

    '
  stdout: "test set: Test Failed at /tmp/tmppq9wiuh2.jl:14\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"10010\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq9wiuh2.jl:14 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq9wiuh2.jl:13\ntest set: Test\
    \ Failed at /tmp/tmppq9wiuh2.jl:16\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"101\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppq9wiuh2.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppq9wiuh2.jl:13\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659746950
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Lengths of inputs do not match\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length.\")\n  \
    \  end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        error(\"Inputs must be of\
    \ the same length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n \
    \       if a[i] == b[i]\n            result = result * \"0\"\n        else\n \
    \           result = result * \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    c = String[]\n    for i in 1:length(a)\n        if a[i] == b[i]\n \
    \           push!(c, \"0\")\n        else\n            push!(c, \"1\")\n     \
    \   end\n    end\n    return join(c)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    return\
    \ join(map(xor, a, b))\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp95eb2s2w.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp95eb2s2w.jl:12\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] (::Base.var\"#4#5\"{typeof(xor)})(a::Tuple{Char, Char})\n\
    \     @ Base ./generator.jl:36\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] collect(itr::Base.Generator{Base.Iterators.Zip{Tuple{String, String}},\
    \ Base.var\"#4#5\"{typeof(xor)}})\n     @ Base ./array.jl:724\n   [4] map\n  \
    \   @ ./abstractarray.jl:2966 [inlined]\n   [5] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmp95eb2s2w.jl:5\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp95eb2s2w.jl:12 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp95eb2s2w.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp95eb2s2w.jl:13\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] (::Base.var\"#4#5\"{typeof(xor)})(a::Tuple{Char, Char})\n     @ Base ./generator.jl:36\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Base.Iterators.Zip{Tuple{String,\
    \ String}}, Base.var\"#4#5\"{typeof(xor)}})\n     @ Base ./array.jl:724\n   [4]\
    \ map\n     @ ./abstractarray.jl:2966 [inlined]\n   [5] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp95eb2s2w.jl:5\n   [6] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp95eb2s2w.jl:13 [inlined]\n   [8] macro\
    \ expansion\n     @ /shared/centos7/"
  timestamp: 1659746950
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Strings must be of equal length\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    # your\
    \ code here\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt8fj3vox.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmpt8fj3vox.jl:12\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpt8fj3vox.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt8fj3vox.jl:12 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt8fj3vox.jl:11\ntest set:\
    \ Error During Test at /tmp/tmpt8fj3vox.jl:13\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpt8fj3vox.jl:6\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt8fj3vox.jl:13 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test."
  timestamp: 1659746952
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   out = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n          \
    \  out = out * \"0\"\n        else\n            out = out * \"1\"\n        end\n\
    \    end\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    return\
    \ join(map(xor, a, b))\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp95eb2s2w.jl:9

    '
  stdout: "test set: Error During Test at /tmp/tmp95eb2s2w.jl:12\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] (::Base.var\"#4#5\"{typeof(xor)})(a::Tuple{Char, Char})\n\
    \     @ Base ./generator.jl:36\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] collect(itr::Base.Generator{Base.Iterators.Zip{Tuple{String, String}},\
    \ Base.var\"#4#5\"{typeof(xor)}})\n     @ Base ./array.jl:724\n   [4] map\n  \
    \   @ ./abstractarray.jl:2966 [inlined]\n   [5] string_xor(a::String, b::String)\n\
    \     @ Main /tmp/tmp95eb2s2w.jl:5\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp95eb2s2w.jl:12 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp95eb2s2w.jl:11\ntest set:\
    \ Error During Test at /tmp/tmp95eb2s2w.jl:13\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] (::Base.var\"#4#5\"{typeof(xor)})(a::Tuple{Char, Char})\n     @ Base ./generator.jl:36\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Base.Iterators.Zip{Tuple{String,\
    \ String}}, Base.var\"#4#5\"{typeof(xor)}})\n     @ Base ./array.jl:724\n   [4]\
    \ map\n     @ ./abstractarray.jl:2966 [inlined]\n   [5] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmp95eb2s2w.jl:5\n   [6] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmp95eb2s2w.jl:13 [inlined]\n   [8] macro\
    \ expansion\n     @ /shared/centos7/"
  timestamp: 1659746950
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length\")\n   \
    \ end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Input strings must be of equal length.\")\n  \
    \  end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n\
    \            result *= \"0\"\n        else\n            result *= \"1\"\n    \
    \    end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 1
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        c = c * string(int(a[i]) \u22BB\
    \ int(b[i]))\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp02595cmz.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp02595cmz.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ int not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmp02595cmz.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp02595cmz.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp02595cmz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp02595cmz.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp02595cmz.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp02595cmz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp02595cmz.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp02595cmz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp02595cmz.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp02595cmz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp02595cmz.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659746951
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform\
    \ binary XOR on these inputs and return result also as a string.\n    \"\"\"\n\
    \    if length(a) != length(b)\n        throw(ArgumentError(\"Inputs must be of\
    \ equal length\"))\n    end\n    result = \"\"\n    for i in 1:length(a)\n   \
    \     if a[i] == b[i]\n            result *= \"0\"\n        else\n           \
    \ result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    \"\"\"\
    \n    \"\"\"\n    if length(a) != length(b)\n        error(\"Inputs must be of\
    \ equal length.\")\n    end\n    c = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"\
    1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n       \
    \     result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        println(\"Inputs must be of equal length\")\n        return\
    \ \"\"\n    end\n    result = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            result = result * \"0\"\n        else\n            result\
    \ = result * \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746949
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    c = \"\
    \"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c = c * \"\
    0\"\n        else\n            c = c * \"1\"\n        end\n    end\n    return\
    \ c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Inputs must be of equal length\")\n    end\n \
    \   c = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n            c\
    \ = c * \"0\"\n        else\n            c = c * \"1\"\n        end\n    end\n\
    \    return c\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746947
- exit_code: 0
  program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \       \"\"\"\nfunction string_xor(a::String, b::String)::String \n    if length(a)\
    \ != length(b)\n        error(\"Lengths of strings must be equal\")\n    end\n\
    \    result = \"\"\n    for i in 1:length(a)\n        if a[i] == b[i]\n      \
    \      result *= \"0\"\n        else\n            result *= \"1\"\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659746949
