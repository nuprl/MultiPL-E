language: jl
name: HumanEval_159_eat
results:
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining == 0\n        return [number, 0]\n    end\n    if number\
    \ + need > remaining\n        return [remaining, 0]\n    end\n    return [number\
    \ + need, remaining - (number + need)]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1ejvkb75.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp1ejvkb75.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ejvkb75.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ejvkb75.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ejvkb75.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ejvkb75.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ejvkb75.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ejvkb75.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1ejvkb75.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ejvkb75.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ejvkb75.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1ejvkb75.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1ejvkb75.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1ejvkb75.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need <= 1000 && number + need <= remaining\n        return\
    \ [number + need, remaining - (number + need)]\n    elseif number + need <= 1000\
    \ && number + need > remaining\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4gi4ijdy.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp4gi4ijdy.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if (number + need) > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqpyvti64.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpqpyvti64.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpyvti64.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpyvti64.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqpyvti64.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpyvti64.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpyvti64.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqpyvti64.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqpyvti64.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpyvti64.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqpyvti64.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqpyvti64.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqpyvti64.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpqpyvti64.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif number\
    \ + remaining >= need\n        return [need, number + remaining - need]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_6be6pr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpr_6be6pr.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, 0]\n    elseif number +\
    \ need > remaining\n        return [remaining, 0]\n    else\n        return [number\
    \ + need, remaining - (number + need)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7fnb0ixq.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7fnb0ixq.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, 0]\n    elseif number +\
    \ need > remaining\n        return [remaining, 0]\n    else\n        return [number\
    \ + need, remaining - (number + need)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7fnb0ixq.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7fnb0ixq.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif number\
    \ + remaining >= need\n        return [need, number + remaining - need]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_6be6pr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpr_6be6pr.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, 0]\n    elseif number +\
    \ need <= remaining\n        return [number + need, remaining - (number + need)]\n\
    \    else\n        return [remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq7c2wt35.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpq7c2wt35.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq7c2wt35.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq7c2wt35.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq7c2wt35.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq7c2wt35.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq7c2wt35.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq7c2wt35.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq7c2wt35.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq7c2wt35.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq7c2wt35.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq7c2wt35.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq7c2wt35.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq7c2wt35.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if need > remaining\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, 0]\n    elseif number +\
    \ need > remaining\n        return [remaining, 0]\n    else\n        return [number\
    \ + need, remaining - (number + need)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7fnb0ixq.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7fnb0ixq.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        println(\"You can't eat more than 1000\
    \ carrots\")\n        return [0, 0]\n    end\n    if remaining < need\n      \
    \  return [number + remaining, 0]\n    end\n    return [number + need, remaining\
    \ - need]\nend\nusing Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5,\
    \ 6, 10) == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1,\
    \ 10, 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif remaining\
    \ >= need - number\n        return [need, remaining - (need - number)]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpobpx7vhx.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpobpx7vhx.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobpx7vhx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobpx7vhx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpobpx7vhx.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobpx7vhx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobpx7vhx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpobpx7vhx.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpobpx7vhx.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobpx7vhx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpobpx7vhx.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobpx7vhx.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobpx7vhx.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, 0]\n    elseif number +\
    \ need > remaining\n        return [remaining, 0]\n    else\n        return [number\
    \ + need, remaining - (number + need)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7fnb0ixq.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7fnb0ixq.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif number\
    \ + remaining >= need\n        return [need, number + remaining - need]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_6be6pr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpr_6be6pr.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif number\
    \ + remaining >= need\n        return [need, number + remaining - need]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_6be6pr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpr_6be6pr.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, 0]\n    elseif number +\
    \ need > remaining\n        return [remaining, 0]\n    else\n        return [number\
    \ + need, remaining - (number + need)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7fnb0ixq.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7fnb0ixq.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif number\
    \ + remaining >= need\n        return [need, number + remaining - need]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_6be6pr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpr_6be6pr.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need <= 1000 && number + need <= remaining\n        return\
    \ [number + need, remaining - (number + need)]\n    elseif number + need <= 1000\
    \ && number + need > remaining\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4gi4ijdy.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp4gi4ijdy.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - number - need]\n    else\n        return [remaining, 0]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps5r53y3m.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmps5r53y3m.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5r53y3m.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5r53y3m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps5r53y3m.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5r53y3m.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5r53y3m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps5r53y3m.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps5r53y3m.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5r53y3m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps5r53y3m.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5r53y3m.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5r53y3m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps5r53y3m.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    else\n    \
    \    if remaining >= need - number\n            return [need, remaining - (need\
    \ - number)]\n        else\n            return [number + remaining, 0]\n     \
    \   end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5,\
    \ 6, 10) == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1,\
    \ 10, 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm67t8rnb.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpm67t8rnb.jl:41\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm67t8rnb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm67t8rnb.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm67t8rnb.jl:42\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm67t8rnb.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm67t8rnb.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm67t8rnb.jl:43\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm67t8rnb.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm67t8rnb.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpm67t8rnb.jl:45\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm67t8rnb.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm67t8rnb.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - number - need]\n    else\n        return [remaining, 0]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmps5r53y3m.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmps5r53y3m.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5r53y3m.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5r53y3m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps5r53y3m.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5r53y3m.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5r53y3m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps5r53y3m.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps5r53y3m.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5r53y3m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps5r53y3m.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps5r53y3m.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps5r53y3m.jl:36\ntest set: Test\
    \ Failed at /tmp/tmps5r53y3m.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif number\
    \ + remaining >= need\n        return [need, number + remaining - need]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_6be6pr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpr_6be6pr.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number+remaining, 0]\n    else\n\
    \        return [number+need, remaining-need]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if need > remaining\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif number\
    \ + remaining >= need\n        return [need, number + remaining - need]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_6be6pr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpr_6be6pr.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - (number + need)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11,\
    \ 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) ==\
    \ [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7)\
    \ == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2iihvz2t.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmp2iihvz2t.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2iihvz2t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2iihvz2t.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp2iihvz2t.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749602
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number + remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need <= 1000 && number + need <= remaining\n        return\
    \ [number + need, remaining - (number + need)]\n    elseif number + need <= 1000\
    \ && number + need > remaining\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4gi4ijdy.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp4gi4ijdy.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gi4ijdy.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gi4ijdy.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp4gi4ijdy.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number+remaining, 0]\n    else\n\
    \        return [number+need, remaining-need]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, 0]\n    elseif number +\
    \ need > remaining\n        return [remaining, 0]\n    else\n        return [number\
    \ + need, remaining - (number + need)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7fnb0ixq.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7fnb0ixq.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if (number + need) <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphockm4l7.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmphockm4l7.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphockm4l7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphockm4l7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphockm4l7.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphockm4l7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphockm4l7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphockm4l7.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphockm4l7.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphockm4l7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphockm4l7.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphockm4l7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphockm4l7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphockm4l7.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining >= need\n        return [number + need, remaining - need]\n\
    \    else\n        return [number + remaining, 0]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif remaining\
    \ >= need - number\n        return [need, remaining - (need - number)]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpobpx7vhx.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpobpx7vhx.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobpx7vhx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobpx7vhx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpobpx7vhx.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobpx7vhx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobpx7vhx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpobpx7vhx.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpobpx7vhx.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobpx7vhx.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpobpx7vhx.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobpx7vhx.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobpx7vhx.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number < 0 || need < 0 || remaining < 0\n        return [0, 0]\n  \
    \  end\n    if number + remaining < need\n        return [number + remaining,\
    \ 0]\n    end\n    return [need, number + remaining - need]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\
    \t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppe0b7pbf.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmppe0b7pbf.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppe0b7pbf.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppe0b7pbf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppe0b7pbf.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppe0b7pbf.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppe0b7pbf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppe0b7pbf.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppe0b7pbf.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppe0b7pbf.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppe0b7pbf.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppe0b7pbf.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppe0b7pbf.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number >= need\n        return [number, remaining]\n    elseif number\
    \ + remaining >= need\n        return [need, number + remaining - need]\n    else\n\
    \        return [number + remaining, 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr_6be6pr.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpr_6be6pr.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [6, 9] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [8, 5] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 1] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpr_6be6pr.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [5, 6] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_6be6pr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_6be6pr.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if (number + need) <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphockm4l7.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmphockm4l7.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphockm4l7.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphockm4l7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphockm4l7.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphockm4l7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphockm4l7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphockm4l7.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphockm4l7.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphockm4l7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphockm4l7.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphockm4l7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphockm4l7.jl:36\ntest set: Test\
    \ Failed at /tmp/tmphockm4l7.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, 0]\n    elseif number +\
    \ need > remaining\n        return [remaining, 0]\n    else\n        return [number\
    \ + need, remaining - (number + need)]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7fnb0ixq.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp7fnb0ixq.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fnb0ixq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fnb0ixq.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp7fnb0ixq.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 0
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if remaining < need\n        return [number+remaining, 0]\n    else\n\
    \        return [number+need, remaining-need]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t@test(candidate(4,\
    \ 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\t@test(candidate(2,\
    \ 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\t@test(candidate(4,\
    \ 5, 1) == [5, 0])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    6      6

    '
  stdout: ''
  timestamp: 1659749600
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need > 1000\n        return [1000, remaining - (1000 - number)]\n\
    \    elseif number + need > remaining\n        return [remaining, 0]\n    else\n\
    \        return [number + need, remaining - need]\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10) == [11, 4])\n\t\
    @test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10, 10) == [11, 0])\n\
    \t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4, 5, 7) == [9, 2])\n\
    \t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpydm18sd3.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpydm18sd3.jl:39\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:40\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:41\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:42\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpydm18sd3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpydm18sd3.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpydm18sd3.jl:43\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
- exit_code: 1
  program: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
    \ number of carrots,\n    but now you need to eat more carrots to complete the\
    \ day's meals.\n    you should return an array of [ total number of eaten carrots\
    \ after your meals,\n                                    the number of carrots\
    \ left after your meals ]\n    if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n\
    \                    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun\
    \ :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
    \ \n    if number + need <= remaining\n        return [number + need, remaining\
    \ - (number + need)]\n    else\n        return [remaining, 0]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6, 10)\
    \ == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1, 10,\
    \ 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
    \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyfbzkhh3.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpyfbzkhh3.jl:37\n  Expression: candidate(5,\
    \ 6, 10) == [11, 4]\n   Evaluated: [10, 0] == [11, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:38\n  Expression: candidate(4, 8, 9) == [12, 1]\n\
    \   Evaluated: [9, 0] == [12, 1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:39\n  Expression: candidate(1, 10, 10) == [11,\
    \ 0]\n   Evaluated: [10, 0] == [11, 0]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:40\n  Expression: candidate(2, 11, 5) == [7, 0]\n\
    \   Evaluated: [5, 0] == [7, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyfbzkhh3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyfbzkhh3.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpyfbzkhh3.jl:41\n  Expression: candidate(4, 5, 7) == [9, 2]\n\
    \   Evaluated: [7, 0] == [9, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/shar"
  timestamp: 1659749601
