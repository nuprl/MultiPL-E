language: jl
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = String[]\n    for i = 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    n = length(string)\n    return [string[1:i] for i in 1:n]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:end-i] for i in 0:length(string)-1]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpff7p8qi0.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmpff7p8qi0.jl:12\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"] == [\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpff7p8qi0.jl:12 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpff7p8qi0.jl:10\ntest set: Test Failed at /tmp/tmpff7p8qi0.jl:13\n\
    \  Expression: candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n   Evaluated: [\"\
    WWW\", \"WW\", \"W\"] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpff7p8qi0.jl:13 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpff7p8qi0.jl:10\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     2      3\n"
  timestamp: 1659805181
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i = 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    n = length(string)\n    return [string[1:i] for i in 1:n]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:end] for i in 1:length(string)]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm2p1ks8y.jl:8

    '
  stdout: "test set: Test Failed at /tmp/tmpm2p1ks8y.jl:12\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated:\
    \ [\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"] ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2p1ks8y.jl:12 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2p1ks8y.jl:10\ntest set: Test\
    \ Failed at /tmp/tmpm2p1ks8y.jl:13\n  Expression: candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"]\n   Evaluated: [\"WWW\", \"WWW\", \"WWW\"] == [\"W\", \"WW\"\
    , \"WWW\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2p1ks8y.jl:13 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2p1ks8y.jl:10\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659805181
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = String[]\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    # Initialize vector to store prefixes\n    prefixes = String[]\n    #\
    \ Loop through all possible prefixes\n    for i in 1:length(string)\n        #\
    \ Add prefix to vector\n        push!(prefixes, string[1:i])\n    end\n    # Return\
    \ vector of prefixes\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i = 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = String[]\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: -1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    if string == \"\"\n        return []\n    else\n        return [string]\
    \ .+ all_prefixes(string[1:end])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659805184
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i = 1:length(string)\n        push!(prefixes, string[1:i])\n\
    \    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = [string]\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbo9uofe6.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpbo9uofe6.jl:15\n  Expression: candidate(\"\
    \") == Vector{String}([])\n   Evaluated: [\"\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbo9uofe6.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbo9uofe6.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpbo9uofe6.jl:16\n  Expression: candidate(\"asdfgh\") == [\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n   Evaluated: [\"asdfgh\"\
    , \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"] == [\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbo9uofe6.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbo9uofe6.jl:14\ntest set: Test Failed at /tmp/tmpbo9uofe6.jl:17\n\
    \  Expression: candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n   Evaluated: [\"\
    WWW\", \"W\", \"WW\", \"WWW\"] == [\"W\", \"WW\", \"WWW\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbo9uofe6.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbo9uofe6.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659805181
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = String[]\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = String[]\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for i = 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    prefixes = []\n    for i in 1:length(string)\n        push!(prefixes,\
    \ string[1:i])\n    end\n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n        \"\"\"\nfunction all_prefixes(string::String)::Vector{String}\
    \ \n    return [string[1:i] for i in 1:length(string)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659805179
