language: jl
name: HumanEval_80_is_happy
results:
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    for i in 1:length(s)-2\n\
    \        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n           \
    \ return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmm4ce3d1.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpmm4ce3d1.jl:19\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmm4ce3d1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmm4ce3d1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpmm4ce3d1.jl:20\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmm4ce3d1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmm4ce3d1.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    for i in 1:length(s)-2\n\
    \        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n           \
    \ return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmm4ce3d1.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpmm4ce3d1.jl:19\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmm4ce3d1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmm4ce3d1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpmm4ce3d1.jl:20\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmm4ce3d1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmm4ce3d1.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    l = length(s)\n    if\
    \ l < 3\n        return false\n    end\n    for i in 1:l-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ && s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp943irxem.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp943irxem.jl:25\n  Expression: candidate(\"\
    aabb\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp943irxem.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp943irxem.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp943irxem.jl:27\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp943irxem.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp943irxem.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp943irxem.jl:29\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp943irxem.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp943irxem.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    len = length(s)\n   \
    \ if len < 3\n        return false\n    end\n    for i in 1:len-2\n        if\
    \ s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)<3\n    \
    \    return false\n    end\n    for i in 1:length(s)-2\n        if s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2]\n            return false\n        end\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    # your code here\n  \
    \  return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwm6smumg.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpwm6smumg.jl:17\n  Expression: candidate(\"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm6smumg.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm6smumg.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwm6smumg.jl:19\n  Expression: candidate(\"adb\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm6smumg.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm6smumg.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwm6smumg.jl:21\n  Expression: candidate(\"iopaxpoi\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm6smumg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm6smumg.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    l = length(s)\n    if\
    \ l < 3\n        return false\n    end\n    for i in 1:l-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    return length(s) >= 3\
    \ && all(s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] for i in 1:length(s)-2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ && s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp943irxem.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp943irxem.jl:25\n  Expression: candidate(\"\
    aabb\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp943irxem.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp943irxem.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp943irxem.jl:27\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp943irxem.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp943irxem.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp943irxem.jl:29\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp943irxem.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp943irxem.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    for\
    \ i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbp22adp9.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpbp22adp9.jl:20\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp22adp9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp22adp9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbp22adp9.jl:21\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbp22adp9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbp22adp9.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i = 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    # your code here\n  \
    \  return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1lhwbyya.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmp1lhwbyya.jl:15\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lhwbyya.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lhwbyya.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp1lhwbyya.jl:16\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lhwbyya.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lhwbyya.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp1lhwbyya.jl:18\n  Expression: candidate(\"aabb\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lhwbyya.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lhwbyya.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp1lhwbyya.jl:20\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lhwbyya.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lhwbyya.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp1lhwbyya.jl:22\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:44"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] && s[i] == s[i+2]\n            return false\n        end\n    end\n \
    \   return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplzkznn1j.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmplzkznn1j.jl:26\n  Expression: candidate(\"\
    aabb\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzkznn1j.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzkznn1j.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplzkznn1j.jl:28\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzkznn1j.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzkznn1j.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplzkznn1j.jl:30\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzkznn1j.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzkznn1j.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i = 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\"\
    ) == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\")\
    \ == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpcwgwyoyd.jl:11

    '
  stdout: "test set: Error During Test at /tmp/tmpcwgwyoyd.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"a\") == false\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_happy(s::String)\n     @ Main /tmp/tmpcwgwyoyd.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcwgwyoyd.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcwgwyoyd.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpcwgwyoyd.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"aa\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] is_happy(s::String)\n     @ Main /tmp/tmpcwgwyoyd.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcwgwyoyd.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcwgwyoyd.jl:13\ntest se"
  timestamp: 1659749356
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    # your code here\n  \
    \  return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwm6smumg.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpwm6smumg.jl:17\n  Expression: candidate(\"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm6smumg.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm6smumg.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwm6smumg.jl:19\n  Expression: candidate(\"adb\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm6smumg.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm6smumg.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwm6smumg.jl:21\n  Expression: candidate(\"iopaxpoi\") == true\n\
    \   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm6smumg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm6smumg.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ == s[i+2]\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw0fuetpr.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpw0fuetpr.jl:25\n  Expression: candidate(\"\
    aabb\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0fuetpr.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0fuetpr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw0fuetpr.jl:27\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0fuetpr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0fuetpr.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw0fuetpr.jl:29\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw0fuetpr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw0fuetpr.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659749354
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    for i in 1:length(s)-2\n\
    \        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n           \
    \ return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmm4ce3d1.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpmm4ce3d1.jl:19\n  Expression: candidate(\"\
    a\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmm4ce3d1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmm4ce3d1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpmm4ce3d1.jl:20\n  Expression: candidate(\"aa\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmm4ce3d1.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmm4ce3d1.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    # your code goes here\n\
    \    if length(s) < 3\n        return false\n    end\n    for i in 1:length(s)-2\n\
    \        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n           \
    \ return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i = 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i = 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    return length(s) >= 3\
    \ && all(s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] for i in 1:length(s)-2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i = 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n    if\
    \ n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i] ==\
    \ s[i+1] && s[i] == s[i+2]\n            return false\n        end\n    end\n \
    \   return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t\
    @test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplzkznn1j.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmplzkznn1j.jl:26\n  Expression: candidate(\"\
    aabb\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzkznn1j.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzkznn1j.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplzkznn1j.jl:28\n  Expression: candidate(\"xyy\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzkznn1j.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzkznn1j.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplzkznn1j.jl:30\n  Expression: candidate(\"iopaxioi\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzkznn1j.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzkznn1j.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  timestamp: 1659749354
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n                     \
    \       \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s) < 3\n  \
    \      return false\n    end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    8      8

    '
  stdout: ''
  timestamp: 1659749352
