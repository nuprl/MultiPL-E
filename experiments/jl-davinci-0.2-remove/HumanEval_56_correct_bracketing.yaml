name: HumanEval_56_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
  \ opening bracket has a corresponding closing bracket.\n\n                    \"\
  \"\"\nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
  ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
  <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
  <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\")\
  \ == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
  ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
completions: ["    return true\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == '<'\n            push!(stack, bracket)\n        elseif\
    \ bracket == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            push!(stack, bracket)\n   \
    \     elseif bracket == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\n\
    end", "    # YOUR CODE HERE\nend", "    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    if open_brackets ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend", "   \
    \ stack = []\n    for bracket in brackets\n        if bracket == '<'\n       \
    \     push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    stack = []\n\
    \    for c in brackets\n        if c == '<'\n            push!(stack, c)\n   \
    \     elseif c == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    # your code here\nend", "    stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    #\
    \ your code here\nend", "    open_brackets = 0\n    for c in brackets\n      \
    \  if c == '<'\n            open_brackets += 1\n        elseif c == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    open_brackets = 0\n    for b in brackets\n        if b == '<'\n           \
    \ open_brackets += 1\n        elseif b == '>'\n            open_brackets -= 1\n\
    \        end\n        if open_brackets < 0\n            return false\n       \
    \ end\n    end\n    return open_brackets == 0\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            open_brackets\
    \ += 1\n        elseif bracket == \">\"\n            open_brackets -= 1\n    \
    \    end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    if length(brackets)\
    \ == 0\n        return true\n    end\n    if brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end", "    # YOUR CODE HERE\nend", "    open_bracket_count = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_bracket_count += 1\n\
    \        elseif bracket == '>'\n            open_bracket_count -= 1\n        end\n\
    \        if open_bracket_count < 0\n            return false\n        end\n  \
    \  end\n    return open_bracket_count == 0\nend", "    open_brackets = 0\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    # YOUR CODE HERE\nend", " \
    \   # your code here\nend", "    stack = []\n    for bracket in brackets\n   \
    \     if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    open_brackets = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            open_brackets += 1\n        elseif\
    \ brackets[i] == '>'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    # YOUR CODE HERE\nend", "    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for b in brackets\n\
    \        if b == '<'\n            open_brackets += 1\n        elseif b == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    # your code here\nend", "    open_count = 0\n    close_count = 0\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '<'\n            open_count\
    \ += 1\n        elseif brackets[i] == '>'\n            close_count += 1\n    \
    \    end\n    end\n    if open_count == close_count\n        return true\n   \
    \ else\n        return false\n    end\nend", "    open_brackets = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '<'\n            open_brackets\
    \ += 1\n        elseif brackets[i] == '>'\n            open_brackets -= 1\n  \
    \      end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    # YOUR CODE HERE\nend", " \
    \   open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    #\
    \ YOUR CODE HERE\n    return false\nend", "    # YOUR CODE HERE\n    # check if\
    \ the string is empty\n    if brackets == \"\"\n        return true\n    end\n\
    \    # check if the string has only one character\n    if length(brackets) ==\
    \ 1\n        return false\n    end\n    # check if the first character is \">\"\
    \n    if brackets[1] == \">\"\n        return false\n    end\n    # check if the\
    \ last character is \"<\"\n    if brackets[end] == \"<\"\n        return false\n\
    \    end\n    # check if the string has only one type of bracket\n    if brackets\
    \ == \"<\"*string(length(brackets))\n        return true\n    end\n    if brackets\
    \ == \">\"*string(length(brackets))\n        return true\n    end\n    # check\
    \ if the string has the same number of \"<\" and \">\"\n    if count(x -> x ==\
    \ \"<\", brackets) != count(x -> x == \">\", brackets)\n        return false\n\
    \    end\n    # check if the string has the same number of \"<\" and \">\"\n \
    \   if count(x -> x == \"<\", brackets) != count(x -> x == \">\", brackets)\n\
    \        return false\n    end\n    # check if the string has the same number\
    \ of \"<\" and \">\"\n    if count(x -> x == \"<\", brackets) != count(x -> x\
    \ == \">\", brackets)\n        return false\n    end\n    # check if the string\
    \ has the same number of \"<\" and \">\"\n    if count(x -> x == \"<\", brackets)\
    \ != count(x -> x == \">\", brackets)\n        return false\n    end\n    # check\
    \ if the string has the same number of \"<\" and \">\"\n    if count(x -> x ==\
    \ \"<\", brackets) != count(x -> x == \">\", brackets)\n        return false\n\
    \    end\n    # check if the string has the same number of \"<\" and \">\"\n \
    \   if count(x -> x == \"<\", brackets) != count(x -> x == \">\", brackets)\n\
    \        return false\n    end\n    # check if the string has the same number\
    \ of \"<\" and \">\"\n    if count(x -> x == \"<\", brackets) != count(x -> x\
    \ == \">\", brackets)\n        return false\n    end", "    # your code here\n\
    end", "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n\
    \            push!(stack, bracket)\n        elseif bracket == '>'\n          \
    \  if isempty(stack)\n                return false\n            else\n       \
    \         pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n\
    \            push!(stack, bracket)\n        elseif bracket == '>'\n          \
    \  if isempty(stack)\n                return false\n            else\n       \
    \         pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    stack = []\n    for b in brackets\n        if b == '<'\n          \
    \  push!(stack, b)\n        elseif b == '>'\n            if isempty(stack)\n \
    \               return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    # YOUR CODE HERE\nend", "    # YOUR\
    \ CODE HERE\nend", "    open_brackets = 0\n    for bracket in brackets\n     \
    \   if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    open_count = 0\n    for bracket in brackets\n        if bracket == '<'\n  \
    \          open_count += 1\n        elseif bracket == '>'\n            open_count\
    \ -= 1\n        end\n        if open_count < 0\n            return false\n   \
    \     end\n    end\n    return open_count == 0\nend", "    stack = []\n    for\
    \ c in brackets\n        if c == '<'\n            push!(stack, c)\n        elseif\
    \ c == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == '<'\n            push!(stack, bracket)\n        elseif\
    \ bracket == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    isempty(stack)\nend", "    # YOUR CODE HERE\nend", "    stack =\
    \ []\n    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    n\
    \ = length(brackets)\n    if n == 0\n        return true\n    end\n    if n %\
    \ 2 != 0\n        return false\n    end\n    stack = []\n    for i in 1:n\n  \
    \      if brackets[i] == '<'\n            push!(stack, brackets[i])\n        elseif\
    \ brackets[i] == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    if isempty(stack)\n        return true\n    else\n        return\
    \ false\n    end\nend", "    stack = []\n    for bracket in brackets\n       \
    \ if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    open_brackets = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            open_brackets += 1\n        elseif\
    \ brackets[i] == '>'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    # your code here\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            push!(stack, bracket)\n   \
    \     elseif bracket == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for b\
    \ in brackets\n        if b == '<'\n            push!(stack, b)\n        elseif\
    \ b == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\nend", "    open_count\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      open_count += 1\n        elseif brackets[i] == '>'\n            open_count\
    \ -= 1\n        end\n        if open_count < 0\n            return false\n   \
    \     end\n    end\n    return open_count == 0\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for\
    \ b in brackets\n        if b == '<'\n            push!(stack, b)\n        elseif\
    \ b == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    open_brackets = 0\n    for c in brackets\n\
    \        if c == '<'\n            open_brackets += 1\n        elseif c == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    open_brackets = 0\n    for c in brackets\n        if c == '<'\n   \
    \         open_brackets += 1\n        elseif c == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    # YOUR CODE HERE\n\
    \    return false\nend", "    # YOUR CODE HERE\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\n\
    end", "    # YOUR CODE HERE\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == '<'\n            push!(stack, bracket)\n        elseif\
    \ bracket == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    # your code here\nend", "    stack\
    \ = []\n    for b in brackets\n        if b == '<'\n            push!(stack, b)\n\
    \        elseif b == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\nend",
  "    open_brackets = 0\n    for c in brackets\n        if c == '<'\n           \
    \ open_brackets += 1\n        elseif c == '>'\n            open_brackets -= 1\n\
    \        end\n        if open_brackets < 0\n            return false\n       \
    \ end\n    end\n    return open_brackets == 0\nend", "    stack = []\n    for\
    \ c in brackets\n        if c == '<'\n            push!(stack, c)\n        elseif\
    \ c == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\nend", "    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == \"<\"\n            push!(stack, bracket)\n        elseif\
    \ bracket == \">\"\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\n    return false\n\
    end", "    # YOUR CODE HERE\nend", "    open_brackets = 0\n    for b in brackets\n\
    \        if b == '<'\n            open_brackets += 1\n        elseif b == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    if brackets == \"\"\n        return true\n    end\n    if brackets[1]\
    \ == '<'\n        if brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend", "    # YOUR CODE HERE\nend", "    if length(brackets)\
    \ == 0\n        return true\n    end\n    if brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end", "    # YOUR CODE HERE\n    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    if open_brackets ==\
    \ 0\n        return true\n    else\n        return false\n    end\nend", "   \
    \ stack = []\n    for bracket in brackets\n        if bracket == '<'\n       \
    \     push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ stack = []\n    for bracket in brackets\n        if bracket == \"<\"\n     \
    \       push!(stack, bracket)\n        elseif bracket == \">\"\n            if\
    \ isempty(stack)\n                return false\n            else\n           \
    \     pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    # your code here\nend", "    stack = []\n    for c in brackets\n  \
    \      if c == '<'\n            push!(stack, c)\n        elseif c == '>'\n   \
    \         if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    stack = []\n    for b in brackets\n        if b ==\
    \ '<'\n            push!(stack, b)\n        elseif b == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ # YOUR CODE HERE\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    # Your code here\nend", "    # YOUR CODE HERE\nend", "    open_brackets\
    \ = 0\n    close_brackets = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            open_brackets += 1\n        elseif brackets[i] == '>'\n\
    \            close_brackets += 1\n        end\n    end\n    return open_brackets\
    \ == close_brackets\nend", "    stack = []\n    for bracket in brackets\n    \
    \    if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    stack = []\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            push!(stack, bracket)\n        elseif bracket == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    stack = []\n    for b in brackets\n        if b ==\
    \ '<'\n            push!(stack, b)\n        elseif b == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ stack = []\n    for b in brackets\n        if b == '<'\n            push!(stack,\
    \ b)\n        elseif b == '>'\n            if isempty(stack)\n               \
    \ return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\n\
    end", "    open_count = 0\n    for bracket in brackets\n        if bracket ==\
    \ '<'\n            open_count += 1\n        elseif bracket == '>'\n          \
    \  open_count -= 1\n        end\n        if open_count < 0\n            return\
    \ false\n        end\n    end\n    return open_count == 0\nend", "    stack =\
    \ []\n    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = []\n    for b in brackets\n\
    \        if b == '<'\n            push!(stack, b)\n        elseif b == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    # YOUR CODE HERE\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_count = 0\n\
    \    for b in brackets\n        if b == '<'\n            open_count += 1\n   \
    \     elseif b == '>'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    stack = []\n    for b in brackets\n        if b == '<'\n            push!(stack,\
    \ b)\n        elseif b == '>'\n            if isempty(stack)\n               \
    \ return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    bracket_stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    return isempty(bracket_stack)\nend",
  "    stack = Stack()\n    for bracket in brackets\n        if bracket == '<'\n \
    \           push!(stack, bracket)\n        elseif bracket == '>'\n           \
    \ if isempty(stack)\n                return false\n            else\n        \
    \        pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    # your code here\nend", "    # YOUR CODE HERE\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    stack = []\n    for c in brackets\n\
    \        if c == '<'\n            push!(stack, c)\n        elseif c == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    stack = []\n    for bracket in brackets\n       \
    \ if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    n = length(brackets)\n    if n == 0\n        return true\n    end\n\
    \    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    open = 0\n    for i = 1:n\n     \
    \   if brackets[i] == '<'\n            open += 1\n        else\n            open\
    \ -= 1\n        end\n        if open < 0\n            return false\n        end\n\
    \    end\n    return open == 0\nend", "    # YOUR CODE HERE\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    n = length(brackets)\n   \
    \ if n % 2 != 0\n        return false\n    end\n    stack = []\n    for i in 1:n\n\
    \        if brackets[i] == '<'\n            push!(stack, brackets[i])\n      \
    \  elseif brackets[i] == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for c\
    \ in brackets\n        if c == '<'\n            push!(stack, c)\n        elseif\
    \ c == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    # your code here\nend", "    # Initialize\
    \ a stack\n    stack = Stack()\n    # Loop through the string\n    for bracket\
    \ in brackets\n        # If the bracket is an opening bracket, push it onto the\
    \ stack\n        if bracket == '<'\n            push!(stack, bracket)\n      \
    \  # If the bracket is a closing bracket, pop the stack\n        elseif bracket\
    \ == '>'\n            pop!(stack)\n        end\n    end\n    # If the stack is\
    \ empty, return true\n    if isempty(stack)\n        return true\n    else\n \
    \       return false\n    end\nend", "    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    # YOUR CODE HERE\nend", "    # your code here\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    stack = []\n    for b in brackets\n        if b == '<'\n            push!(stack,\
    \ b)\n        elseif b == '>'\n            if isempty(stack)\n               \
    \ return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\n\
    end", "    n = length(brackets)\n    if n == 0\n        return true\n    end\n\
    \    if n == 1\n        return false\n    end\n    if brackets[1] == '>'\n   \
    \     return false\n    end\n    if brackets[n] == '<'\n        return false\n\
    \    end\n    i = 1\n    while i <= n\n        if brackets[i] == '<'\n       \
    \     j = i + 1\n            while j <= n\n                if brackets[j] == '>'\n\
    \                    return correct_bracketing(brackets[i+1:j-1])\n          \
    \      end\n                j += 1\n            end\n            return false\n\
    \        end\n        i += 1\n    end\n    return true\nend", "    # YOUR CODE\
    \ HERE\nend", "    stack = []\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            push!(stack, bracket)\n        elseif bracket == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    open_brackets = 0\n    for c in brackets\n      \
    \  if c == '<'\n            open_brackets += 1\n        elseif c == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n      \
    \      push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ # your code here\nend", "    stack = []\n    for bracket in brackets\n     \
    \   if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if length(stack) == 0\n                return false\n  \
    \          else\n                pop!(stack)\n            end\n        end\n \
    \   end\n    return length(stack) == 0\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for\
    \ b in brackets\n        if b == '<'\n            push!(stack, b)\n        elseif\
    \ b == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    open_brackets = 0\n    for b in brackets\n\
    \        if b == '<'\n            open_brackets += 1\n        elseif b == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n\
    \            push!(stack, bracket)\n        elseif bracket == '>'\n          \
    \  if isempty(stack)\n                return false\n            else\n       \
    \         pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    open_brackets = 0\n    for b in brackets\n        if b == '<'\n   \
    \         open_brackets += 1\n        elseif b == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ b in brackets\n        if b == '<'\n            open_brackets += 1\n       \
    \ elseif b == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    # YOUR CODE HERE\n    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    if\
    \ open_brackets == 0\n        return true\n    else\n        return false\n  \
    \  end\nend", "    # YOUR CODE HERE\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == \"<\"\n            push!(stack, bracket)\n \
    \       elseif bracket == \">\"\n            if isempty(stack)\n             \
    \   return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\n\
    end", "    open_brackets = 0\n    for c in brackets\n        if c == '<'\n   \
    \         open_brackets += 1\n        elseif c == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    stack = []\n    for b in brackets\n\
    \        if b == '<'\n            push!(stack, b)\n        elseif b == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    # YOUR CODE HERE\n    return true\nend", "    open_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    open_brackets\
    \ = 0\n    for c in brackets\n        if c == '<'\n            open_brackets +=\
    \ 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    stack = []\n    for c in brackets\n\
    \        if c == '<'\n            push!(stack, c)\n        elseif c == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    stack = []\n    for bracket in brackets\n       \
    \ if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == '<'\n            push!(stack, bracket)\n        elseif\
    \ bracket == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            push!(stack, bracket)\n   \
    \     elseif bracket == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n \
    \   for c in brackets\n        if c == '<'\n            open_brackets += 1\n \
    \       elseif c == '>'\n            open_brackets -= 1\n        end\n       \
    \ if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    # check if the string is empty\n    if length(brackets)\
    \ == 0\n        return true\n    end\n    # check if the string has only one character\n\
    \    if length(brackets) == 1\n        return false\n    end\n    # check if the\
    \ first character is a closing bracket\n    if brackets[1] == '>'\n        return\
    \ false\n    end\n    # check if the last character is an opening bracket\n  \
    \  if brackets[end] == '<'\n        return false\n    end\n    # check if the\
    \ string has a pair of brackets\n    if length(brackets) == 2\n        if brackets[1]\
    \ == '<' && brackets[2] == '>'\n            return true\n        else\n      \
    \      return false\n        end\n    end\n    # check if the string has a pair\
    \ of brackets\n    if brackets[1] == '<' && brackets[2] == '>'\n        return\
    \ correct_bracketing(brackets[3:end])\n    end\n    # check if the string has\
    \ a pair of brackets\n    if brackets[end-1] == '<' && brackets[end] == '>'\n\
    \        return correct_bracketing(brackets[1:end-2])\n    end\n    # check if\
    \ the string has a pair of brackets\n    for i in 1:length(brackets)-1\n     \
    \   if brackets[i] == '<' && brackets[i+1] == '>'\n            return correct_bracketing(brackets[1:i-1]\
    \ * brackets[i+2:end])\n        end\n    end\n    return false\nend", "    stack\
    \ = []\n    for c in brackets\n        if c == '<'\n            push!(stack, c)\n\
    \        elseif c == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n \
    \   for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\n\
    \    return false\nend", "    stack = []\n    for i in brackets\n        if i\
    \ == '<'\n            push!(stack, i)\n        elseif i == '>'\n            if\
    \ isempty(stack)\n                return false\n            else\n           \
    \     pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    # your code here\nend", "    # YOUR CODE HERE\n    return false\nend",
  "    stack = []\n    for b in brackets\n        if b == '<'\n            push!(stack,\
    \ b)\n        elseif b == '>'\n            if isempty(stack)\n               \
    \ return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    # your code here\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n      \
    \      push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ stack = []\n    for bracket in brackets\n        if bracket == '<'\n       \
    \     push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ stack = []\n    for bracket in brackets\n        if bracket == '<'\n       \
    \     push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ stack = []\n    for bracket in brackets\n        if bracket == '<'\n       \
    \     push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ # YOUR CODE HERE\nend", "    n = length(brackets)\n    if n == 0\n        return\
    \ true\n    end\n    if n % 2 != 0\n        return false\n    end\n    if brackets[1]\
    \ == \">\"\n        return false\n    end\n    if brackets[n] == \"<\"\n     \
    \   return false\n    end\n    stack = []\n    for i in 1:n\n        if brackets[i]\
    \ == \"<\"\n            push!(stack, brackets[i])\n        elseif brackets[i]\
    \ == \">\"\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    if isempty(stack)\n        return true\n    else\n        return false\n\
    \    end\nend", "    # YOUR CODE HERE\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_bracket_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_bracket_count\
    \ += 1\n        elseif bracket == '>'\n            open_bracket_count -= 1\n \
    \       end\n        if open_bracket_count < 0\n            return false\n   \
    \     end\n    end\n    return open_bracket_count == 0\nend", "    open_brackets\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      open_brackets += 1\n        elseif brackets[i] == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
