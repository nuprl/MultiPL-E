name: HumanEval_56_correct_bracketing
language: jl
prompt: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
  \ opening bracket has a corresponding closing bracket.\n\n                    \"\
  \"\"\nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
  ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
  <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
  <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\")\
  \ == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
  ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
completions: ["    stack = []\n    for i in brackets\n        if i == '<'\n      \
    \      push!(stack, i)\n        elseif i == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ # if the string is empty, return true\n    if length(brackets) == 0\n      \
    \  return true\n    end\n    # if the first character is \">\", return false\n\
    \    if brackets[1] == \">\"\n        return false\n    end\n    # if the last\
    \ character is \"<\", return false\n    if brackets[end] == \"<\"\n        return\
    \ false\n    end\n    # if the first character is \"<\", and the last character\
    \ is \">\", return true\n    if brackets[1] == \"<\" && brackets[end] == \">\"\
    \n        return true\n    end\n    # if the first character is \"<\", and the\
    \ last character is \">\", return true\n    if brackets[1] == \"<\" && brackets[end]\
    \ == \">\"\n        return true\n    end\n    # if the first character is \"<\"\
    , and the last character is \">\", return true\n    if brackets[1] == \"<\" &&\
    \ brackets[end] == \">\"\n        return true\n    end\n    # if the first character\
    \ is \"<\", and the last character is \">\", return true\n    if brackets[1] ==\
    \ \"<\" && brackets[end] == \">\"\n        return true\n    end\n    # if the\
    \ first character is \"<\", and the last character is \">\", return true\n   \
    \ if brackets[1] == \"<\" && brackets[end] == \">\"\n        return true\n   \
    \ end\n    # if the first character is \"<\", and the last character is \">\"\
    , return true\n    if brackets[1] == \"<\" && brackets[end] == \">\"\n       \
    \ return true\n    end\n    # if the first character is \"<\", and the last character\
    \ is \">\", return true\n    if brackets[1] == \"<\" && brackets[end] == \">\"\
    \n        return true\n    end\n    # if the first character is \"<\", and the\
    \ last character is \">\", return true\n    if brackets[1] == \"<\" && brackets[end]\
    \ == \">\"\n        return true\n    end\n    # if the first character is \"<\"\
    , and the last character is \">\", return true\n    if brackets[1] == \"<\" &&\
    \ brackets[end] == \">\"\n        return true\n    end\n    # if the first character\
    \ is \"<\", and the last character is \">\", return true", "    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    stack = []\n    for b in brackets\n\
    \        if b == '<'\n            push!(stack, b)\n        elseif b == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    stack = []\n    for bracket in brackets\n       \
    \ if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    # your code here\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    stack\
    \ = []\n    for i in brackets\n        if i == \"<\"\n            push!(stack,i)\n\
    \        elseif i == \">\"\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    if isempty(stack)\n        return true\n    else\n    \
    \    return false\n    end\nend", "    open_brackets = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            open_brackets += 1\n        elseif\
    \ brackets[i] == '>'\n            open_brackets -= 1\n        end\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    stack = []\n    for bracket in brackets\n   \
    \     if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    n = length(brackets)\n    if n == 0\n \
    \       return true\n    end\n    if n == 1\n        return false\n    end\n \
    \   if brackets[1] == '>'\n        return false\n    end\n    if brackets[n] ==\
    \ '<'\n        return false\n    end\n    if brackets[1] == '<' && brackets[n]\
    \ == '>'\n        return correct_bracketing(brackets[2:n-1])\n    end\n    if\
    \ brackets[1] == '<' && brackets[n] == '<'\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[1] == '>' && brackets[n] == '>'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\n    if brackets[1] == '>' && brackets[n] == '<'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\nend", "    stack = []\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            push!(stack, bracket)\n        elseif bracket == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    n = length(brackets)\n    if n == 0\n        return\
    \ true\n    end\n    if brackets[1] == '>'\n        return false\n    end\n  \
    \  if brackets[n] == '<'\n        return false\n    end\n    open_brackets = 0\n\
    \    for i in 1:n\n        if brackets[i] == '<'\n            open_brackets +=\
    \ 1\n        elseif brackets[i] == '>'\n            open_brackets -= 1\n     \
    \   end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    if open_brackets == 0\n        return true\n    else\n        return\
    \ false\n    end\nend", "    stack = []\n    for i in brackets\n        if i ==\
    \ '<'\n            push!(stack, i)\n        elseif i == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ open_brackets = 0\n    for c in brackets\n        if c == '<'\n            open_brackets\
    \ += 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for b in brackets\n\
    \        if b == '<'\n            open_brackets += 1\n        elseif b == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    bracket_stack = Stack()\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            push!(bracket_stack, bracket)\n        elseif bracket ==\
    \ '>'\n            if isempty(bracket_stack)\n                return false\n \
    \           else\n                pop!(bracket_stack)\n            end\n     \
    \   end\n    end\n    return isempty(bracket_stack)\nend", "    # YOUR CODE HERE\n\
    \    return false\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    n = length(brackets)\n    if n == 0\n        return true\n    end\n\
    \    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:n])\n    end\n    if brackets[n] == '>'\n    \
    \    return correct_bracketing(brackets[1:n-1])\n    end\n    return correct_bracketing(brackets[2:n-1])\n\
    end", "    open_brackets = 0\n    for c in brackets\n        if c == '<'\n   \
    \         open_brackets += 1\n        elseif c == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_count = 0\n    for b\
    \ in brackets\n        if b == '<'\n            open_count += 1\n        elseif\
    \ b == '>'\n            open_count -= 1\n        end\n        if open_count <\
    \ 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend", "    stack = []\n    for bracket in brackets\n        if bracket ==\
    \ '<'\n            push!(stack, bracket)\n        elseif bracket == '>'\n    \
    \        if isempty(stack)\n                return false\n            else\n \
    \               pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    # YOUR CODE HERE\nend", "    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if brackets[1] == '>'\n    \
    \    return false\n    end\n    if brackets[n] == '<'\n        return false\n\
    \    end\n    if brackets[1] == '<'\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[n] == '>'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\n    return false\nend", "    # Your code here\nend", "    stack = []\n\
    \    for i in brackets\n        if i == '<'\n            push!(stack, i)\n   \
    \     elseif i == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            push!(stack, bracket)\n   \
    \     elseif bracket == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\nend",
  "    # your code here\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    # your code here\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    stack = []\n    for bracket in brackets\n   \
    \     if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    # your code here\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = Stack()\n    for b\
    \ in brackets\n        if b == '<'\n            push!(stack, b)\n        elseif\
    \ b == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == '<'\n            push!(stack, bracket)\n        elseif\
    \ bracket == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            push!(stack, bracket)\n   \
    \     elseif bracket == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\nend",
  "    # YOUR CODE HERE\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    # YOUR CODE HERE\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    open_count = 0\n    for c in brackets\n        if c == '<'\n      \
    \      open_count += 1\n        elseif c == '>'\n            open_count -= 1\n\
    \        end\n        if open_count < 0\n            return false\n        end\n\
    \    end\n    return open_count == 0\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    # YOUR CODE HERE\nend", "    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == \">\"\n        return false\n    end\n    if brackets[n]\
    \ == \"<\"\n        return false\n    end\n    if brackets[1] == \"<\" && brackets[n]\
    \ == \">\"\n        return correct_bracketing(brackets[2:n-1])\n    end\n    if\
    \ brackets[1] == \"<\" && brackets[n] == \"<\"\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[1] == \">\" && brackets[n] == \">\"\n        return\
    \ correct_bracketing(brackets[1:n-1])\n    end\n    if brackets[1] == \">\" &&\
    \ brackets[n] == \"<\"\n        return correct_bracketing(brackets[1:n-1])\n \
    \   end\nend", "    # YOUR CODE HERE\nend", "    # your code here\nend", "   \
    \ stack = []\n    for bracket in brackets\n        if bracket == '<'\n       \
    \     push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    # YOUR CODE HERE\nend", "    # YOUR\
    \ CODE HERE\nend", "    return true\nend", "    # YOUR CODE HERE\nend", "    open_brackets\
    \ = 0\n    for b in brackets\n        if b == '<'\n            open_brackets +=\
    \ 1\n        elseif b == '>'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == \"<\"\n            open_brackets += 1\n \
    \       elseif bracket == \">\"\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    # YOUR CODE HERE\nend", "    open_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_count\
    \ += 1\n        elseif bracket == '>'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == \"<\"\n            push!(stack, bracket)\n        elseif\
    \ bracket == \">\"\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\nend", "    stack\
    \ = []\n    for bracket in brackets\n        if bracket == \"<\"\n           \
    \ push!(stack, bracket)\n        elseif bracket == \">\"\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ stack = []\n    for bracket in brackets\n        if bracket == '<'\n       \
    \     push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    stack\
    \ = []\n    for bracket in brackets\n        if bracket == \"<\"\n           \
    \ push!(stack, bracket)\n        elseif bracket == \">\"\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ # your code here\nend", "    # YOUR CODE HERE\nend", "    stack = []\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n\
    \    for b in brackets\n        if b == '<'\n            open_brackets += 1\n\
    \        elseif b == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    stack = []\n    for bracket in brackets\n   \
    \     if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == '<'\n            push!(stack, bracket)\n        elseif\
    \ bracket == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    open_brackets = 0\n    for i in\
    \ 1:length(brackets)\n        if brackets[i] == '<'\n            open_brackets\
    \ += 1\n        elseif brackets[i] == '>'\n            open_brackets -= 1\n  \
    \      end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    # YOUR CODE HERE\nend", "    # your\
    \ code here\nend", "    # initialize a stack\n    stack = []\n    # loop through\
    \ the string\n    for bracket in brackets\n        # if the bracket is an opening\
    \ bracket, push it to the stack\n        if bracket == \"<\"\n            push!(stack,\
    \ bracket)\n        # if the bracket is a closing bracket, pop the last bracket\
    \ from the stack\n        elseif bracket == \">\"\n            pop!(stack)\n \
    \       end\n    end\n    # if the stack is empty, then the brackets are correctly\
    \ paired\n    return isempty(stack)\nend", "    n = length(brackets)\n    if n\
    \ == 0\n        return true\n    end\n    if n == 1\n        return false\n  \
    \  end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    # now we know that the first and\
    \ last brackets are correct\n    # and that the string is at least two characters\
    \ long\n    # so we can remove the first and last brackets\n    return correct_bracketing(brackets[2:n-1])\n\
    end", "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n\
    \            push!(stack, bracket)\n        elseif bracket == '>'\n          \
    \  if isempty(stack)\n                return false\n            else\n       \
    \         pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    stack = []\n    for b in brackets\n        if b == '<'\n          \
    \  push!(stack, b)\n        elseif b == '>'\n            if isempty(stack)\n \
    \               return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ stack = []\n    for bracket in brackets\n        if bracket == '<'\n       \
    \     push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ open_brackets = 0\n    for c in brackets\n        if c == '<'\n            open_brackets\
    \ += 1\n        elseif c == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    if length(brackets) == 0\n        return\
    \ true\n    end\n    if brackets[1] == '<'\n        if brackets[end] == '>'\n\
    \            return correct_bracketing(brackets[2:end-1])\n        else\n    \
    \        return false\n        end\n    else\n        return false\n    end\n\
    end", "    # YOUR CODE HERE\n    return true\nend", "    stack = []\n    for c\
    \ in brackets\n        if c == '<'\n            push!(stack, c)\n        elseif\
    \ c == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == '<'\n            push!(stack, bracket)\n        elseif\
    \ bracket == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    if brackets == \"\"\n        return\
    \ true\n    end\n    if brackets[1] == '<'\n        if brackets[end] == '>'\n\
    \            return correct_bracketing(brackets[2:end-1])\n        else\n    \
    \        return false\n        end\n    else\n        return false\n    end\n\
    end", "    if length(brackets) == 0\n        return true\n    end\n    if brackets[1]\
    \ == '<'\n        if brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend", "    stack = []\n    for bracket in brackets\n       \
    \ if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    # YOUR CODE HERE\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            push!(stack, bracket)\n   \
    \     elseif bracket == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    open_count = 0\n    for\
    \ c in brackets\n        if c == '<'\n            open_count += 1\n        elseif\
    \ c == '>'\n            open_count -= 1\n        end\n        if open_count <\
    \ 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n      \
    \      push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ if length(brackets) == 0\n        return true\n    end\n    if brackets[1] ==\
    \ '<'\n        if brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend", "    stack = []\n    for bracket in brackets\n       \
    \ if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == \"<\"\n            push!(stack, bracket)\n        elseif\
    \ bracket == \">\"\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\nend", "    stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    #\
    \ YOUR CODE HERE\n    open_bracket = 0\n    close_bracket = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            open_bracket += 1\n        elseif\
    \ brackets[i] == '>'\n            close_bracket += 1\n        end\n    end\n \
    \   if open_bracket == close_bracket\n        return true\n    else\n        return\
    \ false\n    end\nend", "    # YOUR CODE HERE\nend", "    open_brackets = 0\n\
    \    for b in brackets\n        if b == '<'\n            open_brackets += 1\n\
    \        elseif b == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    stack = []\n    for bracket in brackets\n   \
    \     if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    if isempty(stack)\n        return true\n    else\n        return false\n\
    \    end\nend", "    # YOUR CODE HERE\n    return false\nend", "    stack = []\n\
    \    for b in brackets\n        if b == '<'\n            push!(stack, b)\n   \
    \     elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            push!(stack, bracket)\n   \
    \     elseif bracket == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n \
    \   for i in 1:length(brackets)\n        if brackets[i] == '<'\n            open_brackets\
    \ += 1\n        elseif brackets[i] == '>'\n            open_brackets -= 1\n  \
    \      end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for\
    \ b in brackets\n        if b == '<'\n            push!(stack, b)\n        elseif\
    \ b == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\n    return false\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    # YOUR CODE HERE\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    open_count = 0\n    for b in brackets\n        if b == '<'\n\
    \            open_count += 1\n        elseif b == '>'\n            open_count\
    \ -= 1\n        end\n        if open_count < 0\n            return false\n   \
    \     end\n    end\n    return open_count == 0\nend", "    stack = []\n    for\
    \ c in brackets\n        if c == '<'\n            push!(stack, c)\n        elseif\
    \ c == '>'\n            if isempty(stack)\n                return false\n    \
    \        else\n                pop!(stack)\n            end\n        end\n   \
    \ end\n    return isempty(stack)\nend", "    open_brackets = 0\n    for c in brackets\n\
    \        if c == '<'\n            open_brackets += 1\n        elseif c == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    # your code here\nend", "    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    # YOUR CODE HERE\nend", "    # your code here\n\
    \    return false\nend", "    # YOUR CODE HERE\nend", "    n = length(brackets)\n\
    \    if n == 0\n        return true\n    end\n    if n % 2 != 0\n        return\
    \ false\n    end\n    stack = []\n    for i in 1:n\n        if brackets[i] ==\
    \ '<'\n            push!(stack, brackets[i])\n        elseif brackets[i] == '>'\n\
    \            if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    stack = []\n    for bracket in brackets\n       \
    \ if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend", "    stack = []\n    for bracket in brackets\n\
    \        if bracket == '<'\n            push!(stack, bracket)\n        elseif\
    \ bracket == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            push!(stack, bracket)\n   \
    \     elseif bracket == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    stack = []\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            push!(stack, bracket)\n\
    \        elseif bracket == '>'\n            if isempty(stack)\n              \
    \  return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    # YOUR CODE HERE\n\
    end", "    bracket_stack = Stack()\n    for bracket in brackets\n        if bracket\
    \ == \"<\"\n            push!(bracket_stack, bracket)\n        elseif bracket\
    \ == \">\"\n            if isempty(bracket_stack)\n                return false\n\
    \            else\n                pop!(bracket_stack)\n            end\n    \
    \    end\n    end\n    return isempty(bracket_stack)\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    stack\
    \ = []\n    for i in brackets\n        if i == '<'\n            push!(stack, i)\n\
    \        elseif i == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n \
    \   for i in brackets\n        if i == '<'\n            open_brackets += 1\n \
    \       elseif i == '>'\n            open_brackets -= 1\n        end\n       \
    \ if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    # YOUR CODE HERE\nend", "    stack = []\n   \
    \ for b in brackets\n        if b == '<'\n            push!(stack, b)\n      \
    \  elseif b == '>'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend", "    stack = []\n    for bracket in\
    \ brackets\n        if bracket == \"<\"\n            push!(stack, bracket)\n \
    \       elseif bracket == \">\"\n            if isempty(stack)\n             \
    \   return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    # YOUR CODE HERE\nend", " \
    \   stack = []\n    for bracket in brackets\n        if bracket == \"<\"\n   \
    \         push!(stack, bracket)\n        elseif bracket == \">\"\n           \
    \ if isempty(stack)\n                return false\n            else\n        \
    \        pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n\
    \            push!(stack, bracket)\n        elseif bracket == '>'\n          \
    \  if isempty(stack)\n                return false\n            else\n       \
    \         pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n\
    \            push!(stack, bracket)\n        elseif bracket == '>'\n          \
    \  if isempty(stack)\n                return false\n            else\n       \
    \         pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n\
    \            push!(stack, bracket)\n        elseif bracket == '>'\n          \
    \  if isempty(stack)\n                return false\n            else\n       \
    \         pop!(stack)\n            end\n        end\n    end\n    return isempty(stack)\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    stack = []\n    for bracket in brackets\n        if bracket == '<'\n      \
    \      push!(stack, bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n\
    \                return false\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return isempty(stack)\nend", "   \
    \ open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == \"<\"\n            open_brackets\
    \ += 1\n        elseif bracket == \">\"\n            open_brackets -= 1\n    \
    \    end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    # YOUR CODE HERE\nend", " \
    \   # YOUR CODE HERE\nend", "    stack = []\n    for i in brackets\n        if\
    \ i == '<'\n            push!(stack, i)\n        elseif i == '>'\n           \
    \ if isempty(stack)\n                return false\n            else\n        \
    \        pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return true\n    else\n        return false\n    end\nend", "    stack\
    \ = []\n    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    #\
    \ your code here\nend", "    open_brackets = 0\n    for b in brackets\n      \
    \  if b == '<'\n            open_brackets += 1\n        elseif b == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    stack = []\n    for b in brackets\n        if b == '<'\n            push!(stack,\
    \ b)\n        elseif b == '>'\n            if isempty(stack)\n               \
    \ return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_count = 0\n\
    \    for c in brackets\n        if c == '<'\n            open_count += 1\n   \
    \     elseif c == '>'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend", "    # YOUR CODE HERE\nend", "    stack = []\n    for b in brackets\n\
    \        if b == '<'\n            push!(stack, b)\n        elseif b == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    # your code here\nend", "    # YOUR CODE HERE\nend",
  "    open_brackets = 0\n    for c in brackets\n        if c == '<'\n           \
    \ open_brackets += 1\n        elseif c == '>'\n            open_brackets -= 1\n\
    \        end\n        if open_brackets < 0\n            return false\n       \
    \ end\n    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n\
    \    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    n = length(brackets)\n   \
    \ if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    if brackets[1] == '<' && brackets[n]\
    \ == '>'\n        return correct_bracketing(brackets[2:n-1])\n    end\n    if\
    \ brackets[1] == '<' && brackets[n] == '<'\n        return correct_bracketing(brackets[2:n])\n\
    \    end\n    if brackets[1] == '>' && brackets[n] == '>'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\n    if brackets[1] == '>' && brackets[n] == '<'\n        return correct_bracketing(brackets[1:n-1])\n\
    \    end\nend", "    open_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    # YOUR CODE HERE\n    return true\nend", "    # YOUR CODE HERE\nend",
  "    stack = []\n    for i in brackets\n        if i == '<'\n            push!(stack,\
    \ i)\n        elseif i == '>'\n            if isempty(stack)\n               \
    \ return false\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return isempty(stack)\nend", "    open_brackets = 0\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '<'\n            open_brackets\
    \ += 1\n        elseif brackets[i] == '>'\n            open_brackets -= 1\n  \
    \      end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    stack = []\n    for i in brackets\n\
    \        if i == '<'\n            push!(stack, i)\n        elseif i == '>'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    # YOUR CODE HERE\nend", "    open_brackets = 0\n\
    \    for c in brackets\n        if c == '<'\n            open_brackets += 1\n\
    \        elseif c == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    open_brackets = 0\n    for b in brackets\n        if b == '<'\n\
    \            open_brackets += 1\n        elseif b == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    stack = []\n\
    \    for bracket in brackets\n        if bracket == '<'\n            push!(stack,\
    \ bracket)\n        elseif bracket == '>'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend", "    stack\
    \ = []\n    for c in brackets\n        if c == '<'\n            push!(stack, c)\n\
    \        elseif c == '>'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    return isempty(stack)\nend", "    # initialize a counter\
    \ for open brackets\n    open_brackets = 0\n    # loop through the string\n  \
    \  for b in brackets\n        # if the character is an open bracket, increment\
    \ the counter\n        if b == '<'\n            open_brackets += 1\n        #\
    \ if the character is a close bracket, decrement the counter\n        elseif b\
    \ == '>'\n            open_brackets -= 1\n        end\n        # if the counter\
    \ is negative, we have a closing bracket without an opening bracket\n        if\
    \ open_brackets < 0\n            return false\n        end\n    end\n    # if\
    \ the counter is zero, we have the same number of open and close brackets\n  \
    \  return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    # your code here\nend", "    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    # TODO: implement this function\n\
    \    return true\nend", "    stack = []\n    for bracket in brackets\n       \
    \ if bracket == '<'\n            push!(stack, bracket)\n        elseif bracket\
    \ == '>'\n            if isempty(stack)\n                return false\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return isempty(stack)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
