language: jl
name: HumanEval_110_exchange
results:
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    \"\"\"\n    >>> exchange([1, 3, 5], [2, 4, 6])\n    'YES'\n    >>> exchange([1,\
    \ 3, 5], [2, 4, 8])\n    'NO'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8])\n   \
    \ 'YES'\n    >>> exchange([1, 3, 5], [2, 4, 6, 10])\n    'NO'\n    >>> exchange([1,\
    \ 3, 5], [2, 4, 6, 8, 10])\n    'YES'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8,\
    \ 12])\n    'YES'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8, 14])\n    'NO'\n \
    \   >>> exchange([1, 3, 5], [2, 4, 6, 8, 16])\n    'YES'\n    >>> exchange([1,\
    \ 3, 5], [2, 4, 6, 8, 18])\n    'NO'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8,\
    \ 20])\n    'YES'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8, 22])\n    'NO'\n \
    \   >>> exchange([1, 3, 5], [2, 4, 6, 8, 24])\n    'YES'\n    >>> exchange([1,\
    \ 3, 5], [2, 4, 6, 8, 26])\n    'NO'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8,\
    \ 28])\n    'YES'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8, 30])\n    'NO'\n \
    \   >>> exchange([1, 3, 5], [2, 4, 6, 8, 32])\n    'YES'\n    >>> exchange([1,\
    \ 3, 5], [2, 4, 6, 8, 34])\n    'NO'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8,\
    \ 36])\n    'YES'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8, 38])\n    'NO'\n \
    \   >>> exchange([1, 3\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzun7yaaf.jl:1\nin expression starting at /tmp/tmpzun7yaaf.jl:1\n"
  stdout: ''
  timestamp: 1659747554
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in lst1\n            if mod(i, 2) != 0\n                for j in lst2\n\
    \                    if mod(j, 2) == 0\n                        lst1[findall(lst1\
    \ .== i)[1]] = j\n                        lst2[findall(lst2 .== j)[1]] = i\n \
    \                       break\n                    end\n                end\n\
    \            end\n        end\n        if all(mod.(lst1, 2) .== 0)\n         \
    \   return \"YES\"\n        else\n            return \"NO\"\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in lst1\n            if mod(i, 2) != 0\n                for j in lst2\n\
    \                    if mod(j, 2) == 0\n                        return \"YES\"\
    \n                    end\n                end\n            end\n        end\n\
    \    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv4ljxoco.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpv4ljxoco.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv4ljxoco.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv4ljxoco.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpv4ljxoco.jl:36\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv4ljxoco.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv4ljxoco.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(isodd, lst1)\n        return \"NO\"\n    end\n    if all(iseven,\
    \ lst1)\n        return \"YES\"\n    end\n    for i in 1:length(lst1)\n      \
    \  if isodd(lst1[i])\n            for j in 1:length(lst2)\n                if\
    \ iseven(lst2[j])\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n \
    \                   break\n                end\n            end\n        end\n\
    \    end\n    if all(iseven, lst1)\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8xm82erw.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp8xm82erw.jl:42\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8xm82erw.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8xm82erw.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    # You can also define new functions\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpmthkllzz.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpmthkllzz.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpmthkllzz.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmthkllzz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmthkllzz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpmthkllzz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpmthkllzz.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmthkllzz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    # You can also define new functions\n    if all(isodd,\
    \ lst1)\n        return \"NO\"\n    end\n    if all(iseven, lst1)\n        return\
    \ \"YES\"\n    end\n    for i in 1:length(lst1)\n        if isodd(lst1[i])\n \
    \           for j in 1:length(lst2)\n                if iseven(lst2[j])\n    \
    \                lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ exchange(lst1, lst2)\n                end\n            end\n        end\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpmthxgzvv.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpmthxgzvv.jl:37\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\
    \ (repeats 2 times)\n     @ Main /tmp/tmpmthxgzvv.jl:25\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmthxgzvv.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmthxgzvv.jl:35\ntest set:\
    \ Test Failed at /tmp/tmpmthxgzvv.jl:39\n  Expression: candidate([5, 7, 3], [2,\
    \ 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmthxgzvv.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmthxgzvv.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpmthxgzvv.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    # You can also define new functions\n    if all(mod.(lst1,\
    \ 2) .== 0)\n        return \"YES\"\n    end\n    for i in lst1\n        if mod(i,\
    \ 2) != 0\n            for j in lst2\n                if mod(j, 2) == 0\n    \
    \                lst1[findall(lst1 .== i)] = j\n                    lst2[findall(lst2\
    \ .== j)] = i\n                    if all(mod.(lst1, 2) .== 0)\n             \
    \           return \"YES\"\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp7b0s_9ih.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp7b0s_9ih.jl:37\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmp7b0s_9ih.jl:21\n   [6] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp7b0s_9ih.jl:37 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp7b0s_9ih.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp7b0s_9ih.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  ArgumentError: indexed assignment\
    \ with a single value to possibly many locations is not supported; perhaps use\
    \ broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})\n     @ Main /tmp/tmp7b0s_9ih.jl:21\n   [6] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp7b0s_9ih.jl:38 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inl"
  timestamp: 1659747556
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    \"\"\"\n    >>> exchange([1, 2, 3], [4, 5, 6])\n    'YES'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 6, 7])\n    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6, 7, 8])\n\
    \    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6, 7, 8, 9])\n    'YES'\n    >>>\
    \ exchange([1, 2, 3], [4, 5, 6, 7, 8, 9, 10])\n    'YES'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 6, 7, 8, 9, 10, 11])\n    'YES'\n    >>> exchange([1, 2, 3], [4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12])\n    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13])\n    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14])\n    'YES'\n    >>> exchange([1, 2, 3], [4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    'YES'\n    >>> exchange([1, 2, 3],\
    \ [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    'YES'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    'YES'\n    >>>\
    \ exchange([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n\
    \    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19])\n    'YES'\n    >>> exchange([\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87y9b93a.jl:1\nin expression starting at /tmp/tmp87y9b93a.jl:1\n"
  stdout: ''
  timestamp: 1659747554
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    if all(x -> x % 2 == 0, lst1)\n        return \"\
    YES\"\n    end\n    for i in 1:length(lst1)\n        for j in 1:length(lst2)\n\
    \            if lst1[i] % 2 != 0 && lst2[j] % 2 != 0\n                lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                if all(x -> x % 2 == 0, lst1)\n\
    \                    return \"YES\"\n                end\n            end\n  \
    \      end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9g87ccgc.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp9g87ccgc.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9g87ccgc.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9g87ccgc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9g87ccgc.jl:35\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9g87ccgc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9g87ccgc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9g87ccgc.jl:36\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9g87ccgc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9g87ccgc.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       break\n                    end\n                end\n            end\n\
    \        end\n        if all(mod.(lst1, 2) .== 0)\n            return \"YES\"\n\
    \        else\n            return \"NO\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst1, 2) .== 0) && all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqj4afpbe.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpqj4afpbe.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqj4afpbe.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqj4afpbe.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqj4afpbe.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqj4afpbe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqj4afpbe.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code goes here\n    return \"YES\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2ynq6t1v.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp2ynq6t1v.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ynq6t1v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ynq6t1v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2ynq6t1v.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ynq6t1v.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ynq6t1v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp2ynq6t1v.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ynq6t1v.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ynq6t1v.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovrj3rao.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpovrj3rao.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpovrj3rao.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       if all(mod.(lst1, 2) .== 0)\n                            return \"YES\"\
    \n                        end\n                    end\n                end\n\
    \            end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    # You can also define new functions\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpmthkllzz.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpmthkllzz.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpmthkllzz.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmthkllzz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmthkllzz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpmthkllzz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpmthkllzz.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmthkllzz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x -> x % 2 == 0, lst1)\n        return \"YES\"\n    else\n    \
    \    for i in 1:length(lst1)\n            for j in 1:length(lst2)\n          \
    \      if (lst1[i] % 2 == 1) && (lst2[j] % 2 == 1)\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    if all(x -> x % 2 == 0, lst1)\n\
    \                        return \"YES\"\n                    else\n          \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    end\n\
    \                end\n            end\n        end\n    end\n    return \"NO\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwl0xif5q.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpwl0xif5q.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl0xif5q.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl0xif5q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwl0xif5q.jl:37\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl0xif5q.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl0xif5q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwl0xif5q.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl0xif5q.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl0xif5q.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1rceld4z.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp1rceld4z.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1rceld4z.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1rceld4z.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1rceld4z.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1rceld4z.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1rceld4z.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1rceld4z.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1rceld4z.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1rceld4z.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovrj3rao.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpovrj3rao.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpovrj3rao.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpt52oz8rj.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpt52oz8rj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpt52oz8rj.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt52oz8rj.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt52oz8rj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpt52oz8rj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpt52oz8rj.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt52oz8rj.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       break\n                    end\n                end\n            end\n\
    \        end\n        if all(mod.(lst1, 2) .== 0)\n            return \"YES\"\n\
    \        else\n            return \"NO\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x % 2 == 0 for x in lst1)\n        return \"YES\"\n    else\n \
    \       for i in 1:length(lst1)\n            for j in 1:length(lst2)\n       \
    \         if (lst1[i] % 2 == 1) && (lst2[j] % 2 == 1)\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    if all(x % 2 == 0 for x in lst1)\n\
    \                        return \"YES\"\n                    else\n          \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    end\n\
    \                end\n            end\n        end\n    end\n    return \"NO\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpuwy7m6bf.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpuwy7m6bf.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwy7m6bf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwy7m6bf.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpuwy7m6bf.jl:37\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwy7m6bf.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwy7m6bf.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpuwy7m6bf.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuwy7m6bf.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuwy7m6bf.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747556
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovrj3rao.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpovrj3rao.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpovrj3rao.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp15mwpxp_.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp15mwpxp_.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp15mwpxp_.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15mwpxp_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp15mwpxp_.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp15mwpxp_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp15mwpxp_.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp15mwpxp_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747558
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x->x%2==0, lst1)\n        return \"YES\"\n    else\n        for\
    \ i in 1:length(lst1)\n            for j in 1:length(lst2)\n                if\
    \ (lst1[i]%2==1) && (lst2[j]%2==1)\n                    lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n                    if all(x->x%2==0, lst1)\n                     \
    \   return \"YES\"\n                    else\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    end\n                end\n \
    \           end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsw_k6q2n.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpsw_k6q2n.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsw_k6q2n.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsw_k6q2n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsw_k6q2n.jl:37\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsw_k6q2n.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsw_k6q2n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsw_k6q2n.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsw_k6q2n.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsw_k6q2n.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747556
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovrj3rao.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpovrj3rao.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpovrj3rao.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            for j in 1:length(lst2)\n            \
    \    if mod(lst1[i], 2) != 0 && mod(lst2[j], 2) == 0\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    if all(mod.(lst1, 2) .== 0)\n\
    \                        return \"YES\"\n                    end\n           \
    \     end\n            end\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x -> x % 2 == 0, lst1)\n        return \"YES\"\n    elseif all(x\
    \ -> x % 2 == 0, lst2)\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphn_52cij.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmphn_52cij.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphn_52cij.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphn_52cij.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphn_52cij.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphn_52cij.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphn_52cij.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovrj3rao.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpovrj3rao.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpovrj3rao.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       if all(mod.(lst1, 2) .== 0)\n                            return \"YES\"\
    \n                        end\n                    end\n                end\n\
    \            end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst1, 2) .== 0) && all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqj4afpbe.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpqj4afpbe.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqj4afpbe.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqj4afpbe.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqj4afpbe.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqj4afpbe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqj4afpbe.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       break\n                    end\n                end\n            end\n\
    \        end\n        if all(mod.(lst1, 2) .== 0)\n            return \"YES\"\n\
    \        else\n            return \"NO\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    \"\"\"\n    >>> exchange([1,2,3,4,5], [6,7,8,9,10])\n    'YES'\n    >>>\
    \ exchange([1,2,3,4,5], [6,7,8,9,11])\n    'NO'\n    \"\"\"\n    if all(mod.(lst1,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        for i in lst1\n       \
    \     if mod(i, 2) != 0\n                for j in lst2\n                    if\
    \ mod(j, 2) == 0\n                        return \"YES\"\n                   \
    \ end\n                end\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_wx8h79x.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp_wx8h79x.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_wx8h79x.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_wx8h79x.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp_wx8h79x.jl:42\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_wx8h79x.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_wx8h79x.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in lst1\n            if mod(i, 2) != 0\n                for j in lst2\n\
    \                    if mod(j, 2) == 0\n                        lst1[i] = j\n\
    \                        lst2[j] = i\n                        if all(mod.(lst1,\
    \ 2) .== 0)\n                            return \"YES\"\n                    \
    \    end\n                    end\n                end\n            end\n    \
    \    end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpbkyxwkhc.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpbkyxwkhc.jl:36\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbkyxwkhc.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbkyxwkhc.jl:35\ntest set: Error\
    \ During Test at /tmp/tmpbkyxwkhc.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpbkyxwkhc.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbkyxwkhc.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbkyxwkhc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpbkyxwkhc.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([5, 7, 3], [2, 6, 3]) == \"NO\"\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpbkyxwkhc.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbkyxwkhc.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbkyxwkhc.jl:35\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    4     1      2      7\n"
  timestamp: 1659747558
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    # You can also define new functions\n    # You can\
    \ also use multiple dispatch\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpi5guk1wi.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpi5guk1wi.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpi5guk1wi.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5guk1wi.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5guk1wi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpi5guk1wi.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpi5guk1wi.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5guk1wi.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747559
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovrj3rao.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpovrj3rao.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpovrj3rao.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       if all(mod.(lst1, 2) .== 0)\n                            return \"YES\"\
    \n                        end\n                    end\n                end\n\
    \            end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x -> x % 2 == 0, lst1)\n        return \"YES\"\n    else\n    \
    \    for i in 1:length(lst1)\n            for j in 1:length(lst2)\n          \
    \      if lst1[i] % 2 != 0 && lst2[j] % 2 != 0\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                    if all(x -> x % 2 == 0, lst1)\n    \
    \                    return \"YES\"\n                    else\n              \
    \          lst1[i], lst2[j] = lst2[j], lst1[i]\n                    end\n    \
    \            end\n            end\n        end\n    end\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp86k6ra6d.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp86k6ra6d.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86k6ra6d.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86k6ra6d.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp86k6ra6d.jl:37\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86k6ra6d.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86k6ra6d.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp86k6ra6d.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86k6ra6d.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86k6ra6d.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x -> x % 2 == 0, lst1)\n        return \"YES\"\n    else\n    \
    \    for i in 1:length(lst1)\n            for j in 1:length(lst2)\n          \
    \      if lst1[i] % 2 != 0 && lst2[j] % 2 != 0\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                    if all(x -> x % 2 == 0, lst1)\n    \
    \                    return \"YES\"\n                    else\n              \
    \          lst1[i], lst2[j] = lst2[j], lst1[i]\n                    end\n    \
    \            end\n            end\n        end\n    end\n    return \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp86k6ra6d.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp86k6ra6d.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86k6ra6d.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86k6ra6d.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp86k6ra6d.jl:37\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86k6ra6d.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86k6ra6d.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp86k6ra6d.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp86k6ra6d.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp86k6ra6d.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            for j in 1:length(lst2)\n            \
    \    if mod(lst1[i], 2) != 0 && mod(lst2[j], 2) == 0\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    if all(mod.(lst1, 2) .== 0)\n\
    \                        return \"YES\"\n                    end\n           \
    \     end\n            end\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            for j in 1:length(lst2)\n            \
    \    if mod(lst1[i], 2) != 0 && mod(lst2[j], 2) == 0\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    if all(mod.(lst1, 2) .== 0)\n\
    \                        return \"YES\"\n                    end\n           \
    \     end\n            end\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    # You can also define new functions\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpmthkllzz.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpmthkllzz.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpmthkllzz.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmthkllzz.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmthkllzz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpmthkllzz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpmthkllzz.jl:14\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmthkllzz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(isodd, lst1)\n        return \"NO\"\n    end\n    for i in lst1\n\
    \        if isodd(i)\n            for j in lst2\n                if iseven(j)\n\
    \                    return \"YES\"\n                end\n            end\n  \
    \      end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyh64y6bx.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpyh64y6bx.jl:32\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyh64y6bx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyh64y6bx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpyh64y6bx.jl:34\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyh64y6bx.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyh64y6bx.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpyh64y6bx.jl:37\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyh64y6bx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyh64y6bx.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            for j in 1:length(lst2)\n            \
    \    if mod(lst1[i], 2) != 0 && mod(lst2[j], 2) == 0\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    if all(mod.(lst1, 2) .== 0)\n\
    \                        return \"YES\"\n                    end\n           \
    \     end\n            end\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       if all(mod.(lst1, 2) .== 0)\n                            return \"YES\"\
    \n                        end\n                    end\n                end\n\
    \            end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    for i in lst1\n        if i % 2 != 0\n         \
    \   for j in lst2\n                if j % 2 == 0\n                    return \"\
    YES\"\n                end\n            end\n        end\n    end\n    return\
    \ \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpylpz9kro.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpylpz9kro.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylpz9kro.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylpz9kro.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpylpz9kro.jl:33\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylpz9kro.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylpz9kro.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpylpz9kro.jl:35\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylpz9kro.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylpz9kro.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    lst1_even = all(x -> iseven(x), lst1)\n    lst2_even = all(x -> iseven(x),\
    \ lst2)\n    if lst1_even && lst2_even\n        return \"YES\"\n    elseif lst1_even\
    \ && !lst2_even\n        return \"NO\"\n    elseif !lst1_even && lst2_even\n \
    \       return \"NO\"\n    else\n        return \"YES\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbyp9aoxz.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpbyp9aoxz.jl:30\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbyp9aoxz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbyp9aoxz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbyp9aoxz.jl:32\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbyp9aoxz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbyp9aoxz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbyp9aoxz.jl:33\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbyp9aoxz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbyp9aoxz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbyp9aoxz.jl:34\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbyp9aoxz.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbyp9aoxz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst1, 2) .== 0) && all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqj4afpbe.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpqj4afpbe.jl:27\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqj4afpbe.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqj4afpbe.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqj4afpbe.jl:29\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqj4afpbe.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqj4afpbe.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       break\n                    end\n                end\n            end\n\
    \        end\n        if all(mod.(lst1, 2) .== 0)\n            return \"YES\"\n\
    \        else\n            return \"NO\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x -> x % 2 == 0, lst1)\n        return \"YES\"\n    else\n    \
    \    for i in 1:length(lst1)\n            for j in 1:length(lst2)\n          \
    \      if (lst1[i] % 2 == 1) && (lst2[j] % 2 == 1)\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    if all(x -> x % 2 == 0, lst1)\n\
    \                        return \"YES\"\n                    else\n          \
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n                    end\n\
    \                end\n            end\n        end\n    end\n    return \"NO\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwl0xif5q.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpwl0xif5q.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl0xif5q.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl0xif5q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwl0xif5q.jl:37\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl0xif5q.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl0xif5q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwl0xif5q.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl0xif5q.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl0xif5q.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovrj3rao.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpovrj3rao.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpovrj3rao.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x -> x % 2 == 0, lst1)\n        return \"YES\"\n    else\n    \
    \    for i in 1:length(lst1)\n            if lst1[i] % 2 != 0\n              \
    \  for j in 1:length(lst2)\n                    if lst2[j] % 2 != 0\n        \
    \                lst1[i], lst2[j] = lst2[j], lst1[i]\n                       \
    \ if all(x -> x % 2 == 0, lst1)\n                            return \"YES\"\n\
    \                        else\n                            lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                        end\n                    end\n   \
    \             end\n            end\n        end\n    end\n    return \"NO\"\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpltup7bwx.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpltup7bwx.jl:37\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpltup7bwx.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpltup7bwx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpltup7bwx.jl:39\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpltup7bwx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpltup7bwx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpltup7bwx.jl:40\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpltup7bwx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpltup7bwx.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(isodd, lst1)\n        return \"NO\"\n    end\n    for i in 1:length(lst1)\n\
    \        if isodd(lst1[i])\n            for j in 1:length(lst2)\n            \
    \    if iseven(lst2[j])\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    if all(iseven, lst1)\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2gnrfo1u.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp2gnrfo1u.jl:39\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2gnrfo1u.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2gnrfo1u.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwbfk__da.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpwbfk__da.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwbfk__da.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwbfk__da.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwbfk__da.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # YOUR CODE HERE\n    even_lst1 = 0\n    for i in lst1\n        if i %\
    \ 2 == 0\n            even_lst1 += 1\n        end\n    end\n    even_lst2 = 0\n\
    \    for i in lst2\n        if i % 2 == 0\n            even_lst2 += 1\n      \
    \  end\n    end\n    if even_lst1 == length(lst1)\n        return \"YES\"\n  \
    \  elseif even_lst2 == length(lst2)\n        return \"YES\"\n    elseif even_lst1\
    \ + even_lst2 >= length(lst1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747556
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkbf8bdv6.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpkbf8bdv6.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpkbf8bdv6.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkbf8bdv6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkbf8bdv6.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       if all(mod.(lst1, 2) .== 0)\n                            return \"YES\"\
    \n                        end\n                    end\n                end\n\
    \            end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       break\n                    end\n                end\n            end\n\
    \        end\n        if all(mod.(lst1, 2) .== 0)\n            return \"YES\"\n\
    \        else\n            return \"NO\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"YES\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmrfns93o.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpmrfns93o.jl:21\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:24\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 3]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmrfns93o.jl:25\n  Expression: candidate([3, 2, 6, 1, 8, 9],\
    \ [3, 5, 5, 1, 1, 1]) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmrfns93o.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmrfns93o.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x->x%2==0, lst1)\n        return \"YES\"\n    else\n        for\
    \ i in 1:length(lst1)\n            for j in 1:length(lst2)\n                if\
    \ (lst1[i]%2==1) && (lst2[j]%2==1)\n                    lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n                    if all(x->x%2==0, lst1)\n                     \
    \   return \"YES\"\n                    else\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                    end\n                end\n \
    \           end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsw_k6q2n.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpsw_k6q2n.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsw_k6q2n.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsw_k6q2n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsw_k6q2n.jl:37\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsw_k6q2n.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsw_k6q2n.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpsw_k6q2n.jl:38\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsw_k6q2n.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsw_k6q2n.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  timestamp: 1659747556
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(x -> x % 2 == 0, lst1)\n        return \"YES\"\n    elseif all(x\
    \ -> x % 2 == 0, lst2)\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphn_52cij.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmphn_52cij.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphn_52cij.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphn_52cij.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphn_52cij.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphn_52cij.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphn_52cij.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747557
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    else\n      \
    \  for i in 1:length(lst1)\n            if mod(lst1[i], 2) != 0\n            \
    \    for j in 1:length(lst2)\n                    if mod(lst2[j], 2) == 0\n  \
    \                      lst1[i], lst2[j] = lst2[j], lst1[i]\n                 \
    \       if all(mod.(lst1, 2) .== 0)\n                            return \"YES\"\
    \n                        end\n                    end\n                end\n\
    \            end\n        end\n    end\n    return \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747553
- exit_code: 0
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    \"\"\"\n    \"\"\"\n    if all(mod.(lst1, 2) .== 0)\n        return \"\
    YES\"\n    else\n        for i in 1:length(lst1)\n            if mod(lst1[i],\
    \ 2) != 0\n                for j in 1:length(lst2)\n                    if mod(lst2[j],\
    \ 2) == 0\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \                   if all(mod.(lst1, 2) .== 0)\n                            return\
    \ \"YES\"\n                        end\n                    end\n            \
    \    end\n            end\n        end\n    end\n    return \"NO\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659747556
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(mod.(lst1, 2) .== 0)\n        return \"YES\"\n    elseif all(mod.(lst2,\
    \ 2) .== 0)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovrj3rao.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpovrj3rao.jl:25\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpovrj3rao.jl:27\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovrj3rao.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovrj3rao.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpt52oz8rj.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpt52oz8rj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpt52oz8rj.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt52oz8rj.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt52oz8rj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpt52oz8rj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpt52oz8rj.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt52oz8rj.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    lst1_even = iseven.(lst1)\n    lst2_even = iseven.(lst2)\n    if all(lst1_even)\n\
    \        return \"YES\"\n    elseif all(lst2_even)\n        return \"YES\"\n \
    \   elseif all(lst1_even) && all(lst2_even)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzckyejjf.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpzckyejjf.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzckyejjf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzckyejjf.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzckyejjf.jl:31\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzckyejjf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzckyejjf.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    if all(isodd, lst1)\n        return \"NO\"\n    end\n    for i in 1:length(lst1)\n\
    \        if isodd(lst1[i])\n            for j in 1:length(lst2)\n            \
    \    if iseven(lst2[j])\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    if all(iseven, lst1)\n        return \"YES\"\n    else\n       \
    \ return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2gnrfo1u.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp2gnrfo1u.jl:39\n  Expression: candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2gnrfo1u.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2gnrfo1u.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6fyqq0e6.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6fyqq0e6.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6fyqq0e6.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6fyqq0e6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmp6fyqq0e6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6fyqq0e6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    \"\"\"\n    >>> exchange([1, 2, 3], [4, 5, 6])\n    'YES'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 7])\n    'NO'\n    >>> exchange([1, 2, 3], [4, 5, 6, 7])\n   \
    \ 'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6, 8])\n    'YES'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 6, 9])\n    'NO'\n    >>> exchange([1, 2, 3], [4, 5, 6, 10])\n\
    \    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6, 11])\n    'NO'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 6, 12])\n    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6, 13])\n\
    \    'NO'\n    >>> exchange([1, 2, 3], [4, 5, 6, 14])\n    'YES'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 6, 15])\n    'NO'\n    >>> exchange([1, 2, 3], [4, 5, 6, 16])\n\
    \    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6, 17])\n    'NO'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 6, 18])\n    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6, 19])\n\
    \    'NO'\n    >>> exchange([1, 2, 3], [4, 5, 6, 20])\n    'YES'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 6, 21])\n    'NO'\n    >>> exchange([1, 2, 3], [4, 5, 6, 22])\n\
    \    'YES'\n    >>> exchange([1, 2, 3], [4, 5, 6, 23])\n    'NO'\n    >>> exchange([1,\
    \ 2, 3], [4, 5, 6, 24])\n    'YES'\n    >>> exchange([1, 2, 3], [4\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprg7d06td.jl:1\nin expression starting at /tmp/tmprg7d06td.jl:1\n"
  stdout: ''
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # Your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7m__mc8t.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7m__mc8t.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7m__mc8t.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m__mc8t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m__mc8t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    \"\"\"\n    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12])\n    'YES'\n\
    \    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12,13])\n    'NO'\n    >>> exchange([1,2,3,4,5,6],\
    \ [7,8,9,10,11,12,13,14])\n    'YES'\n    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12,13,14,15])\n\
    \    'NO'\n    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12,13,14,15,16])\n   \
    \ 'YES'\n    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12,13,14,15,16,17])\n  \
    \  'NO'\n    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12,13,14,15,16,17,18])\n\
    \    'YES'\n    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    \    'NO'\n    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    \    'YES'\n    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    \    'NO'\n    >>> exchange([1,2,3,4,5,6], [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    \    'YES'\n    >>> exchange([1,2,3,4,5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit8ws623.jl:1\nin expression starting at /tmp/tmpit8ws623.jl:1\n"
  stdout: ''
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    \"\"\"\n    >>> exchange([1, 3, 5], [2, 4, 6])\n    'YES'\n    >>> exchange([1,\
    \ 3, 5], [2, 4, 6, 8])\n    'YES'\n    >>> exchange([1, 3, 5], [2, 4, 6, 8, 10])\n\
    \    'YES'\n    >>> exchange([1, 3, 5], [2, 4, 6, 7, 8, 10])\n    'NO'\n    >>>\
    \ exchange([1, 3, 5], [2, 4, 6, 7, 8, 10, 12])\n    'NO'\n    >>> exchange([1,\
    \ 3, 5], [2, 4, 6, 7, 8, 10, 12, 14])\n    'NO'\n    >>> exchange([1, 3, 5], [2,\
    \ 4, 6, 7, 8, 10, 12, 14, 16])\n    'NO'\n    >>> exchange([1, 3, 5], [2, 4, 6,\
    \ 7, 8, 10, 12, 14, 16, 18])\n    'NO'\n    >>> exchange([1, 3, 5], [2, 4, 6,\
    \ 7, 8, 10, 12, 14, 16, 18, 20])\n    'NO'\n    >>> exchange([1, 3, 5], [2, 4,\
    \ 6, 7, 8, 10, 12, 14, 16, 18, 20, 22])\n    'NO'\n    >>> exchange([1, 3, 5],\
    \ [2, 4, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24])\n    'NO'\n    >>> exchange([1,\
    \ 3, 5], [2, 4, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26])\n    'NO'\n    >>>\
    \ exchange([1, 3, 5], [2, 4, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])\n\
    \    'NO'\n    >>> exchange([1, 3, 5], [2, 4, 6, 7, 8, 10, 12, 14, 16, 18, 20,\
    \ 22, 24, 26, 28, 30])\n    'NO'\n    >>> exchange([\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w9kij7.jl:1\nin expression starting at /tmp/tmp61w9kij7.jl:1\n"
  stdout: ''
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk_22v2eb.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk_22v2eb.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk_22v2eb.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk_22v2eb.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] exchange(lst1::Vector{Int64}, lst2::Vector{Int64})\n\
    \     @ Main /tmp/tmpk_22v2eb.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk_22v2eb.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /sha"
  timestamp: 1659747557
- exit_code: 1
  program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n            It is assumed that the input lists will\
    \ be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    # your code here\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo_8o00po.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpo_8o00po.jl:20\n  Expression: candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:22\n  Expression: candidate([1, 2, 3, 4], [2,\
    \ 1, 4, 3]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:23\n  Expression: candidate([5, 7, 3], [2, 6,\
    \ 4]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo_8o00po.jl:26\n  Expression: candidate([100, 200], [200,\
    \ 200]) == \"YES\"\n   Evaluated: \"NO\" == \"YES\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo_8o00po.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo_8o00po.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659747555
