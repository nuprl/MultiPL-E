name: HumanEval_153_Strongest_Extension
language: jl
prompt: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
  \    The extensions are to be used to load additional classes to the class. The\n\
  \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n    You should find the strongest extension and return a string in this \n \
  \   format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
  \ with the same strength, you should\n    choose the one that comes first in the\
  \ list.\n    For example, if you are given \"Slices\" as the class and a list of\
  \ the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n    (its strength is -1).\n    Example:\n        \"\"\"\nfunction Strongest_Extension(class_name::String,\
  \ extensions::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
  )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
  , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
  YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"\
  Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"\
  ]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\"\
  )\nend\n"
completions: ["    # Your code here\n    return \"Slices.SErviNGSliCes\"\nend", " \
    \   # your code here\nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\n    return \"Slices.SErviNGSliCes\"\nend", "  \
    \  # your code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\nend", "    # your code here\nend", "    # your\
    \ code here\n    return \"ClassName.StrongestExtensionName\"\nend", "    # your\
    \ code goes here\n    return class_name * \".\" * extensions[1]\nend", "    #\
    \ Your code here\n    return \"ClassName.StrongestExtensionName\"\nend", "   \
    \ # Your code here\n    return \"ClassName.StrongestExtensionName\"\nend", " \
    \   #Your code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\nend", "    # Your code here\n    return \"\"\n\
    end", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\n\
    end", "    # Your code here\nend", "    # your code here\nend", "    # Your code\
    \ here\n    return \"ClassName.StrongestExtensionName\"\nend", "    strength =\
    \ 0\n    strongest_extension = \"\"\n    for extension in extensions\n       \
    \ cap = 0\n        sm = 0\n        for letter in extension\n            if letter\
    \ in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                cap += 1\n            elseif\
    \ letter in 'abcdefghijklmnopqrstuvwxyz'\n                sm += 1\n          \
    \  end\n        end\n        if cap - sm > strength\n            strength = cap\
    \ - sm\n            strongest_extension = extension\n        end\n    end\n  \
    \  return class_name * \".\" * strongest_extension\nend", "    # Your code here\n\
    end", "    # your code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\nend", "    # Your code here\n    return \"\"\n\
    end", "    # Your code here\nend", "    # Your code here\nend", "    # your code\
    \ here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\n    # You can use the function count_upper_lower(str)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string str.\n    # Example:\n    # count_upper_lower(\"Hello\")\n\
    \    # returns (2, 3)\n    # count_upper_lower(\"HELLO\")\n    # returns (5, 0)\n\
    \    # count_upper_lower(\"hello\")\n    # returns (0, 5)\n    # count_upper_lower(\"\
    hElLo\")\n    # returns (2, 3)\n    # count_upper_lower(\"\")\n    # returns (0,\
    \ 0)\n    # count_upper_lower(\"1\")\n    # returns (0, 0)\n    # count_upper_lower(\"\
    1a\")\n    # returns (0, 1)\n    # count_upper_lower(\"a1\")\n    # returns (0,\
    \ 1)\nend", "    # your code here\nend", "    # Your code here\nend", "    # your\
    \ code here\nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    strengths = [sum(isupper(extension)) - sum(islower(extension)) for\
    \ extension in extensions]\n    strongest_extension = extensions[argmax(strengths)]\n\
    \    return \"$class_name.$strongest_extension\"\nend", "    strength = 0\n  \
    \  strongest_extension = \"\"\n    for extension in extensions\n        cap =\
    \ 0\n        sm = 0\n        for letter in extension\n            if isupper(letter)\n\
    \                cap += 1\n            else\n                sm += 1\n       \
    \     end\n        end\n        if cap - sm > strength\n            strength =\
    \ cap - sm\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name * \".\" * strongest_extension\nend", "    # your code here\n\
    \    return \"ClassName.StrongestExtensionName\"\nend", "    # your code here\n\
    \    return \"Slices.SErviNGSliCes\"\nend", "    # your code here\nend", "   \
    \ # Your code here\n    # You can add more local functions as needed\nend", " \
    \   # Your code here\nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code goes here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\nend", "    # Your code here\n    return \"\"\n\
    end", "    # your code here\nend", "    # your code here\n    return \"Slices.SErviNGSliCes\"\
    \nend", "    # Your code here\n    # You can add more local functions as needed\n\
    end", "    # your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = 0\n        sm = 0\n \
    \       for letter in extension\n            if letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \                cap += 1\n            elseif letter in 'abcdefghijklmnopqrstuvwxyz'\n\
    \                sm += 1\n            end\n        end\n        if cap - sm >\
    \ strength\n            strength = cap - sm\n            strongest_extension =\
    \ extension\n        end\n    end\n    return \"$class_name.$strongest_extension\"\
    \nend", "    # Your code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    strengths = zeros(length(extensions))\n    for i in 1:length(extensions)\n\
    \        strengths[i] = sum(isupper.(extensions[i])) - sum(islower.(extensions[i]))\n\
    \    end\n    return class_name * \".\" * extensions[findmax(strengths)[2]]\n\
    end", "    # Your code here\nend", "    # Your code here\nend", "    # Your code\
    \ here\n    return \"Slices.SErviNGSliCes\"\nend", "    # your code here\n   \
    \ return \"ClassName.StrongestExtensionName\"\nend", "    # your code here\n \
    \   return \"ClassName.StrongestExtensionName\"\nend", "    # Your code here\n\
    end", "    # your code here\n    return \"Slices.SErviNGSliCes\"\nend", "    #\
    \ Your code here\n    return \"Slices.SErviNGSliCes\"\nend", "    # your code\
    \ here\n    return \"ClassName.StrongestExtensionName\"\nend", "    # your code\
    \ here\n    return \"ClassName.StrongestExtensionName\"\nend", "    # your code\
    \ here\n    return \"ClassName.StrongestExtensionName\"\nend", "    # Your code\
    \ here\n    return \"Slices.SErviNGSliCes\"\nend", "    # your code here\nend",
  "    # Your code here\nend", "    # your code here\n    return \"\"\nend", "   \
    \ # your code here\nend", "    # your code here\nend", "    # your code goes here\n\
    \    return \"ClassName.StrongestExtensionName\"\nend", "    # your code here\n\
    end", "    # your code goes here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\nend", "    # Your code here\n    return \"\"\n\
    end", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\n\
    end", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # Your code\
    \ here\n    return \"Slices.SErviNGSliCes\"\nend", "    # Your code here\n   \
    \ return \"ClassName.StrongestExtensionName\"\nend", "    # your code here\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for ext in extensions\n \
    \       ext_strength = count_upper(ext) - count_lower(ext)\n        if ext_strength\
    \ > strength\n            strength = ext_strength\n            strongest_extension\
    \ = ext\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\n\
    end", "    # your code here\nend", "    # your code here\n    return \"Slices.SErviNGSliCes\"\
    \nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code goes here\n    return \"\"\nend", "    # Your code here\n\
    end", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\n\
    end", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\n\
    end", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\n\
    end", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\n\
    end", "    # Your code here\nend", "    strength = zeros(length(extensions))\n\
    \    for i in 1:length(extensions)\n        strength[i] = sum(isupper.(extensions[i]))\
    \ - sum(islower.(extensions[i]))\n    end\n    return class_name * \".\" * extensions[findmax(strength)[2]]\n\
    end", "    # Your code here\nend", "    # Your code here\nend", "    # Your code\
    \ here\n    return \"Slices.SErviNGSliCes\"\nend", "    # your code here\nend",
  "    # your code here\n    return \"ClassName.StrongestExtensionName\"\nend", " \
    \   # Your code here\n    return \"ClassName.StrongestExtensionName\"\nend", " \
    \   strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # your code here\nend", "    # your\
    \ code here\n    return \"ClassName.StrongestExtensionName\"\nend", "    # Your\
    \ code here\n    return \"Slices.SErviNGSliCes\"\nend", "    # your code here\n\
    end", "    # your code here\n    return \"\"\nend", "    # your code here\nend",
  "    # your code here\nend", "    # your code here\n    return \"\"\nend", "   \
    \ # Your code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\n    return \"Slices.SErviNGSliCes\"\nend", "  \
    \  # your code here\nend", "    # your code here\nend", "    # Your code here\n\
    \    return \"ClassName.StrongestExtensionName\"\nend", "    # your code here\n\
    \    return \"ClassName.StrongestExtensionName\"\nend", "    # Your code here\n\
    \    return \"ClassName.StrongestExtensionName\"\nend", "    # Your code here\n\
    \    return \"Slices.SErviNGSliCes\"\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # your code here\n    return \"ClassName.StrongestExtensionName\"\nend", " \
    \   strengths = [sum(isupper(extension)) - sum(islower(extension)) for extension\
    \ in extensions]\n    strongest_extension = extensions[argmax(strengths)]\n  \
    \  return \"$class_name.$strongest_extension\"\nend", "    # your code here\n\
    \    return \"\"\nend", "    # Your code here\n    # You can add more local functions\
    \ as needed\n    return \"Slices.SErviNGSliCes\"\nend", "    # Your code here\n\
    \    return \"ClassName.StrongestExtensionName\"\nend", "    strength = 0\n  \
    \  strongest_extension = \"\"\n    for extension in extensions\n        cap =\
    \ sum(isupper.(extension))\n        sm = sum(islower.(extension))\n        if\
    \ cap - sm > strength\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # Your code here\nend", "    # Your code here\nend", "    # your code\
    \ here\n    return \"ClassName.StrongestExtensionName\"\nend", "    # Your code\
    \ here\n    return \"ClassName.StrongestExtensionName\"\nend", "    # Your code\
    \ here\n    return \"ClassName.StrongestExtensionName\"\nend", "    # Your code\
    \ here\nend", "    # Your code here\nend", "    # Your code here\n    # You can\
    \ add more local functions as needed\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\nend", "    # Your code here\n    return \"Slices.SErviNGSliCes\"\
    \nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        extension_strength = 0\n        for letter in extension\n\
    \            if isupper(letter)\n                extension_strength += 1\n   \
    \         elseif islower(letter)\n                extension_strength -= 1\n  \
    \          end\n        end\n        if extension_strength > strength\n      \
    \      strength = extension_strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # your code here\n    return \"ClassName.StrongestExtensionName\"\nend", " \
    \   # Your code here\nend", "    # your code goes here\n    return \"Slices.SErviNGSliCes\"\
    \nend", "    strength = zeros(length(extensions))\n    for i in 1:length(extensions)\n\
    \        strength[i] = sum(isupper.(extensions[i])) - sum(islower.(extensions[i]))\n\
    \    end\n    return class_name * \".\" * extensions[argmax(strength)]\nend",
  "    # Your code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # Your code here\n    return \"Slices.SErviNGSliCes\"\nend", "    # your code\
    \ here\nend", "    # your code here\n    return \"Slices.SErviNGSliCes\"\nend",
  "    # your code here\n    return \"ClassName.StrongestExtensionName\"\nend", " \
    \   # Your code here\nend", "    # your code here\nend", "    # Your code here\n\
    \    return class_name * \".\" * extensions[1]\nend", "    # Your code here\n\
    \    return \"ClassName.StrongestExtensionName\"\nend", "    # your code here\n\
    \    return class_name * \".\" * extensions[1]\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\nend", "    # Your code here\nend", "    # Your\
    \ code here\nend", "    # your code here\n    return \"\"\nend", "    # Your code\
    \ here\n    return \"Slices.SErviNGSliCes\"\nend", "    # your code here\n   \
    \ return \"ClassName.StrongestExtensionName\"\nend", "    # your code here\nend",
  "    # your code here\nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # Your code here\nend", "    # your code here\nend", "    # Your\
    \ code here\n    return \"ClassName.StrongestExtensionName\"\nend", "    # Your\
    \ code here\n    return \"\"\nend", "    # your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\n    return \"Slices.SErviNGSliCes\"\nend", "  \
    \  # Your code here\nend", "    # Your code here\n    return \"ClassName.StrongestExtensionName\"\
    \nend", "    # your code here\nend", "    # Your code here\nend", "    # Your\
    \ code here\n    return \"Slices.SErviNGSliCes\"\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
